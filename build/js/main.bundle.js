/*!
 * Exercises
 * 0.1.0:1402855511562 [development build]
 */
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/js/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	//
	// This file is automatically generated. any changes will be lost
	//
	
	__webpack_require__(2);
	__webpack_require__(3);
	__webpack_require__(4);
	__webpack_require__(5);
	__webpack_require__(6);
	__webpack_require__(7);
	
	
	(function() {
	/**
	Ember
	
	@module ember
	*/
	
	})();
	


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	//
	// This file is automatically generated. any changes will be lost
	//
	
	__webpack_require__(8);
	__webpack_require__(9);
	
	
	(function() {
	/*globals ENV */
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	var indexOf = Ember.EnumerableUtils.indexOf;
	
	// ........................................
	// TYPING & ARRAY MESSAGING
	//
	
	var TYPE_MAP = {};
	var t = "Boolean Number String Function Array Date RegExp Object".split(" ");
	Ember.ArrayPolyfills.forEach.call(t, function(name) {
	  TYPE_MAP[ "[object " + name + "]" ] = name.toLowerCase();
	});
	
	var toString = Object.prototype.toString;
	
	/**
	  Returns a consistent type for the passed item.
	
	  Use this instead of the built-in `typeof` to get the type of an item.
	  It will return the same result across all browsers and includes a bit
	  more detail.  Here is what will be returned:
	
	      | Return Value  | Meaning                                              |
	      |---------------|------------------------------------------------------|
	      | 'string'      | String primitive                                     |
	      | 'number'      | Number primitive                                     |
	      | 'boolean'     | Boolean primitive                                    |
	      | 'null'        | Null value                                           |
	      | 'undefined'   | Undefined value                                      |
	      | 'function'    | A function                                           |
	      | 'array'       | An instance of Array                                 |
	      | 'class'       | A Ember class (created using Ember.Object.extend())  |
	      | 'instance'    | A Ember object instance                              |
	      | 'error'       | An instance of the Error object                      |
	      | 'object'      | A JavaScript object not inheriting from Ember.Object |
	
	  Examples:
	
	      Ember.typeOf();                      => 'undefined'
	      Ember.typeOf(null);                  => 'null'
	      Ember.typeOf(undefined);             => 'undefined'
	      Ember.typeOf('michael');             => 'string'
	      Ember.typeOf(101);                   => 'number'
	      Ember.typeOf(true);                  => 'boolean'
	      Ember.typeOf(Ember.makeArray);       => 'function'
	      Ember.typeOf([1,2,90]);              => 'array'
	      Ember.typeOf(Ember.Object.extend()); => 'class'
	      Ember.typeOf(Ember.Object.create()); => 'instance'
	      Ember.typeOf(new Error('teamocil')); => 'error'
	
	      // "normal" JavaScript object
	      Ember.typeOf({a: 'b'});              => 'object'
	
	  @method typeOf
	  @for Ember
	  @param item {Object} the item to check
	  @return {String} the type
	*/
	Ember.typeOf = function(item) {
	  var ret;
	
	  ret = (item === null || item === undefined) ? String(item) : TYPE_MAP[toString.call(item)] || 'object';
	
	  if (ret === 'function') {
	    if (Ember.Object && Ember.Object.detect(item)) ret = 'class';
	  } else if (ret === 'object') {
	    if (item instanceof Error) ret = 'error';
	    else if (Ember.Object && item instanceof Ember.Object) ret = 'instance';
	    else ret = 'object';
	  }
	
	  return ret;
	};
	
	/**
	  Returns true if the passed value is null or undefined.  This avoids errors
	  from JSLint complaining about use of ==, which can be technically
	  confusing.
	
	      Ember.none();             => true
	      Ember.none(null);         => true
	      Ember.none(undefined);    => true
	      Ember.none('');           => false
	      Ember.none([]);           => false
	      Ember.none(function(){}); => false
	
	  @method none
	  @for Ember
	  @param {Object} obj Value to test
	  @return {Boolean}
	*/
	Ember.none = function(obj) {
	  return obj === null || obj === undefined;
	};
	
	/**
	  Verifies that a value is null or an empty string | array | function.
	
	  Constrains the rules on `Ember.none` by returning false for empty
	  string and empty arrays.
	
	      Ember.empty();               => true
	      Ember.empty(null);           => true
	      Ember.empty(undefined);      => true
	      Ember.empty('');             => true
	      Ember.empty([]);             => true
	      Ember.empty('tobias fÃ¼nke'); => false
	      Ember.empty([0,1,2]);        => false
	
	  @method empty
	  @for Ember
	  @param {Object} obj Value to test
	  @return {Boolean}
	*/
	Ember.empty = function(obj) {
	  return obj === null || obj === undefined || (obj.length === 0 && typeof obj !== 'function') || (typeof obj === 'object' && Ember.get(obj, 'length') === 0);
	};
	
	/**
	 This will compare two javascript values of possibly different types.
	 It will tell you which one is greater than the other by returning:
	
	  - -1 if the first is smaller than the second,
	  - 0 if both are equal,
	  - 1 if the first is greater than the second.
	
	 The order is calculated based on Ember.ORDER_DEFINITION, if types are different.
	 In case they have the same type an appropriate comparison for this type is made.
	
	    Ember.compare('hello', 'hello');  => 0
	    Ember.compare('abc', 'dfg');      => -1
	    Ember.compare(2, 1);              => 1
	
	 @method compare
	 @for Ember
	 @param {Object} v First value to compare
	 @param {Object} w Second value to compare
	 @return {Number} -1 if v < w, 0 if v = w and 1 if v > w.
	*/
	Ember.compare = function compare(v, w) {
	  if (v === w) { return 0; }
	
	  var type1 = Ember.typeOf(v);
	  var type2 = Ember.typeOf(w);
	
	  var Comparable = Ember.Comparable;
	  if (Comparable) {
	    if (type1==='instance' && Comparable.detect(v.constructor)) {
	      return v.constructor.compare(v, w);
	    }
	
	    if (type2 === 'instance' && Comparable.detect(w.constructor)) {
	      return 1-w.constructor.compare(w, v);
	    }
	  }
	
	  // If we haven't yet generated a reverse-mapping of Ember.ORDER_DEFINITION,
	  // do so now.
	  var mapping = Ember.ORDER_DEFINITION_MAPPING;
	  if (!mapping) {
	    var order = Ember.ORDER_DEFINITION;
	    mapping = Ember.ORDER_DEFINITION_MAPPING = {};
	    var idx, len;
	    for (idx = 0, len = order.length; idx < len;  ++idx) {
	      mapping[order[idx]] = idx;
	    }
	
	    // We no longer need Ember.ORDER_DEFINITION.
	    delete Ember.ORDER_DEFINITION;
	  }
	
	  var type1Index = mapping[type1];
	  var type2Index = mapping[type2];
	
	  if (type1Index < type2Index) { return -1; }
	  if (type1Index > type2Index) { return 1; }
	
	  // types are equal - so we have to check values now
	  switch (type1) {
	    case 'boolean':
	    case 'number':
	      if (v < w) { return -1; }
	      if (v > w) { return 1; }
	      return 0;
	
	    case 'string':
	      var comp = v.localeCompare(w);
	      if (comp < 0) { return -1; }
	      if (comp > 0) { return 1; }
	      return 0;
	
	    case 'array':
	      var vLen = v.length;
	      var wLen = w.length;
	      var l = Math.min(vLen, wLen);
	      var r = 0;
	      var i = 0;
	      while (r === 0 && i < l) {
	        r = compare(v[i],w[i]);
	        i++;
	      }
	      if (r !== 0) { return r; }
	
	      // all elements are equal now
	      // shorter array should be ordered first
	      if (vLen < wLen) { return -1; }
	      if (vLen > wLen) { return 1; }
	      // arrays are equal now
	      return 0;
	
	    case 'instance':
	      if (Ember.Comparable && Ember.Comparable.detect(v)) {
	        return v.compare(v, w);
	      }
	      return 0;
	
	    case 'date':
	      var vNum = v.getTime();
	      var wNum = w.getTime();
	      if (vNum < wNum) { return -1; }
	      if (vNum > wNum) { return 1; }
	      return 0;
	
	    default:
	      return 0;
	  }
	};
	
	function _copy(obj, deep, seen, copies) {
	  var ret, loc, key;
	
	  // primitive data types are immutable, just return them.
	  if ('object' !== typeof obj || obj===null) return obj;
	
	  // avoid cyclical loops
	  if (deep && (loc=indexOf(seen, obj))>=0) return copies[loc];
	
	  Ember.assert('Cannot clone an Ember.Object that does not implement Ember.Copyable', !(obj instanceof Ember.Object) || (Ember.Copyable && Ember.Copyable.detect(obj)));
	
	  // IMPORTANT: this specific test will detect a native array only.  Any other
	  // object will need to implement Copyable.
	  if (Ember.typeOf(obj) === 'array') {
	    ret = obj.slice();
	    if (deep) {
	      loc = ret.length;
	      while(--loc>=0) ret[loc] = _copy(ret[loc], deep, seen, copies);
	    }
	  } else if (Ember.Copyable && Ember.Copyable.detect(obj)) {
	    ret = obj.copy(deep, seen, copies);
	  } else {
	    ret = {};
	    for(key in obj) {
	      if (!obj.hasOwnProperty(key)) continue;
	      ret[key] = deep ? _copy(obj[key], deep, seen, copies) : obj[key];
	    }
	  }
	
	  if (deep) {
	    seen.push(obj);
	    copies.push(ret);
	  }
	
	  return ret;
	}
	
	/**
	  Creates a clone of the passed object. This function can take just about
	  any type of object and create a clone of it, including primitive values
	  (which are not actually cloned because they are immutable).
	
	  If the passed object implements the clone() method, then this function
	  will simply call that method and return the result.
	
	  @method copy
	  @for Ember
	  @param {Object} object The object to clone
	  @param {Boolean} deep If true, a deep copy of the object is made
	  @return {Object} The cloned object
	*/
	Ember.copy = function(obj, deep) {
	  // fast paths
	  if ('object' !== typeof obj || obj===null) return obj; // can't copy primitives
	  if (Ember.Copyable && Ember.Copyable.detect(obj)) return obj.copy(deep);
	  return _copy(obj, deep, deep ? [] : null, deep ? [] : null);
	};
	
	/**
	  Convenience method to inspect an object. This method will attempt to
	  convert the object into a useful string description.
	
	  @method inspect
	  @for Ember
	  @param {Object} obj The object you want to inspect.
	  @return {String} A description of the object
	*/
	Ember.inspect = function(obj) {
	  var v, ret = [];
	  for(var key in obj) {
	    if (obj.hasOwnProperty(key)) {
	      v = obj[key];
	      if (v === 'toString') { continue; } // ignore useless items
	      if (Ember.typeOf(v) === 'function') { v = "function() { ... }"; }
	      ret.push(key + ": " + v);
	    }
	  }
	  return "{" + ret.join(" , ") + "}";
	};
	
	/**
	  Compares two objects, returning true if they are logically equal.  This is
	  a deeper comparison than a simple triple equal. For sets it will compare the
	  internal objects.  For any other object that implements `isEqual()` it will 
	  respect that method.
	
	      Ember.isEqual('hello', 'hello');  => true
	      Ember.isEqual(1, 2);              => false
	      Ember.isEqual([4,2], [4,2]);      => false
	
	  @method isEqual
	  @for Ember
	  @param {Object} a first object to compare
	  @param {Object} b second object to compare
	  @return {Boolean}
	*/
	Ember.isEqual = function(a, b) {
	  if (a && 'function'===typeof a.isEqual) return a.isEqual(b);
	  return a === b;
	};
	
	// Used by Ember.compare
	Ember.ORDER_DEFINITION = Ember.ENV.ORDER_DEFINITION || [
	  'undefined',
	  'null',
	  'boolean',
	  'number',
	  'string',
	  'array',
	  'object',
	  'instance',
	  'function',
	  'class',
	  'date'
	];
	
	/**
	  Returns all of the keys defined on an object or hash. This is useful
	  when inspecting objects for debugging.  On browsers that support it, this
	  uses the native Object.keys implementation.
	
	  @method keys
	  @for Ember
	  @param {Object} obj
	  @return {Array} Array containing keys of obj
	*/
	Ember.keys = Object.keys;
	
	if (!Ember.keys) {
	  Ember.keys = function(obj) {
	    var ret = [];
	    for(var key in obj) {
	      if (obj.hasOwnProperty(key)) { ret.push(key); }
	    }
	    return ret;
	  };
	}
	
	// ..........................................................
	// ERROR
	//
	
	var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];
	
	/**
	  A subclass of the JavaScript Error object for use in Ember.
	
	  @class Error
	  @namespace Ember
	  @extends Error
	  @constructor
	*/
	Ember.Error = function() {
	  var tmp = Error.prototype.constructor.apply(this, arguments);
	
	  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
	  for (var idx = 0; idx < errorProps.length; idx++) {
	    this[errorProps[idx]] = tmp[errorProps[idx]];
	  }
	};
	
	Ember.Error.prototype = Ember.create(Error.prototype);
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	var STRING_DASHERIZE_REGEXP = (/[ _]/g);
	var STRING_DASHERIZE_CACHE = {};
	var STRING_DECAMELIZE_REGEXP = (/([a-z])([A-Z])/g);
	var STRING_CAMELIZE_REGEXP = (/(\-|_|\s)+(.)?/g);
	var STRING_UNDERSCORE_REGEXP_1 = (/([a-z\d])([A-Z]+)/g);
	var STRING_UNDERSCORE_REGEXP_2 = (/\-|\s+/g);
	
	/**
	  Defines the hash of localized strings for the current language.  Used by
	  the `Ember.String.loc()` helper.  To localize, add string values to this
	  hash.
	
	  @property STRINGS
	  @for Ember
	  @type Hash
	*/
	Ember.STRINGS = {};
	
	/**
	  Defines string helper methods including string formatting and localization.
	  Unless Ember.EXTEND_PROTOTYPES.String is false these methods will also be added
	  to the String.prototype as well.
	
	  @class String
	  @namespace Ember
	  @static
	*/
	Ember.String = {
	
	  /**
	    Apply formatting options to the string.  This will look for occurrences
	    of %@ in your string and substitute them with the arguments you pass into
	    this method.  If you want to control the specific order of replacement,
	    you can add a number after the key as well to indicate which argument
	    you want to insert.
	
	    Ordered insertions are most useful when building loc strings where values
	    you need to insert may appear in different orders.
	
	        "Hello %@ %@".fmt('John', 'Doe') => "Hello John Doe"
	        "Hello %@2, %@1".fmt('John', 'Doe') => "Hello Doe, John"
	
	    @method fmt
	    @param {Object...} [args]
	    @return {String} formatted string
	  */
	  fmt: function(str, formats) {
	    // first, replace any ORDERED replacements.
	    var idx  = 0; // the current index for non-numerical replacements
	    return str.replace(/%@([0-9]+)?/g, function(s, argIndex) {
	      argIndex = (argIndex) ? parseInt(argIndex,0) - 1 : idx++ ;
	      s = formats[argIndex];
	      return ((s === null) ? '(null)' : (s === undefined) ? '' : s).toString();
	    }) ;
	  },
	
	  /**
	    Formats the passed string, but first looks up the string in the localized
	    strings hash.  This is a convenient way to localize text.  See
	    `Ember.String.fmt()` for more information on formatting.
	
	    Note that it is traditional but not required to prefix localized string
	    keys with an underscore or other character so you can easily identify
	    localized strings.
	
	        Ember.STRINGS = {
	          '_Hello World': 'Bonjour le monde',
	          '_Hello %@ %@': 'Bonjour %@ %@'
	        };
	
	        Ember.String.loc("_Hello World");
	        => 'Bonjour le monde';
	
	        Ember.String.loc("_Hello %@ %@", ["John", "Smith"]);
	        => "Bonjour John Smith";
	
	    @method loc
	    @param {String} str The string to format
	    @param {Array} formats Optional array of parameters to interpolate into string.
	    @return {String} formatted string
	  */
	  loc: function(str, formats) {
	    str = Ember.STRINGS[str] || str;
	    return Ember.String.fmt(str, formats) ;
	  },
	
	  /**
	    Splits a string into separate units separated by spaces, eliminating any
	    empty strings in the process.  This is a convenience method for split that
	    is mostly useful when applied to the String.prototype.
	
	        Ember.String.w("alpha beta gamma").forEach(function(key) {
	          console.log(key);
	        });
	        > alpha
	        > beta
	        > gamma
	
	    @method w
	    @param {String} str The string to split
	    @return {String} split string
	  */
	  w: function(str) { return str.split(/\s+/); },
	
	  /**
	    Converts a camelized string into all lower case separated by underscores.
	
	        'innerHTML'.decamelize()         => 'inner_html'
	        'action_name'.decamelize()       => 'action_name'
	        'css-class-name'.decamelize()    => 'css-class-name'
	        'my favorite items'.decamelize() => 'my favorite items'
	
	    @method decamelize
	    @param {String} str The string to decamelize.
	    @return {String} the decamelized string.
	  */
	  decamelize: function(str) {
	    return str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase();
	  },
	
	  /**
	    Replaces underscores or spaces with dashes.
	
	        'innerHTML'.dasherize()         => 'inner-html'
	        'action_name'.dasherize()       => 'action-name'
	        'css-class-name'.dasherize()    => 'css-class-name'
	        'my favorite items'.dasherize() => 'my-favorite-items'
	
	    @method dasherize
	    @param {String} str The string to dasherize.
	    @return {String} the dasherized string.
	  */
	  dasherize: function(str) {
	    var cache = STRING_DASHERIZE_CACHE,
	        ret   = cache[str];
	
	    if (ret) {
	      return ret;
	    } else {
	      ret = Ember.String.decamelize(str).replace(STRING_DASHERIZE_REGEXP,'-');
	      cache[str] = ret;
	    }
	
	    return ret;
	  },
	
	  /**
	    Returns the lowerCaseCamel form of a string.
	
	        'innerHTML'.camelize()         => 'innerHTML'
	        'action_name'.camelize()       => 'actionName'
	        'css-class-name'.camelize()    => 'cssClassName'
	        'my favorite items'.camelize() => 'myFavoriteItems'
	
	    @method camelize
	    @param {String} str The string to camelize.
	    @return {String} the camelized string.
	  */
	  camelize: function(str) {
	    return str.replace(STRING_CAMELIZE_REGEXP, function(match, separator, chr) {
	      return chr ? chr.toUpperCase() : '';
	    });
	  },
	
	  /**
	    Returns the UpperCamelCase form of a string.
	
	        'innerHTML'.classify()         => 'InnerHTML'
	        'action_name'.classify()       => 'ActionName'
	        'css-class-name'.classify()    => 'CssClassName'
	        'my favorite items'.classify() => 'MyFavoriteItems'
	
	    @method classify
	    @param {String} str the string to classify
	    @return {String} the classified string
	  */
	  classify: function(str) {
	    var camelized = Ember.String.camelize(str);
	    return camelized.charAt(0).toUpperCase() + camelized.substr(1);
	  },
	
	  /**
	    More general than decamelize. Returns the lower_case_and_underscored
	    form of a string.
	
	        'innerHTML'.underscore()         => 'inner_html'
	        'action_name'.underscore()       => 'action_name'
	        'css-class-name'.underscore()    => 'css_class_name'
	        'my favorite items'.underscore() => 'my_favorite_items'
	
	    @property underscore
	    @param {String} str The string to underscore.
	    @return {String} the underscored string.
	  */
	  underscore: function(str) {
	    return str.replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2').
	      replace(STRING_UNDERSCORE_REGEXP_2, '_').toLowerCase();
	  }
	};
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	
	
	var fmt = Ember.String.fmt,
	    w   = Ember.String.w,
	    loc = Ember.String.loc,
	    camelize = Ember.String.camelize,
	    decamelize = Ember.String.decamelize,
	    dasherize = Ember.String.dasherize,
	    underscore = Ember.String.underscore,
	    classify = Ember.String.classify;
	
	if (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.String) {
	
	  /**
	    See {{#crossLink "Ember.String/fmt"}}{{/crossLink}}
	
	    @method fmt
	    @for String
	  */
	  String.prototype.fmt = function() {
	    return fmt(this, arguments);
	  };
	
	  /**
	    See {{#crossLink "Ember.String/w"}}{{/crossLink}}
	
	    @method w
	    @for String
	  */
	  String.prototype.w = function() {
	    return w(this);
	  };
	
	  /**
	    See {{#crossLink "Ember.String/loc"}}{{/crossLink}}
	
	    @method loc
	    @for String
	  */
	  String.prototype.loc = function() {
	    return loc(this, arguments);
	  };
	
	  /**
	    See {{#crossLink "Ember.String/camelize"}}{{/crossLink}}
	
	    @method camelize
	    @for String
	  */
	  String.prototype.camelize = function() {
	    return camelize(this);
	  };
	
	  /**
	    See {{#crossLink "Ember.String/decamelize"}}{{/crossLink}}
	
	    @method decamelize
	    @for String
	  */
	  String.prototype.decamelize = function() {
	    return decamelize(this);
	  };
	
	  /**
	    See {{#crossLink "Ember.String/dasherize"}}{{/crossLink}}
	
	    @method dasherize
	    @for String
	  */
	  String.prototype.dasherize = function() {
	    return dasherize(this);
	  };
	
	  /**
	    See {{#crossLink "Ember.String/underscore"}}{{/crossLink}}
	
	    @method underscore
	    @for String
	  */
	  String.prototype.underscore = function() {
	    return underscore(this);
	  };
	
	  /**
	    See {{#crossLink "Ember.String/classify"}}{{/crossLink}}
	
	    @method classify
	    @for String
	  */
	  String.prototype.classify = function() {
	    return classify(this);
	  };
	}
	
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	var a_slice = Array.prototype.slice;
	
	if (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.Function) {
	
	  /**
	    The `property` extension of Javascript's Function prototype is available
	    when Ember.EXTEND_PROTOTYPES or Ember.EXTEND_PROTOTYPES.Function is true,
	    which is the default.
	
	    Computed properties allow you to treat a function like a property:
	
	        MyApp.president = Ember.Object.create({
	          firstName: "Barack",
	          lastName: "Obama",
	
	          fullName: function() {
	            return this.get('firstName') + ' ' + this.get('lastName');
	
	            // Call this flag to mark the function as a property
	          }.property()
	        });
	
	        MyApp.president.get('fullName');    => "Barack Obama"
	
	    Treating a function like a property is useful because they can work with
	    bindings, just like any other property.
	
	    Many computed properties have dependencies on other properties. For
	    example, in the above example, the `fullName` property depends on
	    `firstName` and `lastName` to determine its value. You can tell Ember.js
	    about these dependencies like this:
	
	        MyApp.president = Ember.Object.create({
	          firstName: "Barack",
	          lastName: "Obama",
	
	          fullName: function() {
	            return this.get('firstName') + ' ' + this.get('lastName');
	
	            // Tell Ember.js that this computed property depends on firstName
	            // and lastName
	          }.property('firstName', 'lastName')
	        });
	
	    Make sure you list these dependencies so Ember.js knows when to update
	    bindings that connect to a computed property. Changing a dependency
	    will not immediately trigger an update of the computed property, but
	    will instead clear the cache so that it is updated when the next `get`
	    is called on the property.
	
	    See {{#crossLink "Ember.ComputedProperty"}}{{/crossLink}},
	      {{#crossLink "Ember/computed"}}{{/crossLink}}
	
	    @method property
	    @for Function
	  */
	  Function.prototype.property = function() {
	    var ret = Ember.computed(this);
	    return ret.property.apply(ret, arguments);
	  };
	
	  /**
	    The `observes` extension of Javascript's Function prototype is available
	    when Ember.EXTEND_PROTOTYPES or Ember.EXTEND_PROTOTYPES.Function is true,
	    which is the default.
	
	    You can observe property changes simply by adding the `observes`
	    call to the end of your method declarations in classes that you write.
	    For example:
	
	        Ember.Object.create({
	          valueObserver: function() {
	            // Executes whenever the "value" property changes
	          }.observes('value')
	        });
	
	    See {{#crossLink "Ember.Observable/observes"}}{{/crossLink}}
	
	    @method observes
	    @for Function
	  */
	  Function.prototype.observes = function() {
	    this.__ember_observes__ = a_slice.call(arguments);
	    return this;
	  };
	
	  /**
	    The `observesBefore` extension of Javascript's Function prototype is available
	    when Ember.EXTEND_PROTOTYPES or Ember.EXTEND_PROTOTYPES.Function is true,
	    which is the default.
	
	    You can get notified when a property changes is about to happen by
	    by adding the `observesBefore` call to the end of your method
	    declarations in classes that you write. For example:
	
	        Ember.Object.create({
	          valueObserver: function() {
	            // Executes whenever the "value" property is about to change
	          }.observesBefore('value')
	        });
	
	    See {{#crossLink "Ember.Observable/observesBefore"}}{{/crossLink}}
	
	    @method observesBefore
	    @for Function
	  */
	  Function.prototype.observesBefore = function() {
	    this.__ember_observesBefore__ = a_slice.call(arguments);
	    return this;
	  };
	
	}
	
	
	})();
	
	
	
	(function() {
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	// ..........................................................
	// HELPERS
	//
	
	var get = Ember.get, set = Ember.set;
	var a_slice = Array.prototype.slice;
	var a_indexOf = Ember.EnumerableUtils.indexOf;
	
	var contexts = [];
	
	function popCtx() {
	  return contexts.length===0 ? {} : contexts.pop();
	}
	
	function pushCtx(ctx) {
	  contexts.push(ctx);
	  return null;
	}
	
	function iter(key, value) {
	  var valueProvided = arguments.length === 2;
	
	  function i(item) {
	    var cur = get(item, key);
	    return valueProvided ? value===cur : !!cur;
	  }
	  return i ;
	}
	
	/**
	  This mixin defines the common interface implemented by enumerable objects
	  in Ember.  Most of these methods follow the standard Array iteration
	  API defined up to JavaScript 1.8 (excluding language-specific features that
	  cannot be emulated in older versions of JavaScript).
	
	  This mixin is applied automatically to the Array class on page load, so you
	  can use any of these methods on simple arrays.  If Array already implements
	  one of these methods, the mixin will not override them.
	
	  ## Writing Your Own Enumerable
	
	  To make your own custom class enumerable, you need two items:
	
	  1. You must have a length property.  This property should change whenever
	     the number of items in your enumerable object changes.  If you using this
	     with an Ember.Object subclass, you should be sure to change the length
	     property using set().
	
	  2. If you must implement nextObject().  See documentation.
	
	  Once you have these two methods implement, apply the Ember.Enumerable mixin
	  to your class and you will be able to enumerate the contents of your object
	  like any other collection.
	
	  ## Using Ember Enumeration with Other Libraries
	
	  Many other libraries provide some kind of iterator or enumeration like
	  facility.  This is often where the most common API conflicts occur.
	  Ember's API is designed to be as friendly as possible with other
	  libraries by implementing only methods that mostly correspond to the
	  JavaScript 1.8 API.
	
	  @class Enumerable
	  @namespace Ember
	  @extends Ember.Mixin
	  @since Ember 0.9
	*/
	Ember.Enumerable = Ember.Mixin.create(
	  /** @scope Ember.Enumerable.prototype */ {
	
	  // compatibility
	  isEnumerable: true,
	
	  /**
	    Implement this method to make your class enumerable.
	
	    This method will be call repeatedly during enumeration.  The index value
	    will always begin with 0 and increment monotonically.  You don't have to
	    rely on the index value to determine what object to return, but you should
	    always check the value and start from the beginning when you see the
	    requested index is 0.
	
	    The previousObject is the object that was returned from the last call
	    to nextObject for the current iteration.  This is a useful way to
	    manage iteration if you are tracing a linked list, for example.
	
	    Finally the context parameter will always contain a hash you can use as
	    a "scratchpad" to maintain any other state you need in order to iterate
	    properly.  The context object is reused and is not reset between
	    iterations so make sure you setup the context with a fresh state whenever
	    the index parameter is 0.
	
	    Generally iterators will continue to call nextObject until the index
	    reaches the your current length-1.  If you run out of data before this
	    time for some reason, you should simply return undefined.
	
	    The default implementation of this method simply looks up the index.
	    This works great on any Array-like objects.
	
	    @method nextObject
	    @param {Number} index the current index of the iteration
	    @param {Object} previousObject the value returned by the last call to nextObject.
	    @param {Object} context a context object you can use to maintain state.
	    @return {Object} the next object in the iteration or undefined
	  */
	  nextObject: Ember.required(Function),
	
	  /**
	    Helper method returns the first object from a collection.  This is usually
	    used by bindings and other parts of the framework to extract a single
	    object if the enumerable contains only one item.
	
	    If you override this method, you should implement it so that it will
	    always return the same value each time it is called.  If your enumerable
	    contains only one object, this method should always return that object.
	    If your enumerable is empty, this method should return undefined.
	
	        var arr = ["a", "b", "c"];
	        arr.firstObject(); => "a"
	
	        var arr = [];
	        arr.firstObject(); => undefined
	
	    @property firstObject
	    @return {Object} the object or undefined
	  */
	  firstObject: Ember.computed(function() {
	    if (get(this, 'length')===0) return undefined ;
	
	    // handle generic enumerables
	    var context = popCtx(), ret;
	    ret = this.nextObject(0, null, context);
	    pushCtx(context);
	    return ret ;
	  }).property('[]'),
	
	  /**
	    Helper method returns the last object from a collection. If your enumerable
	    contains only one object, this method should always return that object.
	    If your enumerable is empty, this method should return undefined.
	
	        var arr = ["a", "b", "c"];
	        arr.lastObject(); => "c"
	
	        var arr = [];
	        arr.lastObject(); => undefined
	
	    @property lastObject
	    @return {Object} the last object or undefined
	  */
	  lastObject: Ember.computed(function() {
	    var len = get(this, 'length');
	    if (len===0) return undefined ;
	    var context = popCtx(), idx=0, cur, last = null;
	    do {
	      last = cur;
	      cur = this.nextObject(idx++, last, context);
	    } while (cur !== undefined);
	    pushCtx(context);
	    return last;
	  }).property('[]'),
	
	  /**
	    Returns true if the passed object can be found in the receiver.  The
	    default version will iterate through the enumerable until the object
	    is found.  You may want to override this with a more efficient version.
	
	        var arr = ["a", "b", "c"];
	        arr.contains("a"); => true
	        arr.contains("z"); => false
	
	    @method contains
	    @param {Object} obj The object to search for.
	    @return {Boolean} true if object is found in enumerable.
	  */
	  contains: function(obj) {
	    return this.find(function(item) { return item===obj; }) !== undefined;
	  },
	
	  /**
	    Iterates through the enumerable, calling the passed function on each
	    item. This method corresponds to the forEach() method defined in
	    JavaScript 1.6.
	
	    The callback method you provide should have the following signature (all
	    parameters are optional):
	
	          function(item, index, enumerable);
	
	    - *item* is the current item in the iteration.
	    - *index* is the current index in the iteration
	    - *enumerable* is the enumerable object itself.
	
	    Note that in addition to a callback, you can also pass an optional target
	    object that will be set as "this" on the context. This is a good way
	    to give your iterator function access to the current object.
	
	    @method forEach
	    @param {Function} callback The callback to execute
	    @param {Object} [target] The target object to use
	    @return {Object} receiver
	  */
	  forEach: function(callback, target) {
	    if (typeof callback !== "function") throw new TypeError() ;
	    var len = get(this, 'length'), last = null, context = popCtx();
	
	    if (target === undefined) target = null;
	
	    for(var idx=0;idx<len;idx++) {
	      var next = this.nextObject(idx, last, context) ;
	      callback.call(target, next, idx, this);
	      last = next ;
	    }
	    last = null ;
	    context = pushCtx(context);
	    return this ;
	  },
	
	  /**
	    Alias for mapProperty
	
	    @method getEach
	    @param {String} key name of the property
	    @return {Array} The mapped array.
	  */
	  getEach: function(key) {
	    return this.mapProperty(key);
	  },
	
	  /**
	    Sets the value on the named property for each member. This is more
	    efficient than using other methods defined on this helper. If the object
	    implements Ember.Observable, the value will be changed to set(), otherwise
	    it will be set directly. null objects are skipped.
	
	    @method setEach
	    @param {String} key The key to set
	    @param {Object} value The object to set
	    @return {Object} receiver
	  */
	  setEach: function(key, value) {
	    return this.forEach(function(item) {
	      set(item, key, value);
	    });
	  },
	
	  /**
	    Maps all of the items in the enumeration to another value, returning
	    a new array. This method corresponds to map() defined in JavaScript 1.6.
	
	    The callback method you provide should have the following signature (all
	    parameters are optional):
	
	        function(item, index, enumerable);
	
	    - *item* is the current item in the iteration.
	    - *index* is the current index in the iteration
	    - *enumerable* is the enumerable object itself.
	
	    It should return the mapped value.
	
	    Note that in addition to a callback, you can also pass an optional target
	    object that will be set as "this" on the context. This is a good way
	    to give your iterator function access to the current object.
	
	    @method map
	    @param {Function} callback The callback to execute
	    @param {Object} [target] The target object to use
	    @return {Array} The mapped array.
	  */
	  map: function(callback, target) {
	    var ret = [];
	    this.forEach(function(x, idx, i) {
	      ret[idx] = callback.call(target, x, idx,i);
	    });
	    return ret ;
	  },
	
	  /**
	    Similar to map, this specialized function returns the value of the named
	    property on all items in the enumeration.
	
	    @method mapProperty
	    @param {String} key name of the property
	    @return {Array} The mapped array.
	  */
	  mapProperty: function(key) {
	    return this.map(function(next) {
	      return get(next, key);
	    });
	  },
	
	  /**
	    Returns an array with all of the items in the enumeration that the passed
	    function returns true for. This method corresponds to filter() defined in
	    JavaScript 1.6.
	
	    The callback method you provide should have the following signature (all
	    parameters are optional):
	
	          function(item, index, enumerable);
	
	    - *item* is the current item in the iteration.
	    - *index* is the current index in the iteration
	    - *enumerable* is the enumerable object itself.
	
	    It should return the true to include the item in the results, false otherwise.
	
	    Note that in addition to a callback, you can also pass an optional target
	    object that will be set as "this" on the context. This is a good way
	    to give your iterator function access to the current object.
	
	    @method filter
	    @param {Function} callback The callback to execute
	    @param {Object} [target] The target object to use
	    @return {Array} A filtered array.
	  */
	  filter: function(callback, target) {
	    var ret = [];
	    this.forEach(function(x, idx, i) {
	      if (callback.call(target, x, idx, i)) ret.push(x);
	    });
	    return ret ;
	  },
	
	  /**
	    Returns an array with just the items with the matched property.  You
	    can pass an optional second argument with the target value.  Otherwise
	    this will match any property that evaluates to true.
	
	    @method filterProperty
	    @param {String} key the property to test
	    @param {String} [value] optional value to test against.
	    @return {Array} filtered array
	  */
	  filterProperty: function(key, value) {
	    return this.filter(iter.apply(this, arguments));
	  },
	
	  /**
	    Returns the first item in the array for which the callback returns true.
	    This method works similar to the filter() method defined in JavaScript 1.6
	    except that it will stop working on the array once a match is found.
	
	    The callback method you provide should have the following signature (all
	    parameters are optional):
	
	          function(item, index, enumerable);
	
	    - *item* is the current item in the iteration.
	    - *index* is the current index in the iteration
	    - *enumerable* is the enumerable object itself.
	
	    It should return the true to include the item in the results, false otherwise.
	
	    Note that in addition to a callback, you can also pass an optional target
	    object that will be set as "this" on the context. This is a good way
	    to give your iterator function access to the current object.
	
	    @method find
	    @param {Function} callback The callback to execute
	    @param {Object} [target] The target object to use
	    @return {Object} Found item or null.
	  */
	  find: function(callback, target) {
	    var len = get(this, 'length') ;
	    if (target === undefined) target = null;
	
	    var last = null, next, found = false, ret ;
	    var context = popCtx();
	    for(var idx=0;idx<len && !found;idx++) {
	      next = this.nextObject(idx, last, context) ;
	      if (found = callback.call(target, next, idx, this)) ret = next ;
	      last = next ;
	    }
	    next = last = null ;
	    context = pushCtx(context);
	    return ret ;
	  },
	
	  /**
	    Returns the first item with a property matching the passed value.  You
	    can pass an optional second argument with the target value.  Otherwise
	    this will match any property that evaluates to true.
	
	    This method works much like the more generic find() method.
	
	    @method findProperty
	    @param {String} key the property to test
	    @param {String} [value] optional value to test against.
	    @return {Object} found item or null
	  */
	  findProperty: function(key, value) {
	    return this.find(iter.apply(this, arguments));
	  },
	
	  /**
	    Returns true if the passed function returns true for every item in the
	    enumeration. This corresponds with the every() method in JavaScript 1.6.
	
	    The callback method you provide should have the following signature (all
	    parameters are optional):
	
	          function(item, index, enumerable);
	
	    - *item* is the current item in the iteration.
	    - *index* is the current index in the iteration
	    - *enumerable* is the enumerable object itself.
	
	    It should return the true or false.
	
	    Note that in addition to a callback, you can also pass an optional target
	    object that will be set as "this" on the context. This is a good way
	    to give your iterator function access to the current object.
	
	    Example Usage:
	
	          if (people.every(isEngineer)) { Paychecks.addBigBonus(); }
	
	    @method every
	    @param {Function} callback The callback to execute
	    @param {Object} [target] The target object to use
	    @return {Boolean}
	  */
	  every: function(callback, target) {
	    return !this.find(function(x, idx, i) {
	      return !callback.call(target, x, idx, i);
	    });
	  },
	
	  /**
	    Returns true if the passed property resolves to true for all items in the
	    enumerable.  This method is often simpler/faster than using a callback.
	
	    @method everyProperty
	    @param {String} key the property to test
	    @param {String} [value] optional value to test against.
	    @return {Array} filtered array
	  */
	  everyProperty: function(key, value) {
	    return this.every(iter.apply(this, arguments));
	  },
	
	
	  /**
	    Returns true if the passed function returns true for any item in the
	    enumeration. This corresponds with the every() method in JavaScript 1.6.
	
	    The callback method you provide should have the following signature (all
	    parameters are optional):
	
	          function(item, index, enumerable);
	
	    - *item* is the current item in the iteration.
	    - *index* is the current index in the iteration
	    - *enumerable* is the enumerable object itself.
	
	    It should return the true to include the item in the results, false otherwise.
	
	    Note that in addition to a callback, you can also pass an optional target
	    object that will be set as "this" on the context. This is a good way
	    to give your iterator function access to the current object.
	
	    Usage Example:
	
	          if (people.some(isManager)) { Paychecks.addBiggerBonus(); }
	
	    @method some
	    @param {Function} callback The callback to execute
	    @param {Object} [target] The target object to use
	    @return {Array} A filtered array.
	  */
	  some: function(callback, target) {
	    return !!this.find(function(x, idx, i) {
	      return !!callback.call(target, x, idx, i);
	    });
	  },
	
	  /**
	    Returns true if the passed property resolves to true for any item in the
	    enumerable.  This method is often simpler/faster than using a callback.
	
	    @method someProperty
	    @param {String} key the property to test
	    @param {String} [value] optional value to test against.
	    @return {Boolean} true
	  */
	  someProperty: function(key, value) {
	    return this.some(iter.apply(this, arguments));
	  },
	
	  /**
	    This will combine the values of the enumerator into a single value. It
	    is a useful way to collect a summary value from an enumeration. This
	    corresponds to the reduce() method defined in JavaScript 1.8.
	
	    The callback method you provide should have the following signature (all
	    parameters are optional):
	
	          function(previousValue, item, index, enumerable);
	
	    - *previousValue* is the value returned by the last call to the iterator.
	    - *item* is the current item in the iteration.
	    - *index* is the current index in the iteration
	    - *enumerable* is the enumerable object itself.
	
	    Return the new cumulative value.
	
	    In addition to the callback you can also pass an initialValue. An error
	    will be raised if you do not pass an initial value and the enumerator is
	    empty.
	
	    Note that unlike the other methods, this method does not allow you to
	    pass a target object to set as this for the callback. It's part of the
	    spec. Sorry.
	
	    @method reduce
	    @param {Function} callback The callback to execute
	    @param {Object} initialValue Initial value for the reduce
	    @param {String} reducerProperty internal use only.
	    @return {Object} The reduced value.
	  */
	  reduce: function(callback, initialValue, reducerProperty) {
	    if (typeof callback !== "function") { throw new TypeError(); }
	
	    var ret = initialValue;
	
	    this.forEach(function(item, i) {
	      ret = callback.call(null, ret, item, i, this, reducerProperty);
	    }, this);
	
	    return ret;
	  },
	
	  /**
	    Invokes the named method on every object in the receiver that
	    implements it.  This method corresponds to the implementation in
	    Prototype 1.6.
	
	    @method invoke
	    @param {String} methodName the name of the method
	    @param {Object...} args optional arguments to pass as well.
	    @return {Array} return values from calling invoke.
	  */
	  invoke: function(methodName) {
	    var args, ret = [];
	    if (arguments.length>1) args = a_slice.call(arguments, 1);
	
	    this.forEach(function(x, idx) {
	      var method = x && x[methodName];
	      if ('function' === typeof method) {
	        ret[idx] = args ? method.apply(x, args) : method.call(x);
	      }
	    }, this);
	
	    return ret;
	  },
	
	  /**
	    Simply converts the enumerable into a genuine array.  The order is not
	    guaranteed.  Corresponds to the method implemented by Prototype.
	
	    @method toArray
	    @return {Array} the enumerable as an array.
	  */
	  toArray: function() {
	    var ret = [];
	    this.forEach(function(o, idx) { ret[idx] = o; });
	    return ret ;
	  },
	
	  /**
	    Returns a copy of the array with all null elements removed.
	
	        var arr = ["a", null, "c", null];
	        arr.compact(); => ["a", "c"]
	
	    @method compact
	    @return {Array} the array without null elements.
	  */
	  compact: function() { return this.without(null); },
	
	  /**
	    Returns a new enumerable that excludes the passed value.  The default
	    implementation returns an array regardless of the receiver type unless
	    the receiver does not contain the value.
	
	        var arr = ["a", "b", "a", "c"];
	        arr.without("a"); => ["b", "c"]
	
	    @method without
	    @param {Object} value
	    @return {Ember.Enumerable}
	  */
	  without: function(value) {
	    if (!this.contains(value)) return this; // nothing to do
	    var ret = [] ;
	    this.forEach(function(k) {
	      if (k !== value) ret[ret.length] = k;
	    }) ;
	    return ret ;
	  },
	
	  /**
	    Returns a new enumerable that contains only unique values.  The default
	    implementation returns an array regardless of the receiver type.
	
	        var arr = ["a", "a", "b", "b"];
	        arr.uniq(); => ["a", "b"]
	
	    @method uniq
	    @return {Ember.Enumerable}
	  */
	  uniq: function() {
	    var ret = [];
	    this.forEach(function(k){
	      if (a_indexOf(ret, k)<0) ret.push(k);
	    });
	    return ret;
	  },
	
	  /**
	    This property will trigger anytime the enumerable's content changes.
	    You can observe this property to be notified of changes to the enumerables
	    content.
	
	    For plain enumerables, this property is read only.  Ember.Array overrides
	    this method.
	
	    @property []
	    @type Ember.Array
	  */
	  '[]': Ember.computed(function(key, value) {
	    return this;
	  }).property(),
	
	  // ..........................................................
	  // ENUMERABLE OBSERVERS
	  //
	
	  /**
	    Registers an enumerable observer.   Must implement Ember.EnumerableObserver
	    mixin.
	
	    @method addEnumerableObserver
	    @param target {Object}
	    @param opts {Hash}
	  */
	  addEnumerableObserver: function(target, opts) {
	    var willChange = (opts && opts.willChange) || 'enumerableWillChange',
	        didChange  = (opts && opts.didChange) || 'enumerableDidChange';
	
	    var hasObservers = get(this, 'hasEnumerableObservers');
	    if (!hasObservers) Ember.propertyWillChange(this, 'hasEnumerableObservers');
	    Ember.addListener(this, '@enumerable:before', target, willChange);
	    Ember.addListener(this, '@enumerable:change', target, didChange);
	    if (!hasObservers) Ember.propertyDidChange(this, 'hasEnumerableObservers');
	    return this;
	  },
	
	  /**
	    Removes a registered enumerable observer.
	
	    @method removeEnumerableObserver
	    @param target {Object}
	    @param [opts] {Hash}
	  */
	  removeEnumerableObserver: function(target, opts) {
	    var willChange = (opts && opts.willChange) || 'enumerableWillChange',
	        didChange  = (opts && opts.didChange) || 'enumerableDidChange';
	
	    var hasObservers = get(this, 'hasEnumerableObservers');
	    if (hasObservers) Ember.propertyWillChange(this, 'hasEnumerableObservers');
	    Ember.removeListener(this, '@enumerable:before', target, willChange);
	    Ember.removeListener(this, '@enumerable:change', target, didChange);
	    if (hasObservers) Ember.propertyDidChange(this, 'hasEnumerableObservers');
	    return this;
	  },
	
	  /**
	    Becomes true whenever the array currently has observers watching changes
	    on the array.
	
	    @property hasEnumerableObservers
	    @type Boolean
	  */
	  hasEnumerableObservers: Ember.computed(function() {
	    return Ember.hasListeners(this, '@enumerable:change') || Ember.hasListeners(this, '@enumerable:before');
	  }).property(),
	
	
	  /**
	    Invoke this method just before the contents of your enumerable will
	    change.  You can either omit the parameters completely or pass the objects
	    to be removed or added if available or just a count.
	
	    @method enumerableContentWillChange
	    @param {Ember.Enumerable|Number} removing An enumerable of the objects to
	      be removed or the number of items to be removed.
	    @param {Ember.Enumerable|Number} adding An enumerable of the objects to be
	      added or the number of items to be added.
	    @chainable
	  */
	  enumerableContentWillChange: function(removing, adding) {
	
	    var removeCnt, addCnt, hasDelta;
	
	    if ('number' === typeof removing) removeCnt = removing;
	    else if (removing) removeCnt = get(removing, 'length');
	    else removeCnt = removing = -1;
	
	    if ('number' === typeof adding) addCnt = adding;
	    else if (adding) addCnt = get(adding,'length');
	    else addCnt = adding = -1;
	
	    hasDelta = addCnt<0 || removeCnt<0 || addCnt-removeCnt!==0;
	
	    if (removing === -1) removing = null;
	    if (adding   === -1) adding   = null;
	
	    Ember.propertyWillChange(this, '[]');
	    if (hasDelta) Ember.propertyWillChange(this, 'length');
	    Ember.sendEvent(this, '@enumerable:before', [this, removing, adding]);
	
	    return this;
	  },
	
	  /**
	    Invoke this method when the contents of your enumerable has changed.
	    This will notify any observers watching for content changes.  If your are
	    implementing an ordered enumerable (such as an array), also pass the
	    start and end values where the content changed so that it can be used to
	    notify range observers.
	
	    @method enumerableContentDidChange
	    @param {Number} [start] optional start offset for the content change.
	      For unordered enumerables, you should always pass -1.
	    @param {Ember.Enumerable|Number} removing An enumerable of the objects to
	      be removed or the number of items to be removed.
	    @param {Ember.Enumerable|Number} adding  An enumerable of the objects to
	      be added or the number of items to be added.
	    @chainable
	  */
	  enumerableContentDidChange: function(removing, adding) {
	    var notify = this.propertyDidChange, removeCnt, addCnt, hasDelta;
	
	    if ('number' === typeof removing) removeCnt = removing;
	    else if (removing) removeCnt = get(removing, 'length');
	    else removeCnt = removing = -1;
	
	    if ('number' === typeof adding) addCnt = adding;
	    else if (adding) addCnt = get(adding, 'length');
	    else addCnt = adding = -1;
	
	    hasDelta = addCnt<0 || removeCnt<0 || addCnt-removeCnt!==0;
	
	    if (removing === -1) removing = null;
	    if (adding   === -1) adding   = null;
	
	    Ember.sendEvent(this, '@enumerable:change', [this, removing, adding]);
	    if (hasDelta) Ember.propertyDidChange(this, 'length');
	    Ember.propertyDidChange(this, '[]');
	
	    return this ;
	  }
	
	}) ;
	
	
	
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	// ..........................................................
	// HELPERS
	//
	
	var get = Ember.get, set = Ember.set, meta = Ember.meta, map = Ember.EnumerableUtils.map, cacheFor = Ember.cacheFor;
	
	function none(obj) { return obj===null || obj===undefined; }
	
	// ..........................................................
	// ARRAY
	//
	/**
	  This module implements Observer-friendly Array-like behavior.  This mixin is
	  picked up by the Array class as well as other controllers, etc. that want to
	  appear to be arrays.
	
	  Unlike Ember.Enumerable, this mixin defines methods specifically for
	  collections that provide index-ordered access to their contents.  When you
	  are designing code that needs to accept any kind of Array-like object, you
	  should use these methods instead of Array primitives because these will
	  properly notify observers of changes to the array.
	
	  Although these methods are efficient, they do add a layer of indirection to
	  your application so it is a good idea to use them only when you need the
	  flexibility of using both true JavaScript arrays and "virtual" arrays such
	  as controllers and collections.
	
	  You can use the methods defined in this module to access and modify array
	  contents in a KVO-friendly way.  You can also be notified whenever the
	  membership if an array changes by changing the syntax of the property to
	  .observes('*myProperty.[]') .
	
	  To support Ember.Array in your own class, you must override two
	  primitives to use it: replace() and objectAt().
	
	  Note that the Ember.Array mixin also incorporates the Ember.Enumerable mixin.  All
	  Ember.Array-like objects are also enumerable.
	
	  @class Array
	  @namespace Ember
	  @extends Ember.Mixin
	  @uses Ember.Enumerable
	  @since Ember 0.9.0
	*/
	Ember.Array = Ember.Mixin.create(Ember.Enumerable, /** @scope Ember.Array.prototype */ {
	
	  // compatibility
	  isSCArray: true,
	
	  /**
	    Your array must support the length property. Your replace methods should
	    set this property whenever it changes.
	
	    @property {Number} length
	  */
	  length: Ember.required(),
	
	  /**
	    Returns the object at the given index. If the given index is negative or
	    is greater or equal than the array length, returns `undefined`.
	
	    This is one of the primitives you must implement to support `Ember.Array`.
	    If your object supports retrieving the value of an array item using `get()`
	    (i.e. `myArray.get(0)`), then you do not need to implement this method
	    yourself.
	
	        var arr = ['a', 'b', 'c', 'd'];
	        arr.objectAt(0);  => "a"
	        arr.objectAt(3);  => "d"
	        arr.objectAt(-1); => undefined
	        arr.objectAt(4);  => undefined
	        arr.objectAt(5);  => undefined
	
	    @method objectAt
	    @param {Number} idx
	      The index of the item to return.
	  */
	  objectAt: function(idx) {
	    if ((idx < 0) || (idx>=get(this, 'length'))) return undefined ;
	    return get(this, idx);
	  },
	
	  /**
	    This returns the objects at the specified indexes, using `objectAt`.
	
	        var arr =Â ['a', 'b', 'c', 'd'];
	        arr.objectsAt([0, 1, 2]) => ["a", "b", "c"]
	        arr.objectsAt([2, 3, 4]) => ["c", "d", undefined]
	
	    @method objectsAt
	    @param {Array} indexes
	      An array of indexes of items to return.
	   */
	  objectsAt: function(indexes) {
	    var self = this;
	    return map(indexes, function(idx){ return self.objectAt(idx); });
	  },
	
	  // overrides Ember.Enumerable version
	  nextObject: function(idx) {
	    return this.objectAt(idx);
	  },
	
	  /**
	    This is the handler for the special array content property.  If you get
	    this property, it will return this.  If you set this property it a new
	    array, it will replace the current content.
	
	    This property overrides the default property defined in Ember.Enumerable.
	
	    @property []
	  */
	  '[]': Ember.computed(function(key, value) {
	    if (value !== undefined) this.replace(0, get(this, 'length'), value) ;
	    return this ;
	  }).property(),
	
	  firstObject: Ember.computed(function() {
	    return this.objectAt(0);
	  }).property(),
	
	  lastObject: Ember.computed(function() {
	    return this.objectAt(get(this, 'length')-1);
	  }).property(),
	
	  // optimized version from Enumerable
	  contains: function(obj){
	    return this.indexOf(obj) >= 0;
	  },
	
	  // Add any extra methods to Ember.Array that are native to the built-in Array.
	  /**
	    Returns a new array that is a slice of the receiver. This implementation
	    uses the observable array methods to retrieve the objects for the new
	    slice.
	
	        var arr = ['red', 'green', 'blue'];
	        arr.slice(0);      => ['red', 'green', 'blue']
	        arr.slice(0, 2);   => ['red', 'green']
	        arr.slice(1, 100); => ['green', 'blue']
	
	    @method slice
	    @param beginIndex {Integer} (Optional) index to begin slicing from.
	    @param endIndex {Integer} (Optional) index to end the slice at.
	    @return {Array} New array with specified slice
	  */
	  slice: function(beginIndex, endIndex) {
	    var ret = [];
	    var length = get(this, 'length') ;
	    if (none(beginIndex)) beginIndex = 0 ;
	    if (none(endIndex) || (endIndex > length)) endIndex = length ;
	    while(beginIndex < endIndex) {
	      ret[ret.length] = this.objectAt(beginIndex++) ;
	    }
	    return ret ;
	  },
	
	  /**
	    Returns the index of the given object's first occurrence.
	    If no startAt argument is given, the starting location to
	    search is 0. If it's negative, will count backward from
	    the end of the array. Returns -1 if no match is found.
	
	        var arr = ["a", "b", "c", "d", "a"];
	        arr.indexOf("a");      =>  0
	        arr.indexOf("z");      => -1
	        arr.indexOf("a", 2);   =>  4
	        arr.indexOf("a", -1);  =>  4
	        arr.indexOf("b", 3);   => -1
	        arr.indexOf("a", 100); => -1
	
	    @method indexOf
	    @param {Object} object the item to search for
	    @param {Number} startAt optional starting location to search, default 0
	    @return {Number} index or -1 if not found
	  */
	  indexOf: function(object, startAt) {
	    var idx, len = get(this, 'length');
	
	    if (startAt === undefined) startAt = 0;
	    if (startAt < 0) startAt += len;
	
	    for(idx=startAt;idx<len;idx++) {
	      if (this.objectAt(idx, true) === object) return idx ;
	    }
	    return -1;
	  },
	
	  /**
	    Returns the index of the given object's last occurrence.
	    If no startAt argument is given, the search starts from
	    the last position. If it's negative, will count backward
	    from the end of the array. Returns -1 if no match is found.
	
	        var arr = ["a", "b", "c", "d", "a"];
	        arr.lastIndexOf("a");      =>  4
	        arr.lastIndexOf("z");      => -1
	        arr.lastIndexOf("a", 2);   =>  0
	        arr.lastIndexOf("a", -1);  =>  4
	        arr.lastIndexOf("b", 3);   =>  1
	        arr.lastIndexOf("a", 100); =>  4
	
	    @method lastIndexOf
	    @param {Object} object the item to search for
	    @param {Number} startAt optional starting location to search, default 0
	    @return {Number} index or -1 if not found
	  */
	  lastIndexOf: function(object, startAt) {
	    var idx, len = get(this, 'length');
	
	    if (startAt === undefined || startAt >= len) startAt = len-1;
	    if (startAt < 0) startAt += len;
	
	    for(idx=startAt;idx>=0;idx--) {
	      if (this.objectAt(idx) === object) return idx ;
	    }
	    return -1;
	  },
	
	  // ..........................................................
	  // ARRAY OBSERVERS
	  //
	
	  /**
	    Adds an array observer to the receiving array.  The array observer object
	    normally must implement two methods:
	
	    * `arrayWillChange(start, removeCount, addCount)` - This method will be
	      called just before the array is modified.
	    * `arrayDidChange(start, removeCount, addCount)` - This method will be
	      called just after the array is modified.
	
	    Both callbacks will be passed the starting index of the change as well a
	    a count of the items to be removed and added.  You can use these callbacks
	    to optionally inspect the array during the change, clear caches, or do
	    any other bookkeeping necessary.
	
	    In addition to passing a target, you can also include an options hash
	    which you can use to override the method names that will be invoked on the
	    target.
	
	    @method addArrayObserver
	    @param {Object} target The observer object.
	    @param {Hash} opts Optional hash of configuration options including
	      willChange, didChange, and a context option.
	    @return {Ember.Array} receiver
	  */
	  addArrayObserver: function(target, opts) {
	    var willChange = (opts && opts.willChange) || 'arrayWillChange',
	        didChange  = (opts && opts.didChange) || 'arrayDidChange';
	
	    var hasObservers = get(this, 'hasArrayObservers');
	    if (!hasObservers) Ember.propertyWillChange(this, 'hasArrayObservers');
	    Ember.addListener(this, '@array:before', target, willChange);
	    Ember.addListener(this, '@array:change', target, didChange);
	    if (!hasObservers) Ember.propertyDidChange(this, 'hasArrayObservers');
	    return this;
	  },
	
	  /**
	    Removes an array observer from the object if the observer is current
	    registered.  Calling this method multiple times with the same object will
	    have no effect.
	
	    @method removeArrayObserver
	    @param {Object} target The object observing the array.
	    @return {Ember.Array} receiver
	  */
	  removeArrayObserver: function(target, opts) {
	    var willChange = (opts && opts.willChange) || 'arrayWillChange',
	        didChange  = (opts && opts.didChange) || 'arrayDidChange';
	
	    var hasObservers = get(this, 'hasArrayObservers');
	    if (hasObservers) Ember.propertyWillChange(this, 'hasArrayObservers');
	    Ember.removeListener(this, '@array:before', target, willChange);
	    Ember.removeListener(this, '@array:change', target, didChange);
	    if (hasObservers) Ember.propertyDidChange(this, 'hasArrayObservers');
	    return this;
	  },
	
	  /**
	    Becomes true whenever the array currently has observers watching changes
	    on the array.
	
	    @property Boolean
	  */
	  hasArrayObservers: Ember.computed(function() {
	    return Ember.hasListeners(this, '@array:change') || Ember.hasListeners(this, '@array:before');
	  }).property(),
	
	  /**
	    If you are implementing an object that supports Ember.Array, call this
	    method just before the array content changes to notify any observers and
	    invalidate any related properties.  Pass the starting index of the change
	    as well as a delta of the amounts to change.
	
	    @method arrayContentWillChange
	    @param {Number} startIdx The starting index in the array that will change.
	    @param {Number} removeAmt The number of items that will be removed.  If you pass null assumes 0
	    @param {Number} addAmt The number of items that will be added.  If you pass null assumes 0.
	    @return {Ember.Array} receiver
	  */
	  arrayContentWillChange: function(startIdx, removeAmt, addAmt) {
	
	    // if no args are passed assume everything changes
	    if (startIdx===undefined) {
	      startIdx = 0;
	      removeAmt = addAmt = -1;
	    } else {
	      if (removeAmt === undefined) removeAmt=-1;
	      if (addAmt    === undefined) addAmt=-1;
	    }
	
	    // Make sure the @each proxy is set up if anyone is observing @each
	    if (Ember.isWatching(this, '@each')) { get(this, '@each'); }
	
	    Ember.sendEvent(this, '@array:before', [this, startIdx, removeAmt, addAmt]);
	
	    var removing, lim;
	    if (startIdx>=0 && removeAmt>=0 && get(this, 'hasEnumerableObservers')) {
	      removing = [];
	      lim = startIdx+removeAmt;
	      for(var idx=startIdx;idx<lim;idx++) removing.push(this.objectAt(idx));
	    } else {
	      removing = removeAmt;
	    }
	
	    this.enumerableContentWillChange(removing, addAmt);
	
	    return this;
	  },
	
	  arrayContentDidChange: function(startIdx, removeAmt, addAmt) {
	
	    // if no args are passed assume everything changes
	    if (startIdx===undefined) {
	      startIdx = 0;
	      removeAmt = addAmt = -1;
	    } else {
	      if (removeAmt === undefined) removeAmt=-1;
	      if (addAmt    === undefined) addAmt=-1;
	    }
	
	    var adding, lim;
	    if (startIdx>=0 && addAmt>=0 && get(this, 'hasEnumerableObservers')) {
	      adding = [];
	      lim = startIdx+addAmt;
	      for(var idx=startIdx;idx<lim;idx++) adding.push(this.objectAt(idx));
	    } else {
	      adding = addAmt;
	    }
	
	    this.enumerableContentDidChange(removeAmt, adding);
	    Ember.sendEvent(this, '@array:change', [this, startIdx, removeAmt, addAmt]);
	
	    var length      = get(this, 'length'),
	        cachedFirst = cacheFor(this, 'firstObject'),
	        cachedLast  = cacheFor(this, 'lastObject');
	    if (this.objectAt(0) !== cachedFirst) {
	      Ember.propertyWillChange(this, 'firstObject');
	      Ember.propertyDidChange(this, 'firstObject');
	    }
	    if (this.objectAt(length-1) !== cachedLast) {
	      Ember.propertyWillChange(this, 'lastObject');
	      Ember.propertyDidChange(this, 'lastObject');
	    }
	
	    return this;
	  },
	
	  // ..........................................................
	  // ENUMERATED PROPERTIES
	  //
	
	  /**
	    Returns a special object that can be used to observe individual properties
	    on the array.  Just get an equivalent property on this object and it will
	    return an enumerable that maps automatically to the named key on the
	    member objects.
	
	    @property @each
	  */
	  '@each': Ember.computed(function() {
	    if (!this.__each) this.__each = new Ember.EachProxy(this);
	    return this.__each;
	  }).property()
	
	}) ;
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	
	/**
	  Implements some standard methods for comparing objects. Add this mixin to
	  any class you create that can compare its instances.
	
	  You should implement the compare() method.
	
	  @class Comparable
	  @namespace Ember
	  @extends Ember.Mixin
	  @since Ember 0.9
	*/
	Ember.Comparable = Ember.Mixin.create( /** @scope Ember.Comparable.prototype */{
	
	  /**
	    walk like a duck. Indicates that the object can be compared.
	
	    @property isComparable
	    @type Boolean
	    @default true
	  */
	  isComparable: true,
	
	  /**
	    Override to return the result of the comparison of the two parameters. The
	    compare method should return:
	
	      - `-1` if `a < b`
	      - `0` if `a == b`
	      - `1` if `a > b`
	
	    Default implementation raises an exception.
	
	    @method compare
	    @param a {Object} the first object to compare
	    @param b {Object} the second object to compare
	    @return {Integer} the result of the comparison
	  */
	  compare: Ember.required(Function)
	
	});
	
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	
	
	var get = Ember.get, set = Ember.set;
	
	/**
	  Implements some standard methods for copying an object.  Add this mixin to
	  any object you create that can create a copy of itself.  This mixin is
	  added automatically to the built-in array.
	
	  You should generally implement the copy() method to return a copy of the
	  receiver.
	
	  Note that frozenCopy() will only work if you also implement Ember.Freezable.
	
	  @class Copyable
	  @namespace Ember
	  @extends Ember.Mixin
	  @since Ember 0.9
	*/
	Ember.Copyable = Ember.Mixin.create(
	/** @scope Ember.Copyable.prototype */ {
	
	  /**
	    Override to return a copy of the receiver.  Default implementation raises
	    an exception.
	
	    @method copy
	    @param deep {Boolean} if true, a deep copy of the object should be made
	    @return {Object} copy of receiver
	  */
	  copy: Ember.required(Function),
	
	  /**
	    If the object implements Ember.Freezable, then this will return a new copy
	    if the object is not frozen and the receiver if the object is frozen.
	
	    Raises an exception if you try to call this method on a object that does
	    not support freezing.
	
	    You should use this method whenever you want a copy of a freezable object
	    since a freezable object can simply return itself without actually
	    consuming more memory.
	
	    @method frozenCopy
	    @return {Object} copy of receiver or receiver
	  */
	  frozenCopy: function() {
	    if (Ember.Freezable && Ember.Freezable.detect(this)) {
	      return get(this, 'isFrozen') ? this : this.copy().freeze();
	    } else {
	      throw new Error(Ember.String.fmt("%@ does not support freezing", [this]));
	    }
	  }
	});
	
	
	
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	
	var get = Ember.get, set = Ember.set;
	
	/**
	  The Ember.Freezable mixin implements some basic methods for marking an object
	  as frozen. Once an object is frozen it should be read only. No changes
	  may be made the internal state of the object.
	
	  ## Enforcement
	
	  To fully support freezing in your subclass, you must include this mixin and
	  override any method that might alter any property on the object to instead
	  raise an exception. You can check the state of an object by checking the
	  isFrozen property.
	
	  Although future versions of JavaScript may support language-level freezing
	  object objects, that is not the case today. Even if an object is freezable,
	  it is still technically possible to modify the object, even though it could
	  break other parts of your application that do not expect a frozen object to
	  change. It is, therefore, very important that you always respect the
	  isFrozen property on all freezable objects.
	
	  ## Example Usage
	
	  The example below shows a simple object that implement the Ember.Freezable
	  protocol.
	
	        Contact = Ember.Object.extend(Ember.Freezable, {
	
	          firstName: null,
	
	          lastName: null,
	
	          // swaps the names
	          swapNames: function() {
	            if (this.get('isFrozen')) throw Ember.FROZEN_ERROR;
	            var tmp = this.get('firstName');
	            this.set('firstName', this.get('lastName'));
	            this.set('lastName', tmp);
	            return this;
	          }
	
	        });
	
	        c = Context.create({ firstName: "John", lastName: "Doe" });
	        c.swapNames();  => returns c
	        c.freeze();
	        c.swapNames();  => EXCEPTION
	
	  ## Copying
	
	  Usually the Ember.Freezable protocol is implemented in cooperation with the
	  Ember.Copyable protocol, which defines a frozenCopy() method that will return
	  a frozen object, if the object implements this method as well.
	
	  @class Freezable
	  @namespace Ember
	  @extends Ember.Mixin
	  @since Ember 0.9
	*/
	Ember.Freezable = Ember.Mixin.create(
	/** @scope Ember.Freezable.prototype */ {
	
	  /**
	    Set to true when the object is frozen.  Use this property to detect whether
	    your object is frozen or not.
	
	    @property isFrozen
	    @type Boolean
	  */
	  isFrozen: false,
	
	  /**
	    Freezes the object.  Once this method has been called the object should
	    no longer allow any properties to be edited.
	
	    @method freeze
	    @return {Object} receiver
	  */
	  freeze: function() {
	    if (get(this, 'isFrozen')) return this;
	    set(this, 'isFrozen', true);
	    return this;
	  }
	
	});
	
	Ember.FROZEN_ERROR = "Frozen object cannot be modified.";
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	var forEach = Ember.EnumerableUtils.forEach;
	
	/**
	  This mixin defines the API for modifying generic enumerables.  These methods
	  can be applied to an object regardless of whether it is ordered or
	  unordered.
	
	  Note that an Enumerable can change even if it does not implement this mixin.
	  For example, a MappedEnumerable cannot be directly modified but if its
	  underlying enumerable changes, it will change also.
	
	  ## Adding Objects
	
	  To add an object to an enumerable, use the addObject() method.  This
	  method will only add the object to the enumerable if the object is not
	  already present and the object if of a type supported by the enumerable.
	
	      set.addObject(contact);
	
	  ## Removing Objects
	
	  To remove an object form an enumerable, use the removeObject() method.  This
	  will only remove the object if it is already in the enumerable, otherwise
	  this method has no effect.
	
	      set.removeObject(contact);
	
	  ## Implementing In Your Own Code
	
	  If you are implementing an object and want to support this API, just include
	  this mixin in your class and implement the required methods.  In your unit
	  tests, be sure to apply the Ember.MutableEnumerableTests to your object.
	
	  @class MutableEnumerable
	  @namespace Ember
	  @extends Ember.Mixin
	  @uses Ember.Enumerable
	*/
	Ember.MutableEnumerable = Ember.Mixin.create(Ember.Enumerable,
	  /** @scope Ember.MutableEnumerable.prototype */ {
	
	  /**
	    __Required.__ You must implement this method to apply this mixin.
	
	    Attempts to add the passed object to the receiver if the object is not
	    already present in the collection. If the object is present, this method
	    has no effect.
	
	    If the passed object is of a type not supported by the receiver
	    then this method should raise an exception.
	
	    @method addObject
	    @param {Object} object The object to add to the enumerable.
	    @return {Object} the passed object
	  */
	  addObject: Ember.required(Function),
	
	  /**
	    Adds each object in the passed enumerable to the receiver.
	
	    @method addObjects
	    @param {Ember.Enumerable} objects the objects to add.
	    @return {Object} receiver
	  */
	  addObjects: function(objects) {
	    Ember.beginPropertyChanges(this);
	    forEach(objects, function(obj) { this.addObject(obj); }, this);
	    Ember.endPropertyChanges(this);
	    return this;
	  },
	
	  /**
	    __Required.__ You must implement this method to apply this mixin.
	
	    Attempts to remove the passed object from the receiver collection if the
	    object is in present in the collection.  If the object is not present,
	    this method has no effect.
	
	    If the passed object is of a type not supported by the receiver
	    then this method should raise an exception.
	
	    @method removeObject
	    @param {Object} object The object to remove from the enumerable.
	    @return {Object} the passed object
	  */
	  removeObject: Ember.required(Function),
	
	
	  /**
	    Removes each objects in the passed enumerable from the receiver.
	
	    @method removeObjects
	    @param {Ember.Enumerable} objects the objects to remove
	    @return {Object} receiver
	  */
	  removeObjects: function(objects) {
	    Ember.beginPropertyChanges(this);
	    forEach(objects, function(obj) { this.removeObject(obj); }, this);
	    Ember.endPropertyChanges(this);
	    return this;
	  }
	
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	// ..........................................................
	// CONSTANTS
	//
	
	var OUT_OF_RANGE_EXCEPTION = "Index out of range" ;
	var EMPTY = [];
	
	// ..........................................................
	// HELPERS
	//
	
	var get = Ember.get, set = Ember.set, forEach = Ember.EnumerableUtils.forEach;
	
	/**
	  This mixin defines the API for modifying array-like objects.  These methods
	  can be applied only to a collection that keeps its items in an ordered set.
	
	  Note that an Array can change even if it does not implement this mixin.
	  For example, one might implement a SparseArray that cannot be directly
	  modified, but if its underlying enumerable changes, it will change also.
	
	  @class MutableArray
	  @namespace Ember
	  @extends Ember.Mixin
	  @uses Ember.Array
	  @uses Ember.MutableEnumerable
	*/
	Ember.MutableArray = Ember.Mixin.create(Ember.Array, Ember.MutableEnumerable,
	  /** @scope Ember.MutableArray.prototype */ {
	
	  /**
	    __Required.__ You must implement this method to apply this mixin.
	
	    This is one of the primitives you must implement to support Ember.Array.  You
	    should replace amt objects started at idx with the objects in the passed
	    array.  You should also call this.enumerableContentDidChange() ;
	
	    @method replace
	    @param {Number} idx Starting index in the array to replace.  If idx >= length,
	      then append to the end of the array.
	    @param {Number} amt Number of elements that should be removed from the array,
	      starting at *idx*.
	    @param {Array} objects An array of zero or more objects that should be inserted
	      into the array at *idx*
	  */
	  replace: Ember.required(),
	
	  /**
	    Remove all elements from self. This is useful if you
	    want to reuse an existing array without having to recreate it.
	
	        var colors = ["red", "green", "blue"];
	        color.length();  => 3
	        colors.clear();  => []
	        colors.length(); => 0
	
	    @method clear
	    @return {Ember.Array} An empty Array. 
	  */
	  clear: function () {
	    var len = get(this, 'length');
	    if (len === 0) return this;
	    this.replace(0, len, EMPTY);
	    return this;
	  },
	
	  /**
	    This will use the primitive replace() method to insert an object at the
	    specified index.
	
	        var colors = ["red", "green", "blue"];
	        colors.insertAt(2, "yellow"); => ["red", "green", "yellow", "blue"]
	        colors.insertAt(5, "orange"); => Error: Index out of range
	
	    @method insertAt
	    @param {Number} idx index of insert the object at.
	    @param {Object} object object to insert
	  */
	  insertAt: function(idx, object) {
	    if (idx > get(this, 'length')) throw new Error(OUT_OF_RANGE_EXCEPTION) ;
	    this.replace(idx, 0, [object]) ;
	    return this ;
	  },
	
	  /**
	    Remove an object at the specified index using the replace() primitive
	    method.  You can pass either a single index, or a start and a length.
	
	    If you pass a start and length that is beyond the
	    length this method will throw an Ember.OUT_OF_RANGE_EXCEPTION
	
	        var colors = ["red", "green", "blue", "yellow", "orange"];
	        colors.removeAt(0); => ["green", "blue", "yellow", "orange"]
	        colors.removeAt(2, 2); => ["green", "blue"]
	        colors.removeAt(4, 2); => Error: Index out of range
	
	    @method removeAt
	    @param {Number} start index, start of range
	    @param {Number} len length of passing range
	    @return {Object} receiver
	  */
	  removeAt: function(start, len) {
	    if ('number' === typeof start) {
	
	      if ((start < 0) || (start >= get(this, 'length'))) {
	        throw new Error(OUT_OF_RANGE_EXCEPTION);
	      }
	
	      // fast case
	      if (len === undefined) len = 1;
	      this.replace(start, len, EMPTY);
	    }
	
	    return this ;
	  },
	
	  /**
	    Push the object onto the end of the array.  Works just like push() but it
	    is KVO-compliant.
	
	        var colors = ["red", "green", "blue"];
	        colors.pushObject("black"); => ["red", "green", "blue", "black"]
	        colors.pushObject(["yellow", "orange"]); => ["red", "green", "blue", "black", ["yellow", "orange"]]
	
	    @method pushObject
	    @param {anything} obj object to push
	  */
	  pushObject: function(obj) {
	    this.insertAt(get(this, 'length'), obj) ;
	    return obj ;
	  },
	
	  /**
	    Add the objects in the passed numerable to the end of the array.  Defers
	    notifying observers of the change until all objects are added.
	
	        var colors = ["red", "green", "blue"];
	        colors.pushObjects("black"); => ["red", "green", "blue", "black"]
	        colors.pushObjects(["yellow", "orange"]); => ["red", "green", "blue", "black", "yellow", "orange"]
	
	    @method pushObjects
	    @param {Ember.Enumerable} objects the objects to add
	    @return {Ember.Array} receiver
	  */
	  pushObjects: function(objects) {
	    this.replace(get(this, 'length'), 0, objects);
	    return this;
	  },
	
	  /**
	    Pop object from array or nil if none are left.  Works just like pop() but
	    it is KVO-compliant.
	
	        var colors = ["red", "green", "blue"];
	        colors.popObject(); => "blue"
	        console.log(colors); => ["red", "green"]
	
	    @method popObject
	    @return object
	  */
	  popObject: function() {
	    var len = get(this, 'length') ;
	    if (len === 0) return null ;
	
	    var ret = this.objectAt(len-1) ;
	    this.removeAt(len-1, 1) ;
	    return ret ;
	  },
	
	  /**
	    Shift an object from start of array or nil if none are left.  Works just
	    like shift() but it is KVO-compliant.
	
	        var colors = ["red", "green", "blue"];
	        colors.shiftObject(); => "red"
	        console.log(colors); => ["green", "blue"]
	
	    @method shiftObject
	    @return object
	  */
	  shiftObject: function() {
	    if (get(this, 'length') === 0) return null ;
	    var ret = this.objectAt(0) ;
	    this.removeAt(0) ;
	    return ret ;
	  },
	
	  /**
	    Unshift an object to start of array.  Works just like unshift() but it is
	    KVO-compliant.
	
	        var colors = ["red", "green", "blue"];
	        colors.unshiftObject("yellow"); => ["yellow", "red", "green", "blue"]
	        colors.unshiftObject(["black", "white"]); => [["black", "white"], "yellow", "red", "green", "blue"]
	
	    @method unshiftObject
	    @param {anything} obj object to unshift
	  */
	  unshiftObject: function(obj) {
	    this.insertAt(0, obj) ;
	    return obj ;
	  },
	
	  /**
	    Adds the named objects to the beginning of the array.  Defers notifying
	    observers until all objects have been added.
	
	        var colors = ["red", "green", "blue"];
	        colors.unshiftObjects(["black", "white"]); => ["black", "white", "red", "green", "blue"]
	        colors.unshiftObjects("yellow"); => Type Error: 'undefined' is not a function
	
	    @method unshiftObjects
	    @param {Ember.Enumerable} objects the objects to add
	    @return {Ember.Array} receiver
	  */
	  unshiftObjects: function(objects) {
	    this.replace(0, 0, objects);
	    return this;
	  },
	
	  /**
	    Reverse objects in the array.  Works just like reverse() but it is
	    KVO-compliant.
	
	    @method reverseObjects
	    @return {Ember.Array} receiver
	   */
	  reverseObjects: function() {
	    var len = get(this, 'length');
	    if (len === 0) return this;
	    var objects = this.toArray().reverse();
	    this.replace(0, len, objects);
	    return this;
	  },
	
	  /**
	    Replace all the the receiver's content with content of the argument.
	    If argument is an empty array receiver will be cleared.
	
	        var colors = ["red", "green", "blue"];
	        colors.setObjects(["black", "white"]); => ["black", "white"]
	        colors.setObjects([]); => []
	
	    @method setObjects
	    @param {Ember.Array} objects array whose content will be used for replacing
	        the content of the receiver
	    @return {Ember.Array} receiver with the new content
	   */
	  setObjects: function(objects) {
	    if (objects.length === 0) return this.clear();
	
	    var len = get(this, 'length');
	    this.replace(0, len, objects);
	    return this;
	  },
	
	  // ..........................................................
	  // IMPLEMENT Ember.MutableEnumerable
	  //
	
	  removeObject: function(obj) {
	    var loc = get(this, 'length') || 0;
	    while(--loc >= 0) {
	      var curObject = this.objectAt(loc) ;
	      if (curObject === obj) this.removeAt(loc) ;
	    }
	    return this ;
	  },
	
	  addObject: function(obj) {
	    if (!this.contains(obj)) this.pushObject(obj);
	    return this ;
	  }
	
	});
	
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	var get = Ember.get, set = Ember.set, defineProperty = Ember.defineProperty;
	
	/**
	  ## Overview
	
	  This mixin provides properties and property observing functionality, core
	  features of the Ember object model.
	
	  Properties and observers allow one object to observe changes to a
	  property on another object. This is one of the fundamental ways that
	  models, controllers and views communicate with each other in an Ember
	  application.
	
	  Any object that has this mixin applied can be used in observer
	  operations. That includes Ember.Object and most objects you will
	  interact with as you write your Ember application.
	
	  Note that you will not generally apply this mixin to classes yourself,
	  but you will use the features provided by this module frequently, so it
	  is important to understand how to use it.
	
	  ## Using get() and set()
	
	  Because of Ember's support for bindings and observers, you will always
	  access properties using the get method, and set properties using the
	  set method. This allows the observing objects to be notified and
	  computed properties to be handled properly.
	
	  More documentation about `get` and `set` are below.
	
	  ## Observing Property Changes
	
	  You typically observe property changes simply by adding the `observes`
	  call to the end of your method declarations in classes that you write.
	  For example:
	
	      Ember.Object.create({
	        valueObserver: function() {
	          // Executes whenever the "value" property changes
	        }.observes('value')
	      });
	
	  Although this is the most common way to add an observer, this capability
	  is actually built into the Ember.Object class on top of two methods
	  defined in this mixin: `addObserver` and `removeObserver`. You can use
	  these two methods to add and remove observers yourself if you need to
	  do so at runtime.
	
	  To add an observer for a property, call:
	
	      object.addObserver('propertyKey', targetObject, targetAction)
	
	  This will call the `targetAction` method on the `targetObject` to be called
	  whenever the value of the `propertyKey` changes.
	
	  Note that if `propertyKey` is a computed property, the observer will be
	  called when any of the property dependencies are changed, even if the
	  resulting value of the computed property is unchanged. This is necessary
	  because computed properties are not computed until `get` is called.
	
	  @class Observable
	  @namespace Ember
	  @extends Ember.Mixin
	*/
	Ember.Observable = Ember.Mixin.create(/** @scope Ember.Observable.prototype */ {
	
	  // compatibility
	  isObserverable: true,
	
	  /**
	    Retrieves the value of a property from the object.
	
	    This method is usually similar to using object[keyName] or object.keyName,
	    however it supports both computed properties and the unknownProperty
	    handler.
	
	    Because `get` unifies the syntax for accessing all these kinds
	    of properties, it can make many refactorings easier, such as replacing a
	    simple property with a computed property, or vice versa.
	
	    ### Computed Properties
	
	    Computed properties are methods defined with the `property` modifier
	    declared at the end, such as:
	
	          fullName: function() {
	            return this.getEach('firstName', 'lastName').compact().join(' ');
	          }.property('firstName', 'lastName')
	
	    When you call `get` on a computed property, the function will be
	    called and the return value will be returned instead of the function
	    itself.
	
	    ### Unknown Properties
	
	    Likewise, if you try to call `get` on a property whose value is
	    undefined, the unknownProperty() method will be called on the object.
	    If this method returns any value other than undefined, it will be returned
	    instead. This allows you to implement "virtual" properties that are
	    not defined upfront.
	
	    @method get
	    @param {String} key The property to retrieve
	    @return {Object} The property value or undefined.
	  */
	  get: function(keyName) {
	    return get(this, keyName);
	  },
	
	  /**
	    To get multiple properties at once, call getProperties
	    with a list of strings or an array:
	
	          record.getProperties('firstName', 'lastName', 'zipCode'); // => { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
	
	   is equivalent to:
	
	          record.getProperties(['firstName', 'lastName', 'zipCode']); // => { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
	
	    @method getProperties
	    @param {String...|Array} list of keys to get
	    @return {Hash}
	  */
	  getProperties: function() {
	    var ret = {};
	    var propertyNames = arguments;
	    if (arguments.length === 1 && Ember.typeOf(arguments[0]) === 'array') {
	      propertyNames = arguments[0];
	    }
	    for(var i = 0; i < propertyNames.length; i++) {
	      ret[propertyNames[i]] = get(this, propertyNames[i]);
	    }
	    return ret;
	  },
	
	  /**
	    Sets the provided key or path to the value.
	
	    This method is generally very similar to calling object[key] = value or
	    object.key = value, except that it provides support for computed
	    properties, the unknownProperty() method and property observers.
	
	    ### Computed Properties
	
	    If you try to set a value on a key that has a computed property handler
	    defined (see the get() method for an example), then set() will call
	    that method, passing both the value and key instead of simply changing
	    the value itself. This is useful for those times when you need to
	    implement a property that is composed of one or more member
	    properties.
	
	    ### Unknown Properties
	
	    If you try to set a value on a key that is undefined in the target
	    object, then the unknownProperty() handler will be called instead. This
	    gives you an opportunity to implement complex "virtual" properties that
	    are not predefined on the object. If unknownProperty() returns
	    undefined, then set() will simply set the value on the object.
	
	    ### Property Observers
	
	    In addition to changing the property, set() will also register a
	    property change with the object. Unless you have placed this call
	    inside of a beginPropertyChanges() and endPropertyChanges(), any "local"
	    observers (i.e. observer methods declared on the same object), will be
	    called immediately. Any "remote" observers (i.e. observer methods
	    declared on another object) will be placed in a queue and called at a
	    later time in a coalesced manner.
	
	    ### Chaining
	
	    In addition to property changes, set() returns the value of the object
	    itself so you can do chaining like this:
	
	          record.set('firstName', 'Charles').set('lastName', 'Jolley');
	
	    @method set
	    @param {String} key The property to set
	    @param {Object} value The value to set or null.
	    @return {Ember.Observable}
	  */
	  set: function(keyName, value) {
	    set(this, keyName, value);
	    return this;
	  },
	
	  /**
	    To set multiple properties at once, call setProperties
	    with a Hash:
	
	          record.setProperties({ firstName: 'Charles', lastName: 'Jolley' });
	
	    @method setProperties
	    @param {Hash} hash the hash of keys and values to set
	    @return {Ember.Observable}
	  */
	  setProperties: function(hash) {
	    return Ember.setProperties(this, hash);
	  },
	
	  /**
	    Begins a grouping of property changes.
	
	    You can use this method to group property changes so that notifications
	    will not be sent until the changes are finished. If you plan to make a
	    large number of changes to an object at one time, you should call this
	    method at the beginning of the changes to begin deferring change
	    notifications. When you are done making changes, call endPropertyChanges()
	    to deliver the deferred change notifications and end deferring.
	
	    @method beginPropertyChanges
	    @return {Ember.Observable}
	  */
	  beginPropertyChanges: function() {
	    Ember.beginPropertyChanges();
	    return this;
	  },
	
	  /**
	    Ends a grouping of property changes.
	
	    You can use this method to group property changes so that notifications
	    will not be sent until the changes are finished. If you plan to make a
	    large number of changes to an object at one time, you should call
	    beginPropertyChanges() at the beginning of the changes to defer change
	    notifications. When you are done making changes, call this method to
	    deliver the deferred change notifications and end deferring.
	
	    @method endPropertyChanges
	    @return {Ember.Observable}
	  */
	  endPropertyChanges: function() {
	    Ember.endPropertyChanges();
	    return this;
	  },
	
	  /**
	    Notify the observer system that a property is about to change.
	
	    Sometimes you need to change a value directly or indirectly without
	    actually calling get() or set() on it. In this case, you can use this
	    method and propertyDidChange() instead. Calling these two methods
	    together will notify all observers that the property has potentially
	    changed value.
	
	    Note that you must always call propertyWillChange and propertyDidChange as
	    a pair. If you do not, it may get the property change groups out of order
	    and cause notifications to be delivered more often than you would like.
	
	    @method propertyWillChange
	    @param {String} key The property key that is about to change.
	    @return {Ember.Observable}
	  */
	  propertyWillChange: function(keyName){
	    Ember.propertyWillChange(this, keyName);
	    return this;
	  },
	
	  /**
	    Notify the observer system that a property has just changed.
	
	    Sometimes you need to change a value directly or indirectly without
	    actually calling get() or set() on it. In this case, you can use this
	    method and propertyWillChange() instead. Calling these two methods
	    together will notify all observers that the property has potentially
	    changed value.
	
	    Note that you must always call propertyWillChange and propertyDidChange as
	    a pair. If you do not, it may get the property change groups out of order
	    and cause notifications to be delivered more often than you would like.
	
	    @method propertyDidChange
	    @param {String} keyName The property key that has just changed.
	    @return {Ember.Observable}
	  */
	  propertyDidChange: function(keyName) {
	    Ember.propertyDidChange(this, keyName);
	    return this;
	  },
	
	  /**
	    Convenience method to call `propertyWillChange` and `propertyDidChange` in
	    succession.
	
	    @method notifyPropertyChange
	    @param {String} keyName The property key to be notified about.
	    @return {Ember.Observable}
	  */
	  notifyPropertyChange: function(keyName) {
	    this.propertyWillChange(keyName);
	    this.propertyDidChange(keyName);
	    return this;
	  },
	
	  addBeforeObserver: function(key, target, method) {
	    Ember.addBeforeObserver(this, key, target, method);
	  },
	
	  /**
	    Adds an observer on a property.
	
	    This is the core method used to register an observer for a property.
	
	    Once you call this method, anytime the key's value is set, your observer
	    will be notified. Note that the observers are triggered anytime the
	    value is set, regardless of whether it has actually changed. Your
	    observer should be prepared to handle that.
	
	    You can also pass an optional context parameter to this method. The
	    context will be passed to your observer method whenever it is triggered.
	    Note that if you add the same target/method pair on a key multiple times
	    with different context parameters, your observer will only be called once
	    with the last context you passed.
	
	    ### Observer Methods
	
	    Observer methods you pass should generally have the following signature if
	    you do not pass a "context" parameter:
	
	          fooDidChange: function(sender, key, value, rev);
	
	    The sender is the object that changed. The key is the property that
	    changes. The value property is currently reserved and unused. The rev
	    is the last property revision of the object when it changed, which you can
	    use to detect if the key value has really changed or not.
	
	    If you pass a "context" parameter, the context will be passed before the
	    revision like so:
	
	          fooDidChange: function(sender, key, value, context, rev);
	
	    Usually you will not need the value, context or revision parameters at
	    the end. In this case, it is common to write observer methods that take
	    only a sender and key value as parameters or, if you aren't interested in
	    any of these values, to write an observer that has no parameters at all.
	
	    @method addObserver
	    @param {String} key The key to observer
	    @param {Object} target The target object to invoke
	    @param {String|Function} method The method to invoke.
	    @return {Ember.Object} self
	  */
	  addObserver: function(key, target, method) {
	    Ember.addObserver(this, key, target, method);
	  },
	
	  /**
	    Remove an observer you have previously registered on this object. Pass
	    the same key, target, and method you passed to addObserver() and your
	    target will no longer receive notifications.
	
	    @method removeObserver
	    @param {String} key The key to observer
	    @param {Object} target The target object to invoke
	    @param {String|Function} method The method to invoke.
	    @return {Ember.Observable} receiver
	  */
	  removeObserver: function(key, target, method) {
	    Ember.removeObserver(this, key, target, method);
	  },
	
	  /**
	    Returns true if the object currently has observers registered for a
	    particular key. You can use this method to potentially defer performing
	    an expensive action until someone begins observing a particular property
	    on the object.
	
	    @method hasObserverFor
	    @param {String} key Key to check
	    @return {Boolean}
	  */
	  hasObserverFor: function(key) {
	    return Ember.hasListeners(this, key+':change');
	  },
	
	  /**
	    This method will be called when a client attempts to get the value of a
	    property that has not been defined in one of the typical ways. Override
	    this method to create "virtual" properties.
	
	    @method unknownProperty
	    @param {String} key The name of the unknown property that was requested.
	    @return {Object} The property value or undefined. Default is undefined.
	  */
	  unknownProperty: function(key) {
	    return undefined;
	  },
	
	  /**
	    This method will be called when a client attempts to set the value of a
	    property that has not been defined in one of the typical ways. Override
	    this method to create "virtual" properties.
	
	    @method setUnknownProperty
	    @param {String} key The name of the unknown property to be set.
	    @param {Object} value The value the unknown property is to be set to.
	  */
	  setUnknownProperty: function(key, value) {
	    defineProperty(this, key);
	    set(this, key, value);
	  },
	
	  /**
	    @deprecated
	    @method getPath
	    @param {String} path The property path to retrieve
	    @return {Object} The property value or undefined.
	  */
	  getPath: function(path) {
	    Ember.deprecate("getPath is deprecated since get now supports paths");
	    return this.get(path);
	  },
	
	  /**
	    @deprecated
	    @method setPath
	    @param {String} path The path to the property that will be set
	    @param {Object} value The value to set or null.
	    @return {Ember.Observable}
	  */
	  setPath: function(path, value) {
	    Ember.deprecate("setPath is deprecated since set now supports paths");
	    return this.set(path, value);
	  },
	
	  /**
	    Retrieves the value of a property, or a default value in the case that the property
	    returns undefined.
	
	        person.getWithDefault('lastName', 'Doe');
	
	    @method getWithDefault
	    @param {String} keyName The name of the property to retrieve
	    @param {Object} defaultValue The value to return if the property value is undefined
	    @return {Object} The property value or the defaultValue.
	  */
	  getWithDefault: function(keyName, defaultValue) {
	    return Ember.getWithDefault(this, keyName, defaultValue);
	  },
	
	  /**
	    Set the value of a property to the current value plus some amount.
	
	        person.incrementProperty('age');
	        team.incrementProperty('score', 2);
	
	    @method incrementProperty
	    @param {String} keyName The name of the property to increment
	    @param {Object} increment The amount to increment by. Defaults to 1
	    @return {Object} The new property value
	  */
	  incrementProperty: function(keyName, increment) {
	    if (!increment) { increment = 1; }
	    set(this, keyName, (get(this, keyName) || 0)+increment);
	    return get(this, keyName);
	  },
	
	  /**
	    Set the value of a property to the current value minus some amount.
	
	        player.decrementProperty('lives');
	        orc.decrementProperty('health', 5);
	
	    @method decrementProperty
	    @param {String} keyName The name of the property to decrement
	    @param {Object} increment The amount to decrement by. Defaults to 1
	    @return {Object} The new property value
	  */
	  decrementProperty: function(keyName, increment) {
	    if (!increment) { increment = 1; }
	    set(this, keyName, (get(this, keyName) || 0)-increment);
	    return get(this, keyName);
	  },
	
	  /**
	    Set the value of a boolean property to the opposite of it's
	    current value.
	
	        starship.toggleProperty('warpDriveEnaged');
	
	    @method toggleProperty
	    @param {String} keyName The name of the property to toggle
	    @return {Object} The new property value
	  */
	  toggleProperty: function(keyName) {
	    set(this, keyName, !get(this, keyName));
	    return get(this, keyName);
	  },
	
	  /**
	    Returns the cached value of a computed property, if it exists.
	    This allows you to inspect the value of a computed property
	    without accidentally invoking it if it is intended to be
	    generated lazily.
	
	    @method cacheFor
	    @param {String} keyName
	    @return {Object} The cached value of the computed property, if any
	  */
	  cacheFor: function(keyName) {
	    return Ember.cacheFor(this, keyName);
	  },
	
	  // intended for debugging purposes
	  observersForKey: function(keyName) {
	    return Ember.observersFor(this, keyName);
	  }
	});
	
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	var get = Ember.get, set = Ember.set;
	
	/**
	@class TargetActionSupport
	@namespace Ember
	@extends Ember.Mixin
	*/
	Ember.TargetActionSupport = Ember.Mixin.create({
	  target: null,
	  action: null,
	
	  targetObject: Ember.computed(function() {
	    var target = get(this, 'target');
	
	    if (Ember.typeOf(target) === "string") {
	      var value = get(this, target);
	      if (value === undefined) { value = get(Ember.lookup, target); }
	      return value;
	    } else {
	      return target;
	    }
	  }).property('target'),
	
	  triggerAction: function() {
	    var action = get(this, 'action'),
	        target = get(this, 'targetObject');
	
	    if (target && action) {
	      var ret;
	
	      if (typeof target.send === 'function') {
	        ret = target.send(action, this);
	      } else {
	        if (typeof action === 'string') {
	          action = target[action];
	        }
	        ret = action.call(target, this);
	      }
	      if (ret !== false) ret = true;
	
	      return ret;
	    } else {
	      return false;
	    }
	  }
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	/**
	  @class Evented
	  @namespace Ember
	  @extends Ember.Mixin
	 */
	Ember.Evented = Ember.Mixin.create({
	  on: function(name, target, method) {
	    Ember.addListener(this, name, target, method);
	  },
	
	  one: function(name, target, method) {
	    if (!method) {
	      method = target;
	      target = null;
	    }
	
	    var self = this;
	    var wrapped = function() {
	      Ember.removeListener(self, name, target, method);
	
	      if ('string' === typeof method) { method = this[method]; }
	
	      // Internally, a `null` target means that the target is
	      // the first parameter to addListener. That means that
	      // the `this` passed into this function is the target
	      // determined by the event system.
	      method.apply(this, arguments);
	    };
	
	    Ember.addListener(this, name, target, wrapped, Ember.guidFor(method));
	  },
	
	  trigger: function(name) {
	    var args = [], i, l;
	    for (i = 1, l = arguments.length; i < l; i++) {
	      args.push(arguments[i]);
	    }
	    Ember.sendEvent(this, name, args);
	  },
	
	  fire: function(name) {
	    Ember.deprecate("Ember.Evented#fire() has been deprecated in favor of trigger() for compatibility with jQuery. It will be removed in 1.0. Please update your code to call trigger() instead.");
	    this.trigger.apply(this, arguments);
	  },
	
	  off: function(name, target, method) {
	    Ember.removeListener(this, name, target, method);
	  },
	
	  has: function(name) {
	    return Ember.hasListeners(this, name);
	  }
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	var get = Ember.get,
	    slice = Array.prototype.slice;
	
	/**
	  @class Deferred
	  @namespace Ember
	  @extends Ember.Mixin
	 */
	Ember.Deferred = Ember.Mixin.create({
	
	  /**
	    Add handlers to be called when the Deferred object is resolved or rejected.
	
	    @method then
	    @param {Function} doneCallback a callback function to be called when done
	    @param {Function} failCallback a callback function to be called when failed
	  */
	  then: function(doneCallback, failCallback) {
	    return get(this, 'promise').then(doneCallback, failCallback);
	  },
	
	  /**
	    Resolve a Deferred object and call any doneCallbacks with the given args.
	
	    @method resolve
	  */
	  resolve: function(value) {
	    get(this, 'promise').resolve(value);
	  },
	
	  /**
	    Reject a Deferred object and call any failCallbacks with the given args.
	
	    @method reject
	  */
	  reject: function(value) {
	    get(this, 'promise').reject(value);
	  },
	
	  promise: Ember.computed(function() {
	    return new RSVP.Promise();
	  })
	});
	
	})();
	
	
	
	(function() {
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	
	// NOTE: this object should never be included directly.  Instead use Ember.
	// Ember.Object.  We only define this separately so that Ember.Set can depend on it
	
	
	var set = Ember.set, get = Ember.get,
	    o_create = Ember.create,
	    o_defineProperty = Ember.platform.defineProperty,
	    a_slice = Array.prototype.slice,
	    GUID_KEY = Ember.GUID_KEY,
	    guidFor = Ember.guidFor,
	    generateGuid = Ember.generateGuid,
	    meta = Ember.meta,
	    rewatch = Ember.rewatch,
	    finishChains = Ember.finishChains,
	    destroy = Ember.destroy,
	    schedule = Ember.run.schedule,
	    Mixin = Ember.Mixin,
	    applyMixin = Mixin._apply,
	    finishPartial = Mixin.finishPartial,
	    reopen = Mixin.prototype.reopen,
	    classToString = Mixin.prototype.toString;
	
	var undefinedDescriptor = {
	  configurable: true,
	  writable: true,
	  enumerable: false,
	  value: undefined
	};
	
	function makeCtor() {
	
	  // Note: avoid accessing any properties on the object since it makes the
	  // method a lot faster.  This is glue code so we want it to be as fast as
	  // possible.
	
	  var wasApplied = false, initMixins;
	
	  var Class = function() {
	    if (!wasApplied) {
	      Class.proto(); // prepare prototype...
	    }
	    o_defineProperty(this, GUID_KEY, undefinedDescriptor);
	    o_defineProperty(this, '_super', undefinedDescriptor);
	    var m = meta(this);
	    m.proto = this;
	    if (initMixins) {
	      this.reopen.apply(this, initMixins);
	      initMixins = null;
	    }
	    finishPartial(this, m);
	    delete m.proto;
	    finishChains(this);
	    this.init.apply(this, arguments);
	  };
	
	  Class.toString = classToString;
	  Class.willReopen = function() {
	    if (wasApplied) {
	      Class.PrototypeMixin = Mixin.create(Class.PrototypeMixin);
	    }
	
	    wasApplied = false;
	  };
	  Class._initMixins = function(args) { initMixins = args; };
	
	  Class.proto = function() {
	    var superclass = Class.superclass;
	    if (superclass) { superclass.proto(); }
	
	    if (!wasApplied) {
	      wasApplied = true;
	      Class.PrototypeMixin.applyPartial(Class.prototype);
	      rewatch(Class.prototype);
	    }
	
	    return this.prototype;
	  };
	
	  return Class;
	
	}
	
	var CoreObject = makeCtor();
	
	CoreObject.PrototypeMixin = Mixin.create({
	
	  reopen: function() {
	    applyMixin(this, arguments, true);
	    return this;
	  },
	
	  isInstance: true,
	
	  init: function() {},
	
	  /**
	    @property isDestroyed
	    @default false
	  */
	  isDestroyed: false,
	
	  /**
	    @property isDestroying
	    @default false
	  */
	  isDestroying: false,
	
	  /**
	    Destroys an object by setting the isDestroyed flag and removing its
	    metadata, which effectively destroys observers and bindings.
	
	    If you try to set a property on a destroyed object, an exception will be
	    raised.
	
	    Note that destruction is scheduled for the end of the run loop and does not
	    happen immediately.
	
	    @method destroy
	    @return {Ember.Object} receiver
	  */
	  destroy: function() {
	    if (this.isDestroying) { return; }
	
	    this.isDestroying = true;
	
	    if (this.willDestroy) { this.willDestroy(); }
	
	    set(this, 'isDestroyed', true);
	    schedule('destroy', this, this._scheduledDestroy);
	    return this;
	  },
	
	  /**
	    @private
	
	    Invoked by the run loop to actually destroy the object. This is
	    scheduled for execution by the `destroy` method.
	
	    @method _scheduledDestroy
	  */
	  _scheduledDestroy: function() {
	    destroy(this);
	    if (this.didDestroy) { this.didDestroy(); }
	  },
	
	  bind: function(to, from) {
	    if (!(from instanceof Ember.Binding)) { from = Ember.Binding.from(from); }
	    from.to(to).connect(this);
	    return from;
	  },
	
	  toString: function() {
	    return '<'+this.constructor.toString()+':'+guidFor(this)+'>';
	  }
	});
	
	if (Ember.config.overridePrototypeMixin) {
	  Ember.config.overridePrototypeMixin(CoreObject.PrototypeMixin);
	}
	
	CoreObject.__super__ = null;
	
	var ClassMixin = Mixin.create({
	
	  ClassMixin: Ember.required(),
	
	  PrototypeMixin: Ember.required(),
	
	  isClass: true,
	
	  isMethod: false,
	
	  extend: function() {
	    var Class = makeCtor(), proto;
	    Class.ClassMixin = Mixin.create(this.ClassMixin);
	    Class.PrototypeMixin = Mixin.create(this.PrototypeMixin);
	
	    Class.ClassMixin.ownerConstructor = Class;
	    Class.PrototypeMixin.ownerConstructor = Class;
	
	    reopen.apply(Class.PrototypeMixin, arguments);
	
	    Class.superclass = this;
	    Class.__super__  = this.prototype;
	
	    proto = Class.prototype = o_create(this.prototype);
	    proto.constructor = Class;
	    generateGuid(proto, 'ember');
	    meta(proto).proto = proto; // this will disable observers on prototype
	
	    Class.ClassMixin.apply(Class);
	    return Class;
	  },
	
	  create: function() {
	    var C = this;
	    if (arguments.length>0) { this._initMixins(arguments); }
	    return new C();
	  },
	
	  reopen: function() {
	    this.willReopen();
	    reopen.apply(this.PrototypeMixin, arguments);
	    return this;
	  },
	
	  reopenClass: function() {
	    reopen.apply(this.ClassMixin, arguments);
	    applyMixin(this, arguments, false);
	    return this;
	  },
	
	  detect: function(obj) {
	    if ('function' !== typeof obj) { return false; }
	    while(obj) {
	      if (obj===this) { return true; }
	      obj = obj.superclass;
	    }
	    return false;
	  },
	
	  detectInstance: function(obj) {
	    return obj instanceof this;
	  },
	
	  /**
	    In some cases, you may want to annotate computed properties with additional
	    metadata about how they function or what values they operate on. For example,
	    computed property functions may close over variables that are then no longer
	    available for introspection.
	
	    You can pass a hash of these values to a computed property like this:
	
	        person: function() {
	          var personId = this.get('personId');
	          return App.Person.create({ id: personId });
	        }.property().meta({ type: App.Person })
	
	    Once you've done this, you can retrieve the values saved to the computed
	    property from your class like this:
	
	        MyClass.metaForProperty('person');
	
	    This will return the original hash that was passed to `meta()`.
	
	    @method metaForProperty
	    @param key {String} property name
	  */
	  metaForProperty: function(key) {
	    var desc = meta(this.proto(), false).descs[key];
	
	    Ember.assert("metaForProperty() could not find a computed property with key '"+key+"'.", !!desc && desc instanceof Ember.ComputedProperty);
	    return desc._meta || {};
	  },
	
	  /**
	    Iterate over each computed property for the class, passing its name
	    and any associated metadata (see `metaForProperty`) to the callback.
	
	    @method eachComputedProperty
	    @param {Function} callback
	    @param {Object} binding
	  */
	  eachComputedProperty: function(callback, binding) {
	    var proto = this.proto(),
	        descs = meta(proto).descs,
	        empty = {},
	        property;
	
	    for (var name in descs) {
	      property = descs[name];
	
	      if (property instanceof Ember.ComputedProperty) {
	        callback.call(binding || this, name, property._meta || empty);
	      }
	    }
	  }
	
	});
	
	if (Ember.config.overrideClassMixin) {
	  Ember.config.overrideClassMixin(ClassMixin);
	}
	
	CoreObject.ClassMixin = ClassMixin;
	ClassMixin.apply(CoreObject);
	
	/**
	  @class CoreObject
	  @namespace Ember
	*/
	Ember.CoreObject = CoreObject;
	
	
	
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	var get = Ember.get, set = Ember.set, guidFor = Ember.guidFor, none = Ember.none;
	
	/**
	  An unordered collection of objects.
	
	  A Set works a bit like an array except that its items are not ordered.
	  You can create a set to efficiently test for membership for an object. You
	  can also iterate through a set just like an array, even accessing objects
	  by index, however there is no guarantee as to their order.
	
	  All Sets are observable via the Enumerable Observer API - which works
	  on any enumerable object including both Sets and Arrays.
	
	  ## Creating a Set
	
	  You can create a set like you would most objects using
	  `new Ember.Set()`.  Most new sets you create will be empty, but you can
	  also initialize the set with some content by passing an array or other
	  enumerable of objects to the constructor.
	
	  Finally, you can pass in an existing set and the set will be copied. You
	  can also create a copy of a set by calling `Ember.Set#copy()`.
	
	      #js
	      // creates a new empty set
	      var foundNames = new Ember.Set();
	
	      // creates a set with four names in it.
	      var names = new Ember.Set(["Charles", "Tom", "Juan", "Alex"]); // :P
	
	      // creates a copy of the names set.
	      var namesCopy = new Ember.Set(names);
	
	      // same as above.
	      var anotherNamesCopy = names.copy();
	
	  ## Adding/Removing Objects
	
	  You generally add or remove objects from a set using `add()` or
	  `remove()`. You can add any type of object including primitives such as
	  numbers, strings, and booleans.
	
	  Unlike arrays, objects can only exist one time in a set. If you call `add()`
	  on a set with the same object multiple times, the object will only be added
	  once. Likewise, calling `remove()` with the same object multiple times will
	  remove the object the first time and have no effect on future calls until
	  you add the object to the set again.
	
	  NOTE: You cannot add/remove null or undefined to a set. Any attempt to do so
	  will be ignored.
	
	  In addition to add/remove you can also call `push()`/`pop()`. Push behaves
	  just like `add()` but `pop()`, unlike `remove()` will pick an arbitrary
	  object, remove it and return it. This is a good way to use a set as a job
	  queue when you don't care which order the jobs are executed in.
	
	  ## Testing for an Object
	
	  To test for an object's presence in a set you simply call
	  `Ember.Set#contains()`.
	
	  ## Observing changes
	
	  When using `Ember.Set`, you can observe the `"[]"` property to be
	  alerted whenever the content changes.  You can also add an enumerable
	  observer to the set to be notified of specific objects that are added and
	  removed from the set.  See `Ember.Enumerable` for more information on
	  enumerables.
	
	  This is often unhelpful. If you are filtering sets of objects, for instance,
	  it is very inefficient to re-filter all of the items each time the set
	  changes. It would be better if you could just adjust the filtered set based
	  on what was changed on the original set. The same issue applies to merging
	  sets, as well.
	
	  ## Other Methods
	
	  `Ember.Set` primary implements other mixin APIs.  For a complete reference
	  on the methods you will use with `Ember.Set`, please consult these mixins.
	  The most useful ones will be `Ember.Enumerable` and
	  `Ember.MutableEnumerable` which implement most of the common iterator
	  methods you are used to on Array.
	
	  Note that you can also use the `Ember.Copyable` and `Ember.Freezable`
	  APIs on `Ember.Set` as well.  Once a set is frozen it can no longer be
	  modified.  The benefit of this is that when you call frozenCopy() on it,
	  Ember will avoid making copies of the set.  This allows you to write
	  code that can know with certainty when the underlying set data will or
	  will not be modified.
	
	  @class Set
	  @namespace Ember
	  @extends Ember.CoreObject
	  @uses Ember.MutableEnumerable
	  @uses Ember.Copyable
	  @uses Ember.Freezable
	  @since Ember 0.9
	*/
	Ember.Set = Ember.CoreObject.extend(Ember.MutableEnumerable, Ember.Copyable, Ember.Freezable,
	  /** @scope Ember.Set.prototype */ {
	
	  // ..........................................................
	  // IMPLEMENT ENUMERABLE APIS
	  //
	
	  /**
	    This property will change as the number of objects in the set changes.
	
	    @property length
	    @type number
	    @default 0
	  */
	  length: 0,
	
	  /**
	    Clears the set. This is useful if you want to reuse an existing set
	    without having to recreate it.
	
	        var colors = new Ember.Set(["red", "green", "blue"]);
	        colors.length;  => 3
	        colors.clear();
	        colors.length;  => 0
	
	    @method clear
	    @return {Ember.Set} An empty Set
	  */
	  clear: function() {
	    if (this.isFrozen) { throw new Error(Ember.FROZEN_ERROR); }
	
	    var len = get(this, 'length');
	    if (len === 0) { return this; }
	
	    var guid;
	
	    this.enumerableContentWillChange(len, 0);
	    Ember.propertyWillChange(this, 'firstObject');
	    Ember.propertyWillChange(this, 'lastObject');
	
	    for (var i=0; i < len; i++){
	      guid = guidFor(this[i]);
	      delete this[guid];
	      delete this[i];
	    }
	
	    set(this, 'length', 0);
	
	    Ember.propertyDidChange(this, 'firstObject');
	    Ember.propertyDidChange(this, 'lastObject');
	    this.enumerableContentDidChange(len, 0);
	
	    return this;
	  },
	
	  /**
	    Returns true if the passed object is also an enumerable that contains the
	    same objects as the receiver.
	
	        var colors = ["red", "green", "blue"],
	            same_colors = new Ember.Set(colors);
	        same_colors.isEqual(colors); => true
	        same_colors.isEqual(["purple", "brown"]); => false
	
	    @method isEqual
	    @param {Ember.Set} obj the other object.
	    @return {Boolean}
	  */
	  isEqual: function(obj) {
	    // fail fast
	    if (!Ember.Enumerable.detect(obj)) return false;
	
	    var loc = get(this, 'length');
	    if (get(obj, 'length') !== loc) return false;
	
	    while(--loc >= 0) {
	      if (!obj.contains(this[loc])) return false;
	    }
	
	    return true;
	  },
	
	  /**
	    Adds an object to the set. Only non-null objects can be added to a set
	    and those can only be added once. If the object is already in the set or
	    the passed value is null this method will have no effect.
	
	    This is an alias for `Ember.MutableEnumerable.addObject()`.
	
	        var colors = new Ember.Set();
	        colors.add("blue");    => ["blue"]
	        colors.add("blue");    => ["blue"]
	        colors.add("red");     => ["blue", "red"]
	        colors.add(null);      => ["blue", "red"]
	        colors.add(undefined); => ["blue", "red"]
	
	    @method add
	    @param {Object} obj The object to add.
	    @return {Ember.Set} The set itself.
	  */
	  add: Ember.alias('addObject'),
	
	  /**
	    Removes the object from the set if it is found.  If you pass a null value
	    or an object that is already not in the set, this method will have no
	    effect. This is an alias for `Ember.MutableEnumerable.removeObject()`.
	
	        var colors = new Ember.Set(["red", "green", "blue"]);
	        colors.remove("red");    => ["blue", "green"]
	        colors.remove("purple"); => ["blue", "green"]
	        colors.remove(null);     => ["blue", "green"]
	
	    @method remove
	    @param {Object} obj The object to remove
	    @return {Ember.Set} The set itself.
	  */
	  remove: Ember.alias('removeObject'),
	
	  /**
	    Removes the last element from the set and returns it, or null if it's empty.
	
	        var colors = new Ember.Set(["green", "blue"]);
	        colors.pop(); => "blue"
	        colors.pop(); => "green"
	        colors.pop(); => null
	
	    @method pop
	    @return {Object} The removed object from the set or null.
	  */
	  pop: function() {
	    if (get(this, 'isFrozen')) throw new Error(Ember.FROZEN_ERROR);
	    var obj = this.length > 0 ? this[this.length-1] : null;
	    this.remove(obj);
	    return obj;
	  },
	
	  /**
	    Inserts the given object on to the end of the set. It returns
	    the set itself.
	
	    This is an alias for `Ember.MutableEnumerable.addObject()`.
	
	        var colors = new Ember.Set();
	        colors.push("red");   => ["red"]
	        colors.push("green"); => ["red", "green"]
	        colors.push("blue");  => ["red", "green", "blue"]
	
	    @method push
	    @return {Ember.Set} The set itself.
	  */
	  push: Ember.alias('addObject'),
	
	  /**
	    Removes the last element from the set and returns it, or null if it's empty.
	
	    This is an alias for `Ember.Set.pop()`.
	
	        var colors = new Ember.Set(["green", "blue"]);
	        colors.shift(); => "blue"
	        colors.shift(); => "green"
	        colors.shift(); => null
	
	    @method shift
	    @return {Object} The removed object from the set or null.
	  */
	  shift: Ember.alias('pop'),
	
	  /**
	    Inserts the given object on to the end of the set. It returns
	    the set itself.
	
	    This is an alias of `Ember.Set.push()`
	
	        var colors = new Ember.Set();
	        colors.unshift("red");   => ["red"]
	        colors.unshift("green"); => ["red", "green"]
	        colors.unshift("blue");  => ["red", "green", "blue"]
	
	    @method unshift
	    @return {Ember.Set} The set itself.
	  */
	  unshift: Ember.alias('push'),
	
	  /**
	    Adds each object in the passed enumerable to the set.
	
	    This is an alias of `Ember.MutableEnumerable.addObjects()`
	
	        var colors = new Ember.Set();
	        colors.addEach(["red", "green", "blue"]); => ["red", "green", "blue"]
	
	    @method addEach
	    @param {Ember.Enumerable} objects the objects to add.
	    @return {Ember.Set} The set itself.
	  */
	  addEach: Ember.alias('addObjects'),
	
	  /**
	    Removes each object in the passed enumerable to the set.
	
	    This is an alias of `Ember.MutableEnumerable.removeObjects()`
	
	        var colors = new Ember.Set(["red", "green", "blue"]);
	        colors.removeEach(["red", "blue"]); => ["green"]
	
	    @method removeEach
	    @param {Ember.Enumerable} objects the objects to remove.
	    @return {Ember.Set} The set itself.
	  */
	  removeEach: Ember.alias('removeObjects'),
	
	  // ..........................................................
	  // PRIVATE ENUMERABLE SUPPORT
	  //
	
	  init: function(items) {
	    this._super();
	    if (items) this.addObjects(items);
	  },
	
	  // implement Ember.Enumerable
	  nextObject: function(idx) {
	    return this[idx];
	  },
	
	  // more optimized version
	  firstObject: Ember.computed(function() {
	    return this.length > 0 ? this[0] : undefined;
	  }).property(),
	
	  // more optimized version
	  lastObject: Ember.computed(function() {
	    return this.length > 0 ? this[this.length-1] : undefined;
	  }).property(),
	
	  // implements Ember.MutableEnumerable
	  addObject: function(obj) {
	    if (get(this, 'isFrozen')) throw new Error(Ember.FROZEN_ERROR);
	    if (none(obj)) return this; // nothing to do
	
	    var guid = guidFor(obj),
	        idx  = this[guid],
	        len  = get(this, 'length'),
	        added ;
	
	    if (idx>=0 && idx<len && (this[idx] === obj)) return this; // added
	
	    added = [obj];
	
	    this.enumerableContentWillChange(null, added);
	    Ember.propertyWillChange(this, 'lastObject');
	
	    len = get(this, 'length');
	    this[guid] = len;
	    this[len] = obj;
	    set(this, 'length', len+1);
	
	    Ember.propertyDidChange(this, 'lastObject');
	    this.enumerableContentDidChange(null, added);
	
	    return this;
	  },
	
	  // implements Ember.MutableEnumerable
	  removeObject: function(obj) {
	    if (get(this, 'isFrozen')) throw new Error(Ember.FROZEN_ERROR);
	    if (none(obj)) return this; // nothing to do
	
	    var guid = guidFor(obj),
	        idx  = this[guid],
	        len = get(this, 'length'),
	        isFirst = idx === 0,
	        isLast = idx === len-1,
	        last, removed;
	
	
	    if (idx>=0 && idx<len && (this[idx] === obj)) {
	      removed = [obj];
	
	      this.enumerableContentWillChange(removed, null);
	      if (isFirst) { Ember.propertyWillChange(this, 'firstObject'); }
	      if (isLast)  { Ember.propertyWillChange(this, 'lastObject'); }
	
	      // swap items - basically move the item to the end so it can be removed
	      if (idx < len-1) {
	        last = this[len-1];
	        this[idx] = last;
	        this[guidFor(last)] = idx;
	      }
	
	      delete this[guid];
	      delete this[len-1];
	      set(this, 'length', len-1);
	
	      if (isFirst) { Ember.propertyDidChange(this, 'firstObject'); }
	      if (isLast)  { Ember.propertyDidChange(this, 'lastObject'); }
	      this.enumerableContentDidChange(removed, null);
	    }
	
	    return this;
	  },
	
	  // optimized version
	  contains: function(obj) {
	    return this[guidFor(obj)]>=0;
	  },
	
	  copy: function() {
	    var C = this.constructor, ret = new C(), loc = get(this, 'length');
	    set(ret, 'length', loc);
	    while(--loc>=0) {
	      ret[loc] = this[loc];
	      ret[guidFor(this[loc])] = loc;
	    }
	    return ret;
	  },
	
	  toString: function() {
	    var len = this.length, idx, array = [];
	    for(idx = 0; idx < len; idx++) {
	      array[idx] = this[idx];
	    }
	    return "Ember.Set<%@>".fmt(array.join(','));
	  }
	
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	/**
	  `Ember.Object` is the main base class for all Ember objects. It is a subclass
	  of `Ember.CoreObject` with the `Ember.Observable` mixin applied. For details,
	  see the documentation for each of these.
	
	  @class Object
	  @namespace Ember
	  @extends Ember.CoreObject
	  @uses Ember.Observable
	*/
	Ember.Object = Ember.CoreObject.extend(Ember.Observable);
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	var indexOf = Ember.ArrayPolyfills.indexOf;
	
	/**
	  A Namespace is an object usually used to contain other objects or methods
	  such as an application or framework.  Create a namespace anytime you want
	  to define one of these new containers.
	
	  # Example Usage
	
	      MyFramework = Ember.Namespace.create({
	        VERSION: '1.0.0'
	      });
	
	  @class Namespace
	  @namespace Ember
	  @extends Ember.Object
	*/
	Ember.Namespace = Ember.Object.extend({
	  isNamespace: true,
	
	  init: function() {
	    Ember.Namespace.NAMESPACES.push(this);
	    Ember.Namespace.PROCESSED = false;
	  },
	
	  toString: function() {
	    Ember.identifyNamespaces();
	    return this[Ember.GUID_KEY+'_name'];
	  },
	
	  destroy: function() {
	    var namespaces = Ember.Namespace.NAMESPACES;
	    Ember.lookup[this.toString()] = undefined;
	    namespaces.splice(indexOf.call(namespaces, this), 1);
	    this._super();
	  }
	});
	
	Ember.Namespace.NAMESPACES = [Ember];
	Ember.Namespace.PROCESSED = false;
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	/**
	  Defines a namespace that will contain an executable application.  This is
	  very similar to a normal namespace except that it is expected to include at
	  least a 'ready' function which can be run to initialize the application.
	
	  Currently Ember.Application is very similar to Ember.Namespace.  However, this
	  class may be augmented by additional frameworks so it is important to use
	  this instance when building new applications.
	
	  # Example Usage
	
	      MyApp = Ember.Application.create({
	        VERSION: '1.0.0',
	        store: Ember.Store.create().from(Ember.fixtures)
	      });
	
	      MyApp.ready = function() {
	        //..init code goes here...
	      }
	
	  @class Application
	  @namespace Ember
	  @extends Ember.Namespace
	*/
	Ember.Application = Ember.Namespace.extend();
	
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	
	var get = Ember.get, set = Ember.set;
	
	/**
	  An ArrayProxy wraps any other object that implements Ember.Array and/or
	  Ember.MutableArray, forwarding all requests. This makes it very useful for
	  a number of binding use cases or other cases where being able to swap
	  out the underlying array is useful.
	
	  A simple example of usage:
	
	      var pets = ['dog', 'cat', 'fish'];
	      var ap = Ember.ArrayProxy.create({ content: Ember.A(pets) });
	      ap.get('firstObject'); // => 'dog'
	      ap.set('content', ['amoeba', 'paramecium']);
	      ap.get('firstObject'); // => 'amoeba'
	
	  This class can also be useful as a layer to transform the contents of
	  an array, as they are accessed. This can be done by overriding
	  `objectAtContent`:
	
	      var pets = ['dog', 'cat', 'fish'];
	      var ap = Ember.ArrayProxy.create({
	          content: Ember.A(pets),
	          objectAtContent: function(idx) {
	              return this.get('content').objectAt(idx).toUpperCase();
	          }
	      });
	      ap.get('firstObject'); // => 'DOG'
	
	
	  @class ArrayProxy
	  @namespace Ember
	  @extends Ember.Object
	  @uses Ember.MutableArray
	*/
	Ember.ArrayProxy = Ember.Object.extend(Ember.MutableArray,
	/** @scope Ember.ArrayProxy.prototype */ {
	
	  /**
	    The content array.  Must be an object that implements Ember.Array and/or
	    Ember.MutableArray.
	
	    @property content
	    @type Ember.Array
	  */
	  content: null,
	
	  /**
	   The array that the proxy pretends to be. In the default `ArrayProxy`
	   implementation, this and `content` are the same. Subclasses of `ArrayProxy`
	   can override this property to provide things like sorting and filtering.
	   
	   @property arrangedContent
	  */
	  arrangedContent: Ember.computed('content', function() {
	    return get(this, 'content');
	  }),
	
	  /**
	    Should actually retrieve the object at the specified index from the
	    content. You can override this method in subclasses to transform the
	    content item to something new.
	
	    This method will only be called if content is non-null.
	
	    @method objectAtContent
	    @param {Number} idx The index to retrieve.
	    @return {Object} the value or undefined if none found
	  */
	  objectAtContent: function(idx) {
	    return get(this, 'arrangedContent').objectAt(idx);
	  },
	
	  /**
	    Should actually replace the specified objects on the content array.
	    You can override this method in subclasses to transform the content item
	    into something new.
	
	    This method will only be called if content is non-null.
	
	    @method replaceContent
	    @param {Number} idx The starting index
	    @param {Number} amt The number of items to remove from the content.
	    @param {Array} objects Optional array of objects to insert or null if no objects.
	    @return {void}
	  */
	  replaceContent: function(idx, amt, objects) {
	    get(this, 'arrangedContent').replace(idx, amt, objects);
	  },
	
	  /**
	    @private
	
	    Invoked when the content property is about to change. Notifies observers that the
	    entire array content will change.
	
	    @method _contentWillChange
	  */
	  _contentWillChange: Ember.beforeObserver(function() {
	    this._teardownContent();
	  }, 'content'),
	
	  _teardownContent: function() {
	    var content = get(this, 'content');
	
	    if (content) {
	      content.removeArrayObserver(this, {
	        willChange: 'contentArrayWillChange',
	        didChange: 'contentArrayDidChange'
	      });
	    }
	  },
	
	  contentArrayWillChange: Ember.K,
	  contentArrayDidChange: Ember.K,
	
	  /**
	    @private
	
	    Invoked when the content property changes.  Notifies observers that the
	    entire array content has changed.
	
	    @method _contentDidChange
	  */
	  _contentDidChange: Ember.observer(function() {
	    var content = get(this, 'content');
	
	    Ember.assert("Can't set ArrayProxy's content to itself", content !== this);
	
	    this._setupContent();
	  }, 'content'),
	
	  _setupContent: function() {
	    var content = get(this, 'content');
	
	    if (content) {
	      content.addArrayObserver(this, {
	        willChange: 'contentArrayWillChange',
	        didChange: 'contentArrayDidChange'
	      });
	    }
	  },
	
	  _arrangedContentWillChange: Ember.beforeObserver(function() {
	    var arrangedContent = get(this, 'arrangedContent'),
	        len = arrangedContent ? get(arrangedContent, 'length') : 0;
	
	    this.arrangedContentArrayWillChange(this, 0, len, undefined);
	    this.arrangedContentWillChange(this);
	
	    this._teardownArrangedContent(arrangedContent);
	  }, 'arrangedContent'),
	
	  _arrangedContentDidChange: Ember.observer(function() {
	    var arrangedContent = get(this, 'arrangedContent'),
	        len = arrangedContent ? get(arrangedContent, 'length') : 0;
	
	    Ember.assert("Can't set ArrayProxy's content to itself", arrangedContent !== this);
	
	    this._setupArrangedContent();
	
	    this.arrangedContentDidChange(this);
	    this.arrangedContentArrayDidChange(this, 0, undefined, len);
	  }, 'arrangedContent'),
	
	  _setupArrangedContent: function() {
	    var arrangedContent = get(this, 'arrangedContent');
	
	    if (arrangedContent) {
	      arrangedContent.addArrayObserver(this, {
	        willChange: 'arrangedContentArrayWillChange',
	        didChange: 'arrangedContentArrayDidChange'
	      });
	    }
	  },
	
	  _teardownArrangedContent: function() {
	    var arrangedContent = get(this, 'arrangedContent');
	
	    if (arrangedContent) {
	      arrangedContent.removeArrayObserver(this, {
	        willChange: 'arrangedContentArrayWillChange',
	        didChange: 'arrangedContentArrayDidChange'
	      });
	    }
	  },
	
	  arrangedContentWillChange: Ember.K,
	  arrangedContentDidChange: Ember.K,
	
	  objectAt: function(idx) {
	    return get(this, 'content') && this.objectAtContent(idx);
	  },
	
	  length: Ember.computed(function() {
	    var arrangedContent = get(this, 'arrangedContent');
	    return arrangedContent ? get(arrangedContent, 'length') : 0;
	    // No dependencies since Enumerable notifies length of change
	  }).property(),
	
	  replace: function(idx, amt, objects) {
	    Ember.assert('The content property of '+ this.constructor + ' should be set before modifying it', this.get('content'));
	    if (get(this, 'content')) this.replaceContent(idx, amt, objects);
	    return this;
	  },
	
	  arrangedContentArrayWillChange: function(item, idx, removedCnt, addedCnt) {
	    this.arrayContentWillChange(idx, removedCnt, addedCnt);
	  },
	
	  arrangedContentArrayDidChange: function(item, idx, removedCnt, addedCnt) {
	    this.arrayContentDidChange(idx, removedCnt, addedCnt);
	  },
	
	  init: function() {
	    this._super();
	    this._setupContent();
	    this._setupArrangedContent();
	  },
	
	  willDestroy: function() {
	    this._teardownArrangedContent();
	    this._teardownContent();
	  }
	});
	
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	var get = Ember.get,
	    set = Ember.set,
	    fmt = Ember.String.fmt,
	    addBeforeObserver = Ember.addBeforeObserver,
	    addObserver = Ember.addObserver,
	    removeBeforeObserver = Ember.removeBeforeObserver,
	    removeObserver = Ember.removeObserver,
	    propertyWillChange = Ember.propertyWillChange,
	    propertyDidChange = Ember.propertyDidChange;
	
	function contentPropertyWillChange(content, contentKey) {
	  var key = contentKey.slice(8); // remove "content."
	  if (key in this) { return; }  // if shadowed in proxy
	  propertyWillChange(this, key);
	}
	
	function contentPropertyDidChange(content, contentKey) {
	  var key = contentKey.slice(8); // remove "content."
	  if (key in this) { return; } // if shadowed in proxy
	  propertyDidChange(this, key);
	}
	
	/**
	  `Ember.ObjectProxy` forwards all properties not defined by the proxy itself
	  to a proxied `content` object.
	
	      object = Ember.Object.create({
	        name: 'Foo'
	      });
	      proxy = Ember.ObjectProxy.create({
	        content: object
	      });
	
	      // Access and change existing properties
	      proxy.get('name') // => 'Foo'
	      proxy.set('name', 'Bar');
	      object.get('name') // => 'Bar'
	
	      // Create new 'description' property on `object`
	      proxy.set('description', 'Foo is a whizboo baz');
	      object.get('description') // => 'Foo is a whizboo baz'
	
	  While `content` is unset, setting a property to be delegated will throw an Error.
	
	      proxy = Ember.ObjectProxy.create({
	        content: null,
	        flag: null
	      });
	      proxy.set('flag', true);
	      proxy.get('flag'); // => true
	      proxy.get('foo'); // => undefined
	      proxy.set('foo', 'data'); // throws Error
	
	  Delegated properties can be bound to and will change when content is updated.
	
	  Computed properties on the proxy itself can depend on delegated properties.
	
	      ProxyWithComputedProperty = Ember.ObjectProxy.extend({
	        fullName: function () {
	          var firstName = this.get('firstName'),
	              lastName = this.get('lastName');
	          if (firstName && lastName) {
	            return firstName + ' ' + lastName;
	          }
	          return firstName || lastName;
	        }.property('firstName', 'lastName')
	      });
	      proxy = ProxyWithComputedProperty.create();
	      proxy.get('fullName'); => undefined
	      proxy.set('content', {
	        firstName: 'Tom', lastName: 'Dale'
	      }); // triggers property change for fullName on proxy
	      proxy.get('fullName'); => 'Tom Dale'
	
	  @class ObjectProxy
	  @namespace Ember
	  @extends Ember.Object
	*/
	Ember.ObjectProxy = Ember.Object.extend(
	/** @scope Ember.ObjectProxy.prototype */ {
	  /**
	    The object whose properties will be forwarded.
	
	    @property content
	    @type Ember.Object
	    @default null
	  */
	  content: null,
	  _contentDidChange: Ember.observer(function() {
	    Ember.assert("Can't set ObjectProxy's content to itself", this.get('content') !== this);
	  }, 'content'),
	
	  willWatchProperty: function (key) {
	    var contentKey = 'content.' + key;
	    addBeforeObserver(this, contentKey, null, contentPropertyWillChange);
	    addObserver(this, contentKey, null, contentPropertyDidChange);
	  },
	
	  didUnwatchProperty: function (key) {
	    var contentKey = 'content.' + key;
	    removeBeforeObserver(this, contentKey, null, contentPropertyWillChange);
	    removeObserver(this, contentKey, null, contentPropertyDidChange);
	  },
	
	  unknownProperty: function (key) {
	    var content = get(this, 'content');
	    if (content) {
	      return get(content, key);
	    }
	  },
	
	  setUnknownProperty: function (key, value) {
	    var content = get(this, 'content');
	    Ember.assert(fmt("Cannot delegate set('%@', %@) to the 'content' property of object proxy %@: its 'content' is undefined.", [key, value, this]), content);
	    return set(content, key, value);
	  }
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	
	var set = Ember.set, get = Ember.get, guidFor = Ember.guidFor;
	var forEach = Ember.EnumerableUtils.forEach;
	
	var EachArray = Ember.Object.extend(Ember.Array, {
	
	  init: function(content, keyName, owner) {
	    this._super();
	    this._keyName = keyName;
	    this._owner   = owner;
	    this._content = content;
	  },
	
	  objectAt: function(idx) {
	    var item = this._content.objectAt(idx);
	    return item && get(item, this._keyName);
	  },
	
	  length: Ember.computed(function() {
	    var content = this._content;
	    return content ? get(content, 'length') : 0;
	  }).property()
	
	});
	
	var IS_OBSERVER = /^.+:(before|change)$/;
	
	function addObserverForContentKey(content, keyName, proxy, idx, loc) {
	  var objects = proxy._objects, guid;
	  if (!objects) objects = proxy._objects = {};
	
	  while(--loc>=idx) {
	    var item = content.objectAt(loc);
	    if (item) {
	      Ember.addBeforeObserver(item, keyName, proxy, 'contentKeyWillChange');
	      Ember.addObserver(item, keyName, proxy, 'contentKeyDidChange');
	
	      // keep track of the indicies each item was found at so we can map
	      // it back when the obj changes.
	      guid = guidFor(item);
	      if (!objects[guid]) objects[guid] = [];
	      objects[guid].push(loc);
	    }
	  }
	}
	
	function removeObserverForContentKey(content, keyName, proxy, idx, loc) {
	  var objects = proxy._objects;
	  if (!objects) objects = proxy._objects = {};
	  var indicies, guid;
	
	  while(--loc>=idx) {
	    var item = content.objectAt(loc);
	    if (item) {
	      Ember.removeBeforeObserver(item, keyName, proxy, 'contentKeyWillChange');
	      Ember.removeObserver(item, keyName, proxy, 'contentKeyDidChange');
	
	      guid = guidFor(item);
	      indicies = objects[guid];
	      indicies[indicies.indexOf(loc)] = null;
	    }
	  }
	}
	
	/**
	  This is the object instance returned when you get the @each property on an
	  array.  It uses the unknownProperty handler to automatically create
	  EachArray instances for property names.
	
	  @private
	  @class EachProxy
	  @namespace Ember
	  @extends Ember.Object
	*/
	Ember.EachProxy = Ember.Object.extend({
	
	  init: function(content) {
	    this._super();
	    this._content = content;
	    content.addArrayObserver(this);
	
	    // in case someone is already observing some keys make sure they are
	    // added
	    forEach(Ember.watchedEvents(this), function(eventName) {
	      this.didAddListener(eventName);
	    }, this);
	  },
	
	  /**
	    You can directly access mapped properties by simply requesting them.
	    The unknownProperty handler will generate an EachArray of each item.
	
	    @method unknownProperty
	    @param keyName {String}
	    @param value {anything}
	  */
	  unknownProperty: function(keyName, value) {
	    var ret;
	    ret = new EachArray(this._content, keyName, this);
	    Ember.defineProperty(this, keyName, null, ret);
	    this.beginObservingContentKey(keyName);
	    return ret;
	  },
	
	  // ..........................................................
	  // ARRAY CHANGES
	  // Invokes whenever the content array itself changes.
	
	  arrayWillChange: function(content, idx, removedCnt, addedCnt) {
	    var keys = this._keys, key, array, lim;
	
	    lim = removedCnt>0 ? idx+removedCnt : -1;
	    Ember.beginPropertyChanges(this);
	
	    for(key in keys) {
	      if (!keys.hasOwnProperty(key)) { continue; }
	
	      if (lim>0) removeObserverForContentKey(content, key, this, idx, lim);
	
	      Ember.propertyWillChange(this, key);
	    }
	
	    Ember.propertyWillChange(this._content, '@each');
	    Ember.endPropertyChanges(this);
	  },
	
	  arrayDidChange: function(content, idx, removedCnt, addedCnt) {
	    var keys = this._keys, key, array, lim;
	
	    lim = addedCnt>0 ? idx+addedCnt : -1;
	    Ember.beginPropertyChanges(this);
	
	    for(key in keys) {
	      if (!keys.hasOwnProperty(key)) { continue; }
	
	      if (lim>0) addObserverForContentKey(content, key, this, idx, lim);
	
	      Ember.propertyDidChange(this, key);
	    }
	
	    Ember.propertyDidChange(this._content, '@each');
	    Ember.endPropertyChanges(this);
	  },
	
	  // ..........................................................
	  // LISTEN FOR NEW OBSERVERS AND OTHER EVENT LISTENERS
	  // Start monitoring keys based on who is listening...
	
	  didAddListener: function(eventName) {
	    if (IS_OBSERVER.test(eventName)) {
	      this.beginObservingContentKey(eventName.slice(0, -7));
	    }
	  },
	
	  didRemoveListener: function(eventName) {
	    if (IS_OBSERVER.test(eventName)) {
	      this.stopObservingContentKey(eventName.slice(0, -7));
	    }
	  },
	
	  // ..........................................................
	  // CONTENT KEY OBSERVING
	  // Actual watch keys on the source content.
	
	  beginObservingContentKey: function(keyName) {
	    var keys = this._keys;
	    if (!keys) keys = this._keys = {};
	    if (!keys[keyName]) {
	      keys[keyName] = 1;
	      var content = this._content,
	          len = get(content, 'length');
	      addObserverForContentKey(content, keyName, this, 0, len);
	    } else {
	      keys[keyName]++;
	    }
	  },
	
	  stopObservingContentKey: function(keyName) {
	    var keys = this._keys;
	    if (keys && (keys[keyName]>0) && (--keys[keyName]<=0)) {
	      var content = this._content,
	          len     = get(content, 'length');
	      removeObserverForContentKey(content, keyName, this, 0, len);
	    }
	  },
	
	  contentKeyWillChange: function(obj, keyName) {
	    Ember.propertyWillChange(this, keyName);
	  },
	
	  contentKeyDidChange: function(obj, keyName) {
	    Ember.propertyDidChange(this, keyName);
	  }
	
	});
	
	
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	
	var get = Ember.get, set = Ember.set;
	
	// Add Ember.Array to Array.prototype.  Remove methods with native
	// implementations and supply some more optimized versions of generic methods
	// because they are so common.
	var NativeArray = Ember.Mixin.create(Ember.MutableArray, Ember.Observable, Ember.Copyable, {
	
	  // because length is a built-in property we need to know to just get the
	  // original property.
	  get: function(key) {
	    if (key==='length') return this.length;
	    else if ('number' === typeof key) return this[key];
	    else return this._super(key);
	  },
	
	  objectAt: function(idx) {
	    return this[idx];
	  },
	
	  // primitive for array support.
	  replace: function(idx, amt, objects) {
	
	    if (this.isFrozen) throw Ember.FROZEN_ERROR ;
	
	    // if we replaced exactly the same number of items, then pass only the
	    // replaced range.  Otherwise, pass the full remaining array length
	    // since everything has shifted
	    var len = objects ? get(objects, 'length') : 0;
	    this.arrayContentWillChange(idx, amt, len);
	
	    if (!objects || objects.length === 0) {
	      this.splice(idx, amt) ;
	    } else {
	      var args = [idx, amt].concat(objects) ;
	      this.splice.apply(this,args) ;
	    }
	
	    this.arrayContentDidChange(idx, amt, len);
	    return this ;
	  },
	
	  // If you ask for an unknown property, then try to collect the value
	  // from member items.
	  unknownProperty: function(key, value) {
	    var ret;// = this.reducedProperty(key, value) ;
	    if ((value !== undefined) && ret === undefined) {
	      ret = this[key] = value;
	    }
	    return ret ;
	  },
	
	  // If browser did not implement indexOf natively, then override with
	  // specialized version
	  indexOf: function(object, startAt) {
	    var idx, len = this.length;
	
	    if (startAt === undefined) startAt = 0;
	    else startAt = (startAt < 0) ? Math.ceil(startAt) : Math.floor(startAt);
	    if (startAt < 0) startAt += len;
	
	    for(idx=startAt;idx<len;idx++) {
	      if (this[idx] === object) return idx ;
	    }
	    return -1;
	  },
	
	  lastIndexOf: function(object, startAt) {
	    var idx, len = this.length;
	
	    if (startAt === undefined) startAt = len-1;
	    else startAt = (startAt < 0) ? Math.ceil(startAt) : Math.floor(startAt);
	    if (startAt < 0) startAt += len;
	
	    for(idx=startAt;idx>=0;idx--) {
	      if (this[idx] === object) return idx ;
	    }
	    return -1;
	  },
	
	  copy: function() {
	    return this.slice();
	  }
	});
	
	// Remove any methods implemented natively so we don't override them
	var ignore = ['length'];
	Ember.EnumerableUtils.forEach(NativeArray.keys(), function(methodName) {
	  if (Array.prototype[methodName]) ignore.push(methodName);
	});
	
	if (ignore.length>0) {
	  NativeArray = NativeArray.without.apply(NativeArray, ignore);
	}
	
	/**
	  The NativeArray mixin contains the properties needed to to make the native
	  Array support Ember.MutableArray and all of its dependent APIs.  Unless you
	  have Ember.EXTEND_PROTOTYPES or Ember.EXTEND_PROTOTYPES.Array set to false, this
	  will be applied automatically. Otherwise you can apply the mixin at anytime by
	  calling `Ember.NativeArray.activate`.
	
	  @class NativeArray
	  @namespace Ember
	  @extends Ember.Mixin
	  @uses Ember.MutableArray
	  @uses Ember.MutableEnumerable
	  @uses Ember.Copyable
	  @uses Ember.Freezable
	*/
	Ember.NativeArray = NativeArray;
	
	/**
	  Creates an Ember.NativeArray from an Array like object.
	  Does not modify the original object.
	
	  @method A
	  @for Ember
	  @return {Ember.NativeArray}
	*/
	Ember.A = function(arr){
	  if (arr === undefined) { arr = []; }
	  return Ember.NativeArray.apply(arr);
	};
	
	/**
	  Activates the mixin on the Array.prototype if not already applied.  Calling
	  this method more than once is safe.
	
	  @method activate
	  @for Ember.NativeArray
	  @static
	  @return {void}
	*/
	Ember.NativeArray.activate = function() {
	  NativeArray.apply(Array.prototype);
	
	  Ember.A = function(arr) { return arr || []; };
	};
	
	if (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.Array) {
	  Ember.NativeArray.activate();
	}
	
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	var get = Ember.get, set = Ember.set;
	
	Ember._PromiseChain = Ember.Object.extend({
	  promises: null,
	  failureCallback: Ember.K,
	  successCallback: Ember.K,
	  abortCallback: Ember.K,
	  promiseSuccessCallback: Ember.K,
	
	  runNextPromise: function() {
	    if (get(this, 'isDestroyed')) { return; }
	
	    var item = get(this, 'promises').shiftObject();
	    if (item) {
	      var promise = get(item, 'promise') || item;
	      Ember.assert("Cannot find promise to invoke", Ember.canInvoke(promise, 'then'));
	
	      var self = this;
	
	      var successCallback = function() {
	        self.promiseSuccessCallback.call(this, item, arguments);
	        self.runNextPromise();
	      };
	
	      var failureCallback = get(self, 'failureCallback');
	
	      promise.then(successCallback, failureCallback);
	     } else {
	      this.successCallback();
	    }
	  },
	
	  start: function() {
	    this.runNextPromise();
	    return this;
	  },
	
	  abort: function() {
	    this.abortCallback();
	    this.destroy();
	  },
	
	  init: function() {
	    set(this, 'promises', Ember.A(get(this, 'promises')));
	    this._super();
	  }
	});
	
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	var loadHooks = {};
	var loaded = {};
	
	/**
	@method onLoad
	@for Ember
	@param name {String} name of hook
	@param callback {Function} callback to be called
	*/
	Ember.onLoad = function(name, callback) {
	  var object;
	
	  loadHooks[name] = loadHooks[name] || Ember.A();
	  loadHooks[name].pushObject(callback);
	
	  if (object = loaded[name]) {
	    callback(object);
	  }
	};
	
	/**
	@method runLoadHooks
	@for Ember
	@param name {String} name of hook
	@param object {Object} object to pass to callbacks
	*/
	Ember.runLoadHooks = function(name, object) {
	  var hooks;
	
	  loaded[name] = object;
	
	  if (hooks = loadHooks[name]) {
	    loadHooks[name].forEach(function(callback) {
	      callback(object);
	    });
	  }
	};
	
	})();
	
	
	
	(function() {
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	/**
	  Ember.ControllerMixin provides a standard interface for all classes
	  that compose Ember's controller layer: Ember.Controller, Ember.ArrayController,
	  and Ember.ObjectController.
	
	  Within an Ember.Router-managed application single shared instaces of every
	  Controller object in your application's namespace will be added to the
	  application's Ember.Router instance. See `Ember.Application#initialize`
	  for additional information.
	
	  ## Views
	  By default a controller instance will be the rendering context
	  for its associated Ember.View. This connection is made during calls to
	  `Ember.ControllerMixin#connectOutlet`.
	
	  Within the view's template, the Ember.View instance can be accessed
	  through the controller with `{{view}}`.
	
	  ## Target Forwarding
	  By default a controller will target your application's Ember.Router instance.
	  Calls to `{{action}}` within the template of a controller's view are forwarded
	  to the router. See `Ember.Handlebars.helpers.action` for additional information.
	
	  @class ControllerMixin
	  @namespace Ember
	  @extends Ember.Mixin
	*/
	Ember.ControllerMixin = Ember.Mixin.create({
	  /**
	    The object to which events from the view should be sent.
	
	    For example, when a Handlebars template uses the `{{action}}` helper,
	    it will attempt to send the event to the view's controller's `target`.
	
	    By default, a controller's `target` is set to the router after it is
	    instantiated by `Ember.Application#initialize`.
	
	    @property target
	    @default null
	  */
	  target: null,
	
	  store: null
	});
	
	/**
	  @class Controller
	  @namespace Ember
	  @extends Ember.Object
	  @uses Ember.ControllerMixin
	*/
	Ember.Controller = Ember.Object.extend(Ember.ControllerMixin);
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	var get = Ember.get, set = Ember.set, forEach = Ember.EnumerableUtils.forEach;
	
	/**
	  Ember.SortableMixin provides a standard interface for array proxies
	  to specify a sort order and maintain this sorting when objects are added,
	  removed, or updated without changing the implicit order of their underlying
	  content array:
	
	      songs = [
	        {trackNumber: 4, title: 'Ob-La-Di, Ob-La-Da'},
	        {trackNumber: 2, title: 'Back in the U.S.S.R.'},
	        {trackNumber: 3, title: 'Glass Onion'},
	      ];
	
	      songsController = Ember.ArrayController.create({
	        content: songs,
	        sortProperties: ['trackNumber']
	      });
	
	      songsController.get('firstObject'); // {trackNumber: 2, title: 'Back in the U.S.S.R.'}
	
	      songsController.addObject({trackNumber: 1, title: 'Dear Prudence'});
	      songsController.get('firstObject'); // {trackNumber: 1, title: 'Dear Prudence'}
	
	
	  @class SortableMixin
	  @namespace Ember
	  @extends Ember.Mixin
	  @uses Ember.MutableEnumerable
	*/
	Ember.SortableMixin = Ember.Mixin.create(Ember.MutableEnumerable, {
	  sortProperties: null,
	  sortAscending: true,
	
	  addObject: function(obj) {
	    var content = get(this, 'content');
	    content.pushObject(obj);
	  },
	
	  removeObject: function(obj) {
	    var content = get(this, 'content');
	    content.removeObject(obj);
	  },
	
	  orderBy: function(item1, item2) {
	    var result = 0,
	        sortProperties = get(this, 'sortProperties'),
	        sortAscending = get(this, 'sortAscending');
	
	    Ember.assert("you need to define `sortProperties`", !!sortProperties);
	
	    forEach(sortProperties, function(propertyName) {
	      if (result === 0) {
	        result = Ember.compare(get(item1, propertyName), get(item2, propertyName));
	        if ((result !== 0) && !sortAscending) {
	          result = (-1) * result;
	        }
	      }
	    });
	
	    return result;
	  },
	
	  destroy: function() {
	    var content = get(this, 'content'),
	        sortProperties = get(this, 'sortProperties');
	
	    if (content && sortProperties) {
	      forEach(content, function(item) {
	        forEach(sortProperties, function(sortProperty) {
	          Ember.removeObserver(item, sortProperty, this, 'contentItemSortPropertyDidChange');
	        }, this);
	      }, this);
	    }
	
	    return this._super();
	  },
	
	  isSorted: Ember.computed('sortProperties', function() {
	    return !!get(this, 'sortProperties');
	  }),
	
	  arrangedContent: Ember.computed('content', 'sortProperties.@each', function(key, value) {
	    var content = get(this, 'content'),
	        isSorted = get(this, 'isSorted'),
	        sortProperties = get(this, 'sortProperties'),
	        self = this;
	
	    if (content && isSorted) {
	      content = content.slice();
	      content.sort(function(item1, item2) {
	        return self.orderBy(item1, item2);
	      });
	      forEach(content, function(item) {
	        forEach(sortProperties, function(sortProperty) {
	          Ember.addObserver(item, sortProperty, this, 'contentItemSortPropertyDidChange');
	        }, this);
	      }, this);
	      return Ember.A(content);
	    }
	
	    return content;
	  }),
	
	  _contentWillChange: Ember.beforeObserver(function() {
	    var content = get(this, 'content'),
	        sortProperties = get(this, 'sortProperties');
	
	    if (content && sortProperties) {
	      forEach(content, function(item) {
	        forEach(sortProperties, function(sortProperty) {
	          Ember.removeObserver(item, sortProperty, this, 'contentItemSortPropertyDidChange');
	        }, this);
	      }, this);
	    }
	
	    this._super();
	  }, 'content'),
	
	  sortAscendingWillChange: Ember.beforeObserver(function() {
	    this._lastSortAscending = get(this, 'sortAscending');
	  }, 'sortAscending'),
	
	  sortAscendingDidChange: Ember.observer(function() {
	    if (get(this, 'sortAscending') !== this._lastSortAscending) {
	      var arrangedContent = get(this, 'arrangedContent');
	      arrangedContent.reverseObjects();
	    }
	  }, 'sortAscending'),
	
	  contentArrayWillChange: function(array, idx, removedCount, addedCount) {
	    var isSorted = get(this, 'isSorted');
	
	    if (isSorted) {
	      var arrangedContent = get(this, 'arrangedContent');
	      var removedObjects = array.slice(idx, idx+removedCount);
	      var sortProperties = get(this, 'sortProperties');
	
	      forEach(removedObjects, function(item) {
	        arrangedContent.removeObject(item);
	
	        forEach(sortProperties, function(sortProperty) {
	          Ember.removeObserver(item, sortProperty, this, 'contentItemSortPropertyDidChange');
	        }, this);
	      });
	    }
	
	    return this._super(array, idx, removedCount, addedCount);
	  },
	
	  contentArrayDidChange: function(array, idx, removedCount, addedCount) {
	    var isSorted = get(this, 'isSorted'),
	        sortProperties = get(this, 'sortProperties');
	
	    if (isSorted) {
	      var addedObjects = array.slice(idx, idx+addedCount);
	      var arrangedContent = get(this, 'arrangedContent');
	
	      forEach(addedObjects, function(item) {
	        this.insertItemSorted(item);
	
	        forEach(sortProperties, function(sortProperty) {
	          Ember.addObserver(item, sortProperty, this, 'contentItemSortPropertyDidChange');
	        }, this);
	      }, this);
	    }
	
	    return this._super(array, idx, removedCount, addedCount);
	  },
	
	  insertItemSorted: function(item) {
	    var arrangedContent = get(this, 'arrangedContent');
	    var length = get(arrangedContent, 'length');
	
	    var idx = this._binarySearch(item, 0, length);
	    arrangedContent.insertAt(idx, item);
	  },
	
	  contentItemSortPropertyDidChange: function(item) {
	    var arrangedContent = get(this, 'arrangedContent'),
	        oldIndex = arrangedContent.indexOf(item),
	        leftItem = arrangedContent.objectAt(oldIndex - 1),
	        rightItem = arrangedContent.objectAt(oldIndex + 1),
	        leftResult = leftItem && this.orderBy(item, leftItem),
	        rightResult = rightItem && this.orderBy(item, rightItem);
	
	    if (leftResult < 0 || rightResult > 0) {
	      arrangedContent.removeObject(item);
	      this.insertItemSorted(item);
	    }
	  },
	
	  _binarySearch: function(item, low, high) {
	    var mid, midItem, res, arrangedContent;
	
	    if (low === high) {
	      return low;
	    }
	
	    arrangedContent = get(this, 'arrangedContent');
	
	    mid = low + Math.floor((high - low) / 2);
	    midItem = arrangedContent.objectAt(mid);
	
	    res = this.orderBy(midItem, item);
	
	    if (res < 0) {
	      return this._binarySearch(item, mid+1, high);
	    } else if (res > 0) {
	      return this._binarySearch(item, low, mid);
	    }
	
	    return mid;
	  }
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	var get = Ember.get, set = Ember.set;
	
	/**
	  Ember.ArrayController provides a way for you to publish a collection of objects
	  so that you can easily bind to the collection from a Handlebars #each helper,
	  an Ember.CollectionView, or other controllers.
	
	  The advantage of using an ArrayController is that you only have to set up
	  your view bindings once; to change what's displayed, simply swap out the
	  `content` property on the controller.
	
	  For example, imagine you wanted to display a list of items fetched via an XHR
	  request. Create an Ember.ArrayController and set its `content` property:
	
	  ``` javascript
	  MyApp.listController = Ember.ArrayController.create();
	
	  $.get('people.json', function(data) {
	    MyApp.listController.set('content', data);
	  });
	  ```
	
	  Then, create a view that binds to your new controller:
	
	  ``` handlebars
	  {{#each MyApp.listController}}
	    {{firstName}} {{lastName}}
	  {{/each}}
	  ```
	
	  Although you are binding to the controller, the behavior of this controller
	  is to pass through any methods or properties to the underlying array. This
	  capability comes from `Ember.ArrayProxy`, which this class inherits from.
	
	  Note: As of this writing, `ArrayController` does not add any functionality
	  to its superclass, `ArrayProxy`. The Ember team plans to add additional
	  controller-specific functionality in the future, e.g. single or multiple
	  selection support. If you are creating something that is conceptually a
	  controller, use this class.
	
	  @class ArrayController
	  @namespace Ember
	  @extends Ember.ArrayProxy
	  @uses Ember.SortableMixin
	  @uses Ember.ControllerMixin
	*/
	
	Ember.ArrayController = Ember.ArrayProxy.extend(Ember.ControllerMixin,
	  Ember.SortableMixin);
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-runtime
	*/
	
	/**
	  Ember.ObjectController is part of Ember's Controller layer. A single
	  shared instance of each Ember.ObjectController subclass in your application's
	  namespace will be created at application initialization and be stored on your
	  application's Ember.Router instance.
	
	  Ember.ObjectController derives its functionality from its superclass
	  Ember.ObjectProxy and the Ember.ControllerMixin mixin.
	
	  @class ObjectController
	  @namespace Ember
	  @extends Ember.ObjectProxy
	  @uses Ember.ControllerMixin
	**/
	Ember.ObjectController = Ember.ObjectProxy.extend(Ember.ControllerMixin);
	
	})();
	
	
	
	(function() {
	
	})();
	
	
	
	(function() {
	/**
	Ember Runtime
	
	@module ember
	@submodule ember-runtime
	@requires ember-metal
	*/
	
	})();
	


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	//
	// This file is automatically generated. any changes will be lost
	//
	
	__webpack_require__(11);
	var jQuery, $; jQuery = $ = __webpack_require__(12);
	__webpack_require__(2);
	Ember.imports.jQuery = Ember.imports.jQuery || jQuery;
	
	
	(function() {
	/**
	@module ember
	@submodule ember-views
	*/
	
	var jQuery = Ember.imports.jQuery;
	Ember.assert("Ember Views require jQuery 1.7 or 1.8", jQuery && (jQuery().jquery.match(/^1\.(7(?!$)(?!\.[01])|8)(\.\d+)?(pre|rc\d?)?/) || Ember.ENV.FORCE_JQUERY));
	
	/**
	  Alias for jQuery
	
	  @method $
	  @for Ember
	*/
	Ember.$ = jQuery;
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-views
	*/
	
	// http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html#dndevents
	var dragEvents = Ember.String.w('dragstart drag dragenter dragleave dragover drop dragend');
	
	// Copies the `dataTransfer` property from a browser event object onto the
	// jQuery event object for the specified events
	Ember.EnumerableUtils.forEach(dragEvents, function(eventName) {
	  Ember.$.event.fixHooks[eventName] = { props: ['dataTransfer'] };
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-views
	*/
	
	var get = Ember.get, set = Ember.set;
	var indexOf = Ember.ArrayPolyfills.indexOf;
	
	var ClassSet = function() {
	  this.seen = {};
	  this.list = [];
	};
	
	ClassSet.prototype = {
	  add: function(string) {
	    if (string in this.seen) { return; }
	    this.seen[string] = true;
	
	    this.list.push(string);
	  },
	
	  toDOM: function() {
	    return this.list.join(" ");
	  }
	};
	
	/**
	  Ember.RenderBuffer gathers information regarding the a view and generates the
	  final representation. Ember.RenderBuffer will generate HTML which can be pushed
	  to the DOM.
	
	  @class RenderBuffer
	  @namespace Ember
	  @constructor
	*/
	Ember.RenderBuffer = function(tagName) {
	  return new Ember._RenderBuffer(tagName);
	};
	
	Ember._RenderBuffer = function(tagName) {
	  this.elementTag = tagName;
	  this.childBuffers = [];
	};
	
	Ember._RenderBuffer.prototype =
	/** @scope Ember.RenderBuffer.prototype */ {
	
	  /**
	    Array of class-names which will be applied in the class="" attribute
	
	    You should not maintain this array yourself, rather, you should use
	    the addClass() method of Ember.RenderBuffer.
	
	    @property elementClasses
	    @type Array
	    @default []
	  */
	  elementClasses: null,
	
	  /**
	    The id in of the element, to be applied in the id="" attribute
	
	    You should not set this property yourself, rather, you should use
	    the id() method of Ember.RenderBuffer.
	
	    @property elementId
	    @type String
	    @default null
	  */
	  elementId: null,
	
	  /**
	    A hash keyed on the name of the attribute and whose value will be
	    applied to that attribute. For example, if you wanted to apply a
	    data-view="Foo.bar" property to an element, you would set the
	    elementAttributes hash to {'data-view':'Foo.bar'}
	
	    You should not maintain this hash yourself, rather, you should use
	    the attr() method of Ember.RenderBuffer.
	
	    @property elementAttributes
	    @type Hash
	    @default {}
	  */
	  elementAttributes: null,
	
	  /**
	    The tagname of the element an instance of Ember.RenderBuffer represents.
	
	    Usually, this gets set as the first parameter to Ember.RenderBuffer. For
	    example, if you wanted to create a `p` tag, then you would call
	
	      Ember.RenderBuffer('p')
	
	    @property elementTag
	    @type String
	    @default null
	  */
	  elementTag: null,
	
	  /**
	    A hash keyed on the name of the style attribute and whose value will
	    be applied to that attribute. For example, if you wanted to apply a
	    background-color:black;" style to an element, you would set the
	    elementStyle hash to {'background-color':'black'}
	
	    You should not maintain this hash yourself, rather, you should use
	    the style() method of Ember.RenderBuffer.
	
	    @property elementStyle
	    @type Hash
	    @default {}
	  */
	  elementStyle: null,
	
	  /**
	    Nested RenderBuffers will set this to their parent RenderBuffer
	    instance.
	
	    @property parentBuffer
	    @type Ember._RenderBuffer
	  */
	  parentBuffer: null,
	
	  /**
	    Adds a string of HTML to the RenderBuffer.
	
	    @method push
	    @param {String} string HTML to push into the buffer
	    @chainable
	  */
	  push: function(string) {
	    this.childBuffers.push(String(string));
	    return this;
	  },
	
	  /**
	    Adds a class to the buffer, which will be rendered to the class attribute.
	
	    @method addClass
	    @param {String} className Class name to add to the buffer
	    @chainable
	  */
	  addClass: function(className) {
	    // lazily create elementClasses
	    var elementClasses = this.elementClasses = (this.elementClasses || new ClassSet());
	    this.elementClasses.add(className);
	
	    return this;
	  },
	
	  /**
	    Sets the elementID to be used for the element.
	
	    @method id
	    @param {String} id
	    @chainable
	  */
	  id: function(id) {
	    this.elementId = id;
	    return this;
	  },
	
	  // duck type attribute functionality like jQuery so a render buffer
	  // can be used like a jQuery object in attribute binding scenarios.
	
	  /**
	    Adds an attribute which will be rendered to the element.
	
	    @method attr
	    @param {String} name The name of the attribute
	    @param {String} value The value to add to the attribute
	    @chainable
	    @return {Ember.RenderBuffer|String} this or the current attribute value
	  */
	  attr: function(name, value) {
	    var attributes = this.elementAttributes = (this.elementAttributes || {});
	
	    if (arguments.length === 1) {
	      return attributes[name];
	    } else {
	      attributes[name] = value;
	    }
	
	    return this;
	  },
	
	  /**
	    Remove an attribute from the list of attributes to render.
	
	    @method removeAttr
	    @param {String} name The name of the attribute
	    @chainable
	  */
	  removeAttr: function(name) {
	    var attributes = this.elementAttributes;
	    if (attributes) { delete attributes[name]; }
	
	    return this;
	  },
	
	  /**
	    Adds a style to the style attribute which will be rendered to the element.
	
	    @method style
	    @param {String} name Name of the style
	    @param {String} value
	    @chainable
	  */
	  style: function(name, value) {
	    var style = this.elementStyle = (this.elementStyle || {});
	
	    this.elementStyle[name] = value;
	    return this;
	  },
	
	  /**
	    @private
	
	    Create a new child render buffer from a parent buffer. Optionally set
	    additional properties on the buffer. Optionally invoke a callback
	    with the newly created buffer.
	
	    This is a primitive method used by other public methods: `begin`,
	    `prepend`, `replaceWith`, `insertAfter`.
	
	    @method newBuffer
	    @param {String} tagName Tag name to use for the child buffer's element
	    @param {Ember._RenderBuffer} parent The parent render buffer that this
	      buffer should be appended to.
	    @param {Function} fn A callback to invoke with the newly created buffer.
	    @param {Object} other Additional properties to add to the newly created
	      buffer.
	  */
	  newBuffer: function(tagName, parent, fn, other) {
	    var buffer = new Ember._RenderBuffer(tagName);
	    buffer.parentBuffer = parent;
	
	    if (other) { Ember.$.extend(buffer, other); }
	    if (fn) { fn.call(this, buffer); }
	
	    return buffer;
	  },
	
	  /**
	    @private
	
	    Replace the current buffer with a new buffer. This is a primitive
	    used by `remove`, which passes `null` for `newBuffer`, and `replaceWith`,
	    which passes the new buffer it created.
	
	    @method replaceWithBuffer
	    @param {Ember._RenderBuffer} buffer The buffer to insert in place of
	      the existing buffer.
	  */
	  replaceWithBuffer: function(newBuffer) {
	    var parent = this.parentBuffer;
	    if (!parent) { return; }
	
	    var childBuffers = parent.childBuffers;
	
	    var index = indexOf.call(childBuffers, this);
	
	    if (newBuffer) {
	      childBuffers.splice(index, 1, newBuffer);
	    } else {
	      childBuffers.splice(index, 1);
	    }
	  },
	
	  /**
	    Creates a new Ember.RenderBuffer object with the provided tagName as
	    the element tag and with its parentBuffer property set to the current
	    Ember.RenderBuffer.
	
	    @method begin
	    @param {String} tagName Tag name to use for the child buffer's element
	    @return {Ember.RenderBuffer} A new RenderBuffer object
	  */
	  begin: function(tagName) {
	    return this.newBuffer(tagName, this, function(buffer) {
	      this.childBuffers.push(buffer);
	    });
	  },
	
	  /**
	    Prepend a new child buffer to the current render buffer.
	
	    @method prepend
	    @param {String} tagName Tag name to use for the child buffer's element
	  */
	  prepend: function(tagName) {
	    return this.newBuffer(tagName, this, function(buffer) {
	      this.childBuffers.splice(0, 0, buffer);
	    });
	  },
	
	  /**
	    Replace the current buffer with a new render buffer.
	
	    @method replaceWith
	    @param {String} tagName Tag name to use for the new buffer's element
	  */
	  replaceWith: function(tagName) {
	    var parentBuffer = this.parentBuffer;
	
	    return this.newBuffer(tagName, parentBuffer, function(buffer) {
	      this.replaceWithBuffer(buffer);
	    });
	  },
	
	  /**
	    Insert a new render buffer after the current render buffer.
	
	    @method insertAfter
	    @param {String} tagName Tag name to use for the new buffer's element
	  */
	  insertAfter: function(tagName) {
	    var parentBuffer = get(this, 'parentBuffer');
	
	    return this.newBuffer(tagName, parentBuffer, function(buffer) {
	      var siblings = parentBuffer.childBuffers;
	      var index = indexOf.call(siblings, this);
	      siblings.splice(index + 1, 0, buffer);
	    });
	  },
	
	  /**
	    Closes the current buffer and adds its content to the parentBuffer.
	
	    @method end
	    @return {Ember.RenderBuffer} The parentBuffer, if one exists. Otherwise, this
	  */
	  end: function() {
	    var parent = this.parentBuffer;
	    return parent || this;
	  },
	
	  remove: function() {
	    this.replaceWithBuffer(null);
	  },
	
	  /**
	    @method element
	    @return {DOMElement} The element corresponding to the generated HTML
	      of this buffer
	  */
	  element: function() {
	    return Ember.$(this.string())[0];
	  },
	
	  /**
	    Generates the HTML content for this buffer.
	
	    @method string
	    @return {String} The generated HTMl
	  */
	  string: function() {
	    var content = '', tag = this.elementTag, openTag;
	
	    if (tag) {
	      var id = this.elementId,
	          classes = this.elementClasses,
	          attrs = this.elementAttributes,
	          style = this.elementStyle,
	          styleBuffer = '', prop;
	
	      openTag = ["<" + tag];
	
	      if (id) { openTag.push('id="' + this._escapeAttribute(id) + '"'); }
	      if (classes) { openTag.push('class="' + this._escapeAttribute(classes.toDOM()) + '"'); }
	
	      if (style) {
	        for (prop in style) {
	          if (style.hasOwnProperty(prop)) {
	            styleBuffer += (prop + ':' + this._escapeAttribute(style[prop]) + ';');
	          }
	        }
	
	        openTag.push('style="' + styleBuffer + '"');
	      }
	
	      if (attrs) {
	        for (prop in attrs) {
	          if (attrs.hasOwnProperty(prop)) {
	            openTag.push(prop + '="' + this._escapeAttribute(attrs[prop]) + '"');
	          }
	        }
	      }
	
	      openTag = openTag.join(" ") + '>';
	    }
	
	    var childBuffers = this.childBuffers;
	
	    Ember.ArrayPolyfills.forEach.call(childBuffers, function(buffer) {
	      var stringy = typeof buffer === 'string';
	      content += (stringy ? buffer : buffer.string());
	    });
	
	    if (tag) {
	      return openTag + content + "</" + tag + ">";
	    } else {
	      return content;
	    }
	  },
	
	  _escapeAttribute: function(value) {
	    // Stolen shamelessly from Handlebars
	
	    var escape = {
	      "<": "&lt;",
	      ">": "&gt;",
	      '"': "&quot;",
	      "'": "&#x27;",
	      "`": "&#x60;"
	    };
	
	    var badChars = /&(?!\w+;)|[<>"'`]/g;
	    var possible = /[&<>"'`]/;
	
	    var escapeChar = function(chr) {
	      return escape[chr] || "&amp;";
	    };
	
	    var string = value.toString();
	
	    if(!possible.test(string)) { return string; }
	    return string.replace(badChars, escapeChar);
	  }
	
	};
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-views
	*/
	
	var get = Ember.get, set = Ember.set, fmt = Ember.String.fmt;
	
	/**
	  Ember.EventDispatcher handles delegating browser events to their corresponding
	  Ember.Views. For example, when you click on a view, Ember.EventDispatcher ensures
	  that that view's `mouseDown` method gets called.
	
	  @class EventDispatcher
	  @namespace Ember
	  @private
	  @extends Ember.Object
	*/
	Ember.EventDispatcher = Ember.Object.extend(
	/** @scope Ember.EventDispatcher.prototype */{
	
	  /**
	    @private
	
	    The root DOM element to which event listeners should be attached. Event
	    listeners will be attached to the document unless this is overridden.
	
	    Can be specified as a DOMElement or a selector string.
	
	    The default body is a string since this may be evaluated before document.body
	    exists in the DOM.
	
	    @property rootElement
	    @type DOMElement
	    @default 'body'
	  */
	  rootElement: 'body',
	
	  /**
	    @private
	
	    Sets up event listeners for standard browser events.
	
	    This will be called after the browser sends a DOMContentReady event. By
	    default, it will set up all of the listeners on the document body. If you
	    would like to register the listeners on a different element, set the event
	    dispatcher's `root` property.
	
	    @method setup
	    @param addedEvents {Hash}
	  */
	  setup: function(addedEvents) {
	    var event, events = {
	      touchstart  : 'touchStart',
	      touchmove   : 'touchMove',
	      touchend    : 'touchEnd',
	      touchcancel : 'touchCancel',
	      keydown     : 'keyDown',
	      keyup       : 'keyUp',
	      keypress    : 'keyPress',
	      mousedown   : 'mouseDown',
	      mouseup     : 'mouseUp',
	      contextmenu : 'contextMenu',
	      click       : 'click',
	      dblclick    : 'doubleClick',
	      mousemove   : 'mouseMove',
	      focusin     : 'focusIn',
	      focusout    : 'focusOut',
	      mouseenter  : 'mouseEnter',
	      mouseleave  : 'mouseLeave',
	      submit      : 'submit',
	      input       : 'input',
	      change      : 'change',
	      dragstart   : 'dragStart',
	      drag        : 'drag',
	      dragenter   : 'dragEnter',
	      dragleave   : 'dragLeave',
	      dragover    : 'dragOver',
	      drop        : 'drop',
	      dragend     : 'dragEnd'
	    };
	
	    Ember.$.extend(events, addedEvents || {});
	
	    var rootElement = Ember.$(get(this, 'rootElement'));
	
	    Ember.assert(fmt('You cannot use the same root element (%@) multiple times in an Ember.Application', [rootElement.selector || rootElement[0].tagName]), !rootElement.is('.ember-application'));
	    Ember.assert('You cannot make a new Ember.Application using a root element that is a descendent of an existing Ember.Application', !rootElement.closest('.ember-application').length);
	    Ember.assert('You cannot make a new Ember.Application using a root element that is an ancestor of an existing Ember.Application', !rootElement.find('.ember-application').length);
	
	    rootElement.addClass('ember-application');
	
	    Ember.assert('Unable to add "ember-application" class to rootElement. Make sure you set rootElement to the body or an element in the body.', rootElement.is('.ember-application'));
	
	    for (event in events) {
	      if (events.hasOwnProperty(event)) {
	        this.setupHandler(rootElement, event, events[event]);
	      }
	    }
	  },
	
	  /**
	    @private
	
	    Registers an event listener on the document. If the given event is
	    triggered, the provided event handler will be triggered on the target
	    view.
	
	    If the target view does not implement the event handler, or if the handler
	    returns false, the parent view will be called. The event will continue to
	    bubble to each successive parent view until it reaches the top.
	
	    For example, to have the `mouseDown` method called on the target view when
	    a `mousedown` event is received from the browser, do the following:
	
	        setupHandler('mousedown', 'mouseDown');
	
	    @method setupHandler
	    @param {Element} rootElement
	    @param {String} event the browser-originated event to listen to
	    @param {String} eventName the name of the method to call on the view
	  */
	  setupHandler: function(rootElement, event, eventName) {
	    var self = this;
	
	    rootElement.delegate('.ember-view', event + '.ember', function(evt, triggeringManager) {
	      return Ember.handleErrors(function() {
	        var view = Ember.View.views[this.id],
	            result = true, manager = null;
	
	        manager = self._findNearestEventManager(view,eventName);
	
	        if (manager && manager !== triggeringManager) {
	          result = self._dispatchEvent(manager, evt, eventName, view);
	        } else if (view) {
	          result = self._bubbleEvent(view,evt,eventName);
	        } else {
	          evt.stopPropagation();
	        }
	
	        return result;
	      }, this);
	    });
	
	    rootElement.delegate('[data-ember-action]', event + '.ember', function(evt) {
	      return Ember.handleErrors(function() {
	        var actionId = Ember.$(evt.currentTarget).attr('data-ember-action'),
	            action   = Ember.Handlebars.ActionHelper.registeredActions[actionId],
	            handler  = action.handler;
	
	        if (action.eventName === eventName) {
	          return handler(evt);
	        }
	      }, this);
	    });
	  },
	
	  _findNearestEventManager: function(view, eventName) {
	    var manager = null;
	
	    while (view) {
	      manager = get(view, 'eventManager');
	      if (manager && manager[eventName]) { break; }
	
	      view = get(view, 'parentView');
	    }
	
	    return manager;
	  },
	
	  _dispatchEvent: function(object, evt, eventName, view) {
	    var result = true;
	
	    var handler = object[eventName];
	    if (Ember.typeOf(handler) === 'function') {
	      result = handler.call(object, evt, view);
	      // Do not preventDefault in eventManagers.
	      evt.stopPropagation();
	    }
	    else {
	      result = this._bubbleEvent(view, evt, eventName);
	    }
	
	    return result;
	  },
	
	  _bubbleEvent: function(view, evt, eventName) {
	    return Ember.run(function() {
	      return view.handleEvent(eventName, evt);
	    });
	  },
	
	  destroy: function() {
	    var rootElement = get(this, 'rootElement');
	    Ember.$(rootElement).undelegate('.ember').removeClass('ember-application');
	    return this._super();
	  }
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-views
	*/
	
	// Add a new named queue for rendering views that happens
	// after bindings have synced.
	var queues = Ember.run.queues;
	queues.splice(Ember.$.inArray('actions', queues)+1, 0, 'render');
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-views
	*/
	
	var get = Ember.get, set = Ember.set;
	
	// Original class declaration and documentation in runtime/lib/controllers/controller.js
	// NOTE: It may be possible with YUIDoc to combine docs in two locations
	
	/**
	Additional methods for the ControllerMixin
	
	@class ControllerMixin
	@namespace Ember
	*/
	Ember.ControllerMixin.reopen({
	
	  target: null,
	  controllers: null,
	  namespace: null,
	  view: null,
	
	  /**
	    `connectOutlet` creates a new instance of a provided view
	    class, wires it up to its associated controller, and
	    assigns the new view to a property on the current controller.
	
	    The purpose of this method is to enable views that use
	    outlets to quickly assign new views for a given outlet.
	
	    For example, an application view's template may look like
	    this:
	
	    ``` handlebars
	    <h1>My Blog</h1>
	    {{outlet}}
	    ```
	
	    The view for this outlet is specified by assigning a
	    `view` property to the application's controller. The
	    following code will assign a new `App.PostsView` to
	    that outlet:
	
	    ``` javascript
	    applicationController.connectOutlet('posts');
	    ```
	
	    In general, you will also want to assign a controller
	    to the newly created view. By convention, a controller
	    named `postsController` will be assigned as the view's
	    controller.
	
	    In an application initialized using `app.initialize(router)`,
	    `connectOutlet` will look for `postsController` on the
	    router. The initialization process will automatically
	    create an instance of `App.PostsController` called
	    `postsController`, so you don't need to do anything
	    beyond `connectOutlet` to assign your view and wire it
	    up to its associated controller.
	
	    You can supply a `content` for the controller by supplying
	    a final argument after the view class:
	
	    ``` javascript
	    applicationController.connectOutlet('posts', App.Post.find());
	    ```
	
	    You can specify a particular outlet to use. For example, if your main
	    template looks like:
	
	    ``` handlebars
	    <h1>My Blog</h1>
	    {{outlet masterView}}
	    {{outlet detailView}}
	    ```
	
	    You can assign an `App.PostsView` to the masterView outlet:
	
	    ``` javascript
	    applicationController.connectOutlet({
	      outletName: 'masterView',
	      name: 'posts',
	      context: App.Post.find()
	    });
	    ```
	
	    You can write this as:
	
	    ``` javascript
	    applicationController.connectOutlet('masterView', 'posts', App.Post.find());
	    ```
	
	
	    @method connectOutlet
	    @param {String} outletName a name for the outlet to set
	    @param {String} name a view/controller pair name
	    @param {Object} context a context object to assign to the
	      controller's `content` property, if a controller can be
	      found (optional)
	  */
	  connectOutlet: function(name, context) {
	    // Normalize arguments. Supported arguments:
	    //
	    // name
	    // name, context
	    // outletName, name
	    // outletName, name, context
	    // options
	    //
	    // The options hash has the following keys:
	    //
	    //   name: the name of the controller and view
	    //     to use. If this is passed, the name
	    //     determines the view and controller.
	    //   outletName: the name of the outlet to
	    //     fill in. default: 'view'
	    //   viewClass: the class of the view to instantiate
	    //   controller: the controller instance to pass
	    //     to the view
	    //   context: an object that should become the
	    //     controller's `content` and thus the
	    //     template's context.
	
	    var outletName, viewClass, view, controller, options;
	
	    if (Ember.typeOf(context) === 'string') {
	      outletName = name;
	      name = context;
	      context = arguments[2];
	    }
	
	    if (arguments.length === 1) {
	      if (Ember.typeOf(name) === 'object') {
	        options = name;
	        outletName = options.outletName;
	        name = options.name;
	        viewClass = options.viewClass;
	        controller = options.controller;
	        context = options.context;
	      }
	    } else {
	      options = {};
	    }
	
	    outletName = outletName || 'view';
	
	    Ember.assert("The viewClass is either missing or the one provided did not resolve to a view", !!name || (!name && !!viewClass));
	
	    Ember.assert("You must supply a name or a viewClass to connectOutlet, but not both", (!!name && !viewClass && !controller) || (!name && !!viewClass));
	
	    if (name) {
	      var namespace = get(this, 'namespace'),
	          controllers = get(this, 'controllers');
	
	      var viewClassName = name.charAt(0).toUpperCase() + name.substr(1) + "View";
	      viewClass = get(namespace, viewClassName);
	      controller = get(controllers, name + 'Controller');
	
	      Ember.assert("The name you supplied " + name + " did not resolve to a view " + viewClassName, !!viewClass);
	      Ember.assert("The name you supplied " + name + " did not resolve to a controller " + name + 'Controller', (!!controller && !!context) || !context);
	    }
	
	    if (controller && context) { set(controller, 'content', context); }
	
	    view = this.createOutletView(outletName, viewClass);
	
	    if (controller) { set(view, 'controller', controller); }
	    set(this, outletName, view);
	
	    return view;
	  },
	
	  /**
	    Convenience method to connect controllers. This method makes other controllers
	    available on the controller the method was invoked on.
	
	    For example, to make the `personController` and the `postController` available
	    on the `overviewController`, you would call:
	
	        overviewController.connectControllers('person', 'post');
	
	    @method connectControllers
	    @param {String...} controllerNames the controllers to make available
	  */
	  connectControllers: function() {
	    var controllers = get(this, 'controllers'),
	        controllerNames = Array.prototype.slice.apply(arguments),
	        controllerName;
	
	    for (var i=0, l=controllerNames.length; i<l; i++) {
	      controllerName = controllerNames[i] + 'Controller';
	      set(this, controllerName, get(controllers, controllerName));
	    }
	  },
	
	  /**
	    `disconnectOutlet` removes previously attached view from given outlet.
	
	    @method disconnectOutlet
	    @param  {String} outletName the outlet name. (optional)
	   */
	  disconnectOutlet: function(outletName) {
	    outletName = outletName || 'view';
	
	    set(this, outletName, null);
	  },
	
	  /**
	    `createOutletView` is a hook you may want to override if you need to do
	    something special with the view created for the outlet. For example
	    you may want to implement views sharing across outlets.
	
	    @method createOutletView
	    @param outletName {String}
	    @param viewClass {Ember.View}
	  */
	  createOutletView: function(outletName, viewClass) {
	    return viewClass.create();
	  }
	});
	
	})();
	
	
	
	(function() {
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-views
	*/
	
	var get = Ember.get, set = Ember.set, addObserver = Ember.addObserver, removeObserver = Ember.removeObserver;
	var meta = Ember.meta, fmt = Ember.String.fmt;
	var a_slice = [].slice;
	var a_forEach = Ember.EnumerableUtils.forEach;
	
	var childViewsProperty = Ember.computed(function() {
	  var childViews = this._childViews;
	
	  var ret = Ember.A();
	
	  a_forEach(childViews, function(view) {
	    if (view.isVirtual) {
	      ret.pushObjects(get(view, 'childViews'));
	    } else {
	      ret.push(view);
	    }
	  });
	
	  return ret;
	}).property();
	
	Ember.warn("The VIEW_PRESERVES_CONTEXT flag has been removed and the functionality can no longer be disabled.", Ember.ENV.VIEW_PRESERVES_CONTEXT !== false);
	
	/**
	  Global hash of shared templates. This will automatically be populated
	  by the build tools so that you can store your Handlebars templates in
	  separate files that get loaded into JavaScript at buildtime.
	
	  @property TEMPLATES
	  @for Ember
	  @type Hash
	*/
	Ember.TEMPLATES = {};
	
	var invokeForState = {
	  preRender: {},
	  inBuffer: {},
	  hasElement: {},
	  inDOM: {},
	  destroyed: {}
	};
	
	Ember.CoreView = Ember.Object.extend(Ember.Evented, {
	  init: function() {
	    this._super();
	
	    // Register the view for event handling. This hash is used by
	    // Ember.EventDispatcher to dispatch incoming events.
	    if (!this.isVirtual) Ember.View.views[get(this, 'elementId')] = this;
	  },
	
	  /**
	    If the view is currently inserted into the DOM of a parent view, this
	    property will point to the parent of the view.
	
	    @property parentView
	    @type Ember.View
	    @default null
	  */
	  parentView: Ember.computed(function() {
	    var parent = get(this, '_parentView');
	
	    if (parent && parent.isVirtual) {
	      return get(parent, 'parentView');
	    } else {
	      return parent;
	    }
	  }).property('_parentView').volatile(),
	
	  state: 'preRender',
	
	  _parentView: null,
	
	  // return the current view, not including virtual views
	  concreteView: Ember.computed(function() {
	    if (!this.isVirtual) { return this; }
	    else { return get(this, 'parentView'); }
	  }).property('_parentView').volatile(),
	
	  /**
	    Creates a new renderBuffer with the passed tagName. You can override this
	    method to provide further customization to the buffer if needed. Normally
	    you will not need to call or override this method.
	
	    @method renderBuffer
	    @param [tagName] {String}
	    @return {Ember.RenderBuffer}
	  */
	  renderBuffer: function(tagName) {
	    tagName = tagName || get(this, 'tagName');
	
	    // Explicitly check for null or undefined, as tagName
	    // may be an empty string, which would evaluate to false.
	    if (tagName === null || tagName === undefined) {
	      tagName = 'div';
	    }
	
	    return Ember.RenderBuffer(tagName);
	  },
	
	  instrumentName: 'render.core_view',
	
	  instrumentDetails: function(hash) {
	    hash.type = this.constructor.toString();
	  },
	
	  /**
	    @private
	
	    Invoked by the view system when this view needs to produce an HTML
	    representation. This method will create a new render buffer, if needed,
	    then apply any default attributes, such as class names and visibility.
	    Finally, the `render()` method is invoked, which is responsible for
	    doing the bulk of the rendering.
	
	    You should not need to override this method; instead, implement the
	    `template` property, or if you need more control, override the `render`
	    method.
	
	    @method renderToBuffer
	    @param {Ember.RenderBuffer} buffer the render buffer. If no buffer is
	      passed, a default buffer, using the current view's `tagName`, will
	      be used.
	  */
	  renderToBuffer: function(parentBuffer, bufferOperation) {
	    var name = get(this, 'instrumentName'),
	        details = {};
	
	    this.instrumentDetails(details);
	
	    return Ember.instrument(name, details, function() {
	      return this._renderToBuffer(parentBuffer, bufferOperation);
	    }, this);
	  },
	
	  _renderToBuffer: function(parentBuffer, bufferOperation) {
	    var buffer;
	
	    Ember.run.sync();
	
	    // Determine where in the parent buffer to start the new buffer.
	    // By default, a new buffer will be appended to the parent buffer.
	    // The buffer operation may be changed if the child views array is
	    // mutated by Ember.ContainerView.
	    bufferOperation = bufferOperation || 'begin';
	
	    // If this is the top-most view, start a new buffer. Otherwise,
	    // create a new buffer relative to the original using the
	    // provided buffer operation (for example, `insertAfter` will
	    // insert a new buffer after the "parent buffer").
	    if (parentBuffer) {
	      var tagName = get(this, 'tagName');
	      if (tagName === null || tagName === undefined) {
	        tagName = 'div';
	      }
	
	      buffer = parentBuffer[bufferOperation](tagName);
	    } else {
	      buffer = this.renderBuffer();
	    }
	
	    this.buffer = buffer;
	    this.transitionTo('inBuffer', false);
	
	    this.beforeRender(buffer);
	    this.render(buffer);
	    this.afterRender(buffer);
	
	    return buffer;
	  },
	
	  /**
	    @private
	
	    Override the default event firing from Ember.Evented to
	    also call methods with the given name.
	
	    @method trigger
	    @param name {String}
	  */
	  trigger: function(name) {
	    this._super.apply(this, arguments);
	    var method = this[name];
	    if (method) {
	      var args = [], i, l;
	      for (i = 1, l = arguments.length; i < l; i++) {
	        args.push(arguments[i]);
	      }
	      return method.apply(this, args);
	    }
	  },
	
	  has: function(name) {
	    return Ember.typeOf(this[name]) === 'function' || this._super(name);
	  },
	
	  willDestroy: function() {
	    var parent = get(this, '_parentView');
	
	    // destroy the element -- this will avoid each child view destroying
	    // the element over and over again...
	    if (!this.removedFromDOM) { this.destroyElement(); }
	
	    // remove from parent if found. Don't call removeFromParent,
	    // as removeFromParent will try to remove the element from
	    // the DOM again.
	    if (parent) { parent.removeChild(this); }
	
	    this.state = 'destroyed';
	
	    // next remove view from global hash
	    if (!this.isVirtual) delete Ember.View.views[get(this, 'elementId')];
	  },
	
	  clearRenderedChildren: Ember.K,
	  invokeRecursively: Ember.K,
	  invalidateRecursively: Ember.K,
	  transitionTo: Ember.K,
	  destroyElement: Ember.K,
	  _notifyWillInsertElement: Ember.K,
	  _notifyDidInsertElement: Ember.K
	});
	
	/**
	  `Ember.View` is the class in Ember responsible for encapsulating templates of HTML
	  content, combining templates with data to render as sections of a page's DOM, and
	  registering and responding to user-initiated events.
	
	  ## HTML Tag
	  The default HTML tag name used for a view's DOM representation is `div`. This can be
	  customized by setting the `tagName` property. The following view class:
	
	  ``` javascript
	  ParagraphView = Ember.View.extend({
	    tagName: 'em'
	  });
	  ```
	
	  Would result in instances with the following HTML:
	
	  ``` html
	  <em id="ember1" class="ember-view"></em>
	  ```
	
	  ## HTML `class` Attribute
	  The HTML `class` attribute of a view's tag can be set by providing a `classNames` property
	  that is set to an array of strings:
	
	  ``` javascript
	  MyView = Ember.View.extend({
	    classNames: ['my-class', 'my-other-class']
	  });
	  ```
	
	  Will result in view instances with an HTML representation of:
	
	  ``` html
	  <div id="ember1" class="ember-view my-class my-other-class"></div>
	  ```
	
	  `class` attribute values can also be set by providing a `classNameBindings` property
	  set to an array of properties names for the view. The return value of these properties
	  will be added as part of the value for the view's `class` attribute. These properties
	  can be computed properties:
	
	  ``` javascript
	  MyView = Ember.View.extend({
	    classNameBindings: ['propertyA', 'propertyB'],
	    propertyA: 'from-a',
	    propertyB: function(){
	      if(someLogic){ return 'from-b'; }
	    }.property()
	  });
	  ```
	
	  Will result in view instances with an HTML representation of:
	
	  ``` html
	  <div id="ember1" class="ember-view from-a from-b"></div>
	  ```
	
	  If the value of a class name binding returns a boolean the property name itself
	  will be used as the class name if the property is true. The class name will
	  not be added if the value is `false` or `undefined`.
	
	  ``` javascript
	  MyView = Ember.View.extend({
	    classNameBindings: ['hovered'],
	    hovered: true
	  });
	  ```
	
	  Will result in view instances with an HTML representation of:
	
	  ``` html
	  <div id="ember1" class="ember-view hovered"></div>
	  ```
	
	  When using boolean class name bindings you can supply a string value other than the
	  property name for use as the `class` HTML attribute by appending the preferred value after
	  a ":" character when defining the binding:
	
	  ``` javascript
	  MyView = Ember.View.extend({
	    classNameBindings: ['awesome:so-very-cool'],
	    awesome: true
	  });
	  ```
	
	  Will result in view instances with an HTML representation of:
	
	  ``` html
	  <div id="ember1" class="ember-view so-very-cool"></div>
	  ```
	
	
	  Boolean value class name bindings whose property names are in a camelCase-style
	  format will be converted to a dasherized format:
	
	  ``` javascript
	  MyView = Ember.View.extend({
	    classNameBindings: ['isUrgent'],
	    isUrgent: true
	  });
	  ```
	
	  Will result in view instances with an HTML representation of:
	
	  ``` html
	  <div id="ember1" class="ember-view is-urgent"></div>
	  ```
	
	
	  Class name bindings can also refer to object values that are found by
	  traversing a path relative to the view itself:
	
	  ``` javascript
	  MyView = Ember.View.extend({
	    classNameBindings: ['messages.empty']
	    messages: Ember.Object.create({
	      empty: true
	    })
	  });
	  ```
	
	  Will result in view instances with an HTML representation of:
	
	  ``` html
	  <div id="ember1" class="ember-view empty"></div>
	  ```
	
	
	  If you want to add a class name for a property which evaluates to true and
	  and a different class name if it evaluates to false, you can pass a binding
	  like this:
	
	  ```
	  // Applies 'enabled' class when isEnabled is true and 'disabled' when isEnabled is false
	  Ember.View.create({
	    classNameBindings: ['isEnabled:enabled:disabled']
	    isEnabled: true
	  });
	  ```
	
	  Will result in view instances with an HTML representation of:
	
	  ``` html
	  <div id="ember1" class="ember-view enabled"></div>
	  ```
	
	  When isEnabled is `false`, the resulting HTML reprensentation looks like this:
	
	  ``` html
	  <div id="ember1" class="ember-view disabled"></div>
	  ```
	
	  This syntax offers the convenience to add a class if a property is `false`:
	
	  ``` javascript
	  // Applies no class when isEnabled is true and class 'disabled' when isEnabled is false
	  Ember.View.create({
	    classNameBindings: ['isEnabled::disabled']
	    isEnabled: true
	  });
	  ```
	
	  Will result in view instances with an HTML representation of:
	
	  ``` html
	  <div id="ember1" class="ember-view"></div>
	  ```
	
	  When the `isEnabled` property on the view is set to `false`, it will result
	  in view instances with an HTML representation of:
	
	  ``` html
	  <div id="ember1" class="ember-view disabled"></div>
	  ```
	
	  Updates to the the value of a class name binding will result in automatic update
	  of the  HTML `class` attribute in the view's rendered HTML representation.
	  If the value becomes  `false` or `undefined` the class name will be removed.
	
	  Both `classNames` and `classNameBindings` are concatenated properties.
	  See `Ember.Object` documentation for more information about concatenated properties.
	
	  ## HTML Attributes
	
	  The HTML attribute section of a view's tag can be set by providing an `attributeBindings`
	  property set to an array of property names on the view. The return value of these properties
	  will be used as the value of the view's HTML associated attribute:
	
	  ``` javascript
	  AnchorView = Ember.View.extend({
	    tagName: 'a',
	    attributeBindings: ['href'],
	    href: 'http://google.com'
	  });
	  ```
	
	  Will result in view instances with an HTML representation of:
	
	  ``` html
	  <a id="ember1" class="ember-view" href="http://google.com"></a>
	  ```
	
	  If the return value of an `attributeBindings` monitored property is a boolean
	  the property will follow HTML's pattern of repeating the attribute's name as
	  its value:
	
	  ``` javascript
	  MyTextInput = Ember.View.extend({
	    tagName: 'input',
	    attributeBindings: ['disabled'],
	    disabled: true
	  });
	  ```
	
	  Will result in view instances with an HTML representation of:
	
	  ``` html
	  <input id="ember1" class="ember-view" disabled="disabled" />
	  ```
	
	  `attributeBindings` can refer to computed properties:
	
	  ``` javascript
	  MyTextInput = Ember.View.extend({
	    tagName: 'input',
	    attributeBindings: ['disabled'],
	    disabled: function(){
	      if (someLogic) {
	        return true;
	      } else {
	        return false;
	      }
	    }.property()
	  });
	  ```
	
	  Updates to the the property of an attribute binding will result in automatic update
	  of the  HTML attribute in the view's rendered HTML representation.
	
	  `attributeBindings` is a concatenated property. See `Ember.Object` documentation
	  for more information about concatenated properties.
	
	  ## Templates
	
	  The HTML contents of a view's rendered representation are determined by its template.
	  Templates can be any function that accepts an optional context parameter and returns
	  a string of HTML that will be inserted within the view's tag. Most
	  typically in Ember this function will be a compiled Ember.Handlebars template.
	
	  ``` javascript
	  AView = Ember.View.extend({
	    template: Ember.Handlebars.compile('I am the template')
	  });
	  ```
	
	  Will result in view instances with an HTML representation of:
	
	  ``` html
	  <div id="ember1" class="ember-view">I am the template</div>
	  ```
	
	  Within an Ember application is more common to define a Handlebars templates as
	  part of a page:
	
	  ``` handlebars
	  <script type='text/x-handlebars' data-template-name='some-template'>
	    Hello
	  </script>
	  ```
	
	  And associate it by name using a view's `templateName` property:
	
	  ``` javascript
	  AView = Ember.View.extend({
	    templateName: 'some-template'
	  });
	  ```
	
	  Using a value for `templateName` that does not have a Handlebars template with a
	  matching `data-template-name` attribute will throw an error.
	
	  Assigning a value to both `template` and `templateName` properties will throw an error.
	
	  For views classes that may have a template later defined (e.g. as the block portion of a `{{view}}`
	  Handlebars helper call in another template or in a subclass), you can provide a `defaultTemplate`
	  property set to compiled template function. If a template is not later provided for the view
	  instance the `defaultTemplate` value will be used:
	
	  ``` javascript
	  AView = Ember.View.extend({
	    defaultTemplate: Ember.Handlebars.compile('I was the default'),
	    template: null,
	    templateName: null
	  });
	  ```
	
	  Will result in instances with an HTML representation of:
	
	  ``` html
	  <div id="ember1" class="ember-view">I was the default</div>
	  ```
	
	  If a `template` or `templateName` is provided it will take precedence over `defaultTemplate`:
	
	  ``` javascript
	  AView = Ember.View.extend({
	    defaultTemplate: Ember.Handlebars.compile('I was the default')
	  });
	
	  aView = AView.create({
	    template: Ember.Handlebars.compile('I was the template, not default')
	  });
	  ```
	
	  Will result in the following HTML representation when rendered:
	
	  ``` html
	  <div id="ember1" class="ember-view">I was the template, not default</div>
	  ```
	
	  ## View Context
	
	  The default context of the compiled template is the view's controller:
	
	  ``` javascript
	  AView = Ember.View.extend({
	    template: Ember.Handlebars.compile('Hello {{excitedGreeting}}')
	  });
	
	  aController = Ember.Object.create({
	    firstName: 'Barry',
	    excitedGreeting: function(){
	      return this.get("content.firstName") + "!!!"
	    }.property()
	  });
	
	  aView = AView.create({
	    controller: aController,
	  });
	  ```
	
	  Will result in an HTML representation of:
	
	  ``` html
	  <div id="ember1" class="ember-view">Hello Barry!!!</div>
	  ```
	
	  A context can also be explicitly supplied through the view's `context` property.
	  If the view has neither `context` nor `controller` properties, the parentView's
	  context will be used.
	
	  ## Layouts
	
	  Views can have a secondary template that wraps their main template. Like
	  primary templates, layouts can be any function that  accepts an optional context
	  parameter and returns a string of HTML that will be inserted inside view's tag. Views whose HTML
	  element is self closing (e.g. `<input />`) cannot have a layout and this property will be ignored.
	
	  Most typically in Ember a layout will be a compiled Ember.Handlebars template.
	
	  A view's layout can be set directly with the `layout` property or reference an
	  existing Handlebars template by name with the `layoutName` property.
	
	  A template used as a layout must contain a single use of the Handlebars `{{yield}}`
	  helper. The HTML contents of a view's rendered `template` will be inserted at this location:
	
	  ``` javascript
	  AViewWithLayout = Ember.View.extend({
	    layout: Ember.Handlebars.compile("<div class='my-decorative-class'>{{yield}}</div>")
	    template: Ember.Handlebars.compile("I got wrapped"),
	  });
	  ```
	
	  Will result in view instances with an HTML representation of:
	
	  ``` html
	  <div id="ember1" class="ember-view">
	    <div class="my-decorative-class">
	      I got wrapped
	    </div>
	  </div>
	  ```
	
	  See `Handlebars.helpers.yield` for more information.
	
	  ## Responding to Browser Events
	
	  Views can respond to user-initiated events in one of three ways: method implementation,
	  through an event manager, and through `{{action}}` helper use in their template or layout.
	
	  ### Method Implementation
	
	  Views can respond to user-initiated events by implementing a method that matches the
	  event name. A `jQuery.Event` object will be passed as the argument to this method.
	
	  ``` javascript
	  AView = Ember.View.extend({
	    click: function(event){
	      // will be called when when an instance's
	      // rendered element is clicked
	    }
	  });
	  ```
	
	  ### Event Managers
	
	  Views can define an object as their `eventManager` property. This object can then
	  implement methods that match the desired event names. Matching events that occur
	  on the view's rendered HTML or the rendered HTML of any of its DOM descendants
	  will trigger this method.  A `jQuery.Event` object will be passed as the first
	  argument to the method and an  `Ember.View` object as the second. The `Ember.View`
	  will be the view whose rendered HTML was interacted with. This may be the view with
	  the `eventManager` property or one of its descendent views.
	
	  ``` javascript
	  AView = Ember.View.extend({
	    eventManager: Ember.Object.create({
	      doubleClick: function(event, view){
	        // will be called when when an instance's
	        // rendered element or any rendering
	        // of this views's descendent
	        // elements is clicked
	      }
	    })
	  });
	  ```
	
	  An event defined for an event manager takes precedence over events of the same
	  name handled through methods on the view.
	
	  ``` javascript
	  AView = Ember.View.extend({
	    mouseEnter: function(event){
	      // will never trigger.
	    },
	    eventManager: Ember.Object.create({
	      mouseEnter: function(event, view){
	        // takes presedence over AView#mouseEnter
	      }
	    })
	  });
	  ```
	
	  Similarly a view's event manager will take precedence for events of any views
	  rendered as a descendent. A method name that matches an event name will not be called
	  if the view instance was rendered inside the HTML representation of a view that has
	  an `eventManager` property defined that handles events of the name.  Events not handled
	  by the event manager will still trigger method calls on the descendent.
	
	  ``` javascript
	  OuterView = Ember.View.extend({
	    template: Ember.Handlebars.compile("outer {{#view InnerView}}inner{{/view}} outer"),
	    eventManager: Ember.Object.create({
	      mouseEnter: function(event, view){
	        // view might be instance of either
	        // OutsideView or InnerView depending on
	        // where on the page the user interaction occured
	      }
	    })
	  });
	
	  InnerView = Ember.View.extend({
	    click: function(event){
	      // will be called if rendered inside
	      // an OuterView because OuterView's
	      // eventManager doesn't handle click events
	    },
	    mouseEnter: function(event){
	      // will never be called if rendered inside
	      // an OuterView.
	    }
	  });
	  ```
	
	  ### Handlebars `{{action}}` Helper
	
	  See `Handlebars.helpers.action`.
	
	  ### Event Names
	
	  Possible events names for any of the responding approaches described above are:
	
	  Touch events: 'touchStart', 'touchMove', 'touchEnd', 'touchCancel'
	
	  Keyboard events: 'keyDown', 'keyUp', 'keyPress'
	
	  Mouse events: 'mouseDown', 'mouseUp', 'contextMenu', 'click', 'doubleClick', 'mouseMove',
	  'focusIn', 'focusOut', 'mouseEnter', 'mouseLeave'
	
	  Form events: 'submit', 'change', 'focusIn', 'focusOut', 'input'
	
	  HTML5 drag and drop events: 'dragStart', 'drag', 'dragEnter', 'dragLeave', 'drop', 'dragEnd'
	
	  ## Handlebars `{{view}}` Helper
	
	  Other `Ember.View` instances can be included as part of a view's template by using the `{{view}}`
	  Handlebars helper. See `Handlebars.helpers.view` for additional information.
	
	  @class View
	  @namespace Ember
	  @extends Ember.Object
	  @uses Ember.Evented
	*/
	Ember.View = Ember.CoreView.extend(
	/** @scope Ember.View.prototype */ {
	
	  concatenatedProperties: ['classNames', 'classNameBindings', 'attributeBindings'],
	
	  /**
	    @property isView
	    @type Boolean
	    @default true
	    @final
	  */
	  isView: true,
	
	  // ..........................................................
	  // TEMPLATE SUPPORT
	  //
	
	  /**
	    The name of the template to lookup if no template is provided.
	
	    Ember.View will look for a template with this name in this view's
	    `templates` object. By default, this will be a global object
	    shared in `Ember.TEMPLATES`.
	
	    @property templateName
	    @type String
	    @default null
	  */
	  templateName: null,
	
	  /**
	    The name of the layout to lookup if no layout is provided.
	
	    Ember.View will look for a template with this name in this view's
	    `templates` object. By default, this will be a global object
	    shared in `Ember.TEMPLATES`.
	
	    @property layoutName
	    @type String
	    @default null
	  */
	  layoutName: null,
	
	  /**
	    The hash in which to look for `templateName`.
	
	    @property templates
	    @type Ember.Object
	    @default Ember.TEMPLATES
	  */
	  templates: Ember.TEMPLATES,
	
	  /**
	    The template used to render the view. This should be a function that
	    accepts an optional context parameter and returns a string of HTML that
	    will be inserted into the DOM relative to its parent view.
	
	    In general, you should set the `templateName` property instead of setting
	    the template yourself.
	
	    @property template
	    @type Function
	  */
	  template: Ember.computed(function(key, value) {
	    if (value !== undefined) { return value; }
	
	    var templateName = get(this, 'templateName'),
	        template = this.templateForName(templateName, 'template');
	
	    return template || get(this, 'defaultTemplate');
	  }).property('templateName'),
	
	  /**
	    The controller managing this view. If this property is set, it will be
	    made available for use by the template.
	
	    @property controller
	    @type Object
	  */
	  controller: Ember.computed(function(key, value) {
	    var parentView;
	
	    if (arguments.length === 2) {
	      return value;
	    } else {
	      parentView = get(this, 'parentView');
	      return parentView ? get(parentView, 'controller') : null;
	    }
	  }).property(),
	
	  /**
	    A view may contain a layout. A layout is a regular template but
	    supersedes the `template` property during rendering. It is the
	    responsibility of the layout template to retrieve the `template`
	    property from the view (or alternatively, call `Handlebars.helpers.yield`,
	    `{{yield}}`) to render it in the correct location.
	
	    This is useful for a view that has a shared wrapper, but which delegates
	    the rendering of the contents of the wrapper to the `template` property
	    on a subclass.
	
	    @property layout
	    @type Function
	  */
	  layout: Ember.computed(function(key, value) {
	    if (arguments.length === 2) { return value; }
	
	    var layoutName = get(this, 'layoutName'),
	        layout = this.templateForName(layoutName, 'layout');
	
	    return layout || get(this, 'defaultLayout');
	  }).property('layoutName'),
	
	  templateForName: function(name, type) {
	    if (!name) { return; }
	
	    var templates = get(this, 'templates'),
	        template = get(templates, name);
	
	    if (!template) {
	     throw new Ember.Error(fmt('%@ - Unable to find %@ "%@".', [this, type, name]));
	    }
	
	    return template;
	  },
	
	  /**
	    The object from which templates should access properties.
	
	    This object will be passed to the template function each time the render
	    method is called, but it is up to the individual function to decide what
	    to do with it.
	
	    By default, this will be the view's controller.
	
	    @property context
	    @type Object
	  */
	  context: Ember.computed(function(key, value) {
	    if (arguments.length === 2) {
	      set(this, '_context', value);
	      return value;
	    } else {
	      return get(this, '_context');
	    }
	  }).volatile(),
	
	  /**
	    @private
	
	    Private copy of the view's template context. This can be set directly
	    by Handlebars without triggering the observer that causes the view
	    to be re-rendered.
	
	    The context of a view is looked up as follows:
	
	    1. Supplied context (usually by Handlebars)
	    2. Specified controller
	    3. `parentView`'s context (for a child of a ContainerView)
	
	    The code in Handlebars that overrides the `_context` property first
	    checks to see whether the view has a specified controller. This is
	    something of a hack and should be revisited.
	
	    @property _context
	  */
	  _context: Ember.computed(function(key, value) {
	    var parentView, controller;
	
	    if (arguments.length === 2) {
	      return value;
	    }
	
	    if (controller = get(this, 'controller')) {
	      return controller;
	    }
	
	    parentView = get(this, '_parentView');
	    if (parentView) {
	      return get(parentView, '_context');
	    }
	
	    return this;
	  }),
	
	  /**
	    @private
	
	    If a value that affects template rendering changes, the view should be
	    re-rendered to reflect the new value.
	
	    @method _displayPropertyDidChange
	  */
	  _displayPropertyDidChange: Ember.observer(function() {
	    this.rerender();
	  }, 'context', 'controller'),
	
	  /**
	    If false, the view will appear hidden in DOM.
	
	    @property isVisible
	    @type Boolean
	    @default null
	  */
	  isVisible: true,
	
	  /**
	    @private
	
	    Array of child views. You should never edit this array directly.
	    Instead, use appendChild and removeFromParent.
	
	    @property childViews
	    @type Array
	    @default []
	  */
	  childViews: childViewsProperty,
	
	  _childViews: [],
	
	  // When it's a virtual view, we need to notify the parent that their
	  // childViews will change.
	  _childViewsWillChange: Ember.beforeObserver(function() {
	    if (this.isVirtual) {
	      var parentView = get(this, 'parentView');
	      if (parentView) { Ember.propertyWillChange(parentView, 'childViews'); }
	    }
	  }, 'childViews'),
	
	  // When it's a virtual view, we need to notify the parent that their
	  // childViews did change.
	  _childViewsDidChange: Ember.observer(function() {
	    if (this.isVirtual) {
	      var parentView = get(this, 'parentView');
	      if (parentView) { Ember.propertyDidChange(parentView, 'childViews'); }
	    }
	  }, 'childViews'),
	
	  /**
	    Return the nearest ancestor that is an instance of the provided
	    class.
	
	    @property nearestInstanceOf
	    @param {Class} klass Subclass of Ember.View (or Ember.View itself)
	    @return Ember.View
	    @deprecated
	  */
	  nearestInstanceOf: function(klass) {
	    Ember.deprecate("nearestInstanceOf is deprecated and will be removed from future releases. Use nearestOfType.");
	    var view = get(this, 'parentView');
	
	    while (view) {
	      if(view instanceof klass) { return view; }
	      view = get(view, 'parentView');
	    }
	  },
	
	  /**
	    Return the nearest ancestor that is an instance of the provided
	    class or mixin.
	
	    @property nearestOfType
	    @param {Class,Mixin} klass Subclass of Ember.View (or Ember.View itself),
	           or an instance of Ember.Mixin.
	    @return Ember.View
	  */
	  nearestOfType: function(klass) {
	    var view = get(this, 'parentView'),
	        isOfType = klass instanceof Ember.Mixin ?
	                   function(view) { return klass.detect(view); } :
	                   function(view) { return klass.detect(view.constructor); };
	
	    while (view) {
	      if( isOfType(view) ) { return view; }
	      view = get(view, 'parentView');
	    }
	  },
	
	  /**
	    Return the nearest ancestor that has a given property.
	
	    @property nearestWithProperty
	    @param {String} property A property name
	    @return Ember.View
	  */
	  nearestWithProperty: function(property) {
	    var view = get(this, 'parentView');
	
	    while (view) {
	      if (property in view) { return view; }
	      view = get(view, 'parentView');
	    }
	  },
	
	  /**
	    Return the nearest ancestor whose parent is an instance of
	    `klass`.
	
	    @property nearestChildOf
	    @param {Class} klass Subclass of Ember.View (or Ember.View itself)
	    @return Ember.View
	  */
	  nearestChildOf: function(klass) {
	    var view = get(this, 'parentView');
	
	    while (view) {
	      if(get(view, 'parentView') instanceof klass) { return view; }
	      view = get(view, 'parentView');
	    }
	  },
	
	  /**
	    Return the nearest ancestor that is an Ember.CollectionView
	
	    @property collectionView
	    @return Ember.CollectionView
	  */
	  collectionView: Ember.computed(function() {
	    return this.nearestOfType(Ember.CollectionView);
	  }),
	
	  /**
	    Return the nearest ancestor that is a direct child of
	    an Ember.CollectionView
	
	    @property itemView
	    @return Ember.View
	  */
	  itemView: Ember.computed(function() {
	    return this.nearestChildOf(Ember.CollectionView);
	  }),
	
	  /**
	    Return the nearest ancestor that has the property
	    `content`.
	
	    @property contentView
	    @return Ember.View
	  */
	  contentView: Ember.computed(function() {
	    return this.nearestWithProperty('content');
	  }),
	
	  /**
	    @private
	
	    When the parent view changes, recursively invalidate
	    collectionView, itemView, and contentView
	
	    @method _parentViewDidChange
	  */
	  _parentViewDidChange: Ember.observer(function() {
	    if (this.isDestroying) { return; }
	
	    this.invokeRecursively(function(view) {
	      view.propertyDidChange('collectionView');
	      view.propertyDidChange('itemView');
	      view.propertyDidChange('contentView');
	    });
	
	    if (get(this, 'parentView.controller') && !get(this, 'controller')) {
	      this.notifyPropertyChange('controller');
	    }
	  }, '_parentView'),
	
	  _controllerDidChange: Ember.observer(function() {
	    if (this.isDestroying) { return; }
	
	    this.forEachChildView(function(view) {
	      view.propertyDidChange('controller');
	    });
	  }, 'controller'),
	
	  cloneKeywords: function() {
	    var templateData = get(this, 'templateData');
	
	    var keywords = templateData ? Ember.copy(templateData.keywords) : {};
	    set(keywords, 'view', get(this, 'concreteView'));
	    set(keywords, 'controller', get(this, 'controller'));
	
	    return keywords;
	  },
	
	  /**
	    Called on your view when it should push strings of HTML into a
	    Ember.RenderBuffer. Most users will want to override the `template`
	    or `templateName` properties instead of this method.
	
	    By default, Ember.View will look for a function in the `template`
	    property and invoke it with the value of `context`. The value of
	    `context` will be the view's controller unless you override it.
	
	    @method render
	    @param {Ember.RenderBuffer} buffer The render buffer
	  */
	  render: function(buffer) {
	    // If this view has a layout, it is the responsibility of the
	    // the layout to render the view's template. Otherwise, render the template
	    // directly.
	    var template = get(this, 'layout') || get(this, 'template');
	
	    if (template) {
	      var context = get(this, 'context');
	      var keywords = this.cloneKeywords();
	
	      var data = {
	        view: this,
	        buffer: buffer,
	        isRenderData: true,
	        keywords: keywords
	      };
	
	      // Invoke the template with the provided template context, which
	      // is the view's controller by default. A hash of data is also passed that provides
	      // the template with access to the view and render buffer.
	
	      Ember.assert('template must be a function. Did you mean to call Ember.Handlebars.compile("...") or specify templateName instead?', typeof template === 'function');
	      // The template should write directly to the render buffer instead
	      // of returning a string.
	      var output = template(context, { data: data });
	
	      // If the template returned a string instead of writing to the buffer,
	      // push the string onto the buffer.
	      if (output !== undefined) { buffer.push(output); }
	    }
	  },
	
	  invokeForState: function(name) {
	    var stateName = this.state, args, fn;
	
	    // try to find the function for the state in the cache
	    if (fn = invokeForState[stateName][name]) {
	      args = a_slice.call(arguments);
	      args[0] = this;
	
	      return fn.apply(this, args);
	    }
	
	    // otherwise, find and cache the function for this state
	    var parent = this, states = parent.states, state;
	
	    while (states) {
	      state = states[stateName];
	
	      while (state) {
	        fn = state[name];
	
	        if (fn) {
	          invokeForState[stateName][name] = fn;
	
	          args = a_slice.call(arguments, 1);
	          args.unshift(this);
	
	          return fn.apply(this, args);
	        }
	
	        state = state.parentState;
	      }
	
	      states = states.parent;
	    }
	  },
	
	  /**
	    Renders the view again. This will work regardless of whether the
	    view is already in the DOM or not. If the view is in the DOM, the
	    rendering process will be deferred to give bindings a chance
	    to synchronize.
	
	    If children were added during the rendering process using `appendChild`,
	    `rerender` will remove them, because they will be added again
	    if needed by the next `render`.
	
	    In general, if the display of your view changes, you should modify
	    the DOM element directly instead of manually calling `rerender`, which can
	    be slow.
	
	    @method rerender
	  */
	  rerender: function() {
	    return this.invokeForState('rerender');
	  },
	
	  clearRenderedChildren: function() {
	    var lengthBefore = this.lengthBeforeRender,
	        lengthAfter  = this.lengthAfterRender;
	
	    // If there were child views created during the last call to render(),
	    // remove them under the assumption that they will be re-created when
	    // we re-render.
	
	    // VIEW-TODO: Unit test this path.
	    var childViews = this._childViews;
	    for (var i=lengthAfter-1; i>=lengthBefore; i--) {
	      if (childViews[i]) { childViews[i].destroy(); }
	    }
	  },
	
	  /**
	    @private
	
	    Iterates over the view's `classNameBindings` array, inserts the value
	    of the specified property into the `classNames` array, then creates an
	    observer to update the view's element if the bound property ever changes
	    in the future.
	
	    @method _applyClassNameBindings
	  */
	  _applyClassNameBindings: function() {
	    var classBindings = get(this, 'classNameBindings'),
	        classNames = get(this, 'classNames'),
	        elem, newClass, dasherizedClass;
	
	    if (!classBindings) { return; }
	
	    // Loop through all of the configured bindings. These will be either
	    // property names ('isUrgent') or property paths relative to the view
	    // ('content.isUrgent')
	    a_forEach(classBindings, function(binding) {
	
	      // Variable in which the old class value is saved. The observer function
	      // closes over this variable, so it knows which string to remove when
	      // the property changes.
	      var oldClass;
	      // Extract just the property name from bindings like 'foo:bar'
	      var parsedPath = Ember.View._parsePropertyPath(binding);
	
	      // Set up an observer on the context. If the property changes, toggle the
	      // class name.
	      var observer = function() {
	        // Get the current value of the property
	        newClass = this._classStringForProperty(binding);
	        elem = this.$();
	        if (!elem) {
	          removeObserver(this, parsedPath.path, observer);
	          return;
	        }
	
	        // If we had previously added a class to the element, remove it.
	        if (oldClass) {
	          elem.removeClass(oldClass);
	          // Also remove from classNames so that if the view gets rerendered,
	          // the class doesn't get added back to the DOM.
	          classNames.removeObject(oldClass);
	        }
	
	        // If necessary, add a new class. Make sure we keep track of it so
	        // it can be removed in the future.
	        if (newClass) {
	          elem.addClass(newClass);
	          oldClass = newClass;
	        } else {
	          oldClass = null;
	        }
	      };
	
	      // Get the class name for the property at its current value
	      dasherizedClass = this._classStringForProperty(binding);
	
	      if (dasherizedClass) {
	        // Ensure that it gets into the classNames array
	        // so it is displayed when we render.
	        classNames.push(dasherizedClass);
	
	        // Save a reference to the class name so we can remove it
	        // if the observer fires. Remember that this variable has
	        // been closed over by the observer.
	        oldClass = dasherizedClass;
	      }
	
	      addObserver(this, parsedPath.path, observer);
	
	      this.one('willClearRender', function() {
	        removeObserver(this, parsedPath.path, observer);
	      });
	    }, this);
	  },
	
	  /**
	    @private
	
	    Iterates through the view's attribute bindings, sets up observers for each,
	    then applies the current value of the attributes to the passed render buffer.
	
	    @method _applyAttributeBindings
	    @param {Ember.RenderBuffer} buffer
	  */
	  _applyAttributeBindings: function(buffer) {
	    var attributeBindings = get(this, 'attributeBindings'),
	        attributeValue, elem, type;
	
	    if (!attributeBindings) { return; }
	
	    a_forEach(attributeBindings, function(binding) {
	      var split = binding.split(':'),
	          property = split[0],
	          attributeName = split[1] || property;
	
	      // Create an observer to add/remove/change the attribute if the
	      // JavaScript property changes.
	      var observer = function() {
	        elem = this.$();
	        if (!elem) { return; }
	
	        attributeValue = get(this, property);
	
	        Ember.View.applyAttributeBindings(elem, attributeName, attributeValue);
	      };
	
	      addObserver(this, property, observer);
	
	      this.one('willClearRender', function() {
	        removeObserver(this, property, observer);
	      });
	
	      // Determine the current value and add it to the render buffer
	      // if necessary.
	      attributeValue = get(this, property);
	      Ember.View.applyAttributeBindings(buffer, attributeName, attributeValue);
	    }, this);
	  },
	
	  /**
	    @private
	
	    Given a property name, returns a dasherized version of that
	    property name if the property evaluates to a non-falsy value.
	
	    For example, if the view has property `isUrgent` that evaluates to true,
	    passing `isUrgent` to this method will return `"is-urgent"`.
	
	    @method _classStringForProperty
	    @param property
	  */
	  _classStringForProperty: function(property) {
	    var parsedPath = Ember.View._parsePropertyPath(property);
	    var path = parsedPath.path;
	
	    var val = get(this, path);
	    if (val === undefined && Ember.isGlobalPath(path)) {
	      val = get(Ember.lookup, path);
	    }
	
	    return Ember.View._classStringForValue(path, val, parsedPath.className, parsedPath.falsyClassName);
	  },
	
	  // ..........................................................
	  // ELEMENT SUPPORT
	  //
	
	  /**
	    Returns the current DOM element for the view.
	
	    @property element
	    @type DOMElement
	  */
	  element: Ember.computed(function(key, value) {
	    if (value !== undefined) {
	      return this.invokeForState('setElement', value);
	    } else {
	      return this.invokeForState('getElement');
	    }
	  }).property('_parentView'),
	
	  /**
	    Returns a jQuery object for this view's element. If you pass in a selector
	    string, this method will return a jQuery object, using the current element
	    as its buffer.
	
	    For example, calling `view.$('li')` will return a jQuery object containing
	    all of the `li` elements inside the DOM element of this view.
	
	    @property $
	    @param {String} [selector] a jQuery-compatible selector string
	    @return {jQuery} the CoreQuery object for the DOM node
	  */
	  $: function(sel) {
	    return this.invokeForState('$', sel);
	  },
	
	  mutateChildViews: function(callback) {
	    var childViews = this._childViews,
	        idx = childViews.length,
	        view;
	
	    while(--idx >= 0) {
	      view = childViews[idx];
	      callback.call(this, view, idx);
	    }
	
	    return this;
	  },
	
	  forEachChildView: function(callback) {
	    var childViews = this._childViews;
	
	    if (!childViews) { return this; }
	
	    var len = childViews.length,
	        view, idx;
	
	    for(idx = 0; idx < len; idx++) {
	      view = childViews[idx];
	      callback.call(this, view);
	    }
	
	    return this;
	  },
	
	  /**
	    Appends the view's element to the specified parent element.
	
	    If the view does not have an HTML representation yet, `createElement()`
	    will be called automatically.
	
	    Note that this method just schedules the view to be appended; the DOM
	    element will not be appended to the given element until all bindings have
	    finished synchronizing.
	
	    This is not typically a function that you will need to call directly
	    when building your application. You might consider using Ember.ContainerView
	    instead. If you do need to use appendTo, be sure that the target element you
	    are providing is associated with an Ember.Application and does not have an
	    ancestor element that is associated with an Ember view.
	
	    @method appendTo
	    @param {String|DOMElement|jQuery} A selector, element, HTML string, or jQuery object
	    @return {Ember.View} receiver
	  */
	  appendTo: function(target) {
	    // Schedule the DOM element to be created and appended to the given
	    // element after bindings have synchronized.
	    this._insertElementLater(function() {
	      Ember.assert("You cannot append to an existing Ember.View. Consider using Ember.ContainerView instead.", !Ember.$(target).is('.ember-view') && !Ember.$(target).parents().is('.ember-view'));
	      this.$().appendTo(target);
	    });
	
	    return this;
	  },
	
	  /**
	    Replaces the content of the specified parent element with this view's element.
	    If the view does not have an HTML representation yet, `createElement()`
	    will be called automatically.
	
	    Note that this method just schedules the view to be appended; the DOM
	    element will not be appended to the given element until all bindings have
	    finished synchronizing
	
	    @method replaceIn
	    @param {String|DOMElement|jQuery} A selector, element, HTML string, or jQuery object
	    @return {Ember.View} received
	  */
	  replaceIn: function(target) {
	    Ember.assert("You cannot replace an existing Ember.View. Consider using Ember.ContainerView instead.", !Ember.$(target).is('.ember-view') && !Ember.$(target).parents().is('.ember-view'));
	
	    this._insertElementLater(function() {
	      Ember.$(target).empty();
	      this.$().appendTo(target);
	    });
	
	    return this;
	  },
	
	  /**
	    @private
	
	    Schedules a DOM operation to occur during the next render phase. This
	    ensures that all bindings have finished synchronizing before the view is
	    rendered.
	
	    To use, pass a function that performs a DOM operation..
	
	    Before your function is called, this view and all child views will receive
	    the `willInsertElement` event. After your function is invoked, this view
	    and all of its child views will receive the `didInsertElement` event.
	
	        view._insertElementLater(function() {
	          this.createElement();
	          this.$().appendTo('body');
	        });
	
	    @method _insertElementLater
	    @param {Function} fn the function that inserts the element into the DOM
	  */
	  _insertElementLater: function(fn) {
	    this._scheduledInsert = Ember.run.scheduleOnce('render', this, '_insertElement', fn);
	  },
	
	  /**
	   @private
	  */
	  _insertElement: function (fn) {
	    this._scheduledInsert = null;
	    this.invokeForState('insertElement', fn);
	  },
	
	  /**
	    Appends the view's element to the document body. If the view does
	    not have an HTML representation yet, `createElement()` will be called
	    automatically.
	
	    Note that this method just schedules the view to be appended; the DOM
	    element will not be appended to the document body until all bindings have
	    finished synchronizing.
	
	    @method append
	    @return {Ember.View} receiver
	  */
	  append: function() {
	    return this.appendTo(document.body);
	  },
	
	  /**
	    Removes the view's element from the element to which it is attached.
	
	    @method remove
	    @return {Ember.View} receiver
	  */
	  remove: function() {
	    // What we should really do here is wait until the end of the run loop
	    // to determine if the element has been re-appended to a different
	    // element.
	    // In the interim, we will just re-render if that happens. It is more
	    // important than elements get garbage collected.
	    this.destroyElement();
	    this.invokeRecursively(function(view) {
	      view.clearRenderedChildren();
	    });
	  },
	
	  /**
	    The ID to use when trying to locate the element in the DOM. If you do not
	    set the elementId explicitly, then the view's GUID will be used instead.
	    This ID must be set at the time the view is created.
	
	    @property elementId
	    @type String
	  */
	  elementId: Ember.computed(function(key, value) {
	    return value !== undefined ? value : Ember.guidFor(this);
	  }),
	
	  // TODO: Perhaps this should be removed from the production build somehow.
	  _elementIdDidChange: Ember.beforeObserver(function() {
	    throw "Changing a view's elementId after creation is not allowed.";
	  }, 'elementId'),
	
	  /**
	    Attempts to discover the element in the parent element. The default
	    implementation looks for an element with an ID of elementId (or the view's
	    guid if elementId is null). You can override this method to provide your
	    own form of lookup. For example, if you want to discover your element
	    using a CSS class name instead of an ID.
	
	    @method findElementInParentElement
	    @param {DOMElement} parentElement The parent's DOM element
	    @return {DOMElement} The discovered element
	  */
	  findElementInParentElement: function(parentElem) {
	    var id = "#" + get(this, 'elementId');
	    return Ember.$(id)[0] || Ember.$(id, parentElem)[0];
	  },
	
	  /**
	    Creates a DOM representation of the view and all of its
	    child views by recursively calling the `render()` method.
	
	    After the element has been created, `didInsertElement` will
	    be called on this view and all of its child views.
	
	    @method createElement
	    @return {Ember.View} receiver
	  */
	  createElement: function() {
	    if (get(this, 'element')) { return this; }
	
	    var buffer = this.renderToBuffer();
	    set(this, 'element', buffer.element());
	
	    return this;
	  },
	
	  /**
	    Called when a view is going to insert an element into the DOM.
	
	    @event willInsertElement
	  */
	  willInsertElement: Ember.K,
	
	  /**
	    Called when the element of the view has been inserted into the DOM.
	    Override this function to do any set up that requires an element in the
	    document body.
	
	    @event didInsertElement
	  */
	  didInsertElement: Ember.K,
	
	  /**
	    Called when the view is about to rerender, but before anything has
	    been torn down. This is a good opportunity to tear down any manual
	    observers you have installed based on the DOM state
	
	    @event willClearRender
	  */
	  willClearRender: Ember.K,
	
	  /**
	    @private
	
	    Run this callback on the current view and recursively on child views.
	
	    @method invokeRecursively
	    @param fn {Function}
	  */
	  invokeRecursively: function(fn) {
	    fn.call(this, this);
	
	    this.forEachChildView(function(view) {
	      view.invokeRecursively(fn);
	    });
	  },
	
	  /**
	    Invalidates the cache for a property on all child views.
	
	    @method invalidateRecursively
	  */
	  invalidateRecursively: function(key) {
	    this.forEachChildView(function(view) {
	      view.propertyDidChange(key);
	    });
	  },
	
	  /**
	    @private
	
	    Invokes the receiver's willInsertElement() method if it exists and then
	    invokes the same on all child views.
	
	    NOTE: In some cases this was called when the element existed. This no longer
	    works so we let people know. We can remove this warning code later.
	
	    @method _notifyWillInsertElement
	  */
	  _notifyWillInsertElement: function() {
	    this.invokeRecursively(function(view) {
	      view.trigger('willInsertElement');
	    });
	  },
	
	  /**
	    @private
	
	    Invokes the receiver's didInsertElement() method if it exists and then
	    invokes the same on all child views.
	
	    @method _notifyDidInsertElement
	  */
	  _notifyDidInsertElement: function() {
	    this.invokeRecursively(function(view) {
	      view.trigger('didInsertElement');
	    });
	  },
	
	  /**
	    @private
	
	    Triggers the `willClearRender` event (which invokes the `willClearRender()`
	    method if it exists) on this view and all child views.
	
	    @method _notifyWillClearRender
	  */
	  _notifyWillClearRender: function() {
	    this.invokeRecursively(function(view) {
	      view.trigger('willClearRender');
	    });
	  },
	
	  /**
	    Destroys any existing element along with the element for any child views
	    as well. If the view does not currently have a element, then this method
	    will do nothing.
	
	    If you implement willDestroyElement() on your view, then this method will
	    be invoked on your view before your element is destroyed to give you a
	    chance to clean up any event handlers, etc.
	
	    If you write a willDestroyElement() handler, you can assume that your
	    didInsertElement() handler was called earlier for the same element.
	
	    Normally you will not call or override this method yourself, but you may
	    want to implement the above callbacks when it is run.
	
	    @method destroyElement
	    @return {Ember.View} receiver
	  */
	  destroyElement: function() {
	    return this.invokeForState('destroyElement');
	  },
	
	  /**
	    Called when the element of the view is going to be destroyed. Override
	    this function to do any teardown that requires an element, like removing
	    event listeners.
	
	    @event willDestroyElement
	  */
	  willDestroyElement: function() {},
	
	  /**
	    @private
	
	    Triggers the `willDestroyElement` event (which invokes the `willDestroyElement()`
	    method if it exists) on this view and all child views.
	
	    Before triggering `willDestroyElement`, it first triggers the `willClearRender`
	    event recursively.
	
	    @method _notifyWillDestroyElement
	  */
	  _notifyWillDestroyElement: function() {
	    this._notifyWillClearRender();
	
	    this.invokeRecursively(function(view) {
	      view.trigger('willDestroyElement');
	    });
	  },
	
	  _elementWillChange: Ember.beforeObserver(function() {
	    this.forEachChildView(function(view) {
	      Ember.propertyWillChange(view, 'element');
	    });
	  }, 'element'),
	
	  /**
	    @private
	
	    If this view's element changes, we need to invalidate the caches of our
	    child views so that we do not retain references to DOM elements that are
	    no longer needed.
	
	    @method _elementDidChange
	  */
	  _elementDidChange: Ember.observer(function() {
	    this.forEachChildView(function(view) {
	      Ember.propertyDidChange(view, 'element');
	    });
	  }, 'element'),
	
	  /**
	    Called when the parentView property has changed.
	
	    @event parentViewDidChange
	  */
	  parentViewDidChange: Ember.K,
	
	  instrumentName: 'render.view',
	
	  instrumentDetails: function(hash) {
	    hash.template = get(this, 'templateName');
	    this._super(hash);
	  },
	
	  _renderToBuffer: function(parentBuffer, bufferOperation) {
	    this.lengthBeforeRender = this._childViews.length;
	    var buffer = this._super(parentBuffer, bufferOperation);
	    this.lengthAfterRender = this._childViews.length;
	
	    return buffer;
	  },
	
	  renderToBufferIfNeeded: function () {
	    return this.invokeForState('renderToBufferIfNeeded', this);
	  },
	
	  beforeRender: function(buffer) {
	    this.applyAttributesToBuffer(buffer);
	  },
	
	  afterRender: Ember.K,
	
	  applyAttributesToBuffer: function(buffer) {
	    // Creates observers for all registered class name and attribute bindings,
	    // then adds them to the element.
	    this._applyClassNameBindings();
	
	    // Pass the render buffer so the method can apply attributes directly.
	    // This isn't needed for class name bindings because they use the
	    // existing classNames infrastructure.
	    this._applyAttributeBindings(buffer);
	
	
	    a_forEach(get(this, 'classNames'), function(name){ buffer.addClass(name); });
	    buffer.id(get(this, 'elementId'));
	
	    var role = get(this, 'ariaRole');
	    if (role) {
	      buffer.attr('role', role);
	    }
	
	    if (get(this, 'isVisible') === false) {
	      buffer.style('display', 'none');
	    }
	  },
	
	  // ..........................................................
	  // STANDARD RENDER PROPERTIES
	  //
	
	  /**
	    Tag name for the view's outer element. The tag name is only used when
	    an element is first created. If you change the tagName for an element, you
	    must destroy and recreate the view element.
	
	    By default, the render buffer will use a `<div>` tag for views.
	
	    @property tagName
	    @type String
	    @default null
	  */
	
	  // We leave this null by default so we can tell the difference between
	  // the default case and a user-specified tag.
	  tagName: null,
	
	  /**
	    The WAI-ARIA role of the control represented by this view. For example, a
	    button may have a role of type 'button', or a pane may have a role of
	    type 'alertdialog'. This property is used by assistive software to help
	    visually challenged users navigate rich web applications.
	
	    The full list of valid WAI-ARIA roles is available at:
	    http://www.w3.org/TR/wai-aria/roles#roles_categorization
	
	    @property ariaRole
	    @type String
	    @default null
	  */
	  ariaRole: null,
	
	  /**
	    Standard CSS class names to apply to the view's outer element. This
	    property automatically inherits any class names defined by the view's
	    superclasses as well.
	
	    @property classNames
	    @type Array
	    @default ['ember-view']
	  */
	  classNames: ['ember-view'],
	
	  /**
	    A list of properties of the view to apply as class names. If the property
	    is a string value, the value of that string will be applied as a class
	    name.
	
	        // Applies the 'high' class to the view element
	        Ember.View.create({
	          classNameBindings: ['priority']
	          priority: 'high'
	        });
	
	    If the value of the property is a Boolean, the name of that property is
	    added as a dasherized class name.
	
	        // Applies the 'is-urgent' class to the view element
	        Ember.View.create({
	          classNameBindings: ['isUrgent']
	          isUrgent: true
	        });
	
	    If you would prefer to use a custom value instead of the dasherized
	    property name, you can pass a binding like this:
	
	        // Applies the 'urgent' class to the view element
	        Ember.View.create({
	          classNameBindings: ['isUrgent:urgent']
	          isUrgent: true
	        });
	
	    This list of properties is inherited from the view's superclasses as well.
	
	    @property classNameBindings
	    @type Array
	    @default []
	  */
	  classNameBindings: [],
	
	  /**
	    A list of properties of the view to apply as attributes. If the property is
	    a string value, the value of that string will be applied as the attribute.
	
	        // Applies the type attribute to the element
	        // with the value "button", like <div type="button">
	        Ember.View.create({
	          attributeBindings: ['type'],
	          type: 'button'
	        });
	
	    If the value of the property is a Boolean, the name of that property is
	    added as an attribute.
	
	        // Renders something like <div enabled="enabled">
	        Ember.View.create({
	          attributeBindings: ['enabled'],
	          enabled: true
	        });
	
	    @property attributeBindings
	  */
	  attributeBindings: [],
	
	  // .......................................................
	  // CORE DISPLAY METHODS
	  //
	
	  /**
	    @private
	
	    Setup a view, but do not finish waking it up.
	    - configure childViews
	    - register the view with the global views hash, which is used for event
	      dispatch
	
	    @method init
	  */
	  init: function() {
	    this._super();
	
	    // setup child views. be sure to clone the child views array first
	    this._childViews = this._childViews.slice();
	
	    Ember.assert("Only arrays are allowed for 'classNameBindings'", Ember.typeOf(this.classNameBindings) === 'array');
	    this.classNameBindings = Ember.A(this.classNameBindings.slice());
	
	    Ember.assert("Only arrays are allowed for 'classNames'", Ember.typeOf(this.classNames) === 'array');
	    this.classNames = Ember.A(this.classNames.slice());
	
	    var viewController = get(this, 'viewController');
	    if (viewController) {
	      viewController = get(viewController);
	      if (viewController) {
	        set(viewController, 'view', this);
	      }
	    }
	  },
	
	  appendChild: function(view, options) {
	    return this.invokeForState('appendChild', view, options);
	  },
	
	  /**
	    Removes the child view from the parent view.
	
	    @method removeChild
	    @param {Ember.View} view
	    @return {Ember.View} receiver
	  */
	  removeChild: function(view) {
	    // If we're destroying, the entire subtree will be
	    // freed, and the DOM will be handled separately,
	    // so no need to mess with childViews.
	    if (this.isDestroying) { return; }
	
	    // update parent node
	    set(view, '_parentView', null);
	
	    // remove view from childViews array.
	    var childViews = this._childViews;
	
	    Ember.EnumerableUtils.removeObject(childViews, view);
	
	    this.propertyDidChange('childViews'); // HUH?! what happened to will change?
	
	    return this;
	  },
	
	  /**
	    Removes all children from the parentView.
	
	    @method removeAllChildren
	    @return {Ember.View} receiver
	  */
	  removeAllChildren: function() {
	    return this.mutateChildViews(function(view) {
	      this.removeChild(view);
	    });
	  },
	
	  destroyAllChildren: function() {
	    return this.mutateChildViews(function(view) {
	      view.destroy();
	    });
	  },
	
	  /**
	    Removes the view from its parentView, if one is found. Otherwise
	    does nothing.
	
	    @method removeFromParent
	    @return {Ember.View} receiver
	  */
	  removeFromParent: function() {
	    var parent = get(this, '_parentView');
	
	    // Remove DOM element from parent
	    this.remove();
	
	    if (parent) { parent.removeChild(this); }
	    return this;
	  },
	
	  /**
	    You must call `destroy` on a view to destroy the view (and all of its
	    child views). This will remove the view from any parent node, then make
	    sure that the DOM element managed by the view can be released by the
	    memory manager.
	
	    @method willDestroy
	  */
	  willDestroy: function() {
	    // calling this._super() will nuke computed properties and observers,
	    // so collect any information we need before calling super.
	    var childViews = this._childViews,
	        parent     = get(this, '_parentView'),
	        childLen;
	
	    // destroy the element -- this will avoid each child view destroying
	    // the element over and over again...
	    if (!this.removedFromDOM) { this.destroyElement(); }
	
	    // remove from non-virtual parent view if viewName was specified
	    if (this.viewName) {
	      var nonVirtualParentView = get(this, 'parentView');
	      if (nonVirtualParentView) {
	        set(nonVirtualParentView, this.viewName, null);
	      }
	    }
	
	    // remove from parent if found. Don't call removeFromParent,
	    // as removeFromParent will try to remove the element from
	    // the DOM again.
	    if (parent) { parent.removeChild(this); }
	
	    this.state = 'destroyed';
	
	    childLen = childViews.length;
	    for (var i=childLen-1; i>=0; i--) {
	      childViews[i].removedFromDOM = true;
	      childViews[i].destroy();
	    }
	
	    // next remove view from global hash
	    if (!this.isVirtual) delete Ember.View.views[get(this, 'elementId')];
	  },
	
	  /**
	    Instantiates a view to be added to the childViews array during view
	    initialization. You generally will not call this method directly unless
	    you are overriding createChildViews(). Note that this method will
	    automatically configure the correct settings on the new view instance to
	    act as a child of the parent.
	
	    @method createChildView
	    @param {Class} viewClass
	    @param {Hash} [attrs] Attributes to add
	    @return {Ember.View} new instance
	  */
	  createChildView: function(view, attrs) {
	    if (Ember.CoreView.detect(view)) {
	      attrs = attrs || {};
	      attrs._parentView = this;
	      attrs.templateData = attrs.templateData || get(this, 'templateData');
	
	      view = view.create(attrs);
	
	      // don't set the property on a virtual view, as they are invisible to
	      // consumers of the view API
	      if (view.viewName) { set(get(this, 'concreteView'), view.viewName, view); }
	    } else {
	      Ember.assert('You must pass instance or subclass of View', view instanceof Ember.CoreView);
	      Ember.assert("You can only pass attributes when a class is provided", !attrs);
	
	      if (!get(view, 'templateData')) {
	        set(view, 'templateData', get(this, 'templateData'));
	      }
	
	      set(view, '_parentView', this);
	    }
	
	    return view;
	  },
	
	  becameVisible: Ember.K,
	  becameHidden: Ember.K,
	
	  /**
	    @private
	
	    When the view's `isVisible` property changes, toggle the visibility
	    element of the actual DOM element.
	
	    @method _isVisibleDidChange
	  */
	  _isVisibleDidChange: Ember.observer(function() {
	    var $el = this.$();
	    if (!$el) { return; }
	
	    var isVisible = get(this, 'isVisible');
	
	    $el.toggle(isVisible);
	
	    if (this._isAncestorHidden()) { return; }
	
	    if (isVisible) {
	      this._notifyBecameVisible();
	    } else {
	      this._notifyBecameHidden();
	    }
	  }, 'isVisible'),
	
	  _notifyBecameVisible: function() {
	    this.trigger('becameVisible');
	
	    this.forEachChildView(function(view) {
	      var isVisible = get(view, 'isVisible');
	
	      if (isVisible || isVisible === null) {
	        view._notifyBecameVisible();
	      }
	    });
	  },
	
	  _notifyBecameHidden: function() {
	    this.trigger('becameHidden');
	    this.forEachChildView(function(view) {
	      var isVisible = get(view, 'isVisible');
	
	      if (isVisible || isVisible === null) {
	        view._notifyBecameHidden();
	      }
	    });
	  },
	
	  _isAncestorHidden: function() {
	    var parent = get(this, 'parentView');
	
	    while (parent) {
	      if (get(parent, 'isVisible') === false) { return true; }
	
	      parent = get(parent, 'parentView');
	    }
	
	    return false;
	  },
	
	  clearBuffer: function() {
	    this.invokeRecursively(function(view) {
	      this.buffer = null;
	    });
	  },
	
	  transitionTo: function(state, children) {
	    this.state = state;
	
	    if (children !== false) {
	      this.forEachChildView(function(view) {
	        view.transitionTo(state);
	      });
	    }
	  },
	
	  // .......................................................
	  // EVENT HANDLING
	  //
	
	  /**
	    @private
	
	    Handle events from `Ember.EventDispatcher`
	
	    @method handleEvent
	    @param eventName {String}
	    @param evt {Event}
	  */
	  handleEvent: function(eventName, evt) {
	    return this.invokeForState('handleEvent', eventName, evt);
	  }
	
	});
	
	/*
	  Describe how the specified actions should behave in the various
	  states that a view can exist in. Possible states:
	
	  * preRender: when a view is first instantiated, and after its
	    element was destroyed, it is in the preRender state
	  * inBuffer: once a view has been rendered, but before it has
	    been inserted into the DOM, it is in the inBuffer state
	  * inDOM: once a view has been inserted into the DOM it is in
	    the inDOM state. A view spends the vast majority of its
	    existence in this state.
	  * destroyed: once a view has been destroyed (using the destroy
	    method), it is in this state. No further actions can be invoked
	    on a destroyed view.
	*/
	
	  // in the destroyed state, everything is illegal
	
	  // before rendering has begun, all legal manipulations are noops.
	
	  // inside the buffer, legal manipulations are done on the buffer
	
	  // once the view has been inserted into the DOM, legal manipulations
	  // are done on the DOM element.
	
	var DOMManager = {
	  prepend: function(view, html) {
	    view.$().prepend(html);
	  },
	
	  after: function(view, html) {
	    view.$().after(html);
	  },
	
	  html: function(view, html) {
	    view.$().html(html);
	  },
	
	  replace: function(view) {
	    var element = get(view, 'element');
	
	    set(view, 'element', null);
	
	    view._insertElementLater(function() {
	      Ember.$(element).replaceWith(get(view, 'element'));
	    });
	  },
	
	  remove: function(view) {
	    view.$().remove();
	  },
	
	  empty: function(view) {
	    view.$().empty();
	  }
	};
	
	Ember.View.reopen({
	  states: Ember.View.states,
	  domManager: DOMManager
	});
	
	Ember.View.reopenClass({
	
	  /**
	    @private
	
	    Parse a path and return an object which holds the parsed properties.
	
	    For example a path like "content.isEnabled:enabled:disabled" wil return the
	    following object:
	
	        {
	          path: "content.isEnabled",
	          className: "enabled",
	          falsyClassName: "disabled",
	          classNames: ":enabled:disabled"
	        }
	
	    @method _parsePropertyPath
	    @static
	  */
	  _parsePropertyPath: function(path) {
	    var split = path.split(':'),
	        propertyPath = split[0],
	        classNames = "",
	        className,
	        falsyClassName;
	
	    // check if the property is defined as prop:class or prop:trueClass:falseClass
	    if (split.length > 1) {
	      className = split[1];
	      if (split.length === 3) { falsyClassName = split[2]; }
	
	      classNames = ':' + className;
	      if (falsyClassName) { classNames += ":" + falsyClassName; }
	    }
	
	    return {
	      path: propertyPath,
	      classNames: classNames,
	      className: (className === '') ? undefined : className,
	      falsyClassName: falsyClassName
	    };
	  },
	
	  /**
	    @private
	
	    Get the class name for a given value, based on the path, optional className
	    and optional falsyClassName.
	
	    - if a className or falsyClassName has been specified:
	      - if the value is truthy and className has been specified, className is returned
	      - if the value is falsy and falsyClassName has been specified, falsyClassName is returned
	      - otherwise null is returned
	    - if the value is true, the dasherized last part of the supplied path is returned
	    - if the value is not false, undefined or null, the value is returned
	    - if none of the above rules apply, null is returned
	
	    @method _classStringForValue
	    @param path
	    @param val
	    @param className
	    @param falsyClassName
	    @static
	  */
	  _classStringForValue: function(path, val, className, falsyClassName) {
	    // When using the colon syntax, evaluate the truthiness or falsiness
	    // of the value to determine which className to return
	    if (className || falsyClassName) {
	      if (className && !!val) {
	        return className;
	
	      } else if (falsyClassName && !val) {
	        return falsyClassName;
	
	      } else {
	        return null;
	      }
	
	    // If value is a Boolean and true, return the dasherized property
	    // name.
	    } else if (val === true) {
	      // Normalize property path to be suitable for use
	      // as a class name. For exaple, content.foo.barBaz
	      // becomes bar-baz.
	      var parts = path.split('.');
	      return Ember.String.dasherize(parts[parts.length-1]);
	
	    // If the value is not false, undefined, or null, return the current
	    // value of the property.
	    } else if (val !== false && val !== undefined && val !== null) {
	      return val;
	
	    // Nothing to display. Return null so that the old class is removed
	    // but no new class is added.
	    } else {
	      return null;
	    }
	  }
	});
	
	/**
	  Global views hash
	
	  @property views
	  @static
	  @type Hash
	*/
	Ember.View.views = {};
	
	// If someone overrides the child views computed property when
	// defining their class, we want to be able to process the user's
	// supplied childViews and then restore the original computed property
	// at view initialization time. This happens in Ember.ContainerView's init
	// method.
	Ember.View.childViewsProperty = childViewsProperty;
	
	Ember.View.applyAttributeBindings = function(elem, name, value) {
	  var type = Ember.typeOf(value);
	  var currentValue = elem.attr(name);
	
	  // if this changes, also change the logic in ember-handlebars/lib/helpers/binding.js
	  if ((type === 'string' || (type === 'number' && !isNaN(value))) && value !== currentValue) {
	    elem.attr(name, value);
	  } else if (value && type === 'boolean') {
	    elem.attr(name, name);
	  } else if (!value) {
	    elem.removeAttr(name);
	  }
	};
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-views
	*/
	
	var get = Ember.get, set = Ember.set;
	
	Ember.View.states = {
	  _default: {
	    // appendChild is only legal while rendering the buffer.
	    appendChild: function() {
	      throw "You can't use appendChild outside of the rendering process";
	    },
	
	    $: function() {
	      return undefined;
	    },
	
	    getElement: function() {
	      return null;
	    },
	
	    // Handle events from `Ember.EventDispatcher`
	    handleEvent: function() {
	      return true; // continue event propagation
	    },
	
	    destroyElement: function(view) {
	      set(view, 'element', null);
	      if (view._scheduledInsert) {
	        Ember.run.cancel(view._scheduledInsert);
	        view._scheduledInsert = null;
	      }
	      return view;
	    },
	
	    renderToBufferIfNeeded: function () {
	      return false;
	    }
	  }
	};
	
	Ember.View.reopen({
	  states: Ember.View.states
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-views
	*/
	
	Ember.View.states.preRender = {
	  parentState: Ember.View.states._default,
	
	  // a view leaves the preRender state once its element has been
	  // created (createElement).
	  insertElement: function(view, fn) {
	    view.createElement();
	    view._notifyWillInsertElement();
	    // after createElement, the view will be in the hasElement state.
	    fn.call(view);
	    view.transitionTo('inDOM');
	    view._notifyDidInsertElement();
	  },
	
	  renderToBufferIfNeeded: function(view) {
	    return view.renderToBuffer();
	  },
	
	  empty: Ember.K,
	
	  setElement: function(view, value) {
	    if (value !== null) {
	      view.transitionTo('hasElement');
	    }
	    return value;
	  }
	};
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-views
	*/
	
	var get = Ember.get, set = Ember.set, meta = Ember.meta;
	
	Ember.View.states.inBuffer = {
	  parentState: Ember.View.states._default,
	
	  $: function(view, sel) {
	    // if we don't have an element yet, someone calling this.$() is
	    // trying to update an element that isn't in the DOM. Instead,
	    // rerender the view to allow the render method to reflect the
	    // changes.
	    view.rerender();
	    return Ember.$();
	  },
	
	  // when a view is rendered in a buffer, rerendering it simply
	  // replaces the existing buffer with a new one
	  rerender: function(view) {
	    Ember.deprecate("Something you did caused a view to re-render after it rendered but before it was inserted into the DOM. Because this is avoidable and the cause of significant performance issues in applications, this behavior is deprecated. If you want to use the debugger to find out what caused this, you can set ENV.RAISE_ON_DEPRECATION to true.");
	
	    view._notifyWillClearRender();
	
	    view.clearRenderedChildren();
	    view.renderToBuffer(view.buffer, 'replaceWith');
	  },
	
	  // when a view is rendered in a buffer, appending a child
	  // view will render that view and append the resulting
	  // buffer into its buffer.
	  appendChild: function(view, childView, options) {
	    var buffer = view.buffer;
	
	    childView = this.createChildView(childView, options);
	    view._childViews.push(childView);
	
	    childView.renderToBuffer(buffer);
	
	    view.propertyDidChange('childViews');
	
	    return childView;
	  },
	
	  // when a view is rendered in a buffer, destroying the
	  // element will simply destroy the buffer and put the
	  // state back into the preRender state.
	  destroyElement: function(view) {
	    view.clearBuffer();
	    view._notifyWillDestroyElement();
	    view.transitionTo('preRender');
	
	    return view;
	  },
	
	  empty: function() {
	    Ember.assert("Emptying a view in the inBuffer state is not allowed and should not happen under normal circumstances. Most likely there is a bug in your application. This may be due to excessive property change notifications.");
	  },
	
	  renderToBufferIfNeeded: function (view) {
	    return view.buffer;
	  },
	
	  // It should be impossible for a rendered view to be scheduled for
	  // insertion.
	  insertElement: function() {
	    throw "You can't insert an element that has already been rendered";
	  },
	
	  setElement: function(view, value) {
	    if (value === null) {
	      view.transitionTo('preRender');
	    } else {
	      view.clearBuffer();
	      view.transitionTo('hasElement');
	    }
	
	    return value;
	  }
	};
	
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-views
	*/
	
	var get = Ember.get, set = Ember.set, meta = Ember.meta;
	
	Ember.View.states.hasElement = {
	  parentState: Ember.View.states._default,
	
	  $: function(view, sel) {
	    var elem = get(view, 'element');
	    return sel ? Ember.$(sel, elem) : Ember.$(elem);
	  },
	
	  getElement: function(view) {
	    var parent = get(view, 'parentView');
	    if (parent) { parent = get(parent, 'element'); }
	    if (parent) { return view.findElementInParentElement(parent); }
	    return Ember.$("#" + get(view, 'elementId'))[0];
	  },
	
	  setElement: function(view, value) {
	    if (value === null) {
	      view.transitionTo('preRender');
	    } else {
	      throw "You cannot set an element to a non-null value when the element is already in the DOM.";
	    }
	
	    return value;
	  },
	
	  // once the view has been inserted into the DOM, rerendering is
	  // deferred to allow bindings to synchronize.
	  rerender: function(view) {
	    view._notifyWillClearRender();
	
	    view.clearRenderedChildren();
	
	    view.domManager.replace(view);
	    return view;
	  },
	
	  // once the view is already in the DOM, destroying it removes it
	  // from the DOM, nukes its element, and puts it back into the
	  // preRender state if inDOM.
	
	  destroyElement: function(view) {
	    view._notifyWillDestroyElement();
	    view.domManager.remove(view);
	    set(view, 'element', null);
	    if (view._scheduledInsert) {
	      Ember.run.cancel(view._scheduledInsert);
	      view._scheduledInsert = null;
	    }
	    return view;
	  },
	
	  empty: function(view) {
	    var _childViews = view._childViews, len, idx;
	    if (_childViews) {
	      len = _childViews.length;
	      for (idx = 0; idx < len; idx++) {
	        _childViews[idx]._notifyWillDestroyElement();
	      }
	    }
	    view.domManager.empty(view);
	  },
	
	  // Handle events from `Ember.EventDispatcher`
	  handleEvent: function(view, eventName, evt) {
	    if (view.has(eventName)) {
	      // Handler should be able to re-dispatch events, so we don't
	      // preventDefault or stopPropagation.
	      return view.trigger(eventName, evt);
	    } else {
	      return true; // continue event propagation
	    }
	  }
	};
	
	Ember.View.states.inDOM = {
	  parentState: Ember.View.states.hasElement,
	
	  insertElement: function(view, fn) {
	    throw "You can't insert an element into the DOM that has already been inserted";
	  }
	};
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-views
	*/
	
	var destroyedError = "You can't call %@ on a destroyed view", fmt = Ember.String.fmt;
	
	Ember.View.states.destroyed = {
	  parentState: Ember.View.states._default,
	
	  appendChild: function() {
	    throw fmt(destroyedError, ['appendChild']);
	  },
	  rerender: function() {
	    throw fmt(destroyedError, ['rerender']);
	  },
	  destroyElement: function() {
	    throw fmt(destroyedError, ['destroyElement']);
	  },
	  empty: function() {
	    throw fmt(destroyedError, ['empty']);
	  },
	
	  setElement: function() {
	    throw fmt(destroyedError, ["set('element', ...)"]);
	  },
	
	  renderToBufferIfNeeded: function() {
	    throw fmt(destroyedError, ["renderToBufferIfNeeded"]);
	  },
	
	  // Since element insertion is scheduled, don't do anything if
	  // the view has been destroyed between scheduling and execution
	  insertElement: Ember.K
	};
	
	
	})();
	
	
	
	(function() {
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-views
	*/
	
	var get = Ember.get, set = Ember.set, meta = Ember.meta;
	var forEach = Ember.EnumerableUtils.forEach;
	
	var childViewsProperty = Ember.computed(function() {
	  return get(this, '_childViews');
	}).property('_childViews');
	
	/**
	  A `ContainerView` is an `Ember.View` subclass that allows for manual or programatic
	  management of a view's `childViews` array that will correctly update the `ContainerView`
	  instance's rendered DOM representation.
	
	  ## Setting Initial Child Views
	  The initial array of child views can be set in one of two ways. You can provide
	  a `childViews` property at creation time that contains instance of `Ember.View`:
	
	  ``` javascript
	  aContainer = Ember.ContainerView.create({
	    childViews: [Ember.View.create(), Ember.View.create()]
	  });
	  ```
	
	  You can also provide a list of property names whose values are instances of `Ember.View`:
	
	  ``` javascript
	  aContainer = Ember.ContainerView.create({
	    childViews: ['aView', 'bView', 'cView'],
	    aView: Ember.View.create(),
	    bView: Ember.View.create()
	    cView: Ember.View.create()
	  });
	  ```
	
	  The two strategies can be combined:
	
	  ``` javascript
	  aContainer = Ember.ContainerView.create({
	    childViews: ['aView', Ember.View.create()],
	    aView: Ember.View.create()
	  });
	  ```
	
	  Each child view's rendering will be inserted into the container's rendered HTML in the same
	  order as its position in the `childViews` property.
	
	  ## Adding and Removing Child Views
	  The views in a container's `childViews` array should be added and removed by manipulating
	  the `childViews` property directly.
	
	  To remove a view pass that view into a `removeObject` call on the container's `childViews` property.
	
	  Given an empty `<body>` the following code
	
	  ``` javascript
	  aContainer = Ember.ContainerView.create({
	    classNames: ['the-container'],
	    childViews: ['aView', 'bView'],
	    aView: Ember.View.create({
	      template: Ember.Handlebars.compile("A")
	    }),
	    bView: Ember.View.create({
	      template: Ember.Handlebars.compile("B")
	    })
	  });
	
	  aContainer.appendTo('body');
	  ``` 
	
	  Results in the HTML
	
	  ``` html
	  <div class="ember-view the-container">
	    <div class="ember-view">A</div>
	    <div class="ember-view">B</div>
	  </div>
	  ```
	
	  Removing a view
	
	  ``` javascript
	  aContainer.get('childViews'); // [aContainer.aView, aContainer.bView]
	  aContainer.get('childViews').removeObject(aContainer.get('bView'));
	  aContainer.get('childViews'); // [aContainer.aView]
	  ```
	
	  Will result in the following HTML
	
	  ``` html
	  <div class="ember-view the-container">
	    <div class="ember-view">A</div>
	  </div>
	  ```
	
	
	  Similarly, adding a child view is accomplished by adding `Ember.View` instances to the
	  container's `childViews` property.
	
	  Given an empty `<body>` the following code
	
	  ``` javascript
	  aContainer = Ember.ContainerView.create({
	    classNames: ['the-container'],
	    childViews: ['aView', 'bView'],
	    aView: Ember.View.create({
	      template: Ember.Handlebars.compile("A")
	    }),
	    bView: Ember.View.create({
	      template: Ember.Handlebars.compile("B")
	    })
	  });
	
	  aContainer.appendTo('body');
	  ```
	
	  Results in the HTML
	
	  ``` html
	  <div class="ember-view the-container">
	    <div class="ember-view">A</div>
	    <div class="ember-view">B</div>
	  </div>
	  ```
	
	  Adding a view
	
	  ``` javascript
	  AnotherViewClass = Ember.View.extend({
	    template: Ember.Handlebars.compile("Another view")
	  });
	
	  aContainer.get('childViews'); // [aContainer.aView, aContainer.bView]
	  aContainer.get('childViews').pushObject(AnotherViewClass.create());
	  aContainer.get('childViews'); // [aContainer.aView, aContainer.bView, <AnotherViewClass instance>]
	  ```
	
	  Will result in the following HTML
	
	  ``` html
	  <div class="ember-view the-container">
	    <div class="ember-view">A</div>
	    <div class="ember-view">B</div>
	    <div class="ember-view">Another view</div>
	  </div>
	  ```
	
	
	  Direct manipulation of childViews presence or absence in the DOM via calls to
	  `remove` or `removeFromParent` or calls to a container's `removeChild` may not behave
	  correctly.
	
	  Calling `remove()` on a child view will remove the view's HTML, but it will remain as part of its
	  container's `childView`s property.
	
	  Calling `removeChild()` on the container will remove the passed view instance from the container's
	  `childView`s but keep its HTML within the container's rendered view.
	
	  Calling `removeFromParent()` behaves as expected but should be avoided in favor of direct
	  manipulation of a container's `childViews` property.
	
	  ``` javascript
	  aContainer = Ember.ContainerView.create({
	    classNames: ['the-container'],
	    childViews: ['aView', 'bView'],
	    aView: Ember.View.create({
	      template: Ember.Handlebars.compile("A")
	    }),
	    bView: Ember.View.create({
	      template: Ember.Handlebars.compile("B")
	    })
	  });
	
	  aContainer.appendTo('body');
	  ```
	
	  Results in the HTML
	
	  ``` html
	  <div class="ember-view the-container">
	    <div class="ember-view">A</div>
	    <div class="ember-view">B</div>
	  </div>
	  ```
	
	  Calling `aContainer.get('aView').removeFromParent()` will result in the following HTML
	
	  ``` html
	  <div class="ember-view the-container">
	    <div class="ember-view">B</div>
	  </div>
	  ```
	
	  And the `Ember.View` instance stored in `aContainer.aView` will be removed from `aContainer`'s
	  `childViews` array.
	
	  ## Templates and Layout
	
	  A `template`, `templateName`, `defaultTemplate`, `layout`, `layoutName` or `defaultLayout`
	  property on a container view will not result in the template or layout being rendered.
	  The HTML contents of a `Ember.ContainerView`'s DOM representation will only be the rendered HTML
	  of its child views.
	
	  ## Binding a View to Display
	
	  If you would like to display a single view in your ContainerView, you can set its `currentView`
	  property. When the `currentView` property is set to a view instance, it will be added to the
	  ContainerView's `childViews` array. If the `currentView` property is later changed to a
	  different view, the new view will replace the old view. If `currentView` is set to `null`, the
	  last `currentView` will be removed.
	
	  This functionality is useful for cases where you want to bind the display of a ContainerView to
	  a controller or state manager. For example, you can bind the `currentView` of a container to
	  a controller like this:
	
	  ``` javascript
	  App.appController = Ember.Object.create({
	    view: Ember.View.create({
	      templateName: 'person_template'
	    })
	  });
	  ```
	
	  ``` handlebars
	  {{view Ember.ContainerView currentViewBinding="App.appController.view"}}
	  ```
	
	  @class ContainerView
	  @namespace Ember
	  @extends Ember.View
	*/
	
	Ember.ContainerView = Ember.View.extend({
	
	  init: function() {
	    this._super();
	
	    var childViews = get(this, 'childViews');
	    Ember.defineProperty(this, 'childViews', childViewsProperty);
	
	    var _childViews = this._childViews;
	
	    forEach(childViews, function(viewName, idx) {
	      var view;
	
	      if ('string' === typeof viewName) {
	        view = get(this, viewName);
	        view = this.createChildView(view);
	        set(this, viewName, view);
	      } else {
	        view = this.createChildView(viewName);
	      }
	
	      _childViews[idx] = view;
	    }, this);
	
	    var currentView = get(this, 'currentView');
	    if (currentView) _childViews.push(this.createChildView(currentView));
	
	    // Make the _childViews array observable
	    Ember.A(_childViews);
	
	    // Sets up an array observer on the child views array. This
	    // observer will detect when child views are added or removed
	    // and update the DOM to reflect the mutation.
	    get(this, 'childViews').addArrayObserver(this, {
	      willChange: 'childViewsWillChange',
	      didChange: 'childViewsDidChange'
	    });
	  },
	
	  /**
	    @private
	
	    Instructs each child view to render to the passed render buffer.
	
	    @method render
	    @param {Ember.RenderBuffer} buffer the buffer to render to
	  */
	  render: function(buffer) {
	    this.forEachChildView(function(view) {
	      view.renderToBuffer(buffer);
	    });
	  },
	
	  instrumentName: 'render.container',
	
	  /**
	    @private
	
	    When the container view is destroyed, tear down the child views
	    array observer.
	
	    @method willDestroy
	  */
	  willDestroy: function() {
	    get(this, 'childViews').removeArrayObserver(this, {
	      willChange: 'childViewsWillChange',
	      didChange: 'childViewsDidChange'
	    });
	
	    this._super();
	  },
	
	  /**
	    @private
	
	    When a child view is removed, destroy its element so that
	    it is removed from the DOM.
	
	    The array observer that triggers this action is set up in the
	    `renderToBuffer` method.
	
	    @method childViewsWillChange
	    @param {Ember.Array} views the child views array before mutation
	    @param {Number} start the start position of the mutation
	    @param {Number} removed the number of child views removed
	  **/
	  childViewsWillChange: function(views, start, removed) {
	    if (removed === 0) { return; }
	
	    var changedViews = views.slice(start, start+removed);
	    this.initializeViews(changedViews, null, null);
	
	    this.invokeForState('childViewsWillChange', views, start, removed);
	  },
	
	  /**
	    @private
	
	    When a child view is added, make sure the DOM gets updated appropriately.
	
	    If the view has already rendered an element, we tell the child view to
	    create an element and insert it into the DOM. If the enclosing container view
	    has already written to a buffer, but not yet converted that buffer into an
	    element, we insert the string representation of the child into the appropriate
	    place in the buffer.
	
	    @method childViewsDidChange
	    @param {Ember.Array} views the array of child views afte the mutation has occurred
	    @param {Number} start the start position of the mutation
	    @param {Number} removed the number of child views removed
	    @param {Number} the number of child views added
	  */
	  childViewsDidChange: function(views, start, removed, added) {
	    var len = get(views, 'length');
	
	    // No new child views were added; bail out.
	    if (added === 0) return;
	
	    var changedViews = views.slice(start, start+added);
	    this.initializeViews(changedViews, this, get(this, 'templateData'));
	
	    // Let the current state handle the changes
	    this.invokeForState('childViewsDidChange', views, start, added);
	  },
	
	  initializeViews: function(views, parentView, templateData) {
	    forEach(views, function(view) {
	      set(view, '_parentView', parentView);
	
	      if (!get(view, 'templateData')) {
	        set(view, 'templateData', templateData);
	      }
	    });
	  },
	
	  currentView: null,
	
	  _currentViewWillChange: Ember.beforeObserver(function() {
	    var childViews = get(this, 'childViews'),
	        currentView = get(this, 'currentView');
	
	    if (currentView) {
	      childViews.removeObject(currentView);
	      currentView.destroy();
	    }
	  }, 'currentView'),
	
	  _currentViewDidChange: Ember.observer(function() {
	    var childViews = get(this, 'childViews'),
	        currentView = get(this, 'currentView');
	
	    if (currentView) {
	      childViews.pushObject(currentView);
	    }
	  }, 'currentView'),
	
	  _ensureChildrenAreInDOM: function () {
	    this.invokeForState('ensureChildrenAreInDOM', this);
	  }
	});
	
	// Ember.ContainerView extends the default view states to provide different
	// behavior for childViewsWillChange and childViewsDidChange.
	Ember.ContainerView.states = {
	  parent: Ember.View.states,
	
	  inBuffer: {
	    childViewsDidChange: function(parentView, views, start, added) {
	      var buffer = parentView.buffer,
	          startWith, prev, prevBuffer, view;
	
	      // Determine where to begin inserting the child view(s) in the
	      // render buffer.
	      if (start === 0) {
	        // If views were inserted at the beginning, prepend the first
	        // view to the render buffer, then begin inserting any
	        // additional views at the beginning.
	        view = views[start];
	        startWith = start + 1;
	        view.renderToBuffer(buffer, 'prepend');
	      } else {
	        // Otherwise, just insert them at the same place as the child
	        // views mutation.
	        view = views[start - 1];
	        startWith = start;
	      }
	
	      for (var i=startWith; i<start+added; i++) {
	        prev = view;
	        view = views[i];
	        prevBuffer = prev.buffer;
	        view.renderToBuffer(prevBuffer, 'insertAfter');
	      }
	    }
	  },
	
	  hasElement: {
	    childViewsWillChange: function(view, views, start, removed) {
	      for (var i=start; i<start+removed; i++) {
	        views[i].remove();
	      }
	    },
	
	    childViewsDidChange: function(view, views, start, added) {
	      Ember.run.scheduleOnce('render', this, '_ensureChildrenAreInDOM');
	    },
	
	    ensureChildrenAreInDOM: function(view) {
	      var childViews = view.get('childViews'), i, len, childView, previous, buffer;
	      for (i = 0, len = childViews.length; i < len; i++) {
	        childView = childViews[i];
	        buffer = childView.renderToBufferIfNeeded();
	        if (buffer) {
	          childView._notifyWillInsertElement();
	          if (previous) {
	            previous.domManager.after(previous, buffer.string());
	          } else {
	            view.domManager.prepend(view, buffer.string());
	          }
	          childView.transitionTo('inDOM');
	          childView.propertyDidChange('element');
	          childView._notifyDidInsertElement();
	        }
	        previous = childView;
	      }
	    }
	  }
	};
	
	Ember.ContainerView.states.inDOM = {
	  parentState: Ember.ContainerView.states.hasElement
	};
	
	Ember.ContainerView.reopen({
	  states: Ember.ContainerView.states
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-views
	*/
	
	var get = Ember.get, set = Ember.set, fmt = Ember.String.fmt;
	
	/**
	  `Ember.CollectionView` is an `Ember.View` descendent responsible for managing a
	  collection (an array or array-like object) by maintaing a child view object and 
	  associated DOM representation for each item in the array and ensuring that child
	  views and their associated rendered HTML are updated when items in the array
	  are added, removed, or replaced.
	
	  ## Setting content
	  The managed collection of objects is referenced as the `Ember.CollectionView` instance's
	  `content` property.
	
	  ``` javascript
	  someItemsView = Ember.CollectionView.create({
	    content: ['A', 'B','C']
	  })
	  ```
	
	  The view for each item in the collection will have its `content` property set
	  to the item.
	
	  ## Specifying itemViewClass
	  By default the view class for each item in the managed collection will be an instance
	  of `Ember.View`. You can supply a different class by setting the `CollectionView`'s
	  `itemViewClass` property.
	
	  Given an empty `<body>` and the following code:
	
	  ``` javascript 
	  someItemsView = Ember.CollectionView.create({
	    classNames: ['a-collection'],
	    content: ['A','B','C'],
	    itemViewClass: Ember.View.extend({
	      template: Ember.Handlebars.compile("the letter: {{view.content}}")
	    })
	  });
	
	  someItemsView.appendTo('body');
	  ```
	
	  Will result in the following HTML structure
	
	  ``` html
	  <div class="ember-view a-collection">
	    <div class="ember-view">the letter: A</div>
	    <div class="ember-view">the letter: B</div>
	    <div class="ember-view">the letter: C</div>
	  </div>
	  ```
	
	  ## Automatic matching of parent/child tagNames
	
	  Setting the `tagName` property of a `CollectionView` to any of 
	  "ul", "ol", "table", "thead", "tbody", "tfoot", "tr", or "select" will result
	  in the item views receiving an appropriately matched `tagName` property.
	
	
	  Given an empty `<body>` and the following code:
	
	  ``` javascript
	  anUndorderedListView = Ember.CollectionView.create({
	    tagName: 'ul',
	    content: ['A','B','C'],
	    itemViewClass: Ember.View.extend({
	      template: Ember.Handlebars.compile("the letter: {{view.content}}")
	    })
	  });
	
	  anUndorderedListView.appendTo('body');
	  ```
	
	  Will result in the following HTML structure
	
	  ``` html
	  <ul class="ember-view a-collection">
	    <li class="ember-view">the letter: A</li>
	    <li class="ember-view">the letter: B</li>
	    <li class="ember-view">the letter: C</li>
	  </ul>
	  ```
	
	  Additional tagName pairs can be provided by adding to `Ember.CollectionView.CONTAINER_MAP `
	
	  ``` javascript
	  Ember.CollectionView.CONTAINER_MAP['article'] = 'section'
	  ```
	
	
	  ## Empty View
	  You can provide an `Ember.View` subclass to the `Ember.CollectionView` instance as its
	  `emptyView` property. If the `content` property of a `CollectionView` is set to `null`
	  or an empty array, an instance of this view will be the `CollectionView`s only child.
	
	  ``` javascript
	  aListWithNothing = Ember.CollectionView.create({
	    classNames: ['nothing']
	    content: null,
	    emptyView: Ember.View.extend({
	      template: Ember.Handlebars.compile("The collection is empty")
	    })
	  });
	
	  aListWithNothing.appendTo('body');
	  ```
	
	  Will result in the following HTML structure
	
	  ``` html
	  <div class="ember-view nothing">
	    <div class="ember-view">
	      The collection is empty
	    </div>
	  </div>
	  ```
	
	  ## Adding and Removing items
	  The `childViews` property of a `CollectionView` should not be directly manipulated. Instead,
	  add, remove, replace items from its `content` property. This will trigger
	  appropriate changes to its rendered HTML.
	
	  ## Use in templates via the `{{collection}}` Ember.Handlebars helper
	  Ember.Handlebars provides a helper specifically for adding `CollectionView`s to templates.
	  See `Ember.Handlebars.collection` for more details
	
	  @class CollectionView
	  @namespace Ember
	  @extends Ember.ContainerView
	  @since Ember 0.9
	*/
	Ember.CollectionView = Ember.ContainerView.extend(
	/** @scope Ember.CollectionView.prototype */ {
	
	  /**
	    A list of items to be displayed by the Ember.CollectionView.
	
	    @property content
	    @type Ember.Array
	    @default null
	  */
	  content: null,
	
	  /**
	    @private
	
	    This provides metadata about what kind of empty view class this
	    collection would like if it is being instantiated from another
	    system (like Handlebars)
	
	    @property emptyViewClass
	  */
	  emptyViewClass: Ember.View,
	
	  /**
	    An optional view to display if content is set to an empty array.
	
	    @property emptyView
	    @type Ember.View
	    @default null
	  */
	  emptyView: null,
	
	  /**
	    @property itemViewClass
	    @type Ember.View
	    @default Ember.View
	  */
	  itemViewClass: Ember.View,
	
	  init: function() {
	    var ret = this._super();
	    this._contentDidChange();
	    return ret;
	  },
	
	  _contentWillChange: Ember.beforeObserver(function() {
	    var content = this.get('content');
	
	    if (content) { content.removeArrayObserver(this); }
	    var len = content ? get(content, 'length') : 0;
	    this.arrayWillChange(content, 0, len);
	  }, 'content'),
	
	  /**
	    @private
	
	    Check to make sure that the content has changed, and if so,
	    update the children directly. This is always scheduled
	    asynchronously, to allow the element to be created before
	    bindings have synchronized and vice versa.
	
	    @method _contentDidChange
	  */
	  _contentDidChange: Ember.observer(function() {
	    var content = get(this, 'content');
	
	    if (content) {
	      Ember.assert(fmt("an Ember.CollectionView's content must implement Ember.Array. You passed %@", [content]), Ember.Array.detect(content));
	      content.addArrayObserver(this);
	    }
	
	    var len = content ? get(content, 'length') : 0;
	    this.arrayDidChange(content, 0, null, len);
	  }, 'content'),
	
	  willDestroy: function() {
	    var content = get(this, 'content');
	    if (content) { content.removeArrayObserver(this); }
	
	    this._super();
	  },
	
	  arrayWillChange: function(content, start, removedCount) {
	    // If the contents were empty before and this template collection has an
	    // empty view remove it now.
	    var emptyView = get(this, 'emptyView');
	    if (emptyView && emptyView instanceof Ember.View) {
	      emptyView.removeFromParent();
	    }
	
	    // Loop through child views that correspond with the removed items.
	    // Note that we loop from the end of the array to the beginning because
	    // we are mutating it as we go.
	    var childViews = get(this, 'childViews'), childView, idx, len;
	
	    len = get(childViews, 'length');
	
	    var removingAll = removedCount === len;
	
	    if (removingAll) {
	      this.invokeForState('empty');
	    }
	
	    for (idx = start + removedCount - 1; idx >= start; idx--) {
	      childView = childViews[idx];
	      if (removingAll) { childView.removedFromDOM = true; }
	      childView.destroy();
	    }
	  },
	
	  /**
	    Called when a mutation to the underlying content array occurs.
	
	    This method will replay that mutation against the views that compose the
	    Ember.CollectionView, ensuring that the view reflects the model.
	
	    This array observer is added in contentDidChange.
	
	    @method arrayDidChange
	    @param {Array} addedObjects the objects that were added to the content
	    @param {Array} removedObjects the objects that were removed from the content
	    @param {Number} changeIndex the index at which the changes occurred
	  */
	  arrayDidChange: function(content, start, removed, added) {
	    var itemViewClass = get(this, 'itemViewClass'),
	        childViews = get(this, 'childViews'),
	        addedViews = [], view, item, idx, len, itemTagName;
	
	    if ('string' === typeof itemViewClass) {
	      itemViewClass = get(itemViewClass);
	    }
	
	    Ember.assert(fmt("itemViewClass must be a subclass of Ember.View, not %@", [itemViewClass]), Ember.View.detect(itemViewClass));
	
	    len = content ? get(content, 'length') : 0;
	    if (len) {
	      for (idx = start; idx < start+added; idx++) {
	        item = content.objectAt(idx);
	
	        view = this.createChildView(itemViewClass, {
	          content: item,
	          contentIndex: idx
	        });
	
	        addedViews.push(view);
	      }
	    } else {
	      var emptyView = get(this, 'emptyView');
	      if (!emptyView) { return; }
	
	      emptyView = this.createChildView(emptyView);
	      addedViews.push(emptyView);
	      set(this, 'emptyView', emptyView);
	    }
	    childViews.replace(start, 0, addedViews);
	  },
	
	  createChildView: function(view, attrs) {
	    view = this._super(view, attrs);
	
	    var itemTagName = get(view, 'tagName');
	    var tagName = (itemTagName === null || itemTagName === undefined) ? Ember.CollectionView.CONTAINER_MAP[get(this, 'tagName')] : itemTagName;
	
	    set(view, 'tagName', tagName);
	
	    return view;
	  }
	});
	
	/**
	  A map of parent tags to their default child tags. You can add
	  additional parent tags if you want collection views that use
	  a particular parent tag to default to a child tag.
	
	  @property CONTAINER_MAP
	  @type Hash
	  @static
	  @final
	*/
	Ember.CollectionView.CONTAINER_MAP = {
	  ul: 'li',
	  ol: 'li',
	  table: 'tr',
	  thead: 'tr',
	  tbody: 'tr',
	  tfoot: 'tr',
	  tr: 'td',
	  select: 'option'
	};
	
	})();
	
	
	
	(function() {
	
	})();
	
	
	
	(function() {
	/*globals jQuery*/
	/**
	Ember Views
	
	@module ember
	@submodule ember-views
	@require ember-runtime
	@main ember-views
	*/
	
	})();
	


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	//
	// This file is automatically generated. any changes will be lost
	//
	
	__webpack_require__(2);
	
	
	(function() {
	var get = Ember.get, set = Ember.set;
	
	/**
	@module ember
	@submodule ember-states
	*/
	
	/**
	  @class State
	  @namespace Ember
	  @extends Ember.Object
	  @uses Ember.Evented
	*/
	Ember.State = Ember.Object.extend(Ember.Evented,
	/** @scope Ember.State.prototype */{
	  isState: true,
	
	  /**
	    A reference to the parent state.
	
	    @property parentState
	    @type Ember.State
	  */
	  parentState: null,
	  start: null,
	
	  /**
	    The name of this state.
	
	    @property name
	    @type String
	  */
	  name: null,
	
	  /**
	    The full path to this state.
	
	    @property path
	    @type String
	  */
	  path: Ember.computed(function() {
	    var parentPath = get(this, 'parentState.path'),
	        path = get(this, 'name');
	
	    if (parentPath) {
	      path = parentPath + '.' + path;
	    }
	
	    return path;
	  }).property(),
	
	  /**
	    @private
	
	    Override the default event firing from Ember.Evented to
	    also call methods with the given name.
	
	    @method trigger
	    @param name
	  */
	  trigger: function(name) {
	    if (this[name]) {
	      this[name].apply(this, [].slice.call(arguments, 1));
	    }
	    this._super.apply(this, arguments);
	  },
	
	  init: function() {
	    var states = get(this, 'states'), foundStates;
	    set(this, 'childStates', Ember.A());
	    set(this, 'eventTransitions', get(this, 'eventTransitions') || {});
	
	    var name, value, transitionTarget;
	
	    // As a convenience, loop over the properties
	    // of this state and look for any that are other
	    // Ember.State instances or classes, and move them
	    // to the `states` hash. This avoids having to
	    // create an explicit separate hash.
	
	    if (!states) {
	      states = {};
	
	      for (name in this) {
	        if (name === "constructor") { continue; }
	
	        if (value = this[name]) {
	          if (transitionTarget = value.transitionTarget) {
	            this.eventTransitions[name] = transitionTarget;
	          }
	
	          this.setupChild(states, name, value);
	        }
	      }
	
	      set(this, 'states', states);
	    } else {
	      for (name in states) {
	        this.setupChild(states, name, states[name]);
	      }
	    }
	
	    set(this, 'pathsCache', {});
	    set(this, 'pathsCacheNoContext', {});
	  },
	
	  setupChild: function(states, name, value) {
	    if (!value) { return false; }
	
	    if (value.isState) {
	      set(value, 'name', name);
	    } else if (Ember.State.detect(value)) {
	      value = value.create({
	        name: name
	      });
	    }
	
	    if (value.isState) {
	      set(value, 'parentState', this);
	      get(this, 'childStates').pushObject(value);
	      states[name] = value;
	      return value;
	    }
	  },
	
	  lookupEventTransition: function(name) {
	    var path, state = this;
	
	    while(state && !path) {
	      path = state.eventTransitions[name];
	      state = state.get('parentState');
	    }
	
	    return path;
	  },
	
	  /**
	    A Boolean value indicating whether the state is a leaf state
	    in the state hierarchy. This is false if the state has child
	    states; otherwise it is true.
	
	    @property isLeaf
	    @type Boolean
	  */
	  isLeaf: Ember.computed(function() {
	    return !get(this, 'childStates').length;
	  }),
	
	  /**
	    A boolean value indicating whether the state takes a context.
	    By default we assume all states take contexts.
	
	    @property hasContext
	    @default true
	  */
	  hasContext: true,
	
	  /**
	    This is the default transition event.
	
	    @event setup
	    @param {Ember.StateManager} manager
	    @param context
	    @see Ember.StateManager#transitionEvent
	  */
	  setup: Ember.K,
	
	  /**
	    This event fires when the state is entered.
	
	    @event enter
	    @param {Ember.StateManager} manager
	  */
	  enter: Ember.K,
	
	  /**
	    This event fires when the state is exited.
	
	    @event exit
	    @param {Ember.StateManager} manager
	  */
	  exit: Ember.K
	});
	
	Ember.State.reopenClass({
	
	  /**
	    Creates an action function for transitioning to the named state while preserving context.
	
	    The following example StateManagers are equivalent:
	
	        aManager = Ember.StateManager.create({
	          stateOne: Ember.State.create({
	            changeToStateTwo: Ember.State.transitionTo('stateTwo')
	          }),
	          stateTwo: Ember.State.create({})
	        })
	
	        bManager = Ember.StateManager.create({
	          stateOne: Ember.State.create({
	            changeToStateTwo: function(manager, context){
	              manager.transitionTo('stateTwo', context)
	            }
	          }),
	          stateTwo: Ember.State.create({})
	        })
	
	    @method transitionTo
	    @static
	    @param {String} target
	  */
	
	  transitionTo: function(target) {
	
	    var transitionFunction = function(stateManager, contextOrEvent) {
	      var contexts = [], transitionArgs,
	          Event = Ember.$ && Ember.$.Event;
	
	      if (contextOrEvent && (Event && contextOrEvent instanceof Event)) {
	        if (contextOrEvent.hasOwnProperty('contexts')) {
	          contexts = contextOrEvent.contexts.slice();
	        }
	      }
	      else {
	        contexts = [].slice.call(arguments, 1);
	      }
	
	      contexts.unshift(target);
	      stateManager.transitionTo.apply(stateManager, contexts);
	    };
	
	    transitionFunction.transitionTarget = target;
	
	    return transitionFunction;
	  }
	
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-states
	*/
	
	var get = Ember.get, set = Ember.set, fmt = Ember.String.fmt;
	var arrayForEach = Ember.ArrayPolyfills.forEach;
	/**
	  A Transition takes the enter, exit and resolve states and normalizes
	  them:
	
	  * takes any passed in contexts into consideration
	  * adds in `initialState`s
	
	  @class Transition
	  @private
	*/
	var Transition = function(raw) {
	  this.enterStates = raw.enterStates.slice();
	  this.exitStates = raw.exitStates.slice();
	  this.resolveState = raw.resolveState;
	
	  this.finalState = raw.enterStates[raw.enterStates.length - 1] || raw.resolveState;
	};
	
	Transition.prototype = {
	  /**
	    Normalize the passed in enter, exit and resolve states.
	
	    This process also adds `finalState` and `contexts` to the Transition object.
	
	    @method normalize
	    @param {Ember.StateManager} manager the state manager running the transition
	    @param {Array} contexts a list of contexts passed into `transitionTo`
	  */
	  normalize: function(manager, contexts) {
	    this.matchContextsToStates(contexts);
	    this.addInitialStates();
	    this.removeUnchangedContexts(manager);
	    return this;
	  },
	
	  /**
	    Match each of the contexts passed to `transitionTo` to a state.
	    This process may also require adding additional enter and exit
	    states if there are more contexts than enter states.
	
	    @method matchContextsToStates
	    @param {Array} contexts a list of contexts passed into `transitionTo`
	  */
	  matchContextsToStates: function(contexts) {
	    var stateIdx = this.enterStates.length - 1,
	        matchedContexts = [],
	        state,
	        context;
	
	    // Next, we will match the passed in contexts to the states they
	    // represent.
	    //
	    // First, assign a context to each enter state in reverse order. If
	    // any contexts are left, add a parent state to the list of states
	    // to enter and exit, and assign a context to the parent state.
	    //
	    // If there are still contexts left when the state manager is
	    // reached, raise an exception.
	    //
	    // This allows the following:
	    //
	    // |- root
	    // | |- post
	    // | | |- comments
	    // | |- about (* current state)
	    //
	    // For `transitionTo('post.comments', post, post.get('comments')`,
	    // the first context (`post`) will be assigned to `root.post`, and
	    // the second context (`post.get('comments')`) will be assigned
	    // to `root.post.comments`.
	    //
	    // For the following:
	    //
	    // |- root
	    // | |- post
	    // | | |- index (* current state)
	    // | | |- comments
	    //
	    // For `transitionTo('post.comments', otherPost, otherPost.get('comments')`,
	    // the `<root.post>` state will be added to the list of enter and exit
	    // states because its context has changed.
	
	    while (contexts.length > 0) {
	      if (stateIdx >= 0) {
	        state = this.enterStates[stateIdx--];
	      } else {
	        if (this.enterStates.length) {
	          state = get(this.enterStates[0], 'parentState');
	          if (!state) { throw "Cannot match all contexts to states"; }
	        } else {
	          // If re-entering the current state with a context, the resolve
	          // state will be the current state.
	          state = this.resolveState;
	        }
	
	        this.enterStates.unshift(state);
	        this.exitStates.unshift(state);
	      }
	
	      // in routers, only states with dynamic segments have a context
	      if (get(state, 'hasContext')) {
	        context = contexts.pop();
	      } else {
	        context = null;
	      }
	
	      matchedContexts.unshift(context);
	    }
	
	    this.contexts = matchedContexts;
	  },
	
	  /**
	    Add any `initialState`s to the list of enter states.
	
	    @method addInitialStates
	  */
	  addInitialStates: function() {
	    var finalState = this.finalState, initialState;
	
	    while(true) {
	      initialState = get(finalState, 'initialState') || 'start';
	      finalState = get(finalState, 'states.' + initialState);
	
	      if (!finalState) { break; }
	
	      this.finalState = finalState;
	      this.enterStates.push(finalState);
	      this.contexts.push(undefined);
	    }
	  },
	
	  /**
	    Remove any states that were added because the number of contexts
	    exceeded the number of explicit enter states, but the context has
	    not changed since the last time the state was entered.
	
	    @method removeUnchangedContexts
	    @param {Ember.StateManager} manager passed in to look up the last
	      context for a states
	  */
	  removeUnchangedContexts: function(manager) {
	    // Start from the beginning of the enter states. If the state was added
	    // to the list during the context matching phase, make sure the context
	    // has actually changed since the last time the state was entered.
	    while (this.enterStates.length > 0) {
	      if (this.enterStates[0] !== this.exitStates[0]) { break; }
	
	      if (this.enterStates.length === this.contexts.length) {
	        if (manager.getStateMeta(this.enterStates[0], 'context') !== this.contexts[0]) { break; }
	        this.contexts.shift();
	      }
	
	      this.resolveState = this.enterStates.shift();
	      this.exitStates.shift();
	    }
	  }
	};
	
	/**
	  StateManager is part of Ember's implementation of a finite state machine. A StateManager
	  instance manages a number of properties that are instances of `Ember.State`,
	  tracks the current active state, and triggers callbacks when states have changed.
	
	  ## Defining States
	
	  The states of StateManager can be declared in one of two ways. First, you can define
	  a `states` property that contains all the states:
	
	      managerA = Ember.StateManager.create({
	        states: {
	          stateOne: Ember.State.create(),
	          stateTwo: Ember.State.create()
	        }
	      })
	
	      managerA.get('states')
	      // {
	      //   stateOne: Ember.State.create(),
	      //   stateTwo: Ember.State.create()
	      // }
	
	  You can also add instances of `Ember.State` (or an `Ember.State` subclass) directly as properties
	  of a StateManager. These states will be collected into the `states` property for you.
	
	      managerA = Ember.StateManager.create({
	        stateOne: Ember.State.create(),
	        stateTwo: Ember.State.create()
	      })
	
	      managerA.get('states')
	      // {
	      //   stateOne: Ember.State.create(),
	      //   stateTwo: Ember.State.create()
	      // }
	
	  ## The Initial State
	  When created a StateManager instance will immediately enter into the state
	  defined as its `start` property or the state referenced by name in its
	  `initialState` property:
	
	      managerA = Ember.StateManager.create({
	        start: Ember.State.create({})
	      })
	
	      managerA.get('currentState.name') // 'start'
	
	      managerB = Ember.StateManager.create({
	        initialState: 'beginHere',
	        beginHere: Ember.State.create({})
	      })
	
	      managerB.get('currentState.name') // 'beginHere'
	
	  Because it is a property you may also provide a computed function if you wish to derive
	  an `initialState` programmatically:
	
	      managerC = Ember.StateManager.create({
	        initialState: function(){
	          if (someLogic) {
	            return 'active';
	          } else {
	            return 'passive';
	          }
	        }.property(),
	        active: Ember.State.create({}),
	        passive: Ember.State.create({})
	      })
	
	  ## Moving Between States
	  A StateManager can have any number of Ember.State objects as properties
	  and can have a single one of these states as its current state.
	
	  Calling `transitionTo` transitions between states:
	
	      robotManager = Ember.StateManager.create({
	        initialState: 'poweredDown',
	        poweredDown: Ember.State.create({}),
	        poweredUp: Ember.State.create({})
	      })
	
	      robotManager.get('currentState.name') // 'poweredDown'
	      robotManager.transitionTo('poweredUp')
	      robotManager.get('currentState.name') // 'poweredUp'
	
	  Before transitioning into a new state the existing `currentState` will have its
	  `exit` method called with the StateManager instance as its first argument and
	  an object representing the transition as its second argument.
	
	  After transitioning into a new state the new `currentState` will have its
	  `enter` method called with the StateManager instance as its first argument and
	  an object representing the transition as its second argument.
	
	      robotManager = Ember.StateManager.create({
	        initialState: 'poweredDown',
	        poweredDown: Ember.State.create({
	          exit: function(stateManager){
	            console.log("exiting the poweredDown state")
	          }
	        }),
	        poweredUp: Ember.State.create({
	          enter: function(stateManager){
	            console.log("entering the poweredUp state. Destroy all humans.")
	          }
	        })
	      })
	
	      robotManager.get('currentState.name') // 'poweredDown'
	      robotManager.transitionTo('poweredUp')
	      // will log
	      // 'exiting the poweredDown state'
	      // 'entering the poweredUp state. Destroy all humans.'
	
	
	  Once a StateManager is already in a state, subsequent attempts to enter that state will
	  not trigger enter or exit method calls. Attempts to transition into a state that the
	  manager does not have will result in no changes in the StateManager's current state:
	
	      robotManager = Ember.StateManager.create({
	        initialState: 'poweredDown',
	        poweredDown: Ember.State.create({
	          exit: function(stateManager){
	            console.log("exiting the poweredDown state")
	          }
	        }),
	        poweredUp: Ember.State.create({
	          enter: function(stateManager){
	            console.log("entering the poweredUp state. Destroy all humans.")
	          }
	        })
	      })
	
	      robotManager.get('currentState.name') // 'poweredDown'
	      robotManager.transitionTo('poweredUp')
	      // will log
	      // 'exiting the poweredDown state'
	      // 'entering the poweredUp state. Destroy all humans.'
	      robotManager.transitionTo('poweredUp') // no logging, no state change
	
	      robotManager.transitionTo('someUnknownState') // silently fails
	      robotManager.get('currentState.name') // 'poweredUp'
	
	
	  Each state property may itself contain properties that are instances of Ember.State.
	  The StateManager can transition to specific sub-states in a series of transitionTo method calls or
	  via a single transitionTo with the full path to the specific state. The StateManager will also
	  keep track of the full path to its currentState
	
	      robotManager = Ember.StateManager.create({
	        initialState: 'poweredDown',
	        poweredDown: Ember.State.create({
	          charging: Ember.State.create(),
	          charged: Ember.State.create()
	        }),
	        poweredUp: Ember.State.create({
	          mobile: Ember.State.create(),
	          stationary: Ember.State.create()
	        })
	      })
	
	      robotManager.get('currentState.name') // 'poweredDown'
	
	      robotManager.transitionTo('poweredUp')
	      robotManager.get('currentState.name') // 'poweredUp'
	
	      robotManager.transitionTo('mobile')
	      robotManager.get('currentState.name') // 'mobile'
	
	      // transition via a state path
	      robotManager.transitionTo('poweredDown.charging')
	      robotManager.get('currentState.name') // 'charging'
	
	      robotManager.get('currentState.path') // 'poweredDown.charging'
	
	  Enter transition methods will be called for each state and nested child state in their
	  hierarchical order.  Exit methods will be called for each state and its nested states in
	  reverse hierarchical order.
	
	  Exit transitions for a parent state are not called when entering into one of its child states,
	  only when transitioning to a new section of possible states in the hierarchy.
	
	      robotManager = Ember.StateManager.create({
	        initialState: 'poweredDown',
	        poweredDown: Ember.State.create({
	          enter: function(){},
	          exit: function(){
	            console.log("exited poweredDown state")
	          },
	          charging: Ember.State.create({
	            enter: function(){},
	            exit: function(){}
	          }),
	          charged: Ember.State.create({
	            enter: function(){
	              console.log("entered charged state")
	            },
	            exit: function(){
	              console.log("exited charged state")
	            }
	          })
	        }),
	        poweredUp: Ember.State.create({
	          enter: function(){
	            console.log("entered poweredUp state")
	          },
	          exit: function(){},
	          mobile: Ember.State.create({
	            enter: function(){
	              console.log("entered mobile state")
	            },
	            exit: function(){}
	          }),
	          stationary: Ember.State.create({
	            enter: function(){},
	            exit: function(){}
	          })
	        })
	      })
	
	
	      robotManager.get('currentState.path') // 'poweredDown'
	      robotManager.transitionTo('charged')
	      // logs 'entered charged state'
	      // but does *not* log  'exited poweredDown state'
	      robotManager.get('currentState.name') // 'charged
	
	      robotManager.transitionTo('poweredUp.mobile')
	      // logs
	      // 'exited charged state'
	      // 'exited poweredDown state'
	      // 'entered poweredUp state'
	      // 'entered mobile state'
	
	  During development you can set a StateManager's `enableLogging` property to `true` to
	  receive console messages of state transitions.
	
	      robotManager = Ember.StateManager.create({
	        enableLogging: true
	      })
	
	  ## Managing currentState with Actions
	  To control which transitions between states are possible for a given state, StateManager
	  can receive and route action messages to its states via the `send` method.  Calling to `send` with
	  an action name will begin searching for a method with the same name starting at the current state
	  and moving up through the parent states in a state hierarchy until an appropriate method is found
	  or the StateManager instance itself is reached.
	
	  If an appropriately named method is found it will be called with the state manager as the first
	  argument and an optional `context` object as the second argument.
	
	      managerA = Ember.StateManager.create({
	        initialState: 'stateOne.substateOne.subsubstateOne',
	        stateOne: Ember.State.create({
	          substateOne: Ember.State.create({
	            anAction: function(manager, context){
	              console.log("an action was called")
	            },
	            subsubstateOne: Ember.State.create({})
	          })
	        })
	      })
	
	      managerA.get('currentState.name') // 'subsubstateOne'
	      managerA.send('anAction')
	      // 'stateOne.substateOne.subsubstateOne' has no anAction method
	      // so the 'anAction' method of 'stateOne.substateOne' is called
	      // and logs "an action was called"
	      // with managerA as the first argument
	      // and no second argument
	
	      someObject = {}
	      managerA.send('anAction', someObject)
	      // the 'anAction' method of 'stateOne.substateOne' is called again
	      // with managerA as the first argument and
	      // someObject as the second argument.
	
	
	  If the StateManager attempts to send an action but does not find an appropriately named
	  method in the current state or while moving upwards through the state hierarchy
	  it will throw a new Ember.Error. Action detection only moves upwards through the state hierarchy
	  from the current state. It does not search in other portions of the hierarchy.
	
	      managerB = Ember.StateManager.create({
	        initialState: 'stateOne.substateOne.subsubstateOne',
	        stateOne: Ember.State.create({
	          substateOne: Ember.State.create({
	            subsubstateOne: Ember.State.create({})
	          })
	        }),
	        stateTwo: Ember.State.create({
	         anAction: function(manager, context){
	           // will not be called below because it is
	           // not a parent of the current state
	         }
	        })
	      })
	
	      managerB.get('currentState.name') // 'subsubstateOne'
	      managerB.send('anAction')
	      // Error: <Ember.StateManager:ember132> could not
	      // respond to event anAction in state stateOne.substateOne.subsubstateOne.
	
	  Inside of an action method the given state should delegate `transitionTo` calls on its
	  StateManager.
	
	      robotManager = Ember.StateManager.create({
	        initialState: 'poweredDown.charging',
	        poweredDown: Ember.State.create({
	          charging: Ember.State.create({
	            chargeComplete: function(manager, context){
	              manager.transitionTo('charged')
	            }
	          }),
	          charged: Ember.State.create({
	            boot: function(manager, context){
	              manager.transitionTo('poweredUp')
	            }
	          })
	        }),
	        poweredUp: Ember.State.create({
	          beginExtermination: function(manager, context){
	            manager.transitionTo('rampaging')
	          },
	          rampaging: Ember.State.create()
	        })
	      })
	
	      robotManager.get('currentState.name') // 'charging'
	      robotManager.send('boot') // throws error, no boot action
	                                // in current hierarchy
	      robotManager.get('currentState.name') // remains 'charging'
	
	      robotManager.send('beginExtermination') // throws error, no beginExtermination
	                                              // action in current hierarchy
	      robotManager.get('currentState.name') // remains 'charging'
	
	      robotManager.send('chargeComplete')
	      robotManager.get('currentState.name') // 'charged'
	
	      robotManager.send('boot')
	      robotManager.get('currentState.name') // 'poweredUp'
	
	      robotManager.send('beginExtermination', allHumans)
	      robotManager.get('currentState.name') // 'rampaging'
	
	  Transition actions can also be created using the `transitionTo` method of the Ember.State class. The
	  following example StateManagers are equivalent:
	
	      aManager = Ember.StateManager.create({
	        stateOne: Ember.State.create({
	          changeToStateTwo: Ember.State.transitionTo('stateTwo')
	        }),
	        stateTwo: Ember.State.create({})
	      })
	
	      bManager = Ember.StateManager.create({
	        stateOne: Ember.State.create({
	          changeToStateTwo: function(manager, context){
	            manager.transitionTo('stateTwo', context)
	          }
	        }),
	        stateTwo: Ember.State.create({})
	      })
	
	  @class StateManager
	  @namespace Ember
	  @extends Ember.State
	**/
	Ember.StateManager = Ember.State.extend({
	  /**
	    @private
	
	    When creating a new statemanager, look for a default state to transition
	    into. This state can either be named `start`, or can be specified using the
	    `initialState` property.
	
	    @method init
	  */
	  init: function() {
	    this._super();
	
	    set(this, 'stateMeta', Ember.Map.create());
	
	    var initialState = get(this, 'initialState');
	
	    if (!initialState && get(this, 'states.start')) {
	      initialState = 'start';
	    }
	
	    if (initialState) {
	      this.transitionTo(initialState);
	      Ember.assert('Failed to transition to initial state "' + initialState + '"', !!get(this, 'currentState'));
	    }
	  },
	
	  stateMetaFor: function(state) {
	    var meta = get(this, 'stateMeta'),
	        stateMeta = meta.get(state);
	
	    if (!stateMeta) {
	      stateMeta = {};
	      meta.set(state, stateMeta);
	    }
	
	    return stateMeta;
	  },
	
	  setStateMeta: function(state, key, value) {
	    return set(this.stateMetaFor(state), key, value);
	  },
	
	  getStateMeta: function(state, key) {
	    return get(this.stateMetaFor(state), key);
	  },
	
	  /**
	    The current state from among the manager's possible states. This property should
	    not be set directly.  Use `transitionTo` to move between states by name.
	
	    @property currentState
	    @type Ember.State
	  */
	  currentState: null,
	
	  /**
	   The path of the current state. Returns a string representation of the current
	   state.
	
	   @property currentPath
	   @type String
	  */
	  currentPath: Ember.computed('currentState', function() {
	    return get(this, 'currentState.path');
	  }),
	
	  /**
	    The name of transitionEvent that this stateManager will dispatch
	
	    @property transitionEvent
	    @type String
	    @default 'setup'
	  */
	  transitionEvent: 'setup',
	
	  /**
	    If set to true, `errorOnUnhandledEvents` will cause an exception to be
	    raised if you attempt to send an event to a state manager that is not
	    handled by the current state or any of its parent states.
	
	    @property errorOnUnhandledEvents
	    @type Boolean
	    @default true
	  */
	  errorOnUnhandledEvent: true,
	
	  send: function(event) {
	    var contexts, sendRecursiveArguments;
	
	    Ember.assert('Cannot send event "' + event + '" while currentState is ' + get(this, 'currentState'), get(this, 'currentState'));
	
	    contexts = [].slice.call(arguments, 1);
	    sendRecursiveArguments = contexts;
	    sendRecursiveArguments.unshift(event, get(this, 'currentState'));
	
	    return this.sendRecursively.apply(this, sendRecursiveArguments);
	  },
	
	  sendRecursively: function(event, currentState) {
	    var log = this.enableLogging,
	        action = currentState[event],
	        contexts, sendRecursiveArguments, actionArguments;
	
	    contexts = [].slice.call(arguments, 2);
	
	    // Test to see if the action is a method that
	    // can be invoked. Don't blindly check just for
	    // existence, because it is possible the state
	    // manager has a child state of the given name,
	    // and we should still raise an exception in that
	    // case.
	    if (typeof action === 'function') {
	      if (log) { Ember.Logger.log(fmt("STATEMANAGER: Sending event '%@' to state %@.", [event, get(currentState, 'path')])); }
	
	      actionArguments = contexts;
	      actionArguments.unshift(this);
	
	      return action.apply(currentState, actionArguments);
	    } else {
	      var parentState = get(currentState, 'parentState');
	      if (parentState) {
	
	        sendRecursiveArguments = contexts;
	        sendRecursiveArguments.unshift(event, parentState);
	
	        return this.sendRecursively.apply(this, sendRecursiveArguments);
	      } else if (get(this, 'errorOnUnhandledEvent')) {
	        throw new Ember.Error(this.toString() + " could not respond to event " + event + " in state " + get(this, 'currentState.path') + ".");
	      }
	    }
	  },
	
	  /**
	    Finds a state by its state path.
	
	    Example:
	
	        manager = Ember.StateManager.create({
	          root: Ember.State.create({
	            dashboard: Ember.State.create()
	          })
	        });
	
	        manager.getStateByPath(manager, "root.dashboard")
	
	        // returns the dashboard state
	
	    @method getStateByPath
	    @param {Ember.State} root the state to start searching from
	    @param {String} path the state path to follow
	    @return {Ember.State} the state at the end of the path
	  */
	  getStateByPath: function(root, path) {
	    var parts = path.split('.'),
	        state = root;
	
	    for (var i=0, len=parts.length; i<len; i++) {
	      state = get(get(state, 'states'), parts[i]);
	      if (!state) { break; }
	    }
	
	    return state;
	  },
	
	  findStateByPath: function(state, path) {
	    var possible;
	
	    while (!possible && state) {
	      possible = this.getStateByPath(state, path);
	      state = get(state, 'parentState');
	    }
	
	    return possible;
	  },
	
	  /**
	    A state stores its child states in its `states` hash.
	    This code takes a path like `posts.show` and looks
	    up `root.states.posts.states.show`.
	
	    It returns a list of all of the states from the
	    root, which is the list of states to call `enter`
	    on.
	
	    @method getStatesInPath
	    @param root
	    @param path
	  */
	  getStatesInPath: function(root, path) {
	    if (!path || path === "") { return undefined; }
	    var parts = path.split('.'),
	        result = [],
	        states,
	        state;
	
	    for (var i=0, len=parts.length; i<len; i++) {
	      states = get(root, 'states');
	      if (!states) { return undefined; }
	      state = get(states, parts[i]);
	      if (state) { root = state; result.push(state); }
	      else { return undefined; }
	    }
	
	    return result;
	  },
	
	  goToState: function() {
	    // not deprecating this yet so people don't constantly need to
	    // make trivial changes for little reason.
	    return this.transitionTo.apply(this, arguments);
	  },
	
	  transitionTo: function(path, context) {
	    // XXX When is transitionTo called with no path
	    if (Ember.empty(path)) { return; }
	
	    // The ES6 signature of this function is `path, ...contexts`
	    var contexts = context ? Array.prototype.slice.call(arguments, 1) : [],
	        currentState = get(this, 'currentState') || this;
	
	    // First, get the enter, exit and resolve states for the current state
	    // and specified path. If possible, use an existing cache.
	    var hash = this.contextFreeTransition(currentState, path);
	
	    // Next, process the raw state information for the contexts passed in.
	    var transition = new Transition(hash).normalize(this, contexts);
	
	    this.enterState(transition);
	    this.triggerSetupContext(transition);
	  },
	
	  contextFreeTransition: function(currentState, path) {
	    var cache = currentState.pathsCache[path];
	    if (cache) { return cache; }
	
	    var enterStates = this.getStatesInPath(currentState, path),
	        exitStates = [],
	        resolveState = currentState;
	
	    // Walk up the states. For each state, check whether a state matching
	    // the `path` is nested underneath. This will find the closest
	    // parent state containing `path`.
	    //
	    // This allows the user to pass in a relative path. For example, for
	    // the following state hierarchy:
	    //
	    //    | |root
	    //    | |- posts
	    //    | | |- show (* current)
	    //    | |- comments
	    //    | | |- show
	    //
	    // If the current state is `<root.posts.show>`, an attempt to
	    // transition to `comments.show` will match `<root.comments.show>`.
	    //
	    // First, this code will look for root.posts.show.comments.show.
	    // Next, it will look for root.posts.comments.show. Finally,
	    // it will look for `root.comments.show`, and find the state.
	    //
	    // After this process, the following variables will exist:
	    //
	    // * resolveState: a common parent state between the current
	    //   and target state. In the above example, `<root>` is the
	    //   `resolveState`.
	    // * enterStates: a list of all of the states represented
	    //   by the path from the `resolveState`. For example, for
	    //   the path `root.comments.show`, `enterStates` would have
	    //   `[<root.comments>, <root.comments.show>]`
	    // * exitStates: a list of all of the states from the
	    //   `resolveState` to the `currentState`. In the above
	    //   example, `exitStates` would have
	    //   `[<root.posts>`, `<root.posts.show>]`.
	    while (resolveState && !enterStates) {
	      exitStates.unshift(resolveState);
	
	      resolveState = get(resolveState, 'parentState');
	      if (!resolveState) {
	        enterStates = this.getStatesInPath(this, path);
	        if (!enterStates) {
	          Ember.assert('Could not find state for path: "'+path+'"');
	          return;
	        }
	      }
	      enterStates = this.getStatesInPath(resolveState, path);
	    }
	
	    // If the path contains some states that are parents of both the
	    // current state and the target state, remove them.
	    //
	    // For example, in the following hierarchy:
	    //
	    // |- root
	    // | |- post
	    // | | |- index (* current)
	    // | | |- show
	    //
	    // If the `path` is `root.post.show`, the three variables will
	    // be:
	    //
	    // * resolveState: `<state manager>`
	    // * enterStates: `[<root>, <root.post>, <root.post.show>]`
	    // * exitStates: `[<root>, <root.post>, <root.post.index>]`
	    //
	    // The goal of this code is to remove the common states, so we
	    // have:
	    //
	    // * resolveState: `<root.post>`
	    // * enterStates: `[<root.post.show>]`
	    // * exitStates: `[<root.post.index>]`
	    //
	    // This avoid unnecessary calls to the enter and exit transitions.
	    while (enterStates.length > 0 && enterStates[0] === exitStates[0]) {
	      resolveState = enterStates.shift();
	      exitStates.shift();
	    }
	
	    // Cache the enterStates, exitStates, and resolveState for the
	    // current state and the `path`.
	    var transitions = currentState.pathsCache[path] = {
	      exitStates: exitStates,
	      enterStates: enterStates,
	      resolveState: resolveState
	    };
	
	    return transitions;
	  },
	
	  triggerSetupContext: function(transitions) {
	    var contexts = transitions.contexts,
	        offset = transitions.enterStates.length - contexts.length,
	        enterStates = transitions.enterStates,
	        transitionEvent = get(this, 'transitionEvent');
	
	    Ember.assert("More contexts provided than states", offset >= 0);
	
	    arrayForEach.call(enterStates, function(state, idx) {
	      state.trigger(transitionEvent, this, contexts[idx-offset]);
	    }, this);
	  },
	
	  getState: function(name) {
	    var state = get(this, name),
	        parentState = get(this, 'parentState');
	
	    if (state) {
	      return state;
	    } else if (parentState) {
	      return parentState.getState(name);
	    }
	  },
	
	  enterState: function(transition) {
	    var log = this.enableLogging;
	
	    var exitStates = transition.exitStates.slice(0).reverse();
	    arrayForEach.call(exitStates, function(state) {
	      state.trigger('exit', this);
	    }, this);
	
	    arrayForEach.call(transition.enterStates, function(state) {
	      if (log) { Ember.Logger.log("STATEMANAGER: Entering " + get(state, 'path')); }
	      state.trigger('enter', this);
	    }, this);
	
	    set(this, 'currentState', transition.finalState);
	  }
	});
	
	})();
	
	
	
	(function() {
	/**
	Ember States
	
	@module ember
	@submodule ember-states
	@requires ember-runtime
	*/
	
	})();
	


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	//
	// This file is automatically generated. any changes will be lost
	//
	
	__webpack_require__(3);
	__webpack_require__(4);
	
	
	(function() {
	var get = Ember.get;
	
	Ember._ResolvedState = Ember.Object.extend({
	  manager: null,
	  state: null,
	  match: null,
	
	  object: Ember.computed(function(key, value) {
	    if (arguments.length === 2) {
	      this._object = value;
	      return value;
	    } else {
	      if (this._object) {
	        return this._object;
	      } else {
	        var state = get(this, 'state'),
	            match = get(this, 'match'),
	            manager = get(this, 'manager');
	        return state.deserialize(manager, match.hash);
	      }
	    }
	  }).property(),
	
	  hasPromise: Ember.computed(function() {
	    return Ember.canInvoke(get(this, 'object'), 'then');
	  }).property('object'),
	
	  promise: Ember.computed(function() {
	    var object = get(this, 'object');
	    if (Ember.canInvoke(object, 'then')) {
	      return object;
	    } else {
	      return {
	        then: function(success) { success(object); }
	      };
	    }
	  }).property('object'),
	
	  transition: function() {
	    var manager = get(this, 'manager'),
	        path = get(this, 'state.path'),
	        object = get(this, 'object');
	    manager.transitionTo(path, object);
	  }
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-routing
	*/
	
	var get = Ember.get;
	
	// The Ember Routable mixin assumes the existance of a simple
	// routing shim that supports the following three behaviors:
	//
	// * .getURL() - this is called when the page loads
	// * .setURL(newURL) - this is called from within the state
	//   manager when the state changes to a routable state
	// * .onURLChange(callback) - this happens when the user presses
	//   the back or forward button
	
	var paramForClass = function(classObject) {
	  var className = classObject.toString(),
	      parts = className.split("."),
	      last = parts[parts.length - 1];
	
	  return Ember.String.underscore(last) + "_id";
	};
	
	var merge = function(original, hash) {
	  for (var prop in hash) {
	    if (!hash.hasOwnProperty(prop)) { continue; }
	    if (original.hasOwnProperty(prop)) { continue; }
	
	    original[prop] = hash[prop];
	  }
	};
	
	/**
	  @class Routable
	  @namespace Ember
	  @extends Ember.Mixin
	*/
	Ember.Routable = Ember.Mixin.create({
	  init: function() {
	    var redirection;
	    this.on('setup', this, this.stashContext);
	
	    if (redirection = get(this, 'redirectsTo')) {
	      Ember.assert("You cannot use `redirectsTo` if you already have a `connectOutlets` method", this.connectOutlets === Ember.K);
	
	      this.connectOutlets = function(router) {
	        router.transitionTo(redirection);
	      };
	    }
	
	    // normalize empty route to '/'
	    var route = get(this, 'route');
	    if (route === '') {
	      route = '/';
	    }
	
	    this._super();
	
	    Ember.assert("You cannot use `redirectsTo` on a state that has child states", !redirection || (!!redirection && !!get(this, 'isLeaf')));
	  },
	
	  setup: function() {
	    return this.connectOutlets.apply(this, arguments);
	  },
	
	  /**
	    @private
	
	    Whenever a routable state is entered, the context it was entered with
	    is stashed so that we can regenerate the state's `absoluteURL` on
	    demand.
	
	    @method stashContext
	    @param manager {Ember.StateManager}
	    @param context
	  */
	  stashContext: function(manager, context) {
	    this.router = manager;
	
	    var serialized = this.serialize(manager, context);
	    Ember.assert('serialize must return a hash', !serialized || typeof serialized === 'object');
	
	    manager.setStateMeta(this, 'context', context);
	    manager.setStateMeta(this, 'serialized', serialized);
	
	    if (get(this, 'isRoutable') && !get(manager, 'isRouting')) {
	      this.updateRoute(manager, get(manager, 'location'));
	    }
	  },
	
	  /**
	    @private
	
	    Whenever a routable state is entered, the router's location object
	    is notified to set the URL to the current absolute path.
	
	    In general, this will update the browser's URL.
	
	    @method updateRoute
	    @param manager {Ember.StateManager}
	    @param location {Ember.Location}
	  */
	  updateRoute: function(manager, location) {
	    if (get(this, 'isLeafRoute')) {
	      var path = this.absoluteRoute(manager);
	      location.setURL(path);
	    }
	  },
	
	  /**
	    @private
	
	    Get the absolute route for the current state and a given
	    hash.
	
	    This method is private, as it expects a serialized hash,
	    not the original context object.
	
	    @method absoluteRoute
	    @param manager {Ember.StateManager}
	    @param hash {Hash}
	  */
	  absoluteRoute: function(manager, hash) {
	    var parentState = get(this, 'parentState');
	    var path = '', generated;
	
	    // If the parent state is routable, use its current path
	    // as this route's prefix.
	    if (get(parentState, 'isRoutable')) {
	      path = parentState.absoluteRoute(manager, hash);
	    }
	
	    var matcher = get(this, 'routeMatcher'),
	        serialized = manager.getStateMeta(this, 'serialized');
	
	    // merge the existing serialized object in with the passed
	    // in hash.
	    hash = hash || {};
	    merge(hash, serialized);
	
	    generated = matcher && matcher.generate(hash);
	
	    if (generated) {
	      path = path + '/' + generated;
	    }
	
	    return path;
	  },
	
	  /**
	    @private
	
	    At the moment, a state is routable if it has a string `route`
	    property. This heuristic may change.
	
	    @property isRoutable
	    @type Boolean
	  */
	  isRoutable: Ember.computed(function() {
	    return typeof get(this, 'route') === 'string';
	  }),
	
	  /**
	    @private
	
	    Determine if this is the last routeable state
	
	    @property isLeafRoute
	    @type Boolean
	  */
	  isLeafRoute: Ember.computed(function() {
	    if (get(this, 'isLeaf')) { return true; }
	    return !get(this, 'childStates').findProperty('isRoutable');
	  }),
	
	  /**
	    @private
	
	    A _RouteMatcher object generated from the current route's `route`
	    string property.
	
	    @property routeMatcher
	    @type Ember._RouteMatcher
	  */
	  routeMatcher: Ember.computed(function() {
	    var route = get(this, 'route');
	    if (route) {
	      return Ember._RouteMatcher.create({ route: route });
	    }
	  }),
	
	  /**
	    @private
	
	    Check whether the route has dynamic segments and therefore takes
	    a context.
	
	    @property hasContext
	    @type Boolean
	  */
	  hasContext: Ember.computed(function() {
	    var routeMatcher = get(this, 'routeMatcher');
	    if (routeMatcher) {
	      return routeMatcher.identifiers.length > 0;
	    }
	  }),
	
	  /**
	    @private
	
	    The model class associated with the current state. This property
	    uses the `modelType` property, in order to allow it to be
	    specified as a String.
	
	    @property modelClass
	    @type Ember.Object
	  */
	  modelClass: Ember.computed(function() {
	    var modelType = get(this, 'modelType');
	
	    if (typeof modelType === 'string') {
	      return Ember.get(Ember.lookup, modelType);
	    } else {
	      return modelType;
	    }
	  }),
	
	  /**
	    @private
	
	    Get the model class for the state. The heuristic is:
	
	    * The state must have a single dynamic segment
	    * The dynamic segment must end in `_id`
	    * A dynamic segment like `blog_post_id` is converted into `BlogPost`
	    * The name is then looked up on the passed in namespace
	
	    The process of initializing an application with a router will
	    pass the application's namespace into the router, which will be
	    used here.
	
	    @method modelClassFor
	    @param namespace {Ember.Namespace}
	  */
	  modelClassFor: function(namespace) {
	    var modelClass, routeMatcher, identifiers, match, className;
	
	    // if an explicit modelType was specified, use that
	    if (modelClass = get(this, 'modelClass')) { return modelClass; }
	
	    // if the router has no lookup namespace, we won't be able to guess
	    // the modelType
	    if (!namespace) { return; }
	
	    // make sure this state is actually a routable state
	    routeMatcher = get(this, 'routeMatcher');
	    if (!routeMatcher) { return; }
	
	    // only guess modelType for states with a single dynamic segment
	    // (no more, no fewer)
	    identifiers = routeMatcher.identifiers;
	    if (identifiers.length !== 2) { return; }
	
	    // extract the `_id` from the end of the dynamic segment; if the
	    // dynamic segment does not end in `_id`, we can't guess the
	    // modelType
	    match = identifiers[1].match(/^(.*)_id$/);
	    if (!match) { return; }
	
	    // convert the underscored type into a class form and look it up
	    // on the router's namespace
	    className = Ember.String.classify(match[1]);
	    return get(namespace, className);
	  },
	
	  /**
	    The default method that takes a `params` object and converts
	    it into an object.
	
	    By default, a params hash that looks like `{ post_id: 1 }`
	    will be looked up as `namespace.Post.find(1)`. This is
	    designed to work seamlessly with Ember Data, but will work
	    fine with any class that has a `find` method.
	
	    @method deserialize
	    @param manager {Ember.StateManager}
	    @param params {Hash}
	  */
	  deserialize: function(manager, params) {
	    var modelClass, routeMatcher, param;
	
	    if (modelClass = this.modelClassFor(get(manager, 'namespace'))) {
	      Ember.assert("Expected "+modelClass.toString()+" to implement `find` for use in '"+this.get('path')+"' `deserialize`. Please implement the `find` method or overwrite `deserialize`.", modelClass.find);
	      return modelClass.find(params[paramForClass(modelClass)]);
	    }
	
	    return params;
	  },
	
	  /**
	    The default method that takes an object and converts it into
	    a params hash.
	
	    By default, if there is a single dynamic segment named
	    `blog_post_id` and the object is a `BlogPost` with an
	    `id` of `12`, the serialize method will produce:
	
	        { blog_post_id: 12 }
	
	    @method serialize
	    @param manager {Ember.StateManager}
	    @param context
	  */
	  serialize: function(manager, context) {
	    var modelClass, routeMatcher, namespace, param, id;
	
	    if (Ember.empty(context)) { return ''; }
	
	    if (modelClass = this.modelClassFor(get(manager, 'namespace'))) {
	      param = paramForClass(modelClass);
	      id = get(context, 'id');
	      context = {};
	      context[param] = id;
	    }
	
	    return context;
	  },
	
	  /**
	    @private
	    @method resolvePath
	    @param manager {Ember.StateManager}
	    @param path {String}
	  */
	  resolvePath: function(manager, path) {
	    if (get(this, 'isLeafRoute')) { return Ember.A(); }
	
	    var childStates = get(this, 'childStates'), match;
	
	    childStates = Ember.A(childStates.filterProperty('isRoutable'));
	
	    childStates = childStates.sort(function(a, b) {
	      var aDynamicSegments = get(a, 'routeMatcher.identifiers.length'),
	          bDynamicSegments = get(b, 'routeMatcher.identifiers.length'),
	          aRoute = get(a, 'route'),
	          bRoute = get(b, 'route');
	
	      if (aRoute.indexOf(bRoute) === 0) {
	        return -1;
	      } else if (bRoute.indexOf(aRoute) === 0) {
	        return 1;
	      }
	
	      if (aDynamicSegments !== bDynamicSegments) {
	        return aDynamicSegments - bDynamicSegments;
	      }
	
	      return get(b, 'route.length') - get(a, 'route.length');
	    });
	
	    var state = childStates.find(function(state) {
	      var matcher = get(state, 'routeMatcher');
	      if (match = matcher.match(path)) { return true; }
	    });
	
	    Ember.assert("Could not find state for path " + path, !!state);
	
	    var resolvedState = Ember._ResolvedState.create({
	      manager: manager,
	      state: state,
	      match: match
	    });
	
	    var states = state.resolvePath(manager, match.remaining);
	
	    return Ember.A([resolvedState]).pushObjects(states);
	  },
	
	  /**
	    @private
	
	    Once `unroute` has finished unwinding, `routePath` will be called
	    with the remainder of the route.
	
	    For example, if you were in the /posts/1/comments state, and you
	    moved into the /posts/2/comments state, `routePath` will be called
	    on the state whose path is `/posts` with the path `/2/comments`.
	
	    @method routePath
	    @param manager {Ember.StateManager}
	    @param path {String}
	  */
	  routePath: function(manager, path) {
	    if (get(this, 'isLeafRoute')) { return; }
	
	    var resolvedStates = this.resolvePath(manager, path),
	        hasPromises = resolvedStates.some(function(s) { return get(s, 'hasPromise'); });
	
	    function runTransition() {
	      resolvedStates.forEach(function(rs) { rs.transition(); });
	    }
	
	    if (hasPromises) {
	      manager.transitionTo('loading');
	
	      Ember.assert('Loading state should be the child of a route', Ember.Routable.detect(get(manager, 'currentState.parentState')));
	      Ember.assert('Loading state should not be a route', !Ember.Routable.detect(get(manager, 'currentState')));
	
	      manager.handleStatePromises(resolvedStates, runTransition);
	    } else {
	      runTransition();
	    }
	  },
	
	  /**
	    @private
	
	    When you move to a new route by pressing the back
	    or forward button, this method is called first.
	
	    Its job is to move the state manager into a parent
	    state of the state it will eventually move into.
	
	    @method unroutePath
	    @param router {Ember.Router}
	    @param path {String}
	  */
	  unroutePath: function(router, path) {
	    var parentState = get(this, 'parentState');
	
	    // If we're at the root state, we're done
	    if (parentState === router) {
	      return;
	    }
	
	    path = path.replace(/^(?=[^\/])/, "/");
	    var absolutePath = this.absoluteRoute(router);
	
	    var route = get(this, 'route');
	
	    // If the current path is empty, move up one state,
	    // because the index ('/') state must be a leaf node.
	    if (route !== '/') {
	      // If the current path is a prefix of the path we're trying
	      // to go to, we're done.
	      var index = path.indexOf(absolutePath),
	          next = path.charAt(absolutePath.length);
	
	      if (index === 0 && (next === "/" || next === "")) {
	        return;
	      }
	    }
	
	    // Transition to the parent and call unroute again.
	    router.enterState({
	      exitStates: [this],
	      enterStates: [],
	      finalState: parentState
	    });
	
	    router.send('unroutePath', path);
	  },
	
	  parentTemplate: Ember.computed(function() {
	    var state = this, parentState, template;
	
	    while (state = get(state, 'parentState')) {
	      if (template = get(state, 'template')) {
	        return template;
	      }
	    }
	
	    return 'application';
	  }),
	
	  _template: Ember.computed(function(key, value) {
	    if (arguments.length > 1) { return value; }
	
	    if (value = get(this, 'template')) {
	      return value;
	    }
	
	    // If no template was explicitly supplied convert
	    // the class name into a template name. For example,
	    // App.PostRoute will return `post`.
	    var className = this.constructor.toString(), baseName;
	    if (/^[^\[].*Route$/.test(className)) {
	      baseName = className.match(/([^\.]+\.)*([^\.]+)/)[2];
	      baseName = baseName.replace(/Route$/, '');
	      return baseName.charAt(0).toLowerCase() + baseName.substr(1);
	    }
	  }),
	
	  render: function(options) {
	    options = options || {};
	
	    var template = options.template || get(this, '_template'),
	        parentTemplate = options.into || get(this, 'parentTemplate'),
	        controller = get(this.router, parentTemplate + "Controller");
	
	    var viewName = Ember.String.classify(template) + "View",
	        viewClass = get(get(this.router, 'namespace'), viewName);
	
	    viewClass = (viewClass || Ember.View).extend({
	      templateName: template
	    });
	
	    controller.set('view', viewClass.create());
	  },
	
	  /**
	    The `connectOutlets` event will be triggered once a
	    state has been entered. It will be called with the
	    route's context.
	
	    @event connectOutlets
	    @param router {Ember.Router}
	    @param [context*]
	  */
	  connectOutlets: Ember.K,
	
	  /**
	   The `navigateAway` event will be triggered when the
	   URL changes due to the back/forward button
	
	   @event navigateAway
	  */
	  navigateAway: Ember.K
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-routing
	*/
	
	/**
	  @class Route
	  @namespace Ember
	  @extends Ember.State
	  @uses Ember.Routable
	*/
	Ember.Route = Ember.State.extend(Ember.Routable);
	
	})();
	
	
	
	(function() {
	var escapeForRegex = function(text) {
	  return text.replace(/[\-\[\]{}()*+?.,\\\^\$|#\s]/g, "\\$&");
	};
	
	/**
	  @class _RouteMatcher
	  @namespace Ember
	  @private
	  @extends Ember.Object
	*/
	Ember._RouteMatcher = Ember.Object.extend({
	  state: null,
	
	  init: function() {
	    var route = this.route,
	        identifiers = [],
	        count = 1,
	        escaped;
	
	    // Strip off leading slash if present
	    if (route.charAt(0) === '/') {
	      route = this.route = route.substr(1);
	    }
	
	    escaped = escapeForRegex(route);
	
	    var regex = escaped.replace(/(:|(?:\\\*))([a-z_]+)(?=$|\/)/gi, function(match, type, id) {
	      identifiers[count++] = id;
	      switch (type) {
	        case ":":
	          return "([^/]+)";
	        case "\\*":
	          return "(.+)";
	      }
	    });
	
	    this.identifiers = identifiers;
	    this.regex = new RegExp("^/?" + regex);
	  },
	
	  match: function(path) {
	    var match = path.match(this.regex);
	
	    if (match) {
	      var identifiers = this.identifiers,
	          hash = {};
	
	      for (var i=1, l=identifiers.length; i<l; i++) {
	        hash[identifiers[i]] = match[i];
	      }
	
	      return {
	        remaining: path.substr(match[0].length),
	        hash: identifiers.length > 0 ? hash : null
	      };
	    }
	  },
	
	  generate: function(hash) {
	    var identifiers = this.identifiers, route = this.route, id;
	    for (var i=1, l=identifiers.length; i<l; i++) {
	      id = identifiers[i];
	      route = route.replace(new RegExp("(:|(\\*))" + id), hash[id]);
	    }
	    return route;
	  }
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-routing
	*/
	
	var get = Ember.get, set = Ember.set;
	
	/*
	  This file implements the `location` API used by Ember's router.
	
	  That API is:
	
	  getURL: returns the current URL
	  setURL(path): sets the current URL
	  onUpdateURL(callback): triggers the callback when the URL changes
	  formatURL(url): formats `url` to be placed into `href` attribute
	
	  Calling setURL will not trigger onUpdateURL callbacks.
	
	  TODO: This should perhaps be moved so that it's visible in the doc output.
	*/
	
	/**
	  Ember.Location returns an instance of the correct implementation of
	  the `location` API.
	
	  You can pass it a `implementation` ('hash', 'history', 'none') to force a
	  particular implementation.
	
	  @class Location
	  @namespace Ember
	  @static
	*/
	Ember.Location = {
	  create: function(options) {
	    var implementation = options && options.implementation;
	    Ember.assert("Ember.Location.create: you must specify a 'implementation' option", !!implementation);
	
	    var implementationClass = this.implementations[implementation];
	    Ember.assert("Ember.Location.create: " + implementation + " is not a valid implementation", !!implementationClass);
	
	    return implementationClass.create.apply(implementationClass, arguments);
	  },
	
	  registerImplementation: function(name, implementation) {
	    this.implementations[name] = implementation;
	  },
	
	  implementations: {}
	};
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-routing
	*/
	
	var get = Ember.get, set = Ember.set;
	
	/**
	  Ember.NoneLocation does not interact with the browser. It is useful for
	  testing, or when you need to manage state with your Router, but temporarily
	  don't want it to muck with the URL (for example when you embed your
	  application in a larger page).
	
	  @class NoneLocation
	  @namespace Ember
	  @extends Ember.Object
	*/
	Ember.NoneLocation = Ember.Object.extend({
	  path: '',
	
	  getURL: function() {
	    return get(this, 'path');
	  },
	
	  setURL: function(path) {
	    set(this, 'path', path);
	  },
	
	  onUpdateURL: function(callback) {
	    // We are not wired up to the browser, so we'll never trigger the callback.
	  },
	
	  formatURL: function(url) {
	    // The return value is not overly meaningful, but we do not want to throw
	    // errors when test code renders templates containing {{action href=true}}
	    // helpers.
	    return url;
	  }
	});
	
	Ember.Location.registerImplementation('none', Ember.NoneLocation);
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-routing
	*/
	
	var get = Ember.get, set = Ember.set;
	
	/**
	  Ember.HashLocation implements the location API using the browser's
	  hash. At present, it relies on a hashchange event existing in the
	  browser.
	
	  @class HashLocation
	  @namespace Ember
	  @extends Ember.Object
	*/
	Ember.HashLocation = Ember.Object.extend({
	
	  init: function() {
	    set(this, 'location', get(this, 'location') || window.location);
	  },
	
	  /**
	    @private
	
	    Returns the current `location.hash`, minus the '#' at the front.
	
	    @method getURL
	  */
	  getURL: function() {
	    return get(this, 'location').hash.substr(1);
	  },
	
	  /**
	    @private
	
	    Set the `location.hash` and remembers what was set. This prevents
	    `onUpdateURL` callbacks from triggering when the hash was set by
	    `HashLocation`.
	
	    @method setURL
	    @param path {String}
	  */
	  setURL: function(path) {
	    get(this, 'location').hash = path;
	    set(this, 'lastSetURL', path);
	  },
	
	  /**
	    @private
	
	    Register a callback to be invoked when the hash changes. These
	    callbacks will execute when the user presses the back or forward
	    button, but not after `setURL` is invoked.
	
	    @method onUpdateURL
	    @param callback {Function}
	  */
	  onUpdateURL: function(callback) {
	    var self = this;
	    var guid = Ember.guidFor(this);
	
	    Ember.$(window).bind('hashchange.ember-location-'+guid, function() {
	      var path = location.hash.substr(1);
	      if (get(self, 'lastSetURL') === path) { return; }
	
	      set(self, 'lastSetURL', null);
	
	      callback(location.hash.substr(1));
	    });
	  },
	
	  /**
	    @private
	
	    Given a URL, formats it to be placed into the page as part
	    of an element's `href` attribute.
	
	    This is used, for example, when using the {{action}} helper
	    to generate a URL based on an event.
	
	    @method formatURL
	    @param url {String}
	  */
	  formatURL: function(url) {
	    return '#'+url;
	  },
	
	  willDestroy: function() {
	    var guid = Ember.guidFor(this);
	
	    Ember.$(window).unbind('hashchange.ember-location-'+guid);
	  }
	});
	
	Ember.Location.registerImplementation('hash', Ember.HashLocation);
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-routing
	*/
	
	var get = Ember.get, set = Ember.set;
	var popstateReady = false;
	
	/**
	  Ember.HistoryLocation implements the location API using the browser's
	  history.pushState API.
	
	  @class HistoryLocation
	  @namespace Ember
	  @extends Ember.Object
	*/
	Ember.HistoryLocation = Ember.Object.extend({
	
	  init: function() {
	    set(this, 'location', get(this, 'location') || window.location);
	    this.initState();
	  },
	
	  /**
	    @private
	
	    Used to set state on first call to setURL
	
	    @method initState
	  */
	  initState: function() {
	    this.replaceState(get(this, 'location').pathname);
	    set(this, 'history', window.history);
	  },
	
	  /**
	    Will be pre-pended to path upon state change
	
	    @property rootURL
	    @default '/'
	  */
	  rootURL: '/',
	
	  /**
	    @private
	
	    Returns the current `location.pathname`.
	
	    @method getURL
	  */
	  getURL: function() {
	    return get(this, 'location').pathname;
	  },
	
	  /**
	    @private
	
	    Uses `history.pushState` to update the url without a page reload.
	
	    @method setURL
	    @param path {String}
	  */
	  setURL: function(path) {
	    path = this.formatURL(path);
	
	    if (this.getState().path !== path) {
	      popstateReady = true;
	      this.pushState(path);
	    }
	  },
	
	  /**
	   @private
	
	   Get the current `history.state`
	
	   @method getState
	  */
	  getState: function() {
	    return get(this, 'history').state;
	  },
	
	  /**
	   @private
	
	   Pushes a new state
	
	   @method pushState
	   @param path {String}
	  */
	  pushState: function(path) {
	    window.history.pushState({ path: path }, null, path);
	  },
	
	  /**
	   @private
	
	   Replaces the current state
	
	   @method replaceState
	   @param path {String}
	  */
	  replaceState: function(path) {
	    window.history.replaceState({ path: path }, null, path);
	  },
	
	  /**
	    @private
	
	    Register a callback to be invoked whenever the browser
	    history changes, including using forward and back buttons.
	
	    @method onUpdateURL
	    @param callback {Function}
	  */
	  onUpdateURL: function(callback) {
	    var guid = Ember.guidFor(this);
	
	    Ember.$(window).bind('popstate.ember-location-'+guid, function(e) {
	      if(!popstateReady) {
	        return;
	      }
	      callback(location.pathname);
	    });
	  },
	
	  /**
	    @private
	
	    Used when using `{{action}}` helper.  The url is always appended to the rootURL.
	
	    @method formatURL
	    @param url {String}
	  */
	  formatURL: function(url) {
	    var rootURL = get(this, 'rootURL');
	
	    if (url !== '') {
	      rootURL = rootURL.replace(/\/$/, '');
	    }
	
	    return rootURL + url;
	  },
	
	  willDestroy: function() {
	    var guid = Ember.guidFor(this);
	
	    Ember.$(window).unbind('popstate.ember-location-'+guid);
	  }
	});
	
	Ember.Location.registerImplementation('history', Ember.HistoryLocation);
	
	})();
	
	
	
	(function() {
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-routing
	*/
	
	var get = Ember.get, set = Ember.set;
	
	var merge = function(original, hash) {
	  for (var prop in hash) {
	    if (!hash.hasOwnProperty(prop)) { continue; }
	    if (original.hasOwnProperty(prop)) { continue; }
	
	    original[prop] = hash[prop];
	  }
	};
	
	/**
	  `Ember.Router` is the subclass of `Ember.StateManager` responsible for providing URL-based
	  application state detection. The `Ember.Router` instance of an application detects the browser URL
	  at application load time and attempts to match it to a specific application state. Additionally
	  the router will update the URL to reflect an application's state changes over time.
	
	  ## Adding a Router Instance to Your Application
	  An instance of Ember.Router can be associated with an instance of Ember.Application in one of two ways:
	
	  You can provide a subclass of Ember.Router as the `Router` property of your application. An instance
	  of this Router class will be instantiated and route detection will be enabled when the application's
	  `initialize` method is called. The Router instance will be available as the `router` property
	  of the application:
	
	      App = Ember.Application.create({
	        Router: Ember.Router.extend({ ... })
	      });
	
	      App.initialize();
	      App.get('router') // an instance of App.Router
	
	  If you want to define a Router instance elsewhere, you can pass the instance to the application's
	  `initialize` method:
	
	      App = Ember.Application.create();
	      aRouter = Ember.Router.create({ ... });
	
	      App.initialize(aRouter);
	      App.get('router') // aRouter
	
	  ## Adding Routes to a Router
	  The `initialState` property of Ember.Router instances is named `root`. The state stored in this
	  property must be a subclass of Ember.Route. The `root` route acts as the container for the
	  set of routable states but is not routable itself. It should have states that are also subclasses
	  of Ember.Route which each have a `route` property describing the URL pattern you would like to detect.
	
	      App = Ember.Application.create({
	        Router: Ember.Router.extend({
	          root: Ember.Route.extend({
	            index: Ember.Route.extend({
	              route: '/'
	            }),
	            ... additional Ember.Routes ...
	          })
	        })
	      });
	      App.initialize();
	
	
	  When an application loads, Ember will parse the URL and attempt to find an Ember.Route within
	  the application's states that matches. (The example URL-matching below will use the default
	  'hash syntax' provided by `Ember.HashLocation`.)
	
	  In the following route structure:
	
	      App = Ember.Application.create({
	        Router: Ember.Router.extend({
	          root: Ember.Route.extend({
	            aRoute: Ember.Route.extend({
	              route: '/'
	            }),
	            bRoute: Ember.Route.extend({
	              route: '/alphabeta'
	            })
	          })
	        })
	      });
	      App.initialize();
	
	  Loading the page at the URL '#/' will detect the route property of 'root.aRoute' ('/') and
	  transition the router first to the state named 'root' and then to the substate 'aRoute'.
	
	  Respectively, loading the page at the URL '#/alphabeta' would detect the route property of
	  'root.bRoute' ('/alphabeta') and transition the router first to the state named 'root' and
	  then to the substate 'bRoute'.
	
	  ## Adding Nested Routes to a Router
	  Routes can contain nested subroutes each with their own `route` property describing the nested
	  portion of the URL they would like to detect and handle. Router, like all instances of StateManager,
	  cannot call `transitonTo` with an intermediary state. To avoid transitioning the Router into an
	  intermediary state when detecting URLs, a Route with nested routes must define both a base `route`
	  property for itself and a child Route with a `route` property of `'/'` which will be transitioned
	  to when the base route is detected in the URL:
	
	  Given the following application code:
	
	      App = Ember.Application.create({
	        Router: Ember.Router.extend({
	          root: Ember.Route.extend({
	            aRoute: Ember.Route.extend({
	              route: '/theBaseRouteForThisSet',
	
	              indexSubRoute: Ember.Route.extend({
	                route: '/'
	              }),
	
	              subRouteOne: Ember.Route.extend({
	                route: '/subroute1'
	              }),
	
	              subRouteTwo: Ember.Route.extend({
	                route: '/subRoute2'
	              })
	
	            })
	          })
	        })
	      });
	      App.initialize();
	
	  When the application is loaded at '/theBaseRouteForThisSet' the Router will transition to the route
	  at path 'root.aRoute' and then transition to state 'indexSubRoute'.
	
	  When the application is loaded at '/theBaseRouteForThisSet/subRoute1' the Router will transition to
	  the route at path 'root.aRoute' and then transition to state 'subRouteOne'.
	
	  ## Route Transition Events
	  Transitioning between Ember.Route instances (including the transition into the detected
	  route when loading the application)  triggers the same transition events as state transitions for
	  base `Ember.State`s. However, the default `setup` transition event is named `connectOutlets` on
	  Ember.Router instances (see 'Changing View Hierarchy in Response To State Change').
	
	  The following route structure when loaded with the URL "#/"
	
	      App = Ember.Application.create({
	        Router: Ember.Router.extend({
	          root: Ember.Route.extend({
	            aRoute: Ember.Route.extend({
	              route: '/',
	              enter: function(router) {
	                console.log("entering root.aRoute from", router.get('currentState.name'));
	              },
	              connectOutlets: function(router) {
	                console.log("entered root.aRoute, fully transitioned to", router.get('currentState.path'));
	              }
	            })
	          })
	        })
	      });
	      App.initialize();
	
	  Will result in console output of:
	
	      'entering root.aRoute from root'
	      'entered root.aRoute, fully transitioned to root.aRoute '
	
	  Ember.Route has two additional callbacks for handling URL serialization and deserialization. See
	  'Serializing/Deserializing URLs'
	
	  ## Routes With Dynamic Segments
	  An Ember.Route's `route` property can reference dynamic sections of the URL by prefacing a URL segment
	  with the ':' character.  The values of these dynamic segments will be passed as a hash to the
	  `deserialize` method of the matching Route (see 'Serializing/Deserializing URLs').
	
	  ## Serializing/Deserializing URLs
	  Ember.Route has two callbacks for associating a particular object context with a URL: `serialize`
	  for converting an object into a parameters hash to fill dynamic segments of a URL and `deserialize`
	  for converting a hash of dynamic segments from the URL into the appropriate object.
	
	  ### Deserializing A URL's Dynamic Segments
	  When an application is first loaded or the URL is changed manually (e.g. through the browser's
	  back button) the `deserialize` method of the URL's matching Ember.Route will be called with
	  the application's router as its first argument and a hash of the URL's dynamic segments and values
	  as its second argument.
	
	  The following route structure when loaded with the URL "#/fixed/thefirstvalue/anotherFixed/thesecondvalue":
	
	      App = Ember.Application.create({
	        Router: Ember.Router.extend({
	          root: Ember.Route.extend({
	            aRoute: Ember.Route.extend({
	              route: '/fixed/:dynamicSectionA/anotherFixed/:dynamicSectionB',
	              deserialize: function(router, params) {}
	            })
	          })
	        })
	      });
	      App.initialize();
	
	  Will call the 'deserialize' method of the Route instance at the path 'root.aRoute' with the
	  following hash as its second argument:
	
	      {
	        dynamicSectionA: 'thefirstvalue',
	        dynamicSectionB: 'thesecondvalue'
	      }
	
	  Within `deserialize` you should use this information to retrieve or create an appropriate context
	  object for the given URL (e.g. by loading from a remote API or accessing the browser's
	  `localStorage`). This object must be the `return` value of `deserialize` and will be
	  passed to the Route's `connectOutlets` and `serialize` methods.
	
	  When an application's state is changed from within the application itself, the context provided for
	  the transition will be passed and `deserialize` is not called (see 'Transitions Between States').
	
	  ### Serializing An Object For URLs with Dynamic Segments
	  When transitioning into a Route whose `route` property contains dynamic segments the Route's
	  `serialize` method is called with the Route's router as the first argument and the Route's
	  context as the second argument.  The return value of `serialize` will be used to populate the
	  dynamic segments and should be an object with keys that match the names of the dynamic sections.
	
	  Given the following route structure:
	
	      App = Ember.Application.create({
	        Router: Ember.Router.extend({
	          root: Ember.Route.extend({
	            aRoute: Ember.Route.extend({
	              route: '/'
	            }),
	            bRoute: Ember.Route.extend({
	              route: '/staticSection/:someDynamicSegment',
	              serialize: function(router, context) {
	                return {
	                  someDynamicSegment: context.get('name')
	                }
	              }
	            })
	          })
	        })
	      });
	      App.initialize();
	
	
	  Transitioning to "root.bRoute" with a context of `Object.create({name: 'Yehuda'})` will call
	  the Route's `serialize` method with the context as its second argument and update the URL to
	  '#/staticSection/Yehuda'.
	
	  ## Transitions Between States
	  Once a routed application has initialized its state based on the entry URL, subsequent transitions to other
	  states will update the URL if the entered Route has a `route` property. Given the following route structure
	  loaded at the URL '#/':
	
	      App = Ember.Application.create({
	        Router: Ember.Router.extend({
	          root: Ember.Route.extend({
	            aRoute: Ember.Route.extend({
	              route: '/',
	              moveElsewhere: Ember.Route.transitionTo('bRoute')
	            }),
	            bRoute: Ember.Route.extend({
	              route: '/someOtherLocation'
	            })
	          })
	        })
	      });
	      App.initialize();
	
	  And application code:
	
	      App.get('router').send('moveElsewhere');
	
	  Will transition the application's state to 'root.bRoute' and trigger an update of the URL to
	  '#/someOtherLocation'.
	
	  For URL patterns with dynamic segments a context can be supplied as the second argument to `send`.
	  The router will match dynamic segments names to keys on this object and fill in the URL with the
	  supplied values. Given the following state structure loaded at the URL '#/':
	
	      App = Ember.Application.create({
	        Router: Ember.Router.extend({
	          root: Ember.Route.extend({
	            aRoute: Ember.Route.extend({
	              route: '/',
	              moveElsewhere: Ember.Route.transitionTo('bRoute')
	            }),
	            bRoute: Ember.Route.extend({
	              route: '/a/route/:dynamicSection/:anotherDynamicSection',
	              connectOutlets: function(router, context) {},
	            })
	          })
	        })
	      });
	      App.initialize();
	
	  And application code:
	
	      App.get('router').send('moveElsewhere', {
	        dynamicSection: '42',
	        anotherDynamicSection: 'Life'
	      });
	
	  Will transition the application's state to 'root.bRoute' and trigger an update of the URL to
	  '#/a/route/42/Life'.
	
	  The context argument will also be passed as the second argument to the `serialize` method call.
	
	  ## Injection of Controller Singletons
	  During application initialization Ember will detect properties of the application ending in 'Controller',
	  create singleton instances of each class, and assign them as properties on the router.  The property name
	  will be the UpperCamel name converted to lowerCamel format. These controller classes should be subclasses
	  of Ember.ObjectController, Ember.ArrayController, Ember.Controller, or a custom Ember.Object that includes the
	  Ember.ControllerMixin mixin.
	
	  ``` javascript
	  App = Ember.Application.create({
	    FooController: Ember.Object.create(Ember.ControllerMixin),
	    Router: Ember.Router.extend({ ... })
	  });
	
	  App.get('router.fooController'); // instance of App.FooController
	  ```
	
	  The controller singletons will have their `namespace` property set to the application and their `target`
	  property set to the application's router singleton for easy integration with Ember's user event system.
	  See 'Changing View Hierarchy in Response To State Change' and 'Responding to User-initiated Events.'
	
	  ## Responding to User-initiated Events
	  Controller instances injected into the router at application initialization have their `target` property
	  set to the application's router instance. These controllers will also be the default `context` for their
	  associated views.  Uses of the `{{action}}` helper will automatically target the application's router.
	
	  Given the following application entered at the URL '#/':
	
	  ``` javascript
	  App = Ember.Application.create({
	    Router: Ember.Router.extend({
	      root: Ember.Route.extend({
	        aRoute: Ember.Route.extend({
	          route: '/',
	          anActionOnTheRouter: function(router, context) {
	            router.transitionTo('anotherState', context);
	          }
	        })
	        anotherState: Ember.Route.extend({
	          route: '/differentUrl',
	          connectOutlets: function(router, context) {
	
	          }
	        })
	      })
	    })
	  });
	  App.initialize();
	  ```
	
	  The following template:
	
	  ``` handlebars
	  <script type="text/x-handlebars" data-template-name="aView">
	      <h1><a {{action anActionOnTheRouter}}>{{title}}</a></h1>
	  </script>
	  ```
	
	  Will delegate `click` events on the rendered `h1` to the application's router instance. In this case the
	  `anActionOnTheRouter` method of the state at 'root.aRoute' will be called with the view's controller
	  as the context argument. This context will be passed to the `connectOutlets` as its second argument.
	
	  Different `context` can be supplied from within the `{{action}}` helper, allowing specific context passing
	  between application states:
	
	  ``` handlebars
	  <script type="text/x-handlebars" data-template-name="photos">
	    {{#each photo in controller}}
	      <h1><a {{action showPhoto photo}}>{{title}}</a></h1>
	    {{/each}}
	  </script>
	  ```
	
	  See `Handlebars.helpers.action` for additional usage examples.
	
	
	  ## Changing View Hierarchy in Response To State Change
	
	  Changes in application state that change the URL should be accompanied by associated changes in view
	  hierarchy.  This can be accomplished by calling 'connectOutlet' on the injected controller singletons from
	  within the 'connectOutlets' event of an Ember.Route:
	
	  ``` javascript
	  App = Ember.Application.create({
	    OneController: Ember.ObjectController.extend(),
	    OneView: Ember.View.extend(),
	
	    AnotherController: Ember.ObjectController.extend(),
	    AnotherView: Ember.View.extend(),
	
	    Router: Ember.Router.extend({
	      root: Ember.Route.extend({
	        aRoute: Ember.Route.extend({
	          route: '/',
	          connectOutlets: function(router, context) {
	            router.get('oneController').connectOutlet('another');
	          },
	        })
	      })
	    })
	  });
	  App.initialize();
	  ```
	
	
	  This will detect the '{{outlet}}' portion of `oneController`'s view (an instance of `App.OneView`) and
	  fill it with a rendered instance of `App.AnotherView` whose `context` will be the single instance of
	  `App.AnotherController` stored on the router in the `anotherController` property.
	
	  For more information about Outlets, see `Ember.Handlebars.helpers.outlet`. For additional information on
	  the `connectOutlet` method, see `Ember.Controller.connectOutlet`. For more information on
	  controller injections, see `Ember.Application#initialize()`. For additional information about view context,
	  see `Ember.View`.
	
	  @class Router
	  @namespace Ember
	  @extends Ember.StateManager
	*/
	Ember.Router = Ember.StateManager.extend(
	/** @scope Ember.Router.prototype */ {
	
	  /**
	    @property initialState
	    @type String
	    @default 'root'
	  */
	  initialState: 'root',
	
	  /**
	    The `Ember.Location` implementation to be used to manage the application
	    URL state. The following values are supported:
	
	    * 'hash': Uses URL fragment identifiers (like #/blog/1) for routing.
	    * 'history': Uses the browser's history.pushstate API for routing. Only works in
	       modern browsers with pushstate support.
	    * 'none': Does not read or set the browser URL, but still allows for
	      routing to happen. Useful for testing.
	
	    @property location
	    @type String
	    @default 'hash'
	  */
	  location: 'hash',
	
	  /**
	    This is only used when a history location is used so that applications that
	    don't live at the root of the domain can append paths to their root.
	
	    @property rootURL
	    @type String
	    @default '/'
	  */
	
	  rootURL: '/',
	
	  transitionTo: function() {
	    this.abortRoutingPromises();
	    this._super.apply(this, arguments);
	  },
	
	  route: function(path) {
	    this.abortRoutingPromises();
	
	    set(this, 'isRouting', true);
	
	    var routableState;
	
	    try {
	      path = path.replace(get(this, 'rootURL'), '');
	      path = path.replace(/^(?=[^\/])/, "/");
	
	      this.send('navigateAway');
	      this.send('unroutePath', path);
	
	      routableState = get(this, 'currentState');
	      while (routableState && !routableState.get('isRoutable')) {
	        routableState = get(routableState, 'parentState');
	      }
	      var currentURL = routableState ? routableState.absoluteRoute(this) : '';
	      var rest = path.substr(currentURL.length);
	
	      this.send('routePath', rest);
	    } finally {
	      set(this, 'isRouting', false);
	    }
	
	    routableState = get(this, 'currentState');
	    while (routableState && !routableState.get('isRoutable')) {
	      routableState = get(routableState, 'parentState');
	    }
	
	    if (routableState) {
	      routableState.updateRoute(this, get(this, 'location'));
	    }
	  },
	
	  urlFor: function(path, hash) {
	    var currentState = get(this, 'currentState') || this,
	        state = this.findStateByPath(currentState, path);
	
	    Ember.assert(Ember.String.fmt("Could not find route with path '%@'", [path]), state);
	    Ember.assert(Ember.String.fmt("To get a URL for the state '%@', it must have a `route` property.", [path]), get(state, 'routeMatcher'));
	
	    var location = get(this, 'location'),
	        absoluteRoute = state.absoluteRoute(this, hash);
	
	    return location.formatURL(absoluteRoute);
	  },
	
	  urlForEvent: function(eventName) {
	    var contexts = Array.prototype.slice.call(arguments, 1);
	    var currentState = get(this, 'currentState');
	    var targetStateName = currentState.lookupEventTransition(eventName);
	
	    Ember.assert(Ember.String.fmt("You must specify a target state for event '%@' in order to link to it in the current state '%@'.", [eventName, get(currentState, 'path')]), targetStateName);
	
	    var targetState = this.findStateByPath(currentState, targetStateName);
	
	    Ember.assert("Your target state name " + targetStateName + " for event " + eventName + " did not resolve to a state", targetState);
	
	    var hash = this.serializeRecursively(targetState, contexts, {});
	
	    return this.urlFor(targetStateName, hash);
	  },
	
	  serializeRecursively: function(state, contexts, hash) {
	    var parentState,
	        context = get(state, 'hasContext') ? contexts.pop() : null;
	    merge(hash, state.serialize(this, context));
	    parentState = state.get("parentState");
	    if (parentState && parentState instanceof Ember.Route) {
	      return this.serializeRecursively(parentState, contexts, hash);
	    } else {
	      return hash;
	    }
	  },
	
	  abortRoutingPromises: function() {
	    if (this._routingPromises) {
	      this._routingPromises.abort();
	      this._routingPromises = null;
	    }
	  },
	
	  handleStatePromises: function(states, complete) {
	    this.abortRoutingPromises();
	
	    this.set('isLocked', true);
	
	    var manager = this;
	
	    this._routingPromises = Ember._PromiseChain.create({
	      promises: states.slice(),
	
	      successCallback: function() {
	        manager.set('isLocked', false);
	        complete();
	      },
	
	      failureCallback: function() {
	        throw "Unable to load object";
	      },
	
	      promiseSuccessCallback: function(item, args) {
	        set(item, 'object', args[0]);
	      },
	
	      abortCallback: function() {
	        manager.set('isLocked', false);
	      }
	    }).start();
	  },
	
	  moveStatesIntoRoot: function() {
	    this.root = Ember.Route.extend();
	
	    for (var name in this) {
	      if (name === "constructor") { continue; }
	
	      var state = this[name];
	
	      if (state instanceof Ember.Route || Ember.Route.detect(state)) {
	        this.root[name] = state;
	        delete this[name];
	      }
	    }
	  },
	
	  init: function() {
	    if (!this.root) {
	      this.moveStatesIntoRoot();
	    }
	
	    this._super();
	
	    var location = get(this, 'location'),
	        rootURL = get(this, 'rootURL');
	
	    if ('string' === typeof location) {
	      set(this, 'location', Ember.Location.create({
	        implementation: location,
	        rootURL: rootURL
	      }));
	    }
	
	    this.assignRouter(this, this);
	  },
	
	  assignRouter: function(state, router) {
	    state.router = router;
	
	    var childStates = state.states;
	
	    if (childStates) {
	      for (var stateName in childStates) {
	        if (!childStates.hasOwnProperty(stateName)) { continue; }
	        this.assignRouter(childStates[stateName], router);
	      }
	    }
	  },
	
	  willDestroy: function() {
	    get(this, 'location').destroy();
	  }
	});
	
	})();
	
	
	
	(function() {
	/**
	Ember Routing
	
	@module ember
	@submodule ember-routing
	@requires ember-states
	*/
	
	})();
	


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	//
	// This file is automatically generated. any changes will be lost
	//
	
	var Handlebars = __webpack_require__(13);
	__webpack_require__(3);
	__webpack_require__(10);
	Ember.imports.Handlebars = Ember.imports.Handlebars || Handlebars;
	
	
	(function() {
	/**
	@module ember
	@submodule ember-handlebars
	*/
	
	var objectCreate = Ember.create;
	
	var Handlebars = Ember.imports.Handlebars;
	Ember.assert("Ember Handlebars requires Handlebars 1.0.beta.5 or greater", Handlebars && Handlebars.VERSION.match(/^1\.0\.beta\.[56789]$|^1\.0\.rc\.[123456789]+/));
	
	/**
	  Prepares the Handlebars templating library for use inside Ember's view
	  system.
	
	  The Ember.Handlebars object is the standard Handlebars library, extended to use
	  Ember's get() method instead of direct property access, which allows
	  computed properties to be used inside templates.
	
	  To create an Ember.Handlebars template, call Ember.Handlebars.compile().  This will
	  return a function that can be used by Ember.View for rendering.
	
	  @class Handlebars
	  @namespace Ember
	*/
	Ember.Handlebars = objectCreate(Handlebars);
	
	/**
	@class helpers
	@namespace Ember.Handlebars
	*/
	Ember.Handlebars.helpers = objectCreate(Handlebars.helpers);
	
	/**
	  Override the the opcode compiler and JavaScript compiler for Handlebars.
	
	  @class Compiler
	  @namespace Ember.Handlebars
	  @private
	  @constructor
	*/
	Ember.Handlebars.Compiler = function() {};
	
	// Handlebars.Compiler doesn't exist in runtime-only
	if (Handlebars.Compiler) {
	  Ember.Handlebars.Compiler.prototype = objectCreate(Handlebars.Compiler.prototype);
	}
	
	Ember.Handlebars.Compiler.prototype.compiler = Ember.Handlebars.Compiler;
	
	/**
	  @class JavaScriptCompiler
	  @namespace Ember.Handlebars
	  @private
	  @constructor
	*/
	Ember.Handlebars.JavaScriptCompiler = function() {};
	
	// Handlebars.JavaScriptCompiler doesn't exist in runtime-only
	if (Handlebars.JavaScriptCompiler) {
	  Ember.Handlebars.JavaScriptCompiler.prototype = objectCreate(Handlebars.JavaScriptCompiler.prototype);
	  Ember.Handlebars.JavaScriptCompiler.prototype.compiler = Ember.Handlebars.JavaScriptCompiler;
	}
	
	
	Ember.Handlebars.JavaScriptCompiler.prototype.namespace = "Ember.Handlebars";
	
	
	Ember.Handlebars.JavaScriptCompiler.prototype.initializeBuffer = function() {
	  return "''";
	};
	
	/**
	  @private
	
	  Override the default buffer for Ember Handlebars. By default, Handlebars creates
	  an empty String at the beginning of each invocation and appends to it. Ember's
	  Handlebars overrides this to append to a single shared buffer.
	
	  @method appendToBuffer
	  @param string {String}
	*/
	Ember.Handlebars.JavaScriptCompiler.prototype.appendToBuffer = function(string) {
	  return "data.buffer.push("+string+");";
	};
	
	/**
	  @private
	
	  Rewrite simple mustaches from `{{foo}}` to `{{bind "foo"}}`. This means that all simple
	  mustaches in Ember's Handlebars will also set up an observer to keep the DOM
	  up to date when the underlying property changes.
	
	  @method mustache
	  @for Ember.Handlebars.Compiler
	  @param mustache
	*/
	Ember.Handlebars.Compiler.prototype.mustache = function(mustache) {
	  if (mustache.params.length || mustache.hash) {
	    return Handlebars.Compiler.prototype.mustache.call(this, mustache);
	  } else {
	    var id = new Handlebars.AST.IdNode(['_triageMustache']);
	
	    // Update the mustache node to include a hash value indicating whether the original node
	    // was escaped. This will allow us to properly escape values when the underlying value
	    // changes and we need to re-render the value.
	    if(!mustache.escaped) {
	      mustache.hash = mustache.hash || new Handlebars.AST.HashNode([]);
	      mustache.hash.pairs.push(["unescaped", new Handlebars.AST.StringNode("true")]);
	    }
	    mustache = new Handlebars.AST.MustacheNode([id].concat([mustache.id]), mustache.hash, !mustache.escaped);
	    return Handlebars.Compiler.prototype.mustache.call(this, mustache);
	  }
	};
	
	/**
	  Used for precompilation of Ember Handlebars templates. This will not be used during normal
	  app execution.
	
	  @method precompile
	  @for Ember.Handlebars
	  @static
	  @param {String} string The template to precompile
	*/
	Ember.Handlebars.precompile = function(string) {
	  var ast = Handlebars.parse(string);
	
	  var options = {
	    knownHelpers: {
	      action: true,
	      unbound: true,
	      bindAttr: true,
	      template: true,
	      view: true,
	      _triageMustache: true
	    },
	    data: true,
	    stringParams: true
	  };
	
	  var environment = new Ember.Handlebars.Compiler().compile(ast, options);
	  return new Ember.Handlebars.JavaScriptCompiler().compile(environment, options, undefined, true);
	};
	
	// We don't support this for Handlebars runtime-only
	if (Handlebars.compile) {
	  /**
	    The entry point for Ember Handlebars. This replaces the default Handlebars.compile and turns on
	    template-local data and String parameters.
	
	    @method compile
	    @for Ember.Handlebars
	    @static
	    @param {String} string The template to compile
	    @return {Function}
	  */
	  Ember.Handlebars.compile = function(string) {
	    var ast = Handlebars.parse(string);
	    var options = { data: true, stringParams: true };
	    var environment = new Ember.Handlebars.Compiler().compile(ast, options);
	    var templateSpec = new Ember.Handlebars.JavaScriptCompiler().compile(environment, options, undefined, true);
	
	    return Handlebars.template(templateSpec);
	  };
	}
	
	/**
	  @private
	
	  If a path starts with a reserved keyword, returns the root
	  that should be used.
	
	  @method normalizePath
	  @for Ember
	  @param root {Object}
	  @param path {String}
	  @param data {Hash}
	*/
	var normalizePath = Ember.Handlebars.normalizePath = function(root, path, data) {
	  var keywords = (data && data.keywords) || {},
	      keyword, isKeyword;
	
	  // Get the first segment of the path. For example, if the
	  // path is "foo.bar.baz", returns "foo".
	  keyword = path.split('.', 1)[0];
	
	  // Test to see if the first path is a keyword that has been
	  // passed along in the view's data hash. If so, we will treat
	  // that object as the new root.
	  if (keywords.hasOwnProperty(keyword)) {
	    // Look up the value in the template's data hash.
	    root = keywords[keyword];
	    isKeyword = true;
	
	    // Handle cases where the entire path is the reserved
	    // word. In that case, return the object itself.
	    if (path === keyword) {
	      path = '';
	    } else {
	      // Strip the keyword from the path and look up
	      // the remainder from the newly found root.
	      path = path.substr(keyword.length+1);
	    }
	  }
	
	  return { root: root, path: path, isKeyword: isKeyword };
	};
	
	
	/**
	  Lookup both on root and on window. If the path starts with
	  a keyword, the corresponding object will be looked up in the
	  template's data hash and used to resolve the path.
	
	  @method get
	  @for Ember.Handlebars
	  @param {Object} root The object to look up the property on
	  @param {String} path The path to be lookedup
	  @param {Object} options The template's option hash
	*/
	Ember.Handlebars.get = function(root, path, options) {
	  var data = options && options.data,
	      normalizedPath = normalizePath(root, path, data),
	      value;
	
	  // In cases where the path begins with a keyword, change the
	  // root to the value represented by that keyword, and ensure
	  // the path is relative to it.
	  root = normalizedPath.root;
	  path = normalizedPath.path;
	
	  value = Ember.get(root, path);
	
	  // If the path starts with a capital letter, look it up on Ember.lookup,
	  // which defaults to the `window` object in browsers.
	  if (value === undefined && root !== Ember.lookup && Ember.isGlobalPath(path)) {
	    value = Ember.get(Ember.lookup, path);
	  }
	  return value;
	};
	Ember.Handlebars.getPath = Ember.deprecateFunc('`Ember.Handlebars.getPath` has been changed to `Ember.Handlebars.get` for consistency.', Ember.Handlebars.get);
	
	/**
	  @private
	
	  Registers a helper in Handlebars that will be called if no property with the
	  given name can be found on the current context object, and no helper with
	  that name is registered.
	
	  This throws an exception with a more helpful error message so the user can
	  track down where the problem is happening.
	
	  @method helperMissing
	  @for Ember.Handlebars.helpers
	  @param {String} path
	  @param {Hash} options
	*/
	Ember.Handlebars.registerHelper('helperMissing', function(path, options) {
	  var error, view = "";
	
	  error = "%@ Handlebars error: Could not find property '%@' on object %@.";
	  if (options.data){
	    view = options.data.view;
	  }
	  throw new Ember.Error(Ember.String.fmt(error, [view, path, this]));
	});
	
	
	})();
	
	
	
	(function() {
	/**
	  @method htmlSafe
	  @for Ember.String
	  @static
	*/
	Ember.String.htmlSafe = function(str) {
	  return new Handlebars.SafeString(str);
	};
	
	var htmlSafe = Ember.String.htmlSafe;
	
	if (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.String) {
	
	  /**
	    See {{#crossLink "Ember.String/htmlSafe"}}{{/crossLink}}
	
	    @method htmlSafe
	    @for String
	  */
	  String.prototype.htmlSafe = function() {
	    return htmlSafe(this);
	  };
	}
	
	})();
	
	
	
	(function() {
	/*jshint newcap:false*/
	/**
	@module ember
	@submodule ember-handlebars
	*/
	
	var set = Ember.set, get = Ember.get;
	
	// DOMManager should just abstract dom manipulation between jquery and metamorph
	var DOMManager = {
	  remove: function(view) {
	    view.morph.remove();
	  },
	
	  prepend: function(view, html) {
	    view.morph.prepend(html);
	  },
	
	  after: function(view, html) {
	    view.morph.after(html);
	  },
	
	  html: function(view, html) {
	    view.morph.html(html);
	  },
	
	  // This is messed up.
	  replace: function(view) {
	    var morph = view.morph;
	
	    view.transitionTo('preRender');
	    view.clearRenderedChildren();
	    var buffer = view.renderToBuffer();
	
	    Ember.run.schedule('render', this, function() {
	      if (get(view, 'isDestroyed')) { return; }
	      view.invalidateRecursively('element');
	      view._notifyWillInsertElement();
	      morph.replaceWith(buffer.string());
	      view.transitionTo('inDOM');
	      view._notifyDidInsertElement();
	    });
	  },
	
	  empty: function(view) {
	    view.morph.html("");
	  }
	};
	
	// The `morph` and `outerHTML` properties are internal only
	// and not observable.
	
	/**
	  @class _Metamorph
	  @namespace Ember
	  @extends Ember.Mixin
	  @private
	*/
	Ember._Metamorph = Ember.Mixin.create({
	  isVirtual: true,
	  tagName: '',
	
	  instrumentName: 'render.metamorph',
	
	  init: function() {
	    this._super();
	    this.morph = Metamorph();
	  },
	
	  beforeRender: function(buffer) {
	    buffer.push(this.morph.startTag());
	  },
	
	  afterRender: function(buffer) {
	    buffer.push(this.morph.endTag());
	  },
	
	  createElement: function() {
	    var buffer = this.renderToBuffer();
	    this.outerHTML = buffer.string();
	    this.clearBuffer();
	  },
	
	  domManager: DOMManager
	});
	
	/**
	  @class _MetamorphView
	  @namespace Ember
	  @extends Ember.View
	  @uses Ember._Metamorph
	  @private
	*/
	Ember._MetamorphView = Ember.View.extend(Ember._Metamorph);
	
	/**
	  @class _SimpleMetamorphView
	  @namespace Ember
	  @extends Ember.View
	  @uses Ember._Metamorph
	  @private
	*/
	Ember._SimpleMetamorphView = Ember.CoreView.extend(Ember._Metamorph);
	
	
	})();
	
	
	
	(function() {
	/*globals Handlebars */
	
	/**
	@module ember
	@submodule ember-handlebars
	*/
	
	var get = Ember.get, set = Ember.set, handlebarsGet = Ember.Handlebars.get;
	Ember._SimpleHandlebarsView = Ember._SimpleMetamorphView.extend({
	  instrumentName: 'render.simpleHandlebars',
	
	  normalizedValue: Ember.computed(function() {
	    var path = get(this, 'path'),
	        pathRoot  = get(this, 'pathRoot'),
	        result, templateData;
	
	    // Use the pathRoot as the result if no path is provided. This
	    // happens if the path is `this`, which gets normalized into
	    // a `pathRoot` of the current Handlebars context and a path
	    // of `''`.
	    if (path === '') {
	      result = pathRoot;
	    } else {
	      templateData = get(this, 'templateData');
	      result = handlebarsGet(pathRoot, path, { data: templateData });
	    }
	
	    return result;
	  }).property('path', 'pathRoot').volatile(),
	
	  render: function(buffer) {
	    // If not invoked via a triple-mustache ({{{foo}}}), escape
	    // the content of the template.
	    var escape = get(this, 'isEscaped');
	    var result = get(this, 'normalizedValue');
	
	    if (result === null || result === undefined) {
	      result = "";
	    } else if (!(result instanceof Handlebars.SafeString)) {
	      result = String(result);
	    }
	
	    if (escape) { result = Handlebars.Utils.escapeExpression(result); }
	    buffer.push(result);
	    return;
	  },
	
	  rerender: function() {
	    switch(this.state) {
	      case 'preRender':
	      case 'destroyed':
	        break;
	      case 'inBuffer':
	        throw new Error("Something you did tried to replace an {{expression}} before it was inserted into the DOM.");
	      case 'hasElement':
	      case 'inDOM':
	        this.domManager.replace(this);
	        break;
	    }
	
	    return this;
	  },
	
	  transitionTo: function(state) {
	    this.state = state;
	  }
	});
	
	/**
	  Ember._HandlebarsBoundView is a private view created by the Handlebars `{{bind}}`
	  helpers that is used to keep track of bound properties.
	
	  Every time a property is bound using a `{{mustache}}`, an anonymous subclass
	  of Ember._HandlebarsBoundView is created with the appropriate sub-template and
	  context set up. When the associated property changes, just the template for
	  this view will re-render.
	
	  @class _HandlebarsBoundView
	  @namespace Ember
	  @extends Ember._MetamorphView
	  @private
	*/
	Ember._HandlebarsBoundView = Ember._MetamorphView.extend({
	  instrumentName: 'render.boundHandlebars',
	
	  /**
	    The function used to determine if the `displayTemplate` or
	    `inverseTemplate` should be rendered. This should be a function that takes
	    a value and returns a Boolean.
	
	    @property shouldDisplayFunc
	    @type Function
	    @default null
	  */
	  shouldDisplayFunc: null,
	
	  /**
	    Whether the template rendered by this view gets passed the context object
	    of its parent template, or gets passed the value of retrieving `path`
	    from the `pathRoot`.
	
	    For example, this is true when using the `{{#if}}` helper, because the
	    template inside the helper should look up properties relative to the same
	    object as outside the block. This would be false when used with `{{#with
	    foo}}` because the template should receive the object found by evaluating
	    `foo`.
	
	    @property preserveContext
	    @type Boolean
	    @default false
	  */
	  preserveContext: false,
	
	  /**
	    If `preserveContext` is true, this is the object that will be used
	    to render the template.
	
	    @property previousContext
	    @type Object
	  */
	  previousContext: null,
	
	  /**
	    The template to render when `shouldDisplayFunc` evaluates to true.
	
	    @property displayTemplate
	    @type Function
	    @default null
	  */
	  displayTemplate: null,
	
	  /**
	    The template to render when `shouldDisplayFunc` evaluates to false.
	
	    @property inverseTemplate
	    @type Function
	    @default null
	  */
	  inverseTemplate: null,
	
	
	  /**
	    The path to look up on `pathRoot` that is passed to
	    `shouldDisplayFunc` to determine which template to render.
	
	    In addition, if `preserveContext` is false, the object at this path will
	    be passed to the template when rendering.
	
	    @property path
	    @type String
	    @default null
	  */
	  path: null,
	
	  /**
	    The object from which the `path` will be looked up. Sometimes this is the
	    same as the `previousContext`, but in cases where this view has been generated
	    for paths that start with a keyword such as `view` or `controller`, the
	    path root will be that resolved object.
	
	    @property pathRoot
	    @type Object
	  */
	  pathRoot: null,
	
	  normalizedValue: Ember.computed(function() {
	    var path = get(this, 'path'),
	        pathRoot  = get(this, 'pathRoot'),
	        valueNormalizer = get(this, 'valueNormalizerFunc'),
	        result, templateData;
	
	    // Use the pathRoot as the result if no path is provided. This
	    // happens if the path is `this`, which gets normalized into
	    // a `pathRoot` of the current Handlebars context and a path
	    // of `''`.
	    if (path === '') {
	      result = pathRoot;
	    } else {
	      templateData = get(this, 'templateData');
	      result = handlebarsGet(pathRoot, path, { data: templateData });
	    }
	
	    return valueNormalizer ? valueNormalizer(result) : result;
	  }).property('path', 'pathRoot', 'valueNormalizerFunc').volatile(),
	
	  rerenderIfNeeded: function() {
	    if (!get(this, 'isDestroyed') && get(this, 'normalizedValue') !== this._lastNormalizedValue) {
	      this.rerender();
	    }
	  },
	
	  /**
	    Determines which template to invoke, sets up the correct state based on
	    that logic, then invokes the default Ember.View `render` implementation.
	
	    This method will first look up the `path` key on `pathRoot`,
	    then pass that value to the `shouldDisplayFunc` function. If that returns
	    true, the `displayTemplate` function will be rendered to DOM. Otherwise,
	    `inverseTemplate`, if specified, will be rendered.
	
	    For example, if this Ember._HandlebarsBoundView represented the `{{#with foo}}`
	    helper, it would look up the `foo` property of its context, and
	    `shouldDisplayFunc` would always return true. The object found by looking
	    up `foo` would be passed to `displayTemplate`.
	
	    @method render
	    @param {Ember.RenderBuffer} buffer
	  */
	  render: function(buffer) {
	    // If not invoked via a triple-mustache ({{{foo}}}), escape
	    // the content of the template.
	    var escape = get(this, 'isEscaped');
	
	    var shouldDisplay = get(this, 'shouldDisplayFunc'),
	        preserveContext = get(this, 'preserveContext'),
	        context = get(this, 'previousContext');
	
	    var inverseTemplate = get(this, 'inverseTemplate'),
	        displayTemplate = get(this, 'displayTemplate');
	
	    var result = get(this, 'normalizedValue');
	    this._lastNormalizedValue = result;
	
	    // First, test the conditional to see if we should
	    // render the template or not.
	    if (shouldDisplay(result)) {
	      set(this, 'template', displayTemplate);
	
	      // If we are preserving the context (for example, if this
	      // is an #if block, call the template with the same object.
	      if (preserveContext) {
	        set(this, '_context', context);
	      } else {
	      // Otherwise, determine if this is a block bind or not.
	      // If so, pass the specified object to the template
	        if (displayTemplate) {
	          set(this, '_context', result);
	        } else {
	        // This is not a bind block, just push the result of the
	        // expression to the render context and return.
	          if (result === null || result === undefined) {
	            result = "";
	          } else if (!(result instanceof Handlebars.SafeString)) {
	            result = String(result);
	          }
	
	          if (escape) { result = Handlebars.Utils.escapeExpression(result); }
	          buffer.push(result);
	          return;
	        }
	      }
	    } else if (inverseTemplate) {
	      set(this, 'template', inverseTemplate);
	
	      if (preserveContext) {
	        set(this, '_context', context);
	      } else {
	        set(this, '_context', result);
	      }
	    } else {
	      set(this, 'template', function() { return ''; });
	    }
	
	    return this._super(buffer);
	  }
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-handlebars
	*/
	
	var get = Ember.get, set = Ember.set, fmt = Ember.String.fmt;
	var handlebarsGet = Ember.Handlebars.get, normalizePath = Ember.Handlebars.normalizePath;
	var forEach = Ember.ArrayPolyfills.forEach;
	
	var EmberHandlebars = Ember.Handlebars, helpers = EmberHandlebars.helpers;
	
	// Binds a property into the DOM. This will create a hook in DOM that the
	// KVO system will look for and update if the property changes.
	function bind(property, options, preserveContext, shouldDisplay, valueNormalizer) {
	  var data = options.data,
	      fn = options.fn,
	      inverse = options.inverse,
	      view = data.view,
	      currentContext = this,
	      pathRoot, path, normalized;
	
	  normalized = normalizePath(currentContext, property, data);
	
	  pathRoot = normalized.root;
	  path = normalized.path;
	
	  // Set up observers for observable objects
	  if ('object' === typeof this) {
	    // Create the view that will wrap the output of this template/property
	    // and add it to the nearest view's childViews array.
	    // See the documentation of Ember._HandlebarsBoundView for more.
	    var bindView = view.createChildView(Ember._HandlebarsBoundView, {
	      preserveContext: preserveContext,
	      shouldDisplayFunc: shouldDisplay,
	      valueNormalizerFunc: valueNormalizer,
	      displayTemplate: fn,
	      inverseTemplate: inverse,
	      path: path,
	      pathRoot: pathRoot,
	      previousContext: currentContext,
	      isEscaped: !options.hash.unescaped,
	      templateData: options.data
	    });
	
	    view.appendChild(bindView);
	
	    var observer = function() {
	      Ember.run.scheduleOnce('render', bindView, 'rerenderIfNeeded');
	    };
	
	    // Observes the given property on the context and
	    // tells the Ember._HandlebarsBoundView to re-render. If property
	    // is an empty string, we are printing the current context
	    // object ({{this}}) so updating it is not our responsibility.
	    if (path !== '') {
	      Ember.addObserver(pathRoot, path, observer);
	
	      view.one('willClearRender', function() {
	        Ember.removeObserver(pathRoot, path, observer);
	      });
	    }
	  } else {
	    // The object is not observable, so just render it out and
	    // be done with it.
	    data.buffer.push(handlebarsGet(pathRoot, path, options));
	  }
	}
	
	function simpleBind(property, options) {
	  var data = options.data,
	      view = data.view,
	      currentContext = this,
	      pathRoot, path, normalized;
	
	  normalized = normalizePath(currentContext, property, data);
	
	  pathRoot = normalized.root;
	  path = normalized.path;
	
	  // Set up observers for observable objects
	  if ('object' === typeof this) {
	    var bindView = Ember._SimpleHandlebarsView.create().setProperties({
	      path: path,
	      pathRoot: pathRoot,
	      isEscaped: !options.hash.unescaped,
	      previousContext: currentContext,
	      templateData: options.data
	    });
	
	    view.createChildView(bindView);
	    view.appendChild(bindView);
	
	    var observer = function() {
	      Ember.run.scheduleOnce('render', bindView, 'rerender');
	    };
	
	    // Observes the given property on the context and
	    // tells the Ember._HandlebarsBoundView to re-render. If property
	    // is an empty string, we are printing the current context
	    // object ({{this}}) so updating it is not our responsibility.
	    if (path !== '') {
	      Ember.addObserver(pathRoot, path, observer);
	
	      view.one('willClearRender', function() {
	        Ember.removeObserver(pathRoot, path, observer);
	      });
	    }
	  } else {
	    // The object is not observable, so just render it out and
	    // be done with it.
	    data.buffer.push(handlebarsGet(pathRoot, path, options));
	  }
	}
	
	/**
	  @private
	
	  '_triageMustache' is used internally select between a binding and helper for
	  the given context. Until this point, it would be hard to determine if the
	  mustache is a property reference or a regular helper reference. This triage
	  helper resolves that.
	
	  This would not be typically invoked by directly.
	
	  @method _triageMustache
	  @for Ember.Handlebars.helpers
	  @param {String} property Property/helperID to triage
	  @param {Function} fn Context to provide for rendering
	  @return {String} HTML string
	*/
	EmberHandlebars.registerHelper('_triageMustache', function(property, fn) {
	  Ember.assert("You cannot pass more than one argument to the _triageMustache helper", arguments.length <= 2);
	  if (helpers[property]) {
	    return helpers[property].call(this, fn);
	  }
	  else {
	    return helpers.bind.apply(this, arguments);
	  }
	});
	
	/**
	  @private
	
	  `bind` can be used to display a value, then update that value if it
	  changes. For example, if you wanted to print the `title` property of
	  `content`:
	
	  ``` handlebars
	  {{bind "content.title"}}
	  ```
	
	  This will return the `title` property as a string, then create a new
	  observer at the specified path. If it changes, it will update the value in
	  DOM. Note that if you need to support IE7 and IE8 you must modify the
	  model objects properties using Ember.get() and Ember.set() for this to work as
	  it relies on Ember's KVO system.  For all other browsers this will be handled
	  for you automatically.
	
	  @method bind
	  @for Ember.Handlebars.helpers
	  @param {String} property Property to bind
	  @param {Function} fn Context to provide for rendering
	  @return {String} HTML string
	*/
	EmberHandlebars.registerHelper('bind', function(property, options) {
	  Ember.assert("You cannot pass more than one argument to the bind helper", arguments.length <= 2);
	
	  var context = (options.contexts && options.contexts[0]) || this;
	
	  if (!options.fn) {
	    return simpleBind.call(context, property, options);
	  }
	
	  return bind.call(context, property, options, false, function(result) {
	    return !Ember.none(result);
	  });
	});
	
	/**
	  @private
	
	  Use the `boundIf` helper to create a conditional that re-evaluates
	  whenever the bound value changes.
	
	  ``` handlebars
	  {{#boundIf "content.shouldDisplayTitle"}}
	    {{content.title}}
	  {{/boundIf}}
	  ```
	
	  @method boundIf
	  @for Ember.Handlebars.helpers
	  @param {String} property Property to bind
	  @param {Function} fn Context to provide for rendering
	  @return {String} HTML string
	*/
	EmberHandlebars.registerHelper('boundIf', function(property, fn) {
	  var context = (fn.contexts && fn.contexts[0]) || this;
	  var func = function(result) {
	    if (Ember.typeOf(result) === 'array') {
	      return get(result, 'length') !== 0;
	    } else {
	      return !!result;
	    }
	  };
	
	  return bind.call(context, property, fn, true, func, func);
	});
	
	/**
	  @method with
	  @for Ember.Handlebars.helpers
	  @param {Function} context
	  @param {Hash} options
	  @return {String} HTML string
	*/
	EmberHandlebars.registerHelper('with', function(context, options) {
	  if (arguments.length === 4) {
	    var keywordName, path, rootPath, normalized;
	
	    Ember.assert("If you pass more than one argument to the with helper, it must be in the form #with foo as bar", arguments[1] === "as");
	    options = arguments[3];
	    keywordName = arguments[2];
	    path = arguments[0];
	
	    Ember.assert("You must pass a block to the with helper", options.fn && options.fn !== Handlebars.VM.noop);
	
	    if (Ember.isGlobalPath(path)) {
	      Ember.bind(options.data.keywords, keywordName, path);
	    } else {
	      normalized = normalizePath(this, path, options.data);
	      path = normalized.path;
	      rootPath = normalized.root;
	
	      // This is a workaround for the fact that you cannot bind separate objects
	      // together. When we implement that functionality, we should use it here.
	      var contextKey = Ember.$.expando + Ember.guidFor(rootPath);
	      options.data.keywords[contextKey] = rootPath;
	
	      // if the path is '' ("this"), just bind directly to the current context
	      var contextPath = path ? contextKey + '.' + path : contextKey;
	      Ember.bind(options.data.keywords, keywordName, contextPath);
	    }
	
	    return bind.call(this, path, options, true, function(result) {
	      return !Ember.none(result);
	    });
	  } else {
	    Ember.assert("You must pass exactly one argument to the with helper", arguments.length === 2);
	    Ember.assert("You must pass a block to the with helper", options.fn && options.fn !== Handlebars.VM.noop);
	    return helpers.bind.call(options.contexts[0], context, options);
	  }
	});
	
	
	/**
	  @method if
	  @for Ember.Handlebars.helpers
	  @param {Function} context
	  @param {Hash} options
	  @return {String} HTML string
	*/
	EmberHandlebars.registerHelper('if', function(context, options) {
	  Ember.assert("You must pass exactly one argument to the if helper", arguments.length === 2);
	  Ember.assert("You must pass a block to the if helper", options.fn && options.fn !== Handlebars.VM.noop);
	
	  return helpers.boundIf.call(options.contexts[0], context, options);
	});
	
	/**
	  @method unless
	  @for Ember.Handlebars.helpers
	  @param {Function} context
	  @param {Hash} options
	  @return {String} HTML string
	*/
	EmberHandlebars.registerHelper('unless', function(context, options) {
	  Ember.assert("You must pass exactly one argument to the unless helper", arguments.length === 2);
	  Ember.assert("You must pass a block to the unless helper", options.fn && options.fn !== Handlebars.VM.noop);
	
	  var fn = options.fn, inverse = options.inverse;
	
	  options.fn = inverse;
	  options.inverse = fn;
	
	  return helpers.boundIf.call(options.contexts[0], context, options);
	});
	
	/**
	  `bindAttr` allows you to create a binding between DOM element attributes and
	  Ember objects. For example:
	
	  ``` handlebars
	  <img {{bindAttr src="imageUrl" alt="imageTitle"}}>
	  ```
	
	  @method bindAttr
	  @for Ember.Handlebars.helpers
	  @param {Hash} options
	  @return {String} HTML string
	*/
	EmberHandlebars.registerHelper('bindAttr', function(options) {
	
	  var attrs = options.hash;
	
	  Ember.assert("You must specify at least one hash argument to bindAttr", !!Ember.keys(attrs).length);
	
	  var view = options.data.view;
	  var ret = [];
	  var ctx = this;
	
	  // Generate a unique id for this element. This will be added as a
	  // data attribute to the element so it can be looked up when
	  // the bound property changes.
	  var dataId = ++Ember.uuid;
	
	  // Handle classes differently, as we can bind multiple classes
	  var classBindings = attrs['class'];
	  if (classBindings !== null && classBindings !== undefined) {
	    var classResults = EmberHandlebars.bindClasses(this, classBindings, view, dataId, options);
	    ret.push('class="' + Handlebars.Utils.escapeExpression(classResults.join(' ')) + '"');
	    delete attrs['class'];
	  }
	
	  var attrKeys = Ember.keys(attrs);
	
	  // For each attribute passed, create an observer and emit the
	  // current value of the property as an attribute.
	  forEach.call(attrKeys, function(attr) {
	    var path = attrs[attr],
	        pathRoot, normalized;
	
	    Ember.assert(fmt("You must provide a String for a bound attribute, not %@", [path]), typeof path === 'string');
	
	    normalized = normalizePath(ctx, path, options.data);
	
	    pathRoot = normalized.root;
	    path = normalized.path;
	
	    var value = (path === 'this') ? pathRoot : handlebarsGet(pathRoot, path, options),
	        type = Ember.typeOf(value);
	
	    Ember.assert(fmt("Attributes must be numbers, strings or booleans, not %@", [value]), value === null || value === undefined || type === 'number' || type === 'string' || type === 'boolean');
	
	    var observer, invoker;
	
	    observer = function observer() {
	      var result = handlebarsGet(pathRoot, path, options);
	
	      Ember.assert(fmt("Attributes must be numbers, strings or booleans, not %@", [result]), result === null || result === undefined || typeof result === 'number' || typeof result === 'string' || typeof result === 'boolean');
	
	      var elem = view.$("[data-bindattr-" + dataId + "='" + dataId + "']");
	
	      // If we aren't able to find the element, it means the element
	      // to which we were bound has been removed from the view.
	      // In that case, we can assume the template has been re-rendered
	      // and we need to clean up the observer.
	      if (!elem || elem.length === 0) {
	        Ember.removeObserver(pathRoot, path, invoker);
	        return;
	      }
	
	      Ember.View.applyAttributeBindings(elem, attr, result);
	    };
	
	    invoker = function() {
	      Ember.run.scheduleOnce('render', observer);
	    };
	
	    // Add an observer to the view for when the property changes.
	    // When the observer fires, find the element using the
	    // unique data id and update the attribute to the new value.
	    if (path !== 'this') {
	      Ember.addObserver(pathRoot, path, invoker);
	
	      view.one('willClearRender', function() {
	        Ember.removeObserver(pathRoot, path, invoker);
	      });
	    }
	
	    // if this changes, also change the logic in ember-views/lib/views/view.js
	    if ((type === 'string' || (type === 'number' && !isNaN(value)))) {
	      ret.push(attr + '="' + Handlebars.Utils.escapeExpression(value) + '"');
	    } else if (value && type === 'boolean') {
	      // The developer controls the attr name, so it should always be safe
	      ret.push(attr + '="' + attr + '"');
	    }
	  }, this);
	
	  // Add the unique identifier
	  // NOTE: We use all lower-case since Firefox has problems with mixed case in SVG
	  ret.push('data-bindattr-' + dataId + '="' + dataId + '"');
	  return new EmberHandlebars.SafeString(ret.join(' '));
	});
	
	/**
	  @private
	
	  Helper that, given a space-separated string of property paths and a context,
	  returns an array of class names. Calling this method also has the side
	  effect of setting up observers at those property paths, such that if they
	  change, the correct class name will be reapplied to the DOM element.
	
	  For example, if you pass the string "fooBar", it will first look up the
	  "fooBar" value of the context. If that value is true, it will add the
	  "foo-bar" class to the current element (i.e., the dasherized form of
	  "fooBar"). If the value is a string, it will add that string as the class.
	  Otherwise, it will not add any new class name.
	
	  @method bindClasses
	  @for Ember.Handlebars
	  @param {Ember.Object} context The context from which to lookup properties
	  @param {String} classBindings A string, space-separated, of class bindings to use
	  @param {Ember.View} view The view in which observers should look for the element to update
	  @param {Srting} bindAttrId Optional bindAttr id used to lookup elements
	  @return {Array} An array of class names to add
	*/
	EmberHandlebars.bindClasses = function(context, classBindings, view, bindAttrId, options) {
	  var ret = [], newClass, value, elem;
	
	  // Helper method to retrieve the property from the context and
	  // determine which class string to return, based on whether it is
	  // a Boolean or not.
	  var classStringForPath = function(root, parsedPath, options) {
	    var val,
	        path = parsedPath.path;
	
	    if (path === 'this') {
	      val = root;
	    } else if (path === '') {
	      val = true;
	    } else {
	      val = handlebarsGet(root, path, options);
	    }
	
	    return Ember.View._classStringForValue(path, val, parsedPath.className, parsedPath.falsyClassName);
	  };
	
	  // For each property passed, loop through and setup
	  // an observer.
	  forEach.call(classBindings.split(' '), function(binding) {
	
	    // Variable in which the old class value is saved. The observer function
	    // closes over this variable, so it knows which string to remove when
	    // the property changes.
	    var oldClass;
	
	    var observer, invoker;
	
	    var parsedPath = Ember.View._parsePropertyPath(binding),
	        path = parsedPath.path,
	        pathRoot = context,
	        normalized;
	
	    if (path !== '' && path !== 'this') {
	      normalized = normalizePath(context, path, options.data);
	
	      pathRoot = normalized.root;
	      path = normalized.path;
	    }
	
	    // Set up an observer on the context. If the property changes, toggle the
	    // class name.
	    observer = function() {
	      // Get the current value of the property
	      newClass = classStringForPath(pathRoot, parsedPath, options);
	      elem = bindAttrId ? view.$("[data-bindattr-" + bindAttrId + "='" + bindAttrId + "']") : view.$();
	
	      // If we can't find the element anymore, a parent template has been
	      // re-rendered and we've been nuked. Remove the observer.
	      if (!elem || elem.length === 0) {
	        Ember.removeObserver(pathRoot, path, invoker);
	      } else {
	        // If we had previously added a class to the element, remove it.
	        if (oldClass) {
	          elem.removeClass(oldClass);
	        }
	
	        // If necessary, add a new class. Make sure we keep track of it so
	        // it can be removed in the future.
	        if (newClass) {
	          elem.addClass(newClass);
	          oldClass = newClass;
	        } else {
	          oldClass = null;
	        }
	      }
	    };
	
	    invoker = function() {
	      Ember.run.scheduleOnce('render', observer);
	    };
	
	    if (path !== '' && path !== 'this') {
	      Ember.addObserver(pathRoot, path, invoker);
	
	      view.one('willClearRender', function() {
	        Ember.removeObserver(pathRoot, path, invoker);
	      });
	    }
	
	    // We've already setup the observer; now we just need to figure out the
	    // correct behavior right now on the first pass through.
	    value = classStringForPath(pathRoot, parsedPath, options);
	
	    if (value) {
	      ret.push(value);
	
	      // Make sure we save the current value so that it can be removed if the
	      // observer fires.
	      oldClass = value;
	    }
	  });
	
	  return ret;
	};
	
	
	})();
	
	
	
	(function() {
	/*globals Handlebars */
	
	// TODO: Don't require the entire module
	/**
	@module ember
	@submodule ember-handlebars
	*/
	
	var get = Ember.get, set = Ember.set;
	var PARENT_VIEW_PATH = /^parentView\./;
	var EmberHandlebars = Ember.Handlebars;
	
	EmberHandlebars.ViewHelper = Ember.Object.create({
	
	  propertiesFromHTMLOptions: function(options, thisContext) {
	    var hash = options.hash, data = options.data;
	    var extensions = {},
	        classes = hash['class'],
	        dup = false;
	
	    if (hash.id) {
	      extensions.elementId = hash.id;
	      dup = true;
	    }
	
	    if (classes) {
	      classes = classes.split(' ');
	      extensions.classNames = classes;
	      dup = true;
	    }
	
	    if (hash.classBinding) {
	      extensions.classNameBindings = hash.classBinding.split(' ');
	      dup = true;
	    }
	
	    if (hash.classNameBindings) {
	      if (extensions.classNameBindings === undefined) extensions.classNameBindings = [];
	      extensions.classNameBindings = extensions.classNameBindings.concat(hash.classNameBindings.split(' '));
	      dup = true;
	    }
	
	    if (hash.attributeBindings) {
	      Ember.assert("Setting 'attributeBindings' via Handlebars is not allowed. Please subclass Ember.View and set it there instead.");
	      extensions.attributeBindings = null;
	      dup = true;
	    }
	
	    if (dup) {
	      hash = Ember.$.extend({}, hash);
	      delete hash.id;
	      delete hash['class'];
	      delete hash.classBinding;
	    }
	
	    // Set the proper context for all bindings passed to the helper. This applies to regular attribute bindings
	    // as well as class name bindings. If the bindings are local, make them relative to the current context
	    // instead of the view.
	    var path;
	
	    // Evaluate the context of regular attribute bindings:
	    for (var prop in hash) {
	      if (!hash.hasOwnProperty(prop)) { continue; }
	
	      // Test if the property ends in "Binding"
	      if (Ember.IS_BINDING.test(prop) && typeof hash[prop] === 'string') {
	        path = this.contextualizeBindingPath(hash[prop], data);
	        if (path) { hash[prop] = path; }
	      }
	    }
	
	    // Evaluate the context of class name bindings:
	    if (extensions.classNameBindings) {
	      for (var b in extensions.classNameBindings) {
	        var full = extensions.classNameBindings[b];
	        if (typeof full === 'string') {
	          // Contextualize the path of classNameBinding so this:
	          //
	          //     classNameBinding="isGreen:green"
	          //
	          // is converted to this:
	          //
	          //     classNameBinding="bindingContext.isGreen:green"
	          var parsedPath = Ember.View._parsePropertyPath(full);
	          path = this.contextualizeBindingPath(parsedPath.path, data);
	          if (path) { extensions.classNameBindings[b] = path + parsedPath.classNames; }
	        }
	      }
	    }
	
	    // Make the current template context available to the view
	    // for the bindings set up above.
	    extensions.bindingContext = thisContext;
	
	    return Ember.$.extend(hash, extensions);
	  },
	
	  // Transform bindings from the current context to a context that can be evaluated within the view.
	  // Returns null if the path shouldn't be changed.
	  //
	  // TODO: consider the addition of a prefix that would allow this method to return `path`.
	  contextualizeBindingPath: function(path, data) {
	    var normalized = Ember.Handlebars.normalizePath(null, path, data);
	    if (normalized.isKeyword) {
	      return 'templateData.keywords.' + path;
	    } else if (Ember.isGlobalPath(path)) {
	      return null;
	    } else if (path === 'this') {
	      return 'bindingContext';
	    } else {
	      return 'bindingContext.' + path;
	    }
	  },
	
	  helper: function(thisContext, path, options) {
	    var inverse = options.inverse,
	        data = options.data,
	        view = data.view,
	        fn = options.fn,
	        hash = options.hash,
	        newView;
	
	    if ('string' === typeof path) {
	      newView = EmberHandlebars.get(thisContext, path, options);
	      Ember.assert("Unable to find view at path '" + path + "'", !!newView);
	    } else {
	      newView = path;
	    }
	
	    Ember.assert(Ember.String.fmt('You must pass a view class to the #view helper, not %@ (%@)', [path, newView]), Ember.View.detect(newView));
	
	    var viewOptions = this.propertiesFromHTMLOptions(options, thisContext);
	    var currentView = data.view;
	    viewOptions.templateData = options.data;
	
	    if (fn) {
	      Ember.assert("You cannot provide a template block if you also specified a templateName", !get(viewOptions, 'templateName') && !get(newView.proto(), 'templateName'));
	      viewOptions.template = fn;
	    }
	
	    // We only want to override the `_context` computed property if there is
	    // no specified controller. See View#_context for more information.
	    if (!newView.proto().controller && !newView.proto().controllerBinding && !viewOptions.controller && !viewOptions.controllerBinding) {
	      viewOptions._context = thisContext;
	    }
	
	    currentView.appendChild(newView, viewOptions);
	  }
	});
	
	/**
	  `{{view}}` inserts a new instance of `Ember.View` into a template passing its options
	  to the `Ember.View`'s `create` method and using the supplied block as the view's own template.
	
	  An empty `<body>` and the following template:
	
	  ``` handlebars
	  <script type="text/x-handlebars">
	    A span:
	    {{#view tagName="span"}}
	      hello.
	    {{/view}}
	  </script>
	  ```
	
	  Will result in HTML structure:
	
	  ``` html
	  <body>
	    <!-- Note: the handlebars template script 
	         also results in a rendered Ember.View
	         which is the outer <div> here -->
	
	    <div class="ember-view">
	      A span:
	      <span id="ember1" class="ember-view">
	        Hello.
	      </span>
	    </div>
	  </body>
	  ```
	
	  ### parentView setting
	
	  The `parentView` property of the new `Ember.View` instance created through `{{view}}`
	  will be set to the `Ember.View` instance of the template where `{{view}}` was called.
	
	  ``` javascript
	  aView = Ember.View.create({
	    template: Ember.Handlebars.compile("{{#view}} my parent: {{parentView.elementId}} {{/view}}")
	  });
	
	  aView.appendTo('body');
	  ```
	    
	  Will result in HTML structure:
	
	  ``` html
	  <div id="ember1" class="ember-view">
	    <div id="ember2" class="ember-view">
	      my parent: ember1
	    </div>
	  </div>
	  ```
	
	  ### Setting CSS id and class attributes
	
	  The HTML `id` attribute can be set on the `{{view}}`'s resulting element with the `id` option.
	  This option will _not_ be passed to `Ember.View.create`.
	
	  ``` handlebars
	  <script type="text/x-handlebars">
	    {{#view tagName="span" id="a-custom-id"}}
	      hello.
	    {{/view}}
	  </script>
	  ```
	
	  Results in the following HTML structure:
	
	  ``` html
	  <div class="ember-view">
	    <span id="a-custom-id" class="ember-view">
	      hello.
	    </span>
	  </div>
	  ```
	
	  The HTML `class` attribute can be set on the `{{view}}`'s resulting element with
	  the `class` or `classNameBindings` options. The `class` option
	  will directly set the CSS `class` attribute and will not be passed to
	  `Ember.View.create`. `classNameBindings` will be passed to `create` and use
	  `Ember.View`'s class name binding functionality:
	
	  ``` handlebars
	  <script type="text/x-handlebars">
	    {{#view tagName="span" class="a-custom-class"}}
	      hello.
	    {{/view}}
	  </script>
	  ```
	
	  Results in the following HTML structure:
	
	  ``` html
	  <div class="ember-view">
	    <span id="ember2" class="ember-view a-custom-class">
	      hello.
	    </span>
	  </div>
	  ```
	
	  ### Supplying a different view class
	
	  `{{view}}` can take an optional first argument before its supplied options to specify a
	  path to a custom view class.
	
	  ``` handlebars
	  <script type="text/x-handlebars">
	    {{#view "MyApp.CustomView"}}
	      hello.
	    {{/view}}
	  </script>
	  ```
	
	  The first argument can also be a relative path. Ember will search for the view class
	  starting at the `Ember.View` of the template where `{{view}}` was used as the root object:
	
	  ``` javascript
	  MyApp = Ember.Application.create({});
	  MyApp.OuterView = Ember.View.extend({
	    innerViewClass: Ember.View.extend({
	      classNames: ['a-custom-view-class-as-property']
	    }),
	    template: Ember.Handlebars.compile('{{#view "innerViewClass"}} hi {{/view}}')
	  });
	
	  MyApp.OuterView.create().appendTo('body');
	  ```
	
	  Will result in the following HTML:
	
	  ``` html
	  <div id="ember1" class="ember-view">
	    <div id="ember2" class="ember-view a-custom-view-class-as-property"> 
	      hi
	    </div>
	  </div>
	  ```
	
	  ### Blockless use
	
	  If you supply a custom `Ember.View` subclass that specifies its own template
	  or provide a `templateName` option to `{{view}}` it can be used without supplying a block.
	  Attempts to use both a `templateName` option and supply a block will throw an error.
	
	  ``` handlebars
	  <script type="text/x-handlebars">
	    {{view "MyApp.ViewWithATemplateDefined"}}
	  </script>
	  ```
	
	  ### viewName property
	
	  You can supply a `viewName` option to `{{view}}`. The `Ember.View` instance will
	  be referenced as a property of its parent view by this name.
	
	  ``` javascript
	  aView = Ember.View.create({
	    template: Ember.Handlebars.compile('{{#view viewName="aChildByName"}} hi {{/view}}')
	  });
	
	  aView.appendTo('body');
	  aView.get('aChildByName') // the instance of Ember.View created by {{view}} helper
	  ```
	
	  @method view
	  @for Ember.Handlebars.helpers
	  @param {String} path
	  @param {Hash} options
	  @return {String} HTML string
	*/
	EmberHandlebars.registerHelper('view', function(path, options) {
	  Ember.assert("The view helper only takes a single argument", arguments.length <= 2);
	
	  // If no path is provided, treat path param as options.
	  if (path && path.data && path.data.isRenderData) {
	    options = path;
	    path = "Ember.View";
	  }
	
	  return EmberHandlebars.ViewHelper.helper(this, path, options);
	});
	
	
	})();
	
	
	
	(function() {
	/*globals Handlebars */
	
	// TODO: Don't require all of this module
	/**
	@module ember
	@submodule ember-handlebars
	*/
	
	var get = Ember.get, handlebarsGet = Ember.Handlebars.get, fmt = Ember.String.fmt;
	
	/**
	  `{{collection}}` is a `Ember.Handlebars` helper for adding instances of
	  `Ember.CollectionView` to a template.  See `Ember.CollectionView` for additional
	  information on how a `CollectionView` functions.
	
	  `{{collection}}`'s primary use is as a block helper with a `contentBinding` option
	  pointing towards an `Ember.Array`-compatible object.  An `Ember.View` instance will
	  be created for each item in its `content` property. Each view will have its own
	  `content` property set to the appropriate item in the collection.
	
	  The provided block will be applied as the template for each item's view.
	
	  Given an empty `<body>` the following template:
	
	  ``` handlebars
	  <script type="text/x-handlebars">
	    {{#collection contentBinding="App.items"}}
	      Hi {{view.content.name}}
	    {{/collection}}
	  </script>
	  ```
	
	  And the following application code
	
	  ``` javascript
	  App = Ember.Application.create()
	  App.items = [
	    Ember.Object.create({name: 'Dave'}),
	    Ember.Object.create({name: 'Mary'}),
	    Ember.Object.create({name: 'Sara'})
	  ]
	  ```
	
	  Will result in the HTML structure below
	
	  ``` html
	  <div class="ember-view">
	    <div class="ember-view">Hi Dave</div>
	    <div class="ember-view">Hi Mary</div>
	    <div class="ember-view">Hi Sara</div>
	  </div>
	  ```
	
	  ### Blockless Use
	  If you provide an `itemViewClass` option that has its own `template` you can omit
	  the block.
	
	  The following template:
	
	  ``` handlebars
	  <script type="text/x-handlebars">
	    {{collection contentBinding="App.items" itemViewClass="App.AnItemView"}}
	  </script>
	  ```
	
	  And application code
	
	  ``` javascript
	  App = Ember.Application.create();
	  App.items = [
	    Ember.Object.create({name: 'Dave'}),
	    Ember.Object.create({name: 'Mary'}),
	    Ember.Object.create({name: 'Sara'})
	  ];
	
	  App.AnItemView = Ember.View.extend({
	    template: Ember.Handlebars.compile("Greetings {{view.content.name}}")
	  });
	  ```
	
	  Will result in the HTML structure below
	
	  ``` html
	  <div class="ember-view">
	    <div class="ember-view">Greetings Dave</div>
	    <div class="ember-view">Greetings Mary</div>
	    <div class="ember-view">Greetings Sara</div>
	  </div>
	  ```
	
	  ### Specifying a CollectionView subclass
	
	  By default the `{{collection}}` helper will create an instance of `Ember.CollectionView`.
	  You can supply a `Ember.CollectionView` subclass to the helper by passing it
	  as the first argument:
	
	  ``` handlebars
	  <script type="text/x-handlebars">
	    {{#collection App.MyCustomCollectionClass contentBinding="App.items"}}
	      Hi {{view.content.name}}
	    {{/collection}}
	  </script>
	  ```
	
	
	  ### Forwarded `item.*`-named Options
	
	  As with the `{{view}}`, helper options passed to the `{{collection}}` will be set on
	  the resulting `Ember.CollectionView` as properties. Additionally, options prefixed with
	  `item` will be applied to the views rendered for each item (note the camelcasing):
	
	  ``` handlebars
	  <script type="text/x-handlebars">
	    {{#collection contentBinding="App.items"
	                  itemTagName="p"
	                  itemClassNames="greeting"}}
	      Howdy {{view.content.name}}
	    {{/collection}}
	  </script>
	  ```
	
	  Will result in the following HTML structure:
	
	  ``` html
	  <div class="ember-view">
	    <p class="ember-view greeting">Howdy Dave</p>
	    <p class="ember-view greeting">Howdy Mary</p>
	    <p class="ember-view greeting">Howdy Sara</p>
	  </div>
	  ```
	
	  @method collection
	  @for Ember.Handlebars.helpers
	  @param {String} path
	  @param {Hash} options
	  @return {String} HTML string
	  @deprecated Use `{{each}}` helper instead.
	*/
	Ember.Handlebars.registerHelper('collection', function(path, options) {
	  Ember.deprecate("Using the {{collection}} helper without specifying a class has been deprecated as the {{each}} helper now supports the same functionality.", path !== 'collection');
	
	  // If no path is provided, treat path param as options.
	  if (path && path.data && path.data.isRenderData) {
	    options = path;
	    path = undefined;
	    Ember.assert("You cannot pass more than one argument to the collection helper", arguments.length === 1);
	  } else {
	    Ember.assert("You cannot pass more than one argument to the collection helper", arguments.length === 2);
	  }
	
	  var fn = options.fn;
	  var data = options.data;
	  var inverse = options.inverse;
	
	  // If passed a path string, convert that into an object.
	  // Otherwise, just default to the standard class.
	  var collectionClass;
	  collectionClass = path ? handlebarsGet(this, path, options) : Ember.CollectionView;
	  Ember.assert(fmt("%@ #collection: Could not find collection class %@", [data.view, path]), !!collectionClass);
	
	  var hash = options.hash, itemHash = {}, match;
	
	  // Extract item view class if provided else default to the standard class
	  var itemViewClass, itemViewPath = hash.itemViewClass;
	  var collectionPrototype = collectionClass.proto();
	  delete hash.itemViewClass;
	  itemViewClass = itemViewPath ? handlebarsGet(collectionPrototype, itemViewPath, options) : collectionPrototype.itemViewClass;
	  Ember.assert(fmt("%@ #collection: Could not find itemViewClass %@", [data.view, itemViewPath]), !!itemViewClass);
	
	  // Go through options passed to the {{collection}} helper and extract options
	  // that configure item views instead of the collection itself.
	  for (var prop in hash) {
	    if (hash.hasOwnProperty(prop)) {
	      match = prop.match(/^item(.)(.*)$/);
	
	      if(match) {
	        // Convert itemShouldFoo -> shouldFoo
	        itemHash[match[1].toLowerCase() + match[2]] = hash[prop];
	        // Delete from hash as this will end up getting passed to the
	        // {{view}} helper method.
	        delete hash[prop];
	      }
	    }
	  }
	
	  var tagName = hash.tagName || collectionPrototype.tagName;
	
	  if (fn) {
	    itemHash.template = fn;
	    delete options.fn;
	  }
	
	  var emptyViewClass;
	  if (inverse && inverse !== Handlebars.VM.noop) {
	    emptyViewClass = get(collectionPrototype, 'emptyViewClass');
	    emptyViewClass = emptyViewClass.extend({
	          template: inverse,
	          tagName: itemHash.tagName
	    });
	  } else if (hash.emptyViewClass) {
	    emptyViewClass = handlebarsGet(this, hash.emptyViewClass, options);
	  }
	  hash.emptyView = emptyViewClass;
	
	  if (hash.eachHelper === 'each') {
	    itemHash._context = Ember.computed(function() {
	      return get(this, 'content');
	    }).property('content');
	    delete hash.eachHelper;
	  }
	
	  var viewOptions = Ember.Handlebars.ViewHelper.propertiesFromHTMLOptions({ data: data, hash: itemHash }, this);
	  hash.itemViewClass = itemViewClass.extend(viewOptions);
	
	  return Ember.Handlebars.helpers.view.call(this, collectionClass, options);
	});
	
	
	})();
	
	
	
	(function() {
	/*globals Handlebars */
	/**
	@module ember
	@submodule ember-handlebars
	*/
	
	var handlebarsGet = Ember.Handlebars.get;
	
	/**
	  `unbound` allows you to output a property without binding. *Important:* The
	  output will not be updated if the property changes. Use with caution.
	
	  ``` handlebars
	  <div>{{unbound somePropertyThatDoesntChange}}</div>
	  ```
	
	  @method unbound
	  @for Ember.Handlebars.helpers
	  @param {String} property
	  @return {String} HTML string
	*/
	Ember.Handlebars.registerHelper('unbound', function(property, fn) {
	  var context = (fn.contexts && fn.contexts[0]) || this;
	  return handlebarsGet(context, property, fn);
	});
	
	})();
	
	
	
	(function() {
	/*jshint debug:true*/
	/**
	@module ember
	@submodule ember-handlebars
	*/
	
	var handlebarsGet = Ember.Handlebars.get, normalizePath = Ember.Handlebars.normalizePath;
	
	/**
	  `log` allows you to output the value of a value in the current rendering
	  context.
	
	  ``` handlebars
	  {{log myVariable}}
	  ```
	
	  @method log
	  @for Ember.Handlebars.helpers
	  @param {String} property
	*/
	Ember.Handlebars.registerHelper('log', function(property, options) {
	  var context = (options.contexts && options.contexts[0]) || this,
	      normalized = normalizePath(context, property, options.data),
	      pathRoot = normalized.root,
	      path = normalized.path,
	      value = (path === 'this') ? pathRoot : handlebarsGet(pathRoot, path, options);
	  Ember.Logger.log(value);
	});
	
	/**
	  The `debugger` helper executes the `debugger` statement in the current
	  context.
	
	  ``` handlebars
	  {{debugger}}
	  ```
	
	  @method debugger
	  @for Ember.Handlebars.helpers
	  @param {String} property
	*/
	Ember.Handlebars.registerHelper('debugger', function() {
	  debugger;
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-handlebars
	*/
	
	var get = Ember.get, set = Ember.set;
	
	Ember.Handlebars.EachView = Ember.CollectionView.extend(Ember._Metamorph, {
	  itemViewClass: Ember._MetamorphView,
	  emptyViewClass: Ember._MetamorphView,
	
	  createChildView: function(view, attrs) {
	    view = this._super(view, attrs);
	
	    // At the moment, if a container view subclass wants
	    // to insert keywords, it is responsible for cloning
	    // the keywords hash. This will be fixed momentarily.
	    var keyword = get(this, 'keyword');
	
	    if (keyword) {
	      var data = get(view, 'templateData');
	
	      data = Ember.copy(data);
	      data.keywords = view.cloneKeywords();
	      set(view, 'templateData', data);
	
	      var content = get(view, 'content');
	
	      // In this case, we do not bind, because the `content` of
	      // a #each item cannot change.
	      data.keywords[keyword] = content;
	    }
	
	    return view;
	  }
	});
	
	/**
	  The `{{#each}}` helper loops over elements in a collection, rendering its block once for each item:
	
	  ``` javascript
	  Developers = [{name: 'Yehuda'},{name: 'Tom'}, {name: 'Paul'}];
	  ```
	
	  ``` handlebars
	  {{#each Developers}}
	    {{name}}
	  {{/each}}
	  ```
	
	  `{{each}}` supports an alternative syntax with element naming:
	
	  ``` handlebars
	  {{#each person in Developers}}
	    {{person.name}}
	  {{/each}}
	  ```
	
	  When looping over objects that do not have properties, `{{this}}` can be used to render the object:
	
	  ``` javascript
	  DeveloperNames = ['Yehuda', 'Tom', 'Paul']
	  ```
	
	  ``` handlebars
	  {{#each DeveloperNames}}
	    {{this}}
	  {{/each}}
	  ```
	
	  ### Blockless Use
	
	  If you provide an `itemViewClass` option that has its own `template` you can omit
	  the block in a similar way to how it can be done with the collection helper.
	
	  The following template:
	
	  ``` handlebars
	  <script type="text/x-handlebars">
	    {{#view App.MyView }}
	      {{each view.items itemViewClass="App.AnItemView"}} 
	    {{/view}}
	  </script>
	  ```
	
	  And application code
	
	  ``` javascript
	  App = Ember.Application.create({
	    MyView: Ember.View.extend({
	      items: [
	        Ember.Object.create({name: 'Dave'}),
	        Ember.Object.create({name: 'Mary'}),
	        Ember.Object.create({name: 'Sara'})
	      ]
	    })
	  });
	
	  App.AnItemView = Ember.View.extend({
	    template: Ember.Handlebars.compile("Greetings {{name}}")
	  });
	      
	  App.initialize();
	  ```
	      
	  Will result in the HTML structure below
	
	  ``` html
	  <div class="ember-view">
	    <div class="ember-view">Greetings Dave</div>
	    <div class="ember-view">Greetings Mary</div>
	    <div class="ember-view">Greetings Sara</div>
	  </div>
	  ```
	
	
	  @method each
	  @for Ember.Handlebars.helpers
	  @param [name] {String} name for item (used with `in`)
	  @param path {String} path
	*/
	Ember.Handlebars.registerHelper('each', function(path, options) {
	  if (arguments.length === 4) {
	    Ember.assert("If you pass more than one argument to the each helper, it must be in the form #each foo in bar", arguments[1] === "in");
	
	    var keywordName = arguments[0];
	
	    options = arguments[3];
	    path = arguments[2];
	    if (path === '') { path = "this"; }
	
	    options.hash.keyword = keywordName;
	  } else {
	    options.hash.eachHelper = 'each';
	  }
	
	  options.hash.contentBinding = path;
	  // Set up emptyView as a metamorph with no tag
	  //options.hash.emptyViewClass = Ember._MetamorphView;
	
	  return Ember.Handlebars.helpers.collection.call(this, 'Ember.Handlebars.EachView', options);
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-handlebars
	*/
	
	/**
	  `template` allows you to render a template from inside another template.
	  This allows you to re-use the same template in multiple places. For example:
	
	  ``` handlebars
	  <script type="text/x-handlebars">
	    {{#with loggedInUser}}
	      Last Login: {{lastLogin}}
	      User Info: {{template "user_info"}}
	    {{/with}}
	  </script>
	
	  <script type="text/x-handlebars" data-template-name="user_info">
	    Name: <em>{{name}}</em>
	    Karma: <em>{{karma}}</em>
	  </script>
	  ```
	
	  This helper looks for templates in the global Ember.TEMPLATES hash. If you
	  add &lt;script&gt; tags to your page with the `data-template-name` attribute set,
	  they will be compiled and placed in this hash automatically.
	
	  You can also manually register templates by adding them to the hash:
	
	  ``` javascript
	  Ember.TEMPLATES["my_cool_template"] = Ember.Handlebars.compile('<b>{{user}}</b>');
	  ```
	
	  @method template
	  @for Ember.Handlebars.helpers
	  @param {String} templateName the template to render
	*/
	
	Ember.Handlebars.registerHelper('template', function(name, options) {
	  var template = Ember.TEMPLATES[name];
	
	  Ember.assert("Unable to find template with name '"+name+"'.", !!template);
	
	  Ember.TEMPLATES[name](this, { data: options.data });
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-handlebars
	*/
	
	var EmberHandlebars = Ember.Handlebars,
	    handlebarsGet = EmberHandlebars.get,
	    get = Ember.get,
	    a_slice = Array.prototype.slice;
	
	var ActionHelper = EmberHandlebars.ActionHelper = {
	  registeredActions: {}
	};
	
	ActionHelper.registerAction = function(actionName, options) {
	  var actionId = (++Ember.uuid).toString();
	
	  ActionHelper.registeredActions[actionId] = {
	    eventName: options.eventName,
	    handler: function(event) {
	      var modifier = event.shiftKey || event.metaKey || event.altKey || event.ctrlKey,
	          secondaryClick = event.which > 1, // IE9 may return undefined
	          nonStandard = modifier || secondaryClick;
	
	      if (options.link && nonStandard) {
	        // Allow the browser to handle special link clicks normally
	        return;
	      }
	
	      event.preventDefault();
	
	      event.view = options.view;
	
	      if (options.hasOwnProperty('context')) {
	        event.context = options.context;
	      }
	
	      if (options.hasOwnProperty('contexts')) {
	        event.contexts = options.contexts;
	      }
	
	      var target = options.target;
	
	      // Check for StateManager (or compatible object)
	      if (target.isState && typeof target.send === 'function') {
	        return target.send(actionName, event);
	      } else {
	        Ember.assert(Ember.String.fmt('Target %@ does not have action %@', [target, actionName]), target[actionName]);
	        return target[actionName].call(target, event);
	      }
	    }
	  };
	
	  options.view.on('willClearRender', function() {
	    delete ActionHelper.registeredActions[actionId];
	  });
	
	  return actionId;
	};
	
	/**
	  The `{{action}}` helper registers an HTML element within a template for
	  DOM event handling and forwards that interaction to the view's `controller.target`
	  or supplied `target` option (see 'Specifying a Target'). By default the
	  `controller.target` is set to the Application's router.
	
	  User interaction with that element will invoke the supplied action name on
	  the appropriate target.
	
	  Given the following Handlebars template on the page
	
	  ``` handlebars
	  <script type="text/x-handlebars" data-template-name='a-template'>
	    <div {{action anActionName target="view"}}>
	      click me
	    </div>
	  </script>
	  ```
	
	  And application code
	
	  ``` javascript
	  AView = Ember.View.extend({
	    templateName: 'a-template',
	    anActionName: function(event){}
	  });
	
	  aView = AView.create();
	  aView.appendTo('body');
	  ```
	
	  Will results in the following rendered HTML
	
	  ``` html
	  <div class="ember-view">
	    <div data-ember-action="1">
	      click me
	    </div>
	  </div>
	  ```
	
	  Clicking "click me" will trigger the `anActionName` method of the `aView`
	  object with a  `jQuery.Event` object as its argument. The `jQuery.Event`
	  object will be extended to include a `view` property that is set to the
	  original view interacted with (in this case the `aView` object).
	
	  ### Event Propagation
	
	  Events triggered through the action helper will automatically have
	  `.preventDefault()` called on them. You do not need to do so in your event
	  handlers. To stop propagation of the event, simply return `false` from your
	  handler.
	
	  If you need the default handler to trigger you should either register your
	  own event handler, or use event methods on your view class. See Ember.View
	  'Responding to Browser Events' for more information.
	
	  ### Specifying DOM event type
	
	  By default the `{{action}}` helper registers for DOM `click` events. You can
	  supply an `on` option to the helper to specify a different DOM event name:
	
	  ``` handlebars
	  <script type="text/x-handlebars" data-template-name='a-template'>
	    <div {{action anActionName on="doubleClick"}}>
	      click me
	    </div>
	  </script>
	  ```
	
	  See Ember.View 'Responding to Browser Events' for a list of
	  acceptable DOM event names.
	
	  Because `{{action}}` depends on Ember's event dispatch system it will only
	  function if an `Ember.EventDispatcher` instance is available. An
	  `Ember.EventDispatcher` instance will be created when a new
	  `Ember.Application` is created. Having an instance of `Ember.Application`
	  will satisfy this requirement.
	
	
	  ### Specifying a Target
	
	  There are several possible target objects for `{{action}}` helpers:
	
	  In a typical `Ember.Router`-backed Application where views are managed
	  through use of the `{{outlet}}` helper, actions will be forwarded to the
	  current state of the Applications's Router. See Ember.Router 'Responding
	  to User-initiated Events' for more information.
	
	  If you manually set the `target` property on the controller of a template's
	  `Ember.View` instance, the specifed `controller.target` will become the target
	  for any actions. Likely custom values for a controller's `target` are the
	  controller itself or a StateManager other than the Application's Router.
	
	  If the templates's view lacks a controller property the view itself is the target.
	
	  Finally, a `target` option can be provided to the helper to change which object
	  will receive the method call. This option must be a string representing a
	  path to an object:
	
	  ``` handlebars
	  <script type="text/x-handlebars" data-template-name='a-template'>
	    <div {{action anActionName target="MyApplication.someObject"}}>
	      click me
	    </div>
	  </script>
	  ```
	
	  Clicking "click me" in the rendered HTML of the above template will trigger
	  the  `anActionName` method of the object at `MyApplication.someObject`.
	  The first argument to this method will be a `jQuery.Event` extended to
	  include a `view` property that is set to the original view interacted with.
	
	  A path relative to the template's `Ember.View` instance can also be used as
	  a target:
	
	  ``` handlebars
	  <script type="text/x-handlebars" data-template-name='a-template'>
	    <div {{action anActionName target="parentView"}}>
	      click me
	    </div>
	  </script>
	  ```
	
	  Clicking "click me" in the rendered HTML of the above template will trigger
	  the `anActionName` method of the view's parent view.
	
	  The `{{action}}` helper is `Ember.StateManager` aware. If the target of the
	  action is an `Ember.StateManager` instance `{{action}}` will use the `send`
	  functionality of StateManagers. The documentation for `Ember.StateManager`
	  has additional information about this use.
	
	  If an action's target does not implement a method that matches the supplied
	  action name an error will be thrown.
	
	  ``` handlebars
	  <script type="text/x-handlebars" data-template-name='a-template'>
	    <div {{action aMethodNameThatIsMissing}}>
	      click me
	    </div>
	  </script>
	  ```
	
	  With the following application code
	
	  ``` javascript
	  AView = Ember.View.extend({
	    templateName; 'a-template',
	    // note: no method 'aMethodNameThatIsMissing'
	    anActionName: function(event){}
	  });
	
	  aView = AView.create();
	  aView.appendTo('body');
	  ```
	
	  Will throw `Uncaught TypeError: Cannot call method 'call' of undefined` when
	  "click me" is clicked.
	
	  ### Specifying a context
	
	  You may optionally specify objects to pass as contexts to the `{{action}}` helper
	  by providing property paths as the subsequent parameters. These objects are made
	  available as the `contexts` (also `context` if there is only one) properties in the
	  `jQuery.Event` object:
	
	  ``` handlebars
	  <script type="text/x-handlebars" data-template-name='a-template'>
	    {{#each person in people}}
	      <div {{action edit person}}>
	        click me
	      </div>
	    {{/each}}
	  </script>
	  ```
	
	  Clicking "click me" will trigger the `edit` method of the view's context with a
	  `jQuery.Event` object containing the person object as its context.
	
	  @method action
	  @for Ember.Handlebars.helpers
	  @param {String} actionName
	  @param {Object...} contexts
	  @param {Hash} options
	*/
	EmberHandlebars.registerHelper('action', function(actionName) {
	  var options = arguments[arguments.length - 1],
	      contexts = a_slice.call(arguments, 1, -1);
	
	  var hash = options.hash,
	      view = options.data.view,
	      target, controller, link;
	
	  // create a hash to pass along to registerAction
	  var action = {
	    eventName: hash.on || "click"
	  };
	
	  action.view = view = get(view, 'concreteView');
	
	  if (hash.target) {
	    target = handlebarsGet(this, hash.target, options);
	  } else if (controller = options.data.keywords.controller) {
	    target = get(controller, 'target');
	  }
	
	  action.target = target = target || view;
	
	  if (contexts.length) {
	    action.contexts = contexts = Ember.EnumerableUtils.map(contexts, function(context) {
	      return handlebarsGet(this, context, options);
	    }, this);
	    action.context = contexts[0];
	  }
	
	  var output = [], url;
	
	  if (hash.href && target.urlForEvent) {
	    url = target.urlForEvent.apply(target, [actionName].concat(contexts));
	    output.push('href="' + url + '"');
	    action.link = true;
	  }
	
	  var actionId = ActionHelper.registerAction(actionName, action);
	  output.push('data-ember-action="' + actionId + '"');
	
	  return new EmberHandlebars.SafeString(output.join(" "));
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-handlebars
	*/
	
	var get = Ember.get, set = Ember.set;
	
	/**
	
	  When used in a Handlebars template that is assigned to an `Ember.View` instance's
	  `layout` property Ember will render the layout template first, inserting the view's
	  own rendered output at the `{{ yield }}` location.
	
	  An empty `<body>` and the following application code:
	
	  ``` javascript
	  AView = Ember.View.extend({
	    classNames: ['a-view-with-layout'],
	    layout: Ember.Handlebars.compile('<div class="wrapper">{{ yield }}</div>'),
	    template: Ember.Handlebars.compile('<span>I am wrapped</span>')
	  });
	
	  aView = AView.create();
	  aView.appendTo('body');
	  ```
	
	  Will result in the following HTML output:
	
	  ``` html
	  <body>
	    <div class='ember-view a-view-with-layout'>
	      <div class="wrapper">
	        <span>I am wrapped</span>
	      </div>
	    </div>
	  </body>
	  ```
	
	  The yield helper cannot be used outside of a template assigned to an `Ember.View`'s `layout` property
	  and will throw an error if attempted.
	
	  ``` javascript
	  BView = Ember.View.extend({
	    classNames: ['a-view-with-layout'],
	    template: Ember.Handlebars.compile('{{yield}}')
	  });
	
	  bView = BView.create();
	  bView.appendTo('body');
	
	  // throws
	  // Uncaught Error: assertion failed: You called yield in a template that was not a layout
	  ```
	
	  @method yield
	  @for Ember.Handlebars.helpers
	  @param {Hash} options
	  @return {String} HTML string
	*/
	Ember.Handlebars.registerHelper('yield', function(options) {
	  var view = options.data.view, template;
	
	  while (view && !get(view, 'layout')) {
	    view = get(view, 'parentView');
	  }
	
	  Ember.assert("You called yield in a template that was not a layout", !!view);
	
	  template = get(view, 'template');
	
	  if (template) { template(this, options); }
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-handlebars
	*/
	
	Ember.Handlebars.OutletView = Ember.ContainerView.extend(Ember._Metamorph);
	
	/**
	  The `outlet` helper allows you to specify that the current
	  view's controller will fill in the view for a given area.
	
	  ``` handlebars
	  {{outlet}}
	  ```
	
	  By default, when the the current controller's `view` property changes, the
	  outlet will replace its current view with the new view. You can set the
	  `view` property directly, but it's normally best to use `connectOutlet`.
	
	  ``` javascript
	  # Instantiate App.PostsView and assign to `view`, so as to render into outlet.
	  controller.connectOutlet('posts');
	  ```
	
	  You can also specify a particular name other than `view`:
	
	  ``` handlebars
	  {{outlet masterView}}
	  {{outlet detailView}}
	  ```
	
	  Then, you can control several outlets from a single controller.
	
	  ``` javascript
	  # Instantiate App.PostsView and assign to controller.masterView.
	  controller.connectOutlet('masterView', 'posts');
	  # Also, instantiate App.PostInfoView and assign to controller.detailView.
	  controller.connectOutlet('detailView', 'postInfo');
	  ```
	
	  @method outlet
	  @for Ember.Handlebars.helpers
	  @param {String} property the property on the controller
	    that holds the view for this outlet
	*/
	Ember.Handlebars.registerHelper('outlet', function(property, options) {
	  if (property && property.data && property.data.isRenderData) {
	    options = property;
	    property = 'view';
	  }
	
	  options.hash.currentViewBinding = "view.context." + property;
	
	  return Ember.Handlebars.helpers.view.call(this, Ember.Handlebars.OutletView, options);
	});
	
	})();
	
	
	
	(function() {
	
	})();
	
	
	
	(function() {
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-handlebars
	*/
	
	var set = Ember.set, get = Ember.get;
	
	/**
	  The `Ember.Checkbox` view class renders a checkbox [input](https://developer.mozilla.org/en/HTML/Element/Input) 
	  element. It allows for binding an Ember property (`checked`) to the status of the checkbox.
	
	  Example:
	
	  ``` handlebars
	  {{view Ember.Checkbox checkedBinding="receiveEmail"}}
	  ```
	
	  You can add a `label` tag yourself in the template where the Ember.Checkbox is being used.
	
	  ``` html
	  <label>        
	    {{view Ember.Checkbox classNames="applicaton-specific-checkbox"}}
	    Some Title
	  </label>
	  ```
	
	
	  The `checked` attribute of an Ember.Checkbox object should always be set
	  through the Ember object or by interacting with its rendered element representation
	  via the mouse, keyboard, or touch.  Updating the value of the checkbox via jQuery will
	  result in the checked value of the object and its element losing synchronization.
	
	  ## Layout and LayoutName properties
	  Because HTML `input` elements are self closing `layout` and `layoutName` properties will
	  not be applied. See `Ember.View`'s layout section for more information.
	
	  @class Checkbox
	  @namespace Ember
	  @extends Ember.View
	*/
	Ember.Checkbox = Ember.View.extend({
	  classNames: ['ember-checkbox'],
	
	  tagName: 'input',
	
	  attributeBindings: ['type', 'checked', 'disabled', 'tabindex'],
	
	  type: "checkbox",
	  checked: false,
	  disabled: false,
	
	  init: function() {
	    this._super();
	    this.on("change", this, this._updateElementValue);
	  },
	
	  _updateElementValue: function() {
	    set(this, 'checked', this.$().prop('checked'));
	  }
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-handlebars
	*/
	
	var get = Ember.get, set = Ember.set;
	
	/**
	  Shared mixin used by Ember.TextField and Ember.TextArea.
	
	  @class TextSupport
	  @namespace Ember
	  @extends Ember.Mixin
	  @private
	*/
	Ember.TextSupport = Ember.Mixin.create({
	  value: "",
	
	  attributeBindings: ['placeholder', 'disabled', 'maxlength', 'tabindex'],
	  placeholder: null,
	  disabled: false,
	  maxlength: null,
	
	  insertNewline: Ember.K,
	  cancel: Ember.K,
	
	  init: function() {
	    this._super();
	    this.on("focusOut", this, this._elementValueDidChange);
	    this.on("change", this, this._elementValueDidChange);
	    this.on("keyUp", this, this.interpretKeyEvents);
	  },
	
	  interpretKeyEvents: function(event) {
	    var map = Ember.TextSupport.KEY_EVENTS;
	    var method = map[event.keyCode];
	
	    this._elementValueDidChange();
	    if (method) { return this[method](event); }
	  },
	
	  _elementValueDidChange: function() {
	    set(this, 'value', this.$().val());
	  }
	
	});
	
	Ember.TextSupport.KEY_EVENTS = {
	  13: 'insertNewline',
	  27: 'cancel'
	};
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-handlebars
	*/
	
	var get = Ember.get, set = Ember.set;
	
	/**
	  The `Ember.TextField` view class renders a text
	  [input](https://developer.mozilla.org/en/HTML/Element/Input) element. It
	  allows for binding Ember properties to the text field contents (`value`),
	  live-updating as the user inputs text.
	
	  Example:
	
	  ``` handlebars
	  {{view Ember.TextField valueBinding="firstName"}}
	  ```
	
	  ## Layout and LayoutName properties
	  Because HTML `input` elements are self closing `layout` and `layoutName` properties will
	  not be applied. See `Ember.View`'s layout section for more information.
	
	  ## HTML Attributes
	
	  By default `Ember.TextField` provides support for `type`, `value`, `size`, `placeholder`,
	  `disabled`, `maxlength` and `tabindex` attributes on a textarea. If you need to support
	  more attributes have a look at the `attributeBindings` property in `Ember.View`'s
	  HTML Attributes section.
	
	  To globally add support for additional attributes you can reopen `Ember.TextField` or
	  `Ember.TextSupport`.
	
	  ``` javascript
	  Ember.TextSupport.reopen({
	    attributeBindings: ["required"]
	  })
	  ```
	
	  @class TextField
	  @namespace Ember
	  @extends Ember.View
	  @uses Ember.TextSupport
	*/
	Ember.TextField = Ember.View.extend(Ember.TextSupport,
	  /** @scope Ember.TextField.prototype */ {
	
	  classNames: ['ember-text-field'],
	  tagName: "input",
	  attributeBindings: ['type', 'value', 'size'],
	
	  /**
	    The value attribute of the input element. As the user inputs text, this
	    property is updated live.
	
	    @property value
	    @type String
	    @default ""
	  */
	  value: "",
	
	  /**
	    The type attribute of the input element.
	
	    @property type
	    @type String
	    @default "text"
	  */
	  type: "text",
	
	  /**
	    The size of the text field in characters.
	
	    @property size
	    @type String
	    @default null
	  */
	  size: null
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-handlebars
	*/
	
	var get = Ember.get, set = Ember.set;
	
	/**
	  @class Button
	  @namespace Ember
	  @extends Ember.View
	  @uses Ember.TargetActionSupport
	  @deprecated
	*/
	Ember.Button = Ember.View.extend(Ember.TargetActionSupport, {
	  classNames: ['ember-button'],
	  classNameBindings: ['isActive'],
	
	  tagName: 'button',
	
	  propagateEvents: false,
	
	  attributeBindings: ['type', 'disabled', 'href', 'tabindex'],
	
	  /**
	    @private
	
	    Overrides TargetActionSupport's targetObject computed
	    property to use Handlebars-specific path resolution.
	
	    @property targetObject
	  */
	  targetObject: Ember.computed(function() {
	    var target = get(this, 'target'),
	        root = get(this, 'context'),
	        data = get(this, 'templateData');
	
	    if (typeof target !== 'string') { return target; }
	
	    return Ember.Handlebars.get(root, target, { data: data });
	  }).property('target'),
	
	  // Defaults to 'button' if tagName is 'input' or 'button'
	  type: Ember.computed(function(key, value) {
	    var tagName = this.get('tagName');
	    if (value !== undefined) { this._type = value; }
	    if (this._type !== undefined) { return this._type; }
	    if (tagName === 'input' || tagName === 'button') { return 'button'; }
	  }).property('tagName'),
	
	  disabled: false,
	
	  // Allow 'a' tags to act like buttons
	  href: Ember.computed(function() {
	    return this.get('tagName') === 'a' ? '#' : null;
	  }).property('tagName'),
	
	  mouseDown: function() {
	    if (!get(this, 'disabled')) {
	      set(this, 'isActive', true);
	      this._mouseDown = true;
	      this._mouseEntered = true;
	    }
	    return get(this, 'propagateEvents');
	  },
	
	  mouseLeave: function() {
	    if (this._mouseDown) {
	      set(this, 'isActive', false);
	      this._mouseEntered = false;
	    }
	  },
	
	  mouseEnter: function() {
	    if (this._mouseDown) {
	      set(this, 'isActive', true);
	      this._mouseEntered = true;
	    }
	  },
	
	  mouseUp: function(event) {
	    if (get(this, 'isActive')) {
	      // Actually invoke the button's target and action.
	      // This method comes from the Ember.TargetActionSupport mixin.
	      this.triggerAction();
	      set(this, 'isActive', false);
	    }
	
	    this._mouseDown = false;
	    this._mouseEntered = false;
	    return get(this, 'propagateEvents');
	  },
	
	  keyDown: function(event) {
	    // Handle space or enter
	    if (event.keyCode === 13 || event.keyCode === 32) {
	      this.mouseDown();
	    }
	  },
	
	  keyUp: function(event) {
	    // Handle space or enter
	    if (event.keyCode === 13 || event.keyCode === 32) {
	      this.mouseUp();
	    }
	  },
	
	  // TODO: Handle proper touch behavior.  Including should make inactive when
	  // finger moves more than 20x outside of the edge of the button (vs mouse
	  // which goes inactive as soon as mouse goes out of edges.)
	
	  touchStart: function(touch) {
	    return this.mouseDown(touch);
	  },
	
	  touchEnd: function(touch) {
	    return this.mouseUp(touch);
	  },
	
	  init: function() {
	    Ember.deprecate("Ember.Button is deprecated and will be removed from future releases. Consider using the `{{action}}` helper.");
	    this._super();
	  }
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-handlebars
	*/
	
	var get = Ember.get, set = Ember.set;
	
	/**
	  The `Ember.TextArea` view class renders a
	  [textarea](https://developer.mozilla.org/en/HTML/Element/textarea) element.
	  It allows for binding Ember properties to the text area contents (`value`),
	  live-updating as the user inputs text.
	
	  ## Layout and LayoutName properties
	
	  Because HTML `textarea` elements do not contain inner HTML the `layout` and `layoutName` 
	  properties will not be applied. See `Ember.View`'s layout section for more information.
	
	  ## HTML Attributes
	
	  By default `Ember.TextArea` provides support for `rows`, `cols`, `placeholder`, `disabled`,
	  `maxlength` and `tabindex` attributes on a textarea. If you need to support  more
	  attributes have a look at the `attributeBindings` property in `Ember.View`'s HTML Attributes section.
	
	  To globally add support for additional attributes you can reopen `Ember.TextArea` or `Ember.TextSupport`.
	
	  ``` javascript
	  Ember.TextSupport.reopen({
	    attributeBindings: ["required"]
	  })
	  ```
	
	  @class TextArea
	  @namespace Ember
	  @extends Ember.View
	  @uses Ember.TextSupport
	*/
	Ember.TextArea = Ember.View.extend(Ember.TextSupport, {
	  classNames: ['ember-text-area'],
	
	  tagName: "textarea",
	  attributeBindings: ['rows', 'cols'],
	  rows: null,
	  cols: null,
	
	  _updateElementValue: Ember.observer(function() {
	    // We do this check so cursor position doesn't get affected in IE
	    var value = get(this, 'value'),
	        $el = this.$();
	    if ($el && value !== $el.val()) {
	      $el.val(value);
	    }
	  }, 'value'),
	
	  init: function() {
	    this._super();
	    this.on("didInsertElement", this, this._updateElementValue);
	  }
	
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-handlebars
	*/
	
	/**
	@class TabContainerView
	@namespace Ember
	@deprecated
	@extends Ember.View
	*/
	Ember.TabContainerView = Ember.View.extend({
	  init: function() {
	    Ember.deprecate("Ember.TabContainerView is deprecated and will be removed from future releases.");
	    this._super();
	  }
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-handlebars
	*/
	
	var get = Ember.get;
	
	/**
	  @class TabPaneView
	  @namespace Ember
	  @extends Ember.View
	  @deprecated
	*/
	Ember.TabPaneView = Ember.View.extend({
	  tabsContainer: Ember.computed(function() {
	    return this.nearestOfType(Ember.TabContainerView);
	  }).property().volatile(),
	
	  isVisible: Ember.computed(function() {
	    return get(this, 'viewName') === get(this, 'tabsContainer.currentView');
	  }).property('tabsContainer.currentView').volatile(),
	
	  init: function() {
	    Ember.deprecate("Ember.TabPaneView is deprecated and will be removed from future releases.");
	    this._super();
	  }
	});
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-handlebars
	*/
	
	var get = Ember.get, setPath = Ember.setPath;
	
	/**
	@class TabView
	@namespace Ember
	@extends Ember.View
	@deprecated
	*/
	Ember.TabView = Ember.View.extend({
	  tabsContainer: Ember.computed(function() {
	    return this.nearestInstanceOf(Ember.TabContainerView);
	  }).property().volatile(),
	
	  mouseUp: function() {
	    setPath(this, 'tabsContainer.currentView', get(this, 'value'));
	  },
	
	  init: function() {
	    Ember.deprecate("Ember.TabView is deprecated and will be removed from future releases.");
	    this._super();
	  }
	});
	
	})();
	
	
	
	(function() {
	
	})();
	
	
	
	(function() {
	/*jshint eqeqeq:false */
	
	/**
	@module ember
	@submodule ember-handlebars
	*/
	
	var set = Ember.set,
	    get = Ember.get,
	    indexOf = Ember.EnumerableUtils.indexOf,
	    indexesOf = Ember.EnumerableUtils.indexesOf,
	    replace = Ember.EnumerableUtils.replace,
	    isArray = Ember.isArray;
	
	/**
	  The Ember.Select view class renders a
	  [select](https://developer.mozilla.org/en/HTML/Element/select) HTML element,
	  allowing the user to choose from a list of options. 
	
	  The text and `value` property of each `<option>` element within the `<select>` element
	  are populated from the objects in the Element.Select's `content` property. The
	  underlying data object of the selected `<option>` is stored in the
	  Element.Select's `value` property.
	
	  ### `content` as an array of Strings
	  The simplest version of an Ember.Select takes an array of strings as its `content` property.
	  The string will be used as both the `value` property and the inner text of each `<option>`
	  element inside the rendered `<select>`.
	
	  Example:
	
	  ``` javascript
	  App.names = ["Yehuda", "Tom"];
	  ```
	
	  ``` handlebars
	  {{view Ember.Select contentBinding="App.names"}}
	  ```
	
	  Would result in the following HTML:
	
	  ``` html
	  <select class="ember-select">
	    <option value="Yehuda">Yehuda</option>
	    <option value="Tom">Tom</option>
	  </select>
	  ```
	
	  You can control which `<option>` is selected through the Ember.Select's
	  `value` property directly or as a binding:
	
	  ``` javascript
	  App.names = Ember.Object.create({
	    selected: 'Tom',
	    content: ["Yehuda", "Tom"]
	  });
	  ```
	
	  ``` handlebars
	  {{view Ember.Select
	         contentBinding="App.names.content"
	         valueBinding="App.names.selected"
	  }}
	  ```
	
	  Would result in the following HTML with the `<option>` for 'Tom' selected:
	
	  ``` html
	  <select class="ember-select">
	    <option value="Yehuda">Yehuda</option>
	    <option value="Tom" selected="selected">Tom</option>
	  </select>
	  ```
	
	  A user interacting with the rendered `<select>` to choose "Yehuda" would update
	  the value of `App.names.selected` to "Yehuda".
	
	  ### `content` as an Array of Objects
	  An Ember.Select can also take an array of JavaScript or Ember objects
	  as its `content` property.
	
	  When using objects you need to tell the Ember.Select which property should be
	  accessed on each object to supply the `value` attribute of the `<option>`
	  and which property should be used to supply the element text.
	
	  The `optionValuePath` option is used to specify the path on each object to
	  the desired property for the `value` attribute.  The `optionLabelPath` 
	  specifies the path on each object to the desired property for the 
	  element's text. Both paths must reference each object itself as 'content':
	
	  ``` javascript
	  App.programmers = [
	      Ember.Object.create({firstName: "Yehuda", id: 1}),
	      Ember.Object.create({firstName: "Tom",    id: 2})
	    ];
	  ```
	
	  ``` handlebars
	  {{view Ember.Select
	         contentBinding="App.programmers"
	         optionValuePath="content.id"
	         optionLabelPath="content.firstName"}}
	  ```
	
	  Would result in the following HTML:
	
	  ``` html
	  <select class="ember-select">
	    <option value>Please Select</option>
	    <option value="1">Yehuda</option>
	    <option value="2">Tom</option>
	  </select>
	  ```
	
	
	  The `value` attribute of the selected `<option>` within an Ember.Select
	  can be bound to a property on another object by providing a
	  `valueBinding` option:
	
	  ``` javascript
	  App.programmers = [
	      Ember.Object.create({firstName: "Yehuda", id: 1}),
	      Ember.Object.create({firstName: "Tom",    id: 2})
	    ];
	
	  App.currentProgrammer = Ember.Object.create({
	    id: 2
	  });
	  ```
	
	  ``` handlebars
	  {{view Ember.Select
	         contentBinding="App.programmers"
	         optionValuePath="content.id"
	         optionLabelPath="content.firstName"
	         valueBinding="App.currentProgrammer.id"}}
	  ```
	
	  Would result in the following HTML with a selected option:
	
	  ``` html
	  <select class="ember-select">
	    <option value>Please Select</option>
	    <option value="1">Yehuda</option>
	    <option value="2" selected="selected">Tom</option>
	  </select>
	  ```
	
	  Interacting with the rendered element by selecting the first option
	  ('Yehuda') will update the `id` value of `App.currentProgrammer`
	  to match the `value` property of the newly selected `<option>`.
	
	  Alternatively, you can control selection through the underlying objects
	  used to render each object providing a `selectionBinding`. When the selected
	  `<option>` is changed, the property path provided to `selectionBinding`
	  will be updated to match the content object of the rendered `<option>`
	  element: 
	
	  ``` javascript
	  App.controller = Ember.Object.create({
	    selectedPerson: null,
	    content: [
	      Ember.Object.create({firstName: "Yehuda", id: 1}),
	      Ember.Object.create({firstName: "Tom",    id: 2})
	    ]
	  });
	  ```
	
	  ``` handlebars
	  {{view Ember.Select
	         contentBinding="App.controller.content"
	         optionValuePath="content.id"
	         optionLabelPath="content.firstName"
	         selectionBinding="App.controller.selectedPerson"}}
	  ```
	
	  Would result in the following HTML with a selected option:
	
	  ``` html
	  <select class="ember-select">
	    <option value>Please Select</option>
	    <option value="1">Yehuda</option>
	    <option value="2" selected="selected">Tom</option>
	  </select>
	  ```
	
	
	  Interacting with the rendered element by selecting the first option
	  ('Yehuda') will update the `selectedPerson` value of `App.controller`
	  to match the content object of the newly selected `<option>`. In this
	  case it is the first object in the `App.content.content` 
	
	  ### Supplying a Prompt
	
	  A `null` value for the Ember.Select's `value` or `selection` property
	  results in there being no `<option>` with a `selected` attribute:
	
	  ``` javascript
	  App.controller = Ember.Object.create({
	    selected: null,
	    content: [
	      "Yehuda",
	      "Tom"
	    ]
	  });
	  ```
	
	  ``` handlebars
	  {{view Ember.Select
	         contentBinding="App.controller.content"
	         valueBinding="App.controller.selected"
	  }}
	  ```
	
	  Would result in the following HTML:
	
	  ``` html
	  <select class="ember-select">
	    <option value="Yehuda">Yehuda</option>
	    <option value="Tom">Tom</option>
	  </select>
	  ```
	
	  Although `App.controller.selected` is `null` and no `<option>`
	  has a `selected` attribute the rendered HTML will display the
	  first item as though it were selected. You can supply a string
	  value for the Ember.Select to display when there is no selection
	  with the `prompt` option:
	
	  ``` javascript
	  App.controller = Ember.Object.create({
	    selected: null,
	    content: [
	      "Yehuda",
	      "Tom"
	    ]
	  });
	  ```
	
	  ``` handlebars
	  {{view Ember.Select
	         contentBinding="App.controller.content"
	         valueBinding="App.controller.selected"
	         prompt="Please select a name"
	  }}
	  ```
	
	  Would result in the following HTML:
	
	  ``` html
	  <select class="ember-select">
	    <option>Please select a name</option>
	    <option value="Yehuda">Yehuda</option>
	    <option value="Tom">Tom</option>
	  </select>
	  ```
	
	  @class Select
	  @namespace Ember
	  @extends Ember.View
	*/
	Ember.Select = Ember.View.extend(
	  /** @scope Ember.Select.prototype */ {
	
	  tagName: 'select',
	  classNames: ['ember-select'],
	  defaultTemplate: Ember.Handlebars.compile('{{#if view.prompt}}<option value>{{view.prompt}}</option>{{/if}}{{#each view.content}}{{view Ember.SelectOption contentBinding="this"}}{{/each}}'),
	  attributeBindings: ['multiple', 'disabled', 'tabindex'],
	
	  /**
	    The `multiple` attribute of the select element. Indicates whether multiple
	    options can be selected.
	
	    @property multiple
	    @type Boolean
	    @default false
	  */
	  multiple: false,
	
	  disabled: false,
	
	  /**
	    The list of options.
	
	    If `optionLabelPath` and `optionValuePath` are not overridden, this should
	    be a list of strings, which will serve simultaneously as labels and values.
	
	    Otherwise, this should be a list of objects. For instance:
	
	        content: Ember.A([
	            { id: 1, firstName: 'Yehuda' },
	            { id: 2, firstName: 'Tom' }
	          ]),
	        optionLabelPath: 'content.firstName',
	        optionValuePath: 'content.id'
	
	    @property content
	    @type Array
	    @default null
	  */
	  content: null,
	
	  /**
	    When `multiple` is false, the element of `content` that is currently
	    selected, if any.
	
	    When `multiple` is true, an array of such elements.
	
	    @property selection
	    @type Object or Array
	    @default null
	  */
	  selection: null,
	
	  /**
	    In single selection mode (when `multiple` is false), value can be used to get
	    the current selection's value or set the selection by it's value.
	
	    It is not currently supported in multiple selection mode.
	
	    @property value
	    @type String
	    @default null
	  */
	  value: Ember.computed(function(key, value) {
	    if (arguments.length === 2) { return value; }
	
	    var valuePath = get(this, 'optionValuePath').replace(/^content\.?/, '');
	    return valuePath ? get(this, 'selection.' + valuePath) : get(this, 'selection');
	  }).property('selection'),
	
	  /**
	    If given, a top-most dummy option will be rendered to serve as a user
	    prompt.
	
	    @property prompt
	    @type String
	    @default null
	  */
	  prompt: null,
	
	  /**
	    The path of the option labels. See `content`.
	
	    @property optionLabelPath
	    @type String
	    @default 'content'
	  */
	  optionLabelPath: 'content',
	
	  /**
	    The path of the option values. See `content`.
	
	    @property optionValuePath
	    @type String
	    @default 'content'
	  */
	  optionValuePath: 'content',
	
	  _change: function() {
	    if (get(this, 'multiple')) {
	      this._changeMultiple();
	    } else {
	      this._changeSingle();
	    }
	  },
	
	  selectionDidChange: Ember.observer(function() {
	    var selection = get(this, 'selection');
	    if (get(this, 'multiple')) {
	      if (!isArray(selection)) {
	        set(this, 'selection', Ember.A([selection]));
	        return;
	      }
	      this._selectionDidChangeMultiple();
	    } else {
	      this._selectionDidChangeSingle();
	    }
	  }, 'selection.@each'),
	
	  valueDidChange: Ember.observer(function() {
	    var content = get(this, 'content'),
	        value = get(this, 'value'),
	        valuePath = get(this, 'optionValuePath').replace(/^content\.?/, ''),
	        selectedValue = (valuePath ? get(this, 'selection.' + valuePath) : get(this, 'selection')),
	        selection;
	
	    if (value !== selectedValue) {
	      selection = content.find(function(obj) {
	        return value === (valuePath ? get(obj, valuePath) : obj);
	      });
	
	      this.set('selection', selection);
	    }
	  }, 'value'),
	
	
	  _triggerChange: function() {
	    var selection = get(this, 'selection');
	    var value = get(this, 'value');
	
	    if (selection) { this.selectionDidChange(); }
	    if (value) { this.valueDidChange(); }
	
	    this._change();
	  },
	
	  _changeSingle: function() {
	    var selectedIndex = this.$()[0].selectedIndex,
	        content = get(this, 'content'),
	        prompt = get(this, 'prompt');
	
	    if (!content) { return; }
	    if (prompt && selectedIndex === 0) { set(this, 'selection', null); return; }
	
	    if (prompt) { selectedIndex -= 1; }
	    set(this, 'selection', content.objectAt(selectedIndex));
	  },
	
	
	  _changeMultiple: function() {
	    var options = this.$('option:selected'),
	        prompt = get(this, 'prompt'),
	        offset = prompt ? 1 : 0,
	        content = get(this, 'content'),
	        selection = get(this, 'selection');
	
	    if (!content){ return; }
	    if (options) {
	      var selectedIndexes = options.map(function(){
	        return this.index - offset;
	      }).toArray();
	      var newSelection = content.objectsAt(selectedIndexes);
	
	      if (isArray(selection)) {
	        replace(selection, 0, get(selection, 'length'), newSelection);
	      } else {
	        set(this, 'selection', newSelection);
	      }
	    }
	  },
	
	  _selectionDidChangeSingle: function() {
	    var el = this.get('element');
	    if (!el) { return; }
	
	    var content = get(this, 'content'),
	        selection = get(this, 'selection'),
	        selectionIndex = content ? indexOf(content, selection) : -1,
	        prompt = get(this, 'prompt');
	
	    if (prompt) { selectionIndex += 1; }
	    if (el) { el.selectedIndex = selectionIndex; }
	  },
	
	  _selectionDidChangeMultiple: function() {
	    var content = get(this, 'content'),
	        selection = get(this, 'selection'),
	        selectedIndexes = content ? indexesOf(content, selection) : [-1],
	        prompt = get(this, 'prompt'),
	        offset = prompt ? 1 : 0,
	        options = this.$('option'),
	        adjusted;
	
	    if (options) {
	      options.each(function() {
	        adjusted = this.index > -1 ? this.index - offset : -1;
	        this.selected = indexOf(selectedIndexes, adjusted) > -1;
	      });
	    }
	  },
	
	  init: function() {
	    this._super();
	    this.on("didInsertElement", this, this._triggerChange);
	    this.on("change", this, this._change);
	  }
	});
	
	Ember.SelectOption = Ember.View.extend({
	  tagName: 'option',
	  attributeBindings: ['value', 'selected'],
	
	  defaultTemplate: function(context, options) {
	    options = { data: options.data, hash: {} };
	    Ember.Handlebars.helpers.bind.call(context, "view.label", options);
	  },
	
	  init: function() {
	    this.labelPathDidChange();
	    this.valuePathDidChange();
	
	    this._super();
	  },
	
	  selected: Ember.computed(function() {
	    var content = get(this, 'content'),
	        selection = get(this, 'parentView.selection');
	    if (get(this, 'parentView.multiple')) {
	      return selection && indexOf(selection, content.valueOf()) > -1;
	    } else {
	      // Primitives get passed through bindings as objects... since
	      // `new Number(4) !== 4`, we use `==` below
	      return content == selection;
	    }
	  }).property('content', 'parentView.selection').volatile(),
	
	  labelPathDidChange: Ember.observer(function() {
	    var labelPath = get(this, 'parentView.optionLabelPath');
	
	    if (!labelPath) { return; }
	
	    Ember.defineProperty(this, 'label', Ember.computed(function() {
	      return get(this, labelPath);
	    }).property(labelPath));
	  }, 'parentView.optionLabelPath'),
	
	  valuePathDidChange: Ember.observer(function() {
	    var valuePath = get(this, 'parentView.optionValuePath');
	
	    if (!valuePath) { return; }
	
	    Ember.defineProperty(this, 'value', Ember.computed(function() {
	      return get(this, valuePath);
	    }).property(valuePath));
	  }, 'parentView.optionValuePath')
	});
	
	})();
	
	
	
	(function() {
	
	})();
	
	
	
	(function() {
	/*globals Handlebars */
	/**
	@module ember
	@submodule ember-handlebars
	*/
	
	/**
	  @private
	
	  Find templates stored in the head tag as script tags and make them available
	  to Ember.CoreView in the global Ember.TEMPLATES object. This will be run as as
	  jQuery DOM-ready callback.
	
	  Script tags with "text/x-handlebars" will be compiled
	  with Ember's Handlebars and are suitable for use as a view's template.
	  Those with type="text/x-raw-handlebars" will be compiled with regular
	  Handlebars and are suitable for use in views' computed properties.
	
	  @method bootstrap
	  @for Ember.Handlebars
	  @static
	  @param ctx
	*/
	Ember.Handlebars.bootstrap = function(ctx) {
	  var selectors = 'script[type="text/x-handlebars"], script[type="text/x-raw-handlebars"]';
	
	  Ember.$(selectors, ctx)
	    .each(function() {
	    // Get a reference to the script tag
	    var script = Ember.$(this),
	        type   = script.attr('type');
	
	    var compile = (script.attr('type') === 'text/x-raw-handlebars') ?
	                  Ember.$.proxy(Handlebars.compile, Handlebars) :
	                  Ember.$.proxy(Ember.Handlebars.compile, Ember.Handlebars),
	      // Get the name of the script, used by Ember.View's templateName property.
	      // First look for data-template-name attribute, then fall back to its
	      // id if no name is found.
	      templateName = script.attr('data-template-name') || script.attr('id') || 'application',
	      template = compile(script.html());
	
	    // For templates which have a name, we save them and then remove them from the DOM
	    Ember.TEMPLATES[templateName] = template;
	
	    // Remove script tag from DOM
	    script.remove();
	  });
	};
	
	function bootstrap() {
	  Ember.Handlebars.bootstrap( Ember.$(document) );
	}
	
	/*
	  We tie this to application.load to ensure that we've at least
	  attempted to bootstrap at the point that the application is loaded.
	
	  We also tie this to document ready since we're guaranteed that all
	  the inline templates are present at this point.
	
	  There's no harm to running this twice, since we remove the templates
	  from the DOM after processing.
	*/
	
	Ember.onLoad('application', bootstrap);
	
	})();
	
	
	
	(function() {
	/**
	Ember Handlebars
	
	@module ember
	@submodule ember-handlebars
	@requires ember-views
	*/
	
	})();
	


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	//
	// This file is automatically generated. any changes will be lost
	//
	
	__webpack_require__(3);
	__webpack_require__(4);
	__webpack_require__(5);
	
	
	(function() {
	function visit(vertex, fn, visited, path) {
	  var name = vertex.name,
	    vertices = vertex.incoming,
	    names = vertex.incomingNames,
	    len = names.length,
	    i;
	  if (!visited) {
	    visited = {};
	  }
	  if (!path) {
	    path = [];
	  }
	  if (visited.hasOwnProperty(name)) {
	    return;
	  }
	  path.push(name);
	  visited[name] = true;
	  for (i = 0; i < len; i++) {
	    visit(vertices[names[i]], fn, visited, path);
	  }
	  fn(vertex, path);
	  path.pop();
	}
	
	function DAG() {
	  this.names = [];
	  this.vertices = {};
	}
	
	DAG.prototype.add = function(name) {
	  if (!name) { return; }
	  if (this.vertices.hasOwnProperty(name)) {
	    return this.vertices[name];
	  }
	  var vertex = {
	    name: name, incoming: {}, incomingNames: [], hasOutgoing: false, value: null
	  };
	  this.vertices[name] = vertex;
	  this.names.push(name);
	  return vertex;
	};
	
	DAG.prototype.map = function(name, value) {
	  this.add(name).value = value;
	};
	
	DAG.prototype.addEdge = function(fromName, toName) {
	  if (!fromName || !toName || fromName === toName) {
	    return;
	  }
	  var from = this.add(fromName), to = this.add(toName);
	  if (to.incoming.hasOwnProperty(fromName)) {
	    return;
	  }
	  function checkCycle(vertex, path) {
	    if (vertex.name === toName) {
	      throw new Error("cycle detected: " + toName + " <- " + path.join(" <- "));
	    }
	  }
	  visit(from, checkCycle);
	  from.hasOutgoing = true;
	  to.incoming[fromName] = from;
	  to.incomingNames.push(fromName);
	};
	
	DAG.prototype.topsort = function(fn) {
	  var visited = {},
	    vertices = this.vertices,
	    names = this.names,
	    len = names.length,
	    i, vertex;
	  for (i = 0; i < len; i++) {
	    vertex = vertices[names[i]];
	    if (!vertex.hasOutgoing) {
	      visit(vertex, fn, visited);
	    }
	  }
	};
	
	DAG.prototype.addEdges = function(name, value, before, after) {
	  var i;
	  this.map(name, value);
	  if (before) {
	    if (typeof before === 'string') {
	      this.addEdge(name, before);
	    } else {
	      for (i = 0; i < before.length; i++) {
	        this.addEdge(name, before[i]);
	      }
	    }
	  }
	  if (after) {
	    if (typeof after === 'string') {
	      this.addEdge(after, name);
	    } else {
	      for (i = 0; i < after.length; i++) {
	        this.addEdge(after[i], name);
	      }
	    }
	  }
	};
	
	Ember.DAG = DAG;
	
	})();
	
	
	
	(function() {
	/**
	@module ember
	@submodule ember-application
	*/
	
	var get = Ember.get, set = Ember.set;
	
	/**
	  An instance of `Ember.Application` is the starting point for every Ember.js
	  application. It helps to instantiate, initialize and coordinate the many
	  objects that make up your app.
	
	  Each Ember.js app has one and only one `Ember.Application` object. In fact, the very
	  first thing you should do in your application is create the instance:
	
	  ```javascript
	  window.App = Ember.Application.create();
	  ```
	
	  Typically, the application object is the only global variable. All other
	  classes in your app should be properties on the `Ember.Application` instance,
	  which highlights its first role: a global namespace.
	
	  For example, if you define a view class, it might look like this:
	
	  ```javascript
	  App.MyView = Ember.View.extend();
	  ```
	
	  After all of your classes are defined, call `App.initialize()` to start the
	  application.
	
	  Because `Ember.Application` inherits from `Ember.Namespace`, any classes
	  you create will have useful string representations when calling `toString()`;
	  see the `Ember.Namespace` documentation for more information.
	
	  While you can think of your `Ember.Application` as a container that holds the
	  other classes in your application, there are several other responsibilities
	  going on under-the-hood that you may want to understand.
	
	  ### Event Delegation
	
	  Ember.js uses a technique called _event delegation_. This allows the framework
	  to set up a global, shared event listener instead of requiring each view to do
	  it manually. For example, instead of each view registering its own `mousedown`
	  listener on its associated element, Ember.js sets up a `mousedown` listener on
	  the `body`.
	
	  If a `mousedown` event occurs, Ember.js will look at the target of the event and
	  start walking up the DOM node tree, finding corresponding views and invoking their
	  `mouseDown` method as it goes.
	
	  `Ember.Application` has a number of default events that it listens for, as well
	  as a mapping from lowercase events to camel-cased view method names. For
	  example, the `keypress` event causes the `keyPress` method on the view to be
	  called, the `dblclick` event causes `doubleClick` to be called, and so on.
	
	  If there is a browser event that Ember.js does not listen for by default, you
	  can specify custom events and their corresponding view method names by setting
	  the application's `customEvents` property:
	
	  ```javascript
	  App = Ember.Application.create({
	    customEvents: {
	      // add support for the loadedmetadata media
	      // player event
	      'loadedmetadata': "loadedMetadata"
	    }
	  });
	  ```
	
	  By default, the application sets up these event listeners on the document body.
	  However, in cases where you are embedding an Ember.js application inside an
	  existing page, you may want it to set up the listeners on an element inside
	  the body.
	
	  For example, if only events inside a DOM element with the ID of `ember-app` should
	  be delegated, set your application's `rootElement` property:
	
	  ```javascript
	  window.App = Ember.Application.create({
	    rootElement: '#ember-app'
	  });
	  ```
	
	  The `rootElement` can be either a DOM element or a jQuery-compatible selector
	  string. Note that *views appended to the DOM outside the root element will not
	  receive events.* If you specify a custom root element, make sure you only append
	  views inside it!
	
	  To learn more about the advantages of event delegation and the Ember.js view layer,
	  and a list of the event listeners that are setup by default, visit the
	  [Ember.js View Layer guide](http://emberjs.com/guides/view_layer#toc_event-delegation).
	
	  ### Dependency Injection
	
	  One thing you may have noticed while using Ember.js is that you define *classes*, not
	  *instances*. When your application loads, all of the instances are created for you.
	  Creating these instances is the responsibility of `Ember.Application`.
	
	  When the `Ember.Application` initializes, it will look for an `Ember.Router` class
	  defined on the applications's `Router` property, like this:
	
	  ```javascript
	  App.Router = Ember.Router.extend({
	  // ...
	  });
	  ```
	
	  If found, the router is instantiated and saved on the application's `router`
	  property (note the lowercase 'r'). While you should *not* reference this router
	  instance directly from your application code, having access to `App.router`
	  from the console can be useful during debugging.
	
	  After the router is created, the application loops through all of the
	  registered _injections_ and invokes them once for each property on the
	  `Ember.Application` object.
	
	  An injection is a function that is responsible for instantiating objects from
	  classes defined on the application. By default, the only injection registered
	  instantiates controllers and makes them available on the router.
	
	  For example, if you define a controller class:
	
	  ```javascript
	  App.MyController = Ember.Controller.extend({
	    // ...
	  });
	  ```
	
	  Your router will receive an instance of `App.MyController` saved on its
	  `myController` property.
	
	  Libraries on top of Ember.js can register additional injections. For example,
	  if your application is using Ember Data, it registers an injection that
	  instantiates `DS.Store`:
	
	  ```javascript
	  Ember.Application.registerInjection({
	    name: 'store',
	    before: 'controllers',
	
	    injection: function(app, router, property) {
	      if (property === 'Store') {
	        set(router, 'store', app[property].create());
	      }
	    }
	  });
	  ```
	
	  ### Routing
	
	  In addition to creating your application's router, `Ember.Application` is also
	  responsible for telling the router when to start routing.
	
	  By default, the router will begin trying to translate the current URL into
	  application state once the browser emits the `DOMContentReady` event. If you
	  need to defer routing, you can call the application's `deferReadiness()` method.
	  Once routing can begin, call the `advanceReadiness()` method.
	
	  If there is any setup required before routing begins, you can implement a `ready()`
	  method on your app that will be invoked immediately before routing begins:
	
	  ```javascript
	  window.App = Ember.Application.create({
	    ready: function() {
	      this.set('router.enableLogging', true);
	    }
	  });
	
	  To begin routing, you must have at a minimum a top-level controller and view.
	  You define these as `App.ApplicationController` and `App.ApplicationView`,
	  respectively. Your application will not work if you do not define these two
	  mandatory classes. For example:
	
	  ```javascript
	  App.ApplicationView = Ember.View.extend({
	    templateName: 'application'
	  });
	  App.ApplicationController = Ember.Controller.extend();
	  ```
	
	  @class Application
	  @namespace Ember
	  @extends Ember.Namespace
	*/
	Ember.Application = Ember.Namespace.extend(
	/** @scope Ember.Application.prototype */{
	
	  /**
	    The root DOM element of the Application. This can be specified as an
	    element or a
	    [jQuery-compatible selector string](http://api.jquery.com/category/selectors/).
	
	    This is the element that will be passed to the Application's,
	    `eventDispatcher`, which sets up the listeners for event delegation. Every
	    view in your application should be a child of the element you specify here.
	
	    @property rootElement
	    @type DOMElement
	    @default 'body'
	  */
	  rootElement: 'body',
	
	  /**
	    The `Ember.EventDispatcher` responsible for delegating events to this
	    application's views.
	
	    The event dispatcher is created by the application at initialization time
	    and sets up event listeners on the DOM element described by the
	    application's `rootElement` property.
	
	    See the documentation for `Ember.EventDispatcher` for more information.
	
	    @property eventDispatcher
	    @type Ember.EventDispatcher
	    @default null
	  */
	  eventDispatcher: null,
	
	  /**
	    The DOM events for which the event dispatcher should listen.
	
	    By default, the application's `Ember.EventDispatcher` listens
	    for a set of standard DOM events, such as `mousedown` and
	    `keyup`, and delegates them to your application's `Ember.View`
	    instances.
	
	    If you would like additional events to be delegated to your
	    views, set your `Ember.Application`'s `customEvents` property
	    to a hash containing the DOM event name as the key and the
	    corresponding view method name as the value. For example:
	
	        App = Ember.Application.create({
	          customEvents: {
	            // add support for the loadedmetadata media
	            // player event
	            'loadedmetadata': "loadedMetadata"
	          }
	        });
	
	    @property customEvents
	    @type Object
	    @default null
	  */
	  customEvents: null,
	
	  autoinit: !Ember.testing,
	
	  isInitialized: false,
	
	  init: function() {
	    if (!this.$) { this.$ = Ember.$; }
	
	    this._super();
	
	    this.createEventDispatcher();
	
	    // Start off the number of deferrals at 1. This will be
	    // decremented by the Application's own `initialize` method.
	    this._readinessDeferrals = 1;
	
	    this.waitForDOMContentLoaded();
	
	    if (this.autoinit) {
	      var self = this;
	      this.$().ready(function() {
	        if (self.isDestroyed || self.isInitialized) return;
	        self.initialize();
	      });
	    }
	  },
	
	  /** @private */
	  createEventDispatcher: function() {
	    var rootElement = get(this, 'rootElement'),
	        eventDispatcher = Ember.EventDispatcher.create({
	          rootElement: rootElement
	        });
	
	    set(this, 'eventDispatcher', eventDispatcher);
	  },
	
	  waitForDOMContentLoaded: function() {
	    this.deferReadiness();
	
	    var self = this;
	    this.$().ready(function() {
	      self.advanceReadiness();
	    });
	  },
	
	  deferReadiness: function() {
	    Ember.assert("You cannot defer readiness since the `ready()` hook has already been called.", this._readinessDeferrals > 0);
	    this._readinessDeferrals++;
	  },
	
	  advanceReadiness: function() {
	    this._readinessDeferrals--;
	
	    if (this._readinessDeferrals === 0) {
	      Ember.run.once(this, this.didBecomeReady);
	    }
	  },
	
	  /**
	    Instantiate all controllers currently available on the namespace
	    and inject them onto a router.
	
	    Example:
	
	        App.PostsController = Ember.ArrayController.extend();
	        App.CommentsController = Ember.ArrayController.extend();
	
	        var router = Ember.Router.create({
	          ...
	        });
	
	        App.initialize(router);
	
	        router.get('postsController')     // <App.PostsController:ember1234>
	        router.get('commentsController')  // <App.CommentsController:ember1235>
	
	    @method initialize
	    @param router {Ember.Router}
	  */
	  initialize: function(router) {
	    Ember.assert("Application initialize may only be call once", !this.isInitialized);
	    Ember.assert("Application not destroyed", !this.isDestroyed);
	
	    router = this.setupRouter(router);
	
	    this.runInjections(router);
	
	    Ember.runLoadHooks('application', this);
	
	    this.isInitialized = true;
	
	    // At this point, any injections or load hooks that would have wanted
	    // to defer readiness have fired.
	    this.advanceReadiness();
	
	    return this;
	  },
	
	  /** @private */
	  runInjections: function(router) {
	    var injections = get(this.constructor, 'injections'),
	        graph = new Ember.DAG(),
	        namespace = this,
	        properties, i, injection;
	
	    for (i=0; i<injections.length; i++) {
	      injection = injections[i];
	      graph.addEdges(injection.name, injection.injection, injection.before, injection.after);
	    }
	
	    graph.topsort(function (vertex) {
	      var injection = vertex.value,
	          properties = Ember.A(Ember.keys(namespace));
	      properties.forEach(function(property) {
	        injection(namespace, router, property);
	      });
	    });
	  },
	
	  /** @private */
	  setupRouter: function(router) {
	    if (!router && Ember.Router.detect(this.Router)) {
	      router = this.Router.create();
	      this._createdRouter = router;
	    }
	
	    if (router) {
	      set(this, 'router', router);
	
	      // By default, the router's namespace is the current application.
	      //
	      // This allows it to find model classes when a state has a
	      // route like `/posts/:post_id`. In that case, it would first
	      // convert `post_id` into `Post`, and then look it up on its
	      // namespace.
	      set(router, 'namespace', this);
	    }
	
	    return router;
	  },
	
	  /** @private */
	  didBecomeReady: function() {
	    var eventDispatcher = get(this, 'eventDispatcher'),
	        customEvents    = get(this, 'customEvents'),
	        router;
	
	    eventDispatcher.setup(customEvents);
	
	    this.ready();
	
	
	    router = get(this, 'router');
	
	    this.createApplicationView(router);
	
	    if (router && router instanceof Ember.Router) {
	      this.startRouting(router);
	    }
	  },
	
	  createApplicationView: function (router) {
	    var rootElement = get(this, 'rootElement'),
	        applicationViewOptions = {},
	        applicationViewClass = this.ApplicationView,
	        applicationTemplate = Ember.TEMPLATES.application,
	        applicationController, applicationView;
	
	    // don't do anything unless there is an ApplicationView or application template
	    if (!applicationViewClass && !applicationTemplate) return;
	
	    if (router) {
	      applicationController = get(router, 'applicationController');
	      if (applicationController) {
	        applicationViewOptions.controller = applicationController;
	      }
	    }
	
	    if (applicationTemplate) {
	      applicationViewOptions.template = applicationTemplate;
	    }
	
	    if (!applicationViewClass) {
	      applicationViewClass = Ember.View;
	    }
	
	    applicationView = applicationViewClass.create(applicationViewOptions);
	
	    this._createdApplicationView = applicationView;
	
	    if (router) {
	      set(router, 'applicationView', applicationView);
	    }
	
	    applicationView.appendTo(rootElement);
	  },
	
	  /**
	    @private
	
	    If the application has a router, use it to route to the current URL, and
	    trigger a new call to `route` whenever the URL changes.
	
	    @method startRouting
	    @property router {Ember.Router}
	  */
	  startRouting: function(router) {
	    var location = get(router, 'location');
	
	    Ember.assert("You must have an application template or ApplicationView defined on your application", get(router, 'applicationView') );
	    Ember.assert("You must have an ApplicationController defined on your application", get(router, 'applicationController') );
	
	    router.route(location.getURL());
	    location.onUpdateURL(function(url) {
	      router.route(url);
	    });
	  },
	
	  /**
	    Called when the Application has become ready.
	    The call will be delayed until the DOM has become ready.
	
	    @event ready
	  */
	  ready: Ember.K,
	
	  willDestroy: function() {
	    get(this, 'eventDispatcher').destroy();
	    if (this._createdRouter)          { this._createdRouter.destroy(); }
	    if (this._createdApplicationView) { this._createdApplicationView.destroy(); }
	  },
	
	  registerInjection: function(options) {
	    this.constructor.registerInjection(options);
	  }
	});
	
	Ember.Application.reopenClass({
	  concatenatedProperties: ['injections'],
	  injections: Ember.A(),
	  registerInjection: function(injection) {
	    var injections = get(this, 'injections');
	
	    Ember.assert("The injection '" + injection.name + "' has already been registered", !injections.findProperty('name', injection.name));
	    Ember.assert("An injection cannot be registered with both a before and an after", !(injection.before && injection.after));
	    Ember.assert("An injection cannot be registered without an injection function", Ember.canInvoke(injection, 'injection'));
	
	    injections.push(injection);
	  }
	});
	
	Ember.Application.registerInjection({
	  name: 'controllers',
	  injection: function(app, router, property) {
	    if (!router) { return; }
	    if (!/^[A-Z].*Controller$/.test(property)) { return; }
	
	    var name = property.charAt(0).toLowerCase() + property.substr(1),
	        controllerClass = app[property], controller;
	
	    if(!Ember.Object.detect(controllerClass)){ return; }
	    controller = app[property].create();
	
	    router.set(name, controller);
	
	    controller.setProperties({
	      target: router,
	      controllers: router,
	      namespace: app
	    });
	  }
	});
	
	Ember.runLoadHooks('Ember.Application', Ember.Application);
	
	
	})();
	
	
	
	(function() {
	
	})();
	
	
	
	(function() {
	/**
	Ember Application
	
	@module ember
	@submodule ember-application
	@requires ember-views, ember-states, ember-routing
	*/
	
	})();
	


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {//
	// This file is automatically generated. any changes will be lost
	//
	
	
	
	(function(window) {
	(function() {
	/*globals Em:true ENV */
	
	/**
	@module ember
	@submodule ember-metal
	*/
	
	/**
	  All Ember methods and functions are defined inside of this namespace.
	  You generally should not add new properties to this namespace as it may be
	  overwritten by future versions of Ember.
	
	  You can also use the shorthand "Em" instead of "Ember".
	
	  Ember-Runtime is a framework that provides core functions for
	  Ember including cross-platform functions, support for property
	  observing and objects. Its focus is on small size and performance. You can
	  use this in place of or along-side other cross-platform libraries such as
	  jQuery.
	
	  The core Runtime framework is based on the jQuery API with a number of
	  performance optimizations.
	
	  @class Ember
	  @static
	  @version 1.0.0-pre.2
	*/
	
	if ('undefined' === typeof Ember) {
	  // Create core object. Make it act like an instance of Ember.Namespace so that
	  // objects assigned to it are given a sane string representation.
	  Ember = {};
	}
	
	// Default imports, exports and lookup to the global object;
	var imports = Ember.imports = Ember.imports || this;
	var exports = Ember.exports = Ember.exports || this;
	var lookup  = Ember.lookup  = Ember.lookup  || this;
	
	// aliases needed to keep minifiers from removing the global context
	exports.Em = exports.Ember = Em = Ember;
	
	// Make sure these are set whether Ember was already defined or not
	
	Ember.isNamespace = true;
	
	Ember.toString = function() { return "Ember"; };
	
	
	/**
	  @property VERSION
	  @type String
	  @default '1.0.0-pre.2'
	  @final
	*/
	Ember.VERSION = '1.0.0-pre.2';
	
	/**
	  Standard environmental variables.  You can define these in a global `ENV`
	  variable before loading Ember to control various configuration
	  settings.
	
	  @property ENV
	  @type Hash
	*/
	Ember.ENV = Ember.ENV || ('undefined' === typeof ENV ? {} : ENV);
	
	Ember.config = Ember.config || {};
	
	// ..........................................................
	// BOOTSTRAP
	//
	
	/**
	  Determines whether Ember should enhances some built-in object
	  prototypes to provide a more friendly API.  If enabled, a few methods
	  will be added to Function, String, and Array.  Object.prototype will not be
	  enhanced, which is the one that causes most trouble for people.
	
	  In general we recommend leaving this option set to true since it rarely
	  conflicts with other code.  If you need to turn it off however, you can
	  define an ENV.EXTEND_PROTOTYPES config to disable it.
	
	  @property EXTEND_PROTOTYPES
	  @type Boolean
	  @default true
	*/
	Ember.EXTEND_PROTOTYPES = Ember.ENV.EXTEND_PROTOTYPES;
	
	if (typeof Ember.EXTEND_PROTOTYPES === 'undefined') {
	  Ember.EXTEND_PROTOTYPES = true;
	}
	
	/**
	  Determines whether Ember logs a full stack trace during deprecation warnings
	
	  @property LOG_STACKTRACE_ON_DEPRECATION
	  @type Boolean
	  @default true
	*/
	Ember.LOG_STACKTRACE_ON_DEPRECATION = (Ember.ENV.LOG_STACKTRACE_ON_DEPRECATION !== false);
	
	/**
	  Determines whether Ember should add ECMAScript 5 shims to older browsers.
	
	  @property SHIM_ES5
	  @type Boolean
	  @default Ember.EXTEND_PROTOTYPES
	*/
	Ember.SHIM_ES5 = (Ember.ENV.SHIM_ES5 === false) ? false : Ember.EXTEND_PROTOTYPES;
	
	/**
	  Empty function.  Useful for some operations.
	
	  @method K
	  @private
	  @return {Object}
	*/
	Ember.K = function() { return this; };
	
	
	// Stub out the methods defined by the ember-debug package in case it's not loaded
	
	if ('undefined' === typeof Ember.assert) { Ember.assert = Ember.K; }
	if ('undefined' === typeof Ember.warn) { Ember.warn = Ember.K; }
	if ('undefined' === typeof Ember.deprecate) { Ember.deprecate = Ember.K; }
	if ('undefined' === typeof Ember.deprecateFunc) {
	  Ember.deprecateFunc = function(_, func) { return func; };
	}
	
	// These are deprecated but still supported
	
	if ('undefined' === typeof ember_assert) { exports.ember_assert = Ember.K; }
	if ('undefined' === typeof ember_warn) { exports.ember_warn = Ember.K; }
	if ('undefined' === typeof ember_deprecate) { exports.ember_deprecate = Ember.K; }
	if ('undefined' === typeof ember_deprecateFunc) {
	  exports.ember_deprecateFunc = function(_, func) { return func; };
	}
	
	/**
	  Previously we used `Ember.$.uuid`, however `$.uuid` has been removed from jQuery master.
	  We'll just bootstrap our own uuid now.
	
	  @property uuid
	  @type Number
	  @private
	*/
	Ember.uuid = 0;
	
	// ..........................................................
	// LOGGER
	//
	
	/**
	  Inside Ember-Metal, simply uses the imports.console object.
	  Override this to provide more robust logging functionality.
	
	  @class Logger
	  @namespace Ember
	*/
	Ember.Logger = imports.console || { log: Ember.K, warn: Ember.K, error: Ember.K, info: Ember.K, debug: Ember.K };
	
	
	// ..........................................................
	// ERROR HANDLING
	//
	
	/**
	  A function may be assigned to `Ember.onerror` to be called when Ember internals encounter an error.
	  This is useful for specialized error handling and reporting code.
	
	  @event onerror
	  @for Ember
	  @param {Exception} error the error object
	*/
	Ember.onerror = null;
	
	/**
	  @private
	
	  Wrap code block in a try/catch if {{#crossLink "Ember/onerror"}}{{/crossLink}} is set.
	
	  @method handleErrors
	  @for Ember
	  @param {Function} func
	  @param [context]
	*/
	Ember.handleErrors = function(func, context) {
	  // Unfortunately in some browsers we lose the backtrace if we rethrow the existing error,
	  // so in the event that we don't have an `onerror` handler we don't wrap in a try/catch
	  if ('function' === typeof Ember.onerror) {
	    try {
	      return func.apply(context || this);
	    } catch (error) {
	      Ember.onerror(error);
	    }
	  } else {
	    return func.apply(context || this);
	  }
	};
	
	})();
	
	
	
	(function() {
	/**
	  The purpose of the Ember Instrumentation module is
	  to provide efficient, general-purpose instrumentation
	  for Ember.
	
	  Subscribe to a listener by using `Ember.subscribe`:
	
	      Ember.subscribe("render", {
	        before: function(name, timestamp, payload) {
	
	        },
	
	        after: function(name, timestamp, payload) {
	
	        }
	      });
	
	  If you return a value from the `before` callback, that same
	  value will be passed as a fourth parameter to the `after`
	  callback.
	
	  Instrument a block of code by using `Ember.instrument`:
	
	      Ember.instrument("render.handlebars", payload, function() {
	        // rendering logic
	      }, binding);
	
	  Event names passed to `Ember.instrument` are namespaced
	  by periods, from more general to more specific. Subscribers
	  can listen for events by whatever level of granularity they
	  are interested in.
	
	  In the above example, the event is `render.handlebars`,
	  and the subscriber listened for all events beginning with
	  `render`. It would receive callbacks for events named
	  `render`, `render.handlebars`, `render.container`, or
	  even `render.handlebars.layout`.
	
	  @class Instrumentation
	  @namespace Ember
	  @static
	*/
	Ember.Instrumentation = {};
	
	var subscribers = [], cache = {};
	
	var populateListeners = function(name) {
	  var listeners = [], subscriber;
	
	  for (var i=0, l=subscribers.length; i<l; i++) {
	    subscriber = subscribers[i];
	    if (subscriber.regex.test(name)) {
	      listeners.push(subscriber.object);
	    }
	  }
	
	  cache[name] = listeners;
	  return listeners;
	};
	
	var time = (function() {
		var perf = window.performance || {};
		var fn = perf.now || perf.mozNow || perf.webkitNow || perf.msNow || perf.oNow;
		// fn.bind will be available in all the browsers that support the advanced window.performance... ;-)
		return fn ? fn.bind(perf) : function() { return +new Date(); };
	})();
	
	
	Ember.Instrumentation.instrument = function(name, payload, callback, binding) {
	  var listeners = cache[name];
	
	  if (!listeners) {
	    listeners = populateListeners(name);
	  }
	
	  if (listeners.length === 0) { return callback.call(binding); }
	
	  var beforeValues = [], listener, ret, i, l;
	
	  try {
	    for (i=0, l=listeners.length; i<l; i++) {
	      listener = listeners[i];
	      beforeValues[i] = listener.before(name, time(), payload);
	    }
	
	    ret = callback.call(binding);
	  } catch(e) {
	    payload = payload || {};
	    payload.exception = e;
	  } finally {
	    for (i=0, l=listeners.length; i<l; i++) {
	      listener = listeners[i];
	      listener.after(name, time(), payload, beforeValues[i]);
	    }
	  }
	
	  return ret;
	};
	
	Ember.Instrumentation.subscribe = function(pattern, object) {
	  var paths = pattern.split("."), path, regex = [];
	
	  for (var i=0, l=paths.length; i<l; i++) {
	    path = paths[i];
	    if (path === "*") {
	      regex.push("[^\\.]*");
	    } else {
	      regex.push(path);
	    }
	  }
	
	  regex = regex.join("\\.");
	  regex = regex + "(\\..*)?";
	
	  var subscriber = {
	    pattern: pattern,
	    regex: new RegExp("^" + regex + "$"),
	    object: object
	  };
	
	  subscribers.push(subscriber);
	  cache = {};
	
	  return subscriber;
	};
	
	Ember.Instrumentation.unsubscribe = function(subscriber) {
	  var index;
	
	  for (var i=0, l=subscribers.length; i<l; i++) {
	    if (subscribers[i] === subscriber) {
	      index = i;
	    }
	  }
	
	  subscribers.splice(index, 1);
	  cache = {};
	};
	
	Ember.Instrumentation.reset = function() {
	  subscribers = [];
	  cache = {};
	};
	
	Ember.instrument = Ember.Instrumentation.instrument;
	Ember.subscribe = Ember.Instrumentation.subscribe;
	
	})();
	
	
	
	(function() {
	/*jshint newcap:false*/
	
	/**
	@module ember-metal
	*/
	
	// NOTE: There is a bug in jshint that doesn't recognize `Object()` without `new`
	// as being ok unless both `newcap:false` and not `use strict`.
	// https://github.com/jshint/jshint/issues/392
	
	// Testing this is not ideal, but we want to use native functions
	// if available, but not to use versions created by libraries like Prototype
	var isNativeFunc = function(func) {
	  // This should probably work in all browsers likely to have ES5 array methods
	  return func && Function.prototype.toString.call(func).indexOf('[native code]') > -1;
	};
	
	// From: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/map
	var arrayMap = isNativeFunc(Array.prototype.map) ? Array.prototype.map : function(fun /*, thisp */) {
	  //"use strict";
	
	  if (this === void 0 || this === null) {
	    throw new TypeError();
	  }
	
	  var t = Object(this);
	  var len = t.length >>> 0;
	  if (typeof fun !== "function") {
	    throw new TypeError();
	  }
	
	  var res = new Array(len);
	  var thisp = arguments[1];
	  for (var i = 0; i < len; i++) {
	    if (i in t) {
	      res[i] = fun.call(thisp, t[i], i, t);
	    }
	  }
	
	  return res;
	};
	
	// From: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/foreach
	var arrayForEach = isNativeFunc(Array.prototype.forEach) ? Array.prototype.forEach : function(fun /*, thisp */) {
	  //"use strict";
	
	  if (this === void 0 || this === null) {
	    throw new TypeError();
	  }
	
	  var t = Object(this);
	  var len = t.length >>> 0;
	  if (typeof fun !== "function") {
	    throw new TypeError();
	  }
	
	  var thisp = arguments[1];
	  for (var i = 0; i < len; i++) {
	    if (i in t) {
	      fun.call(thisp, t[i], i, t);
	    }
	  }
	};
	
	var arrayIndexOf = isNativeFunc(Array.prototype.indexOf) ? Array.prototype.indexOf : function (obj, fromIndex) {
	  if (fromIndex === null || fromIndex === undefined) { fromIndex = 0; }
	  else if (fromIndex < 0) { fromIndex = Math.max(0, this.length + fromIndex); }
	  for (var i = fromIndex, j = this.length; i < j; i++) {
	    if (this[i] === obj) { return i; }
	  }
	  return -1;
	};
	
	Ember.ArrayPolyfills = {
	  map: arrayMap,
	  forEach: arrayForEach,
	  indexOf: arrayIndexOf
	};
	
	var utils = Ember.EnumerableUtils = {
	  map: function(obj, callback, thisArg) {
	    return obj.map ? obj.map.call(obj, callback, thisArg) : arrayMap.call(obj, callback, thisArg);
	  },
	
	  forEach: function(obj, callback, thisArg) {
	    return obj.forEach ? obj.forEach.call(obj, callback, thisArg) : arrayForEach.call(obj, callback, thisArg);
	  },
	
	  indexOf: function(obj, element, index) {
	    return obj.indexOf ? obj.indexOf.call(obj, element, index) : arrayIndexOf.call(obj, element, index);
	  },
	
	  indexesOf: function(obj, elements) {
	    return elements === undefined ? [] : utils.map(elements, function(item) {
	      return utils.indexOf(obj, item);
	    });
	  },
	
	  removeObject: function(array, item) {
	    var index = utils.indexOf(array, item);
	    if (index !== -1) { array.splice(index, 1); }
	  },
	
	  replace: function(array, idx, amt, objects) {
	    if (array.replace) {
	      return array.replace(idx, amt, objects);
	    } else {
	      var args = Array.prototype.concat.apply([idx, amt], objects);
	      return array.splice.apply(array, args);
	    }
	  }
	};
	
	
	if (Ember.SHIM_ES5) {
	  if (!Array.prototype.map) {
	    Array.prototype.map = arrayMap;
	  }
	
	  if (!Array.prototype.forEach) {
	    Array.prototype.forEach = arrayForEach;
	  }
	
	  if (!Array.prototype.indexOf) {
	    Array.prototype.indexOf = arrayIndexOf;
	  }
	}
	
	})();
	
	
	
	(function() {
	/*globals Node */
	/**
	@module ember-metal
	*/
	
	/**
	  Platform specific methods and feature detectors needed by the framework.
	
	  @class platform
	  @namespace Ember
	  @static
	*/
	var platform = Ember.platform = {};
	
	
	/**
	  Identical to Object.create().  Implements if not available natively.
	  @method create
	  @for Ember
	*/
	Ember.create = Object.create;
	
	if (!Ember.create) {
	  var K = function() {};
	
	  Ember.create = function(obj, props) {
	    K.prototype = obj;
	    obj = new K();
	    if (props) {
	      K.prototype = obj;
	      for (var prop in props) {
	        K.prototype[prop] = props[prop].value;
	      }
	      obj = new K();
	    }
	    K.prototype = null;
	
	    return obj;
	  };
	
	  Ember.create.isSimulated = true;
	}
	
	var defineProperty = Object.defineProperty;
	var canRedefineProperties, canDefinePropertyOnDOM;
	
	// Catch IE8 where Object.defineProperty exists but only works on DOM elements
	if (defineProperty) {
	  try {
	    defineProperty({}, 'a',{get:function(){}});
	  } catch (e) {
	    defineProperty = null;
	  }
	}
	
	if (defineProperty) {
	  // Detects a bug in Android <3.2 where you cannot redefine a property using
	  // Object.defineProperty once accessors have already been set.
	  canRedefineProperties = (function() {
	    var obj = {};
	
	    defineProperty(obj, 'a', {
	      configurable: true,
	      enumerable: true,
	      get: function() { },
	      set: function() { }
	    });
	
	    defineProperty(obj, 'a', {
	      configurable: true,
	      enumerable: true,
	      writable: true,
	      value: true
	    });
	
	    return obj.a === true;
	  })();
	
	  // This is for Safari 5.0, which supports Object.defineProperty, but not
	  // on DOM nodes.
	  canDefinePropertyOnDOM = (function(){
	    try {
	      defineProperty(document.createElement('div'), 'definePropertyOnDOM', {});
	      return true;
	    } catch(e) { }
	
	    return false;
	  })();
	
	  if (!canRedefineProperties) {
	    defineProperty = null;
	  } else if (!canDefinePropertyOnDOM) {
	    defineProperty = function(obj, keyName, desc){
	      var isNode;
	
	      if (typeof Node === "object") {
	        isNode = obj instanceof Node;
	      } else {
	        isNode = typeof obj === "object" && typeof obj.nodeType === "number" && typeof obj.nodeName === "string";
	      }
	
	      if (isNode) {
	        // TODO: Should we have a warning here?
	        return (obj[keyName] = desc.value);
	      } else {
	        return Object.defineProperty(obj, keyName, desc);
	      }
	    };
	  }
	}
	
	/**
	@class platform
	@namespace Ember
	*/
	
	/**
	  Identical to Object.defineProperty().  Implements as much functionality
	  as possible if not available natively.
	
	  @method defineProperty
	  @param {Object} obj The object to modify
	  @param {String} keyName property name to modify
	  @param {Object} desc descriptor hash
	  @return {void}
	*/
	platform.defineProperty = defineProperty;
	
	/**
	  Set to true if the platform supports native getters and setters.
	
	  @property hasPropertyAccessors
	  @final
	*/
	platform.hasPropertyAccessors = true;
	
	if (!platform.defineProperty) {
	  platform.hasPropertyAccessors = false;
	
	  platform.defineProperty = function(obj, keyName, desc) {
	    if (!desc.get) { obj[keyName] = desc.value; }
	  };
	
	  platform.defineProperty.isSimulated = true;
	}
	
	if (Ember.ENV.MANDATORY_SETTER && !platform.hasPropertyAccessors) {
	  Ember.ENV.MANDATORY_SETTER = false;
	}
	
	})();
	
	
	
	(function() {
	/**
	@module ember-metal
	*/
	
	var o_defineProperty = Ember.platform.defineProperty,
	    o_create = Ember.create,
	    // Used for guid generation...
	    GUID_KEY = '__ember'+ (+ new Date()),
	    uuid         = 0,
	    numberCache  = [],
	    stringCache  = {};
	
	var MANDATORY_SETTER = Ember.ENV.MANDATORY_SETTER;
	
	/**
	  @private
	
	  A unique key used to assign guids and other private metadata to objects.
	  If you inspect an object in your browser debugger you will often see these.
	  They can be safely ignored.
	
	  On browsers that support it, these properties are added with enumeration
	  disabled so they won't show up when you iterate over your properties.
	
	  @property GUID_KEY
	  @for Ember
	  @type String
	  @final
	*/
	Ember.GUID_KEY = GUID_KEY;
	
	var GUID_DESC = {
	  writable:    false,
	  configurable: false,
	  enumerable:  false,
	  value: null
	};
	
	/**
	  @private
	
	  Generates a new guid, optionally saving the guid to the object that you
	  pass in.  You will rarely need to use this method.  Instead you should
	  call Ember.guidFor(obj), which return an existing guid if available.
	
	  @method generateGuid
	  @for Ember
	  @param {Object} [obj] Object the guid will be used for.  If passed in, the guid will
	    be saved on the object and reused whenever you pass the same object
	    again.
	
	    If no object is passed, just generate a new guid.
	
	  @param {String} [prefix] Prefix to place in front of the guid.  Useful when you want to
	    separate the guid into separate namespaces.
	
	  @return {String} the guid
	*/
	Ember.generateGuid = function generateGuid(obj, prefix) {
	  if (!prefix) prefix = 'ember';
	  var ret = (prefix + (uuid++));
	  if (obj) {
	    GUID_DESC.value = ret;
	    o_defineProperty(obj, GUID_KEY, GUID_DESC);
	  }
	  return ret ;
	};
	
	/**
	  @private
	
	  Returns a unique id for the object.  If the object does not yet have
	  a guid, one will be assigned to it.  You can call this on any object,
	  Ember.Object-based or not, but be aware that it will add a _guid property.
	
	  You can also use this method on DOM Element objects.
	
	  @method guidFor
	  @for Ember
	  @param obj {Object} any object, string, number, Element, or primitive
	  @return {String} the unique guid for this instance.
	*/
	Ember.guidFor = function guidFor(obj) {
	
	  // special cases where we don't want to add a key to object
	  if (obj === undefined) return "(undefined)";
	  if (obj === null) return "(null)";
	
	  var cache, ret;
	  var type = typeof obj;
	
	  // Don't allow prototype changes to String etc. to change the guidFor
	  switch(type) {
	    case 'number':
	      ret = numberCache[obj];
	      if (!ret) ret = numberCache[obj] = 'nu'+obj;
	      return ret;
	
	    case 'string':
	      ret = stringCache[obj];
	      if (!ret) ret = stringCache[obj] = 'st'+(uuid++);
	      return ret;
	
	    case 'boolean':
	      return obj ? '(true)' : '(false)';
	
	    default:
	      if (obj[GUID_KEY]) return obj[GUID_KEY];
	      if (obj === Object) return '(Object)';
	      if (obj === Array)  return '(Array)';
	      ret = 'ember'+(uuid++);
	      GUID_DESC.value = ret;
	      o_defineProperty(obj, GUID_KEY, GUID_DESC);
	      return ret;
	  }
	};
	
	// ..........................................................
	// META
	//
	
	var META_DESC = {
	  writable:    true,
	  configurable: false,
	  enumerable:  false,
	  value: null
	};
	
	var META_KEY = Ember.GUID_KEY+'_meta';
	
	/**
	  The key used to store meta information on object for property observing.
	
	  @property META_KEY
	  @for Ember
	  @private
	  @final
	  @type String
	*/
	Ember.META_KEY = META_KEY;
	
	// Placeholder for non-writable metas.
	var EMPTY_META = {
	  descs: {},
	  watching: {}
	};
	
	if (MANDATORY_SETTER) { EMPTY_META.values = {}; }
	
	Ember.EMPTY_META = EMPTY_META;
	
	if (Object.freeze) Object.freeze(EMPTY_META);
	
	var isDefinePropertySimulated = Ember.platform.defineProperty.isSimulated;
	
	function Meta(obj) {
	  this.descs = {};
	  this.watching = {};
	  this.cache = {};
	  this.source = obj;
	}
	
	if (isDefinePropertySimulated) {
	  // on platforms that don't support enumerable false
	  // make meta fail jQuery.isPlainObject() to hide from
	  // jQuery.extend() by having a property that fails
	  // hasOwnProperty check.
	  Meta.prototype.__preventPlainObject__ = true;
	}
	
	/**
	  Retrieves the meta hash for an object.  If 'writable' is true ensures the
	  hash is writable for this object as well.
	
	  The meta object contains information about computed property descriptors as
	  well as any watched properties and other information.  You generally will
	  not access this information directly but instead work with higher level
	  methods that manipulate this hash indirectly.
	
	  @method meta
	  @for Ember
	  @private
	
	  @param {Object} obj The object to retrieve meta for
	
	  @param {Boolean} [writable=true] Pass false if you do not intend to modify
	    the meta hash, allowing the method to avoid making an unnecessary copy.
	
	  @return {Hash}
	*/
	Ember.meta = function meta(obj, writable) {
	
	  var ret = obj[META_KEY];
	  if (writable===false) return ret || EMPTY_META;
	
	  if (!ret) {
	    if (!isDefinePropertySimulated) o_defineProperty(obj, META_KEY, META_DESC);
	
	    ret = new Meta(obj);
	
	    if (MANDATORY_SETTER) { ret.values = {}; }
	
	    obj[META_KEY] = ret;
	
	    // make sure we don't accidentally try to create constructor like desc
	    ret.descs.constructor = null;
	
	  } else if (ret.source !== obj) {
	    if (!isDefinePropertySimulated) o_defineProperty(obj, META_KEY, META_DESC);
	
	    ret = o_create(ret);
	    ret.descs    = o_create(ret.descs);
	    ret.watching = o_create(ret.watching);
	    ret.cache    = {};
	    ret.source   = obj;
	
	    if (MANDATORY_SETTER) { ret.values = o_create(ret.values); }
	
	    obj[META_KEY] = ret;
	  }
	  return ret;
	};
	
	Ember.getMeta = function getMeta(obj, property) {
	  var meta = Ember.meta(obj, false);
	  return meta[property];
	};
	
	Ember.setMeta = function setMeta(obj, property, value) {
	  var meta = Ember.meta(obj, true);
	  meta[property] = value;
	  return value;
	};
	
	/**
	  @private
	
	  In order to store defaults for a class, a prototype may need to create
	  a default meta object, which will be inherited by any objects instantiated
	  from the class's constructor.
	
	  However, the properties of that meta object are only shallow-cloned,
	  so if a property is a hash (like the event system's `listeners` hash),
	  it will by default be shared across all instances of that class.
	
	  This method allows extensions to deeply clone a series of nested hashes or
	  other complex objects. For instance, the event system might pass
	  ['listeners', 'foo:change', 'ember157'] to `prepareMetaPath`, which will
	  walk down the keys provided.
	
	  For each key, if the key does not exist, it is created. If it already
	  exists and it was inherited from its constructor, the constructor's
	  key is cloned.
	
	  You can also pass false for `writable`, which will simply return
	  undefined if `prepareMetaPath` discovers any part of the path that
	  shared or undefined.
	
	  @method metaPath
	  @for Ember
	  @param {Object} obj The object whose meta we are examining
	  @param {Array} path An array of keys to walk down
	  @param {Boolean} writable whether or not to create a new meta
	    (or meta property) if one does not already exist or if it's
	    shared with its constructor
	*/
	Ember.metaPath = function metaPath(obj, path, writable) {
	  var meta = Ember.meta(obj, writable), keyName, value;
	
	  for (var i=0, l=path.length; i<l; i++) {
	    keyName = path[i];
	    value = meta[keyName];
	
	    if (!value) {
	      if (!writable) { return undefined; }
	      value = meta[keyName] = { __ember_source__: obj };
	    } else if (value.__ember_source__ !== obj) {
	      if (!writable) { return undefined; }
	      value = meta[keyName] = o_create(value);
	      value.__ember_source__ = obj;
	    }
	
	    meta = value;
	  }
	
	  return value;
	};
	
	/**
	  @private
	
	  Wraps the passed function so that `this._super` will point to the superFunc
	  when the function is invoked.  This is the primitive we use to implement
	  calls to super.
	
	  @method wrap
	  @for Ember
	  @param {Function} func The function to call
	  @param {Function} superFunc The super function.
	  @return {Function} wrapped function.
	*/
	Ember.wrap = function(func, superFunc) {
	
	  function K() {}
	
	  var newFunc = function() {
	    var ret, sup = this._super;
	    this._super = superFunc || K;
	    ret = func.apply(this, arguments);
	    this._super = sup;
	    return ret;
	  };
	
	  newFunc.base = func;
	  return newFunc;
	};
	
	/**
	  Returns true if the passed object is an array or Array-like.
	
	  Ember Array Protocol:
	
	    - the object has an objectAt property
	    - the object is a native Array
	    - the object is an Object, and has a length property
	
	  Unlike Ember.typeOf this method returns true even if the passed object is
	  not formally array but appears to be array-like (i.e. implements Ember.Array)
	
	      Ember.isArray(); // false
	      Ember.isArray([]); // true
	      Ember.isArray( Ember.ArrayProxy.create({ content: [] }) ); // true
	
	  @method isArray
	  @for Ember
	  @param {Object} obj The object to test
	  @return {Boolean}
	*/
	Ember.isArray = function(obj) {
	  if (!obj || obj.setInterval) { return false; }
	  if (Array.isArray && Array.isArray(obj)) { return true; }
	  if (Ember.Array && Ember.Array.detect(obj)) { return true; }
	  if ((obj.length !== undefined) && 'object'===typeof obj) { return true; }
	  return false;
	};
	
	/**
	  Forces the passed object to be part of an array.  If the object is already
	  an array or array-like, returns the object.  Otherwise adds the object to
	  an array.  If obj is null or undefined, returns an empty array.
	
	      Ember.makeArray();          => []
	      Ember.makeArray(null);      => []
	      Ember.makeArray(undefined); => []
	      Ember.makeArray('lindsay'); => ['lindsay']
	      Ember.makeArray([1,2,42]);  => [1,2,42]
	
	      var controller = Ember.ArrayProxy.create({ content: [] });
	      Ember.makeArray(controller) === controller;   => true
	
	  @method makeArray
	  @for Ember
	  @param {Object} obj the object
	  @return {Array}
	*/
	Ember.makeArray = function(obj) {
	  if (obj === null || obj === undefined) { return []; }
	  return Ember.isArray(obj) ? obj : [obj];
	};
	
	function canInvoke(obj, methodName) {
	  return !!(obj && typeof obj[methodName] === 'function');
	}
	
	/**
	  Checks to see if the `methodName` exists on the `obj`.
	
	  @method canInvoke
	  @for Ember
	  @param {Object} obj The object to check for the method
	  @param {String} methodName The method name to check for
	*/
	Ember.canInvoke = canInvoke;
	
	/**
	  Checks to see if the `methodName` exists on the `obj`,
	  and if it does, invokes it with the arguments passed.
	
	  @method tryInvoke
	  @for Ember
	  @param {Object} obj The object to check for the method
	  @param {String} methodName The method name to check for
	  @param {Array} [args] The arguments to pass to the method
	  @return {anything} the return value of the invoked method or undefined if it cannot be invoked
	*/
	Ember.tryInvoke = function(obj, methodName, args) {
	  if (canInvoke(obj, methodName)) {
	    return obj[methodName].apply(obj, args || []);
	  }
	};
	
	})();
	
	
	
	(function() {
	/**
	@module ember-metal
	*/
	
	/*
	  JavaScript (before ES6) does not have a Map implementation. Objects,
	  which are often used as dictionaries, may only have Strings as keys.
	
	  Because Ember has a way to get a unique identifier for every object
	  via `Ember.guidFor`, we can implement a performant Map with arbitrary
	  keys. Because it is commonly used in low-level bookkeeping, Map is
	  implemented as a pure JavaScript object for performance.
	
	  This implementation follows the current iteration of the ES6 proposal
	  for maps (http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets),
	  with two exceptions. First, because we need our implementation to be
	  pleasant on older browsers, we do not use the `delete` name (using
	  `remove` instead). Second, as we do not have the luxury of in-VM
	  iteration, we implement a forEach method for iteration.
	
	  Map is mocked out to look like an Ember object, so you can do
	  `Ember.Map.create()` for symmetry with other Ember classes.
	*/
	var guidFor = Ember.guidFor,
	    indexOf = Ember.ArrayPolyfills.indexOf;
	
	var copy = function(obj) {
	  var output = {};
	
	  for (var prop in obj) {
	    if (obj.hasOwnProperty(prop)) { output[prop] = obj[prop]; }
	  }
	
	  return output;
	};
	
	var copyMap = function(original, newObject) {
	  var keys = original.keys.copy(),
	      values = copy(original.values);
	
	  newObject.keys = keys;
	  newObject.values = values;
	
	  return newObject;
	};
	
	/**
	  This class is used internally by Ember.js and Ember Data.
	  Please do not use it at this time. We plan to clean it up
	  and add many tests soon.
	
	  @class OrderedSet
	  @namespace Ember
	  @constructor
	  @private
	*/
	var OrderedSet = Ember.OrderedSet = function() {
	  this.clear();
	};
	
	/**
	  @method create
	  @static
	  @return {Ember.OrderedSet}
	*/
	OrderedSet.create = function() {
	  return new OrderedSet();
	};
	
	
	OrderedSet.prototype = {
	  /**
	    @method clear
	  */
	  clear: function() {
	    this.presenceSet = {};
	    this.list = [];
	  },
	
	  /**
	    @method add
	    @param obj
	  */
	  add: function(obj) {
	    var guid = guidFor(obj),
	        presenceSet = this.presenceSet,
	        list = this.list;
	
	    if (guid in presenceSet) { return; }
	
	    presenceSet[guid] = true;
	    list.push(obj);
	  },
	
	  /**
	    @method remove
	    @param obj
	  */
	  remove: function(obj) {
	    var guid = guidFor(obj),
	        presenceSet = this.presenceSet,
	        list = this.list;
	
	    delete presenceSet[guid];
	
	    var index = indexOf.call(list, obj);
	    if (index > -1) {
	      list.splice(index, 1);
	    }
	  },
	
	  /**
	    @method isEmpty
	    @return {Boolean}
	  */
	  isEmpty: function() {
	    return this.list.length === 0;
	  },
	
	  /**
	    @method has
	    @param obj
	    @return {Boolean}
	  */
	  has: function(obj) {
	    var guid = guidFor(obj),
	        presenceSet = this.presenceSet;
	
	    return guid in presenceSet;
	  },
	
	  /**
	    @method forEach
	    @param {Function} function
	    @param target
	  */
	  forEach: function(fn, self) {
	    // allow mutation during iteration
	    var list = this.list.slice();
	
	    for (var i = 0, j = list.length; i < j; i++) {
	      fn.call(self, list[i]);
	    }
	  },
	
	  /**
	    @method toArray
	    @return {Array}
	  */
	  toArray: function() {
	    return this.list.slice();
	  },
	
	  /**
	    @method copy
	    @return {Ember.OrderedSet}
	  */
	  copy: function() {
	    var set = new OrderedSet();
	
	    set.presenceSet = copy(this.presenceSet);
	    set.list = this.list.slice();
	
	    return set;
	  }
	};
	
	/**
	  A Map stores values indexed by keys. Unlike JavaScript's
	  default Objects, the keys of a Map can be any JavaScript
	  object.
	
	  Internally, a Map has two data structures:
	
	    `keys`: an OrderedSet of all of the existing keys
	    `values`: a JavaScript Object indexed by the
	      Ember.guidFor(key)
	
	  When a key/value pair is added for the first time, we
	  add the key to the `keys` OrderedSet, and create or
	  replace an entry in `values`. When an entry is deleted,
	  we delete its entry in `keys` and `values`.
	
	  @class Map
	  @namespace Ember
	  @private
	  @constructor
	*/
	var Map = Ember.Map = function() {
	  this.keys = Ember.OrderedSet.create();
	  this.values = {};
	};
	
	/**
	  @method create
	  @static
	*/
	Map.create = function() {
	  return new Map();
	};
	
	Map.prototype = {
	  /**
	    Retrieve the value associated with a given key.
	
	    @method get
	    @param {anything} key
	    @return {anything} the value associated with the key, or undefined
	  */
	  get: function(key) {
	    var values = this.values,
	        guid = guidFor(key);
	
	    return values[guid];
	  },
	
	  /**
	    Adds a value to the map. If a value for the given key has already been
	    provided, the new value will replace the old value.
	
	    @method set
	    @param {anything} key
	    @param {anything} value
	  */
	  set: function(key, value) {
	    var keys = this.keys,
	        values = this.values,
	        guid = guidFor(key);
	
	    keys.add(key);
	    values[guid] = value;
	  },
	
	  /**
	    Removes a value from the map for an associated key.
	
	    @method remove
	    @param {anything} key
	    @return {Boolean} true if an item was removed, false otherwise
	  */
	  remove: function(key) {
	    // don't use ES6 "delete" because it will be annoying
	    // to use in browsers that are not ES6 friendly;
	    var keys = this.keys,
	        values = this.values,
	        guid = guidFor(key),
	        value;
	
	    if (values.hasOwnProperty(guid)) {
	      keys.remove(key);
	      value = values[guid];
	      delete values[guid];
	      return true;
	    } else {
	      return false;
	    }
	  },
	
	  /**
	    Check whether a key is present.
	
	    @method has
	    @param {anything} key
	    @return {Boolean} true if the item was present, false otherwise
	  */
	  has: function(key) {
	    var values = this.values,
	        guid = guidFor(key);
	
	    return values.hasOwnProperty(guid);
	  },
	
	  /**
	    Iterate over all the keys and values. Calls the function once
	    for each key, passing in the key and value, in that order.
	
	    The keys are guaranteed to be iterated over in insertion order.
	
	    @method forEach
	    @param {Function} callback
	    @param {anything} self if passed, the `this` value inside the
	      callback. By default, `this` is the map.
	  */
	  forEach: function(callback, self) {
	    var keys = this.keys,
	        values = this.values;
	
	    keys.forEach(function(key) {
	      var guid = guidFor(key);
	      callback.call(self, key, values[guid]);
	    });
	  },
	
	  /**
	    @method copy
	    @return {Ember.Map}
	  */
	  copy: function() {
	    return copyMap(this, new Map());
	  }
	};
	
	/**
	  @class MapWithDefault
	  @namespace Ember
	  @extends Ember.Map
	  @private
	  @constructor
	  @param [options]
	    @param {anything} [options.defaultValue]
	*/
	var MapWithDefault = Ember.MapWithDefault = function(options) {
	  Map.call(this);
	  this.defaultValue = options.defaultValue;
	};
	
	/**
	  @method create
	  @static
	  @param [options]
	    @param {anything} [options.defaultValue]
	  @return {Ember.MapWithDefault|Ember.Map} If options are passed, returns Ember.MapWithDefault otherwise returns Ember.Map
	*/
	MapWithDefault.create = function(options) {
	  if (options) {
	    return new MapWithDefault(options);
	  } else {
	    return new Map();
	  }
	};
	
	MapWithDefault.prototype = Ember.create(Map.prototype);
	
	/**
	  Retrieve the value associated with a given key.
	
	  @method get
	  @param {anything} key
	  @return {anything} the value associated with the key, or the default value
	*/
	MapWithDefault.prototype.get = function(key) {
	  var hasValue = this.has(key);
	
	  if (hasValue) {
	    return Map.prototype.get.call(this, key);
	  } else {
	    var defaultValue = this.defaultValue(key);
	    this.set(key, defaultValue);
	    return defaultValue;
	  }
	};
	
	/**
	  @method copy
	  @return {Ember.MapWithDefault}
	*/
	MapWithDefault.prototype.copy = function() {
	  return copyMap(this, new MapWithDefault({
	    defaultValue: this.defaultValue
	  }));
	};
	
	})();
	
	
	
	(function() {
	/**
	@module ember-metal
	*/
	
	var META_KEY = Ember.META_KEY, get, set;
	
	var MANDATORY_SETTER = Ember.ENV.MANDATORY_SETTER;
	
	var IS_GLOBAL = /^([A-Z$]|([0-9][A-Z$]))/;
	var IS_GLOBAL_PATH = /^([A-Z$]|([0-9][A-Z$])).*[\.\*]/;
	var HAS_THIS  = /^this[\.\*]/;
	var FIRST_KEY = /^([^\.\*]+)/;
	
	// ..........................................................
	// GET AND SET
	//
	// If we are on a platform that supports accessors we can get use those.
	// Otherwise simulate accessors by looking up the property directly on the
	// object.
	
	/**
	  Gets the value of a property on an object.  If the property is computed,
	  the function will be invoked.  If the property is not defined but the
	  object implements the unknownProperty() method then that will be invoked.
	
	  If you plan to run on IE8 and older browsers then you should use this
	  method anytime you want to retrieve a property on an object that you don't
	  know for sure is private.  (My convention only properties beginning with
	  an underscore '_' are considered private.)
	
	  On all newer browsers, you only need to use this method to retrieve
	  properties if the property might not be defined on the object and you want
	  to respect the unknownProperty() handler.  Otherwise you can ignore this
	  method.
	
	  Note that if the obj itself is null, this method will simply return
	  undefined.
	
	  @method get
	  @for Ember
	  @param {Object} obj The object to retrieve from.
	  @param {String} keyName The property key to retrieve
	  @return {Object} the property value or null.
	*/
	get = function get(obj, keyName) {
	  // Helpers that operate with 'this' within an #each
	  if (keyName === '') {
	    return obj;
	  }
	
	  if (!keyName && 'string'===typeof obj) {
	    keyName = obj;
	    obj = null;
	  }
	
	  if (!obj || keyName.indexOf('.') !== -1) {
	    return getPath(obj, keyName);
	  }
	
	  Ember.assert("You need to provide an object and key to `get`.", !!obj && keyName);
	
	  var meta = obj[META_KEY], desc = meta && meta.descs[keyName], ret;
	  if (desc) {
	    return desc.get(obj, keyName);
	  } else {
	    if (MANDATORY_SETTER && meta && meta.watching[keyName] > 0) {
	      ret = meta.values[keyName];
	    } else {
	      ret = obj[keyName];
	    }
	
	    if (ret === undefined &&
	        'object' === typeof obj && !(keyName in obj) && 'function' === typeof obj.unknownProperty) {
	      return obj.unknownProperty(keyName);
	    }
	
	    return ret;
	  }
	};
	
	/**
	  Sets the value of a property on an object, respecting computed properties
	  and notifying observers and other listeners of the change.  If the
	  property is not defined but the object implements the unknownProperty()
	  method then that will be invoked as well.
	
	  If you plan to run on IE8 and older browsers then you should use this
	  method anytime you want to set a property on an object that you don't
	  know for sure is private.  (My convention only properties beginning with
	  an underscore '_' are considered private.)
	
	  On all newer browsers, you only need to use this method to set
	  properties if the property might not be defined on the object and you want
	  to respect the unknownProperty() handler.  Otherwise you can ignore this
	  method.
	
	  @method set
	  @for Ember
	  @param {Object} obj The object to modify.
	  @param {String} keyName The property key to set
	  @param {Object} value The value to set
	  @return {Object} the passed value.
	*/
	set = function set(obj, keyName, value, tolerant) {
	  if (typeof obj === 'string') {
	    Ember.assert("Path '" + obj + "' must be global if no obj is given.", IS_GLOBAL.test(obj));
	    value = keyName;
	    keyName = obj;
	    obj = null;
	  }
	
	  if (!obj || keyName.indexOf('.') !== -1) {
	    return setPath(obj, keyName, value, tolerant);
	  }
	
	  Ember.assert("You need to provide an object and key to `set`.", !!obj && keyName !== undefined);
	  Ember.assert('calling set on destroyed object', !obj.isDestroyed);
	
	  var meta = obj[META_KEY], desc = meta && meta.descs[keyName],
	      isUnknown, currentValue;
	  if (desc) {
	    desc.set(obj, keyName, value);
	  }
	  else {
	    isUnknown = 'object' === typeof obj && !(keyName in obj);
	
	    // setUnknownProperty is called if `obj` is an object,
	    // the property does not already exist, and the
	    // `setUnknownProperty` method exists on the object
	    if (isUnknown && 'function' === typeof obj.setUnknownProperty) {
	      obj.setUnknownProperty(keyName, value);
	    } else if (meta && meta.watching[keyName] > 0) {
	      if (MANDATORY_SETTER) {
	        currentValue = meta.values[keyName];
	      } else {
	        currentValue = obj[keyName];
	      }
	      // only trigger a change if the value has changed
	      if (value !== currentValue) {
	        Ember.propertyWillChange(obj, keyName);
	        if (MANDATORY_SETTER) {
	          if (currentValue === undefined && !(keyName in obj)) {
	            Ember.defineProperty(obj, keyName, null, value); // setup mandatory setter
	          } else {
	            meta.values[keyName] = value;
	          }
	        } else {
	          obj[keyName] = value;
	        }
	        Ember.propertyDidChange(obj, keyName);
	      }
	    } else {
	      obj[keyName] = value;
	    }
	  }
	  return value;
	};
	
	// Currently used only by Ember Data tests
	if (Ember.config.overrideAccessors) {
	  Ember.get = get;
	  Ember.set = set;
	  Ember.config.overrideAccessors();
	  get = Ember.get;
	  set = Ember.set;
	}
	
	function firstKey(path) {
	  return path.match(FIRST_KEY)[0];
	}
	
	// assumes path is already normalized
	function normalizeTuple(target, path) {
	  var hasThis  = HAS_THIS.test(path),
	      isGlobal = !hasThis && IS_GLOBAL_PATH.test(path),
	      key;
	
	  if (!target || isGlobal) target = Ember.lookup;
	  if (hasThis) path = path.slice(5);
	
	  if (target === Ember.lookup) {
	    key = firstKey(path);
	    target = get(target, key);
	    path   = path.slice(key.length+1);
	  }
	
	  // must return some kind of path to be valid else other things will break.
	  if (!path || path.length===0) throw new Error('Invalid Path');
	
	  return [ target, path ];
	}
	
	function getPath(root, path) {
	  var hasThis, parts, tuple, idx, len;
	
	  // If there is no root and path is a key name, return that
	  // property from the global object.
	  // E.g. get('Ember') -> Ember
	  if (root === null && path.indexOf('.') === -1) { return get(Ember.lookup, path); }
	
	  // detect complicated paths and normalize them
	  hasThis  = HAS_THIS.test(path);
	
	  if (!root || hasThis) {
	    tuple = normalizeTuple(root, path);
	    root = tuple[0];
	    path = tuple[1];
	    tuple.length = 0;
	  }
	
	  parts = path.split(".");
	  len = parts.length;
	  for (idx=0; root && idx<len; idx++) {
	    root = get(root, parts[idx], true);
	    if (root && root.isDestroyed) { return undefined; }
	  }
	  return root;
	}
	
	function setPath(root, path, value, tolerant) {
	  var keyName;
	
	  // get the last part of the path
	  keyName = path.slice(path.lastIndexOf('.') + 1);
	
	  // get the first part of the part
	  path    = path.slice(0, path.length-(keyName.length+1));
	
	  // unless the path is this, look up the first part to
	  // get the root
	  if (path !== 'this') {
	    root = getPath(root, path);
	  }
	
	  if (!keyName || keyName.length === 0) {
	    throw new Error('You passed an empty path');
	  }
	
	  if (!root) {
	    if (tolerant) { return; }
	    else { throw new Error('Object in path '+path+' could not be found or was destroyed.'); }
	  }
	
	  return set(root, keyName, value);
	}
	
	/**
	  @private
	
	  Normalizes a target/path pair to reflect that actual target/path that should
	  be observed, etc.  This takes into account passing in global property
	  paths (i.e. a path beginning with a captial letter not defined on the
	  target) and * separators.
	
	  @method normalizeTuple
	  @for Ember
	  @param {Object} target The current target.  May be null.
	  @param {String} path A path on the target or a global property path.
	  @return {Array} a temporary array with the normalized target/path pair.
	*/
	Ember.normalizeTuple = function(target, path) {
	  return normalizeTuple(target, path);
	};
	
	Ember.getWithDefault = function(root, key, defaultValue) {
	  var value = get(root, key);
	
	  if (value === undefined) { return defaultValue; }
	  return value;
	};
	
	
	Ember.get = get;
	Ember.getPath = Ember.deprecateFunc('getPath is deprecated since get now supports paths', Ember.get);
	
	Ember.set = set;
	Ember.setPath = Ember.deprecateFunc('setPath is deprecated since set now supports paths', Ember.set);
	
	/**
	  Error-tolerant form of Ember.set. Will not blow up if any part of the
	  chain is undefined, null, or destroyed.
	
	  This is primarily used when syncing bindings, which may try to update after
	  an object has been destroyed.
	
	  @method trySet
	  @for Ember
	  @param {Object} obj The object to modify.
	  @param {String} keyName The property key to set
	  @param {Object} value The value to set
	*/
	Ember.trySet = function(root, path, value) {
	  return set(root, path, value, true);
	};
	Ember.trySetPath = Ember.deprecateFunc('trySetPath has been renamed to trySet', Ember.trySet);
	
	/**
	  Returns true if the provided path is global (e.g., "MyApp.fooController.bar")
	  instead of local ("foo.bar.baz").
	
	  @method isGlobalPath
	  @for Ember
	  @private
	  @param {String} path
	  @return Boolean
	*/
	Ember.isGlobalPath = function(path) {
	  return IS_GLOBAL.test(path);
	};
	
	
	})();
	
	
	
	(function() {
	/**
	@module ember-metal
	*/
	
	var GUID_KEY = Ember.GUID_KEY,
	    META_KEY = Ember.META_KEY,
	    EMPTY_META = Ember.EMPTY_META,
	    metaFor = Ember.meta,
	    o_create = Ember.create,
	    objectDefineProperty = Ember.platform.defineProperty;
	
	var MANDATORY_SETTER = Ember.ENV.MANDATORY_SETTER;
	
	// ..........................................................
	// DESCRIPTOR
	//
	
	/**
	  Objects of this type can implement an interface to responds requests to
	  get and set.  The default implementation handles simple properties.
	
	  You generally won't need to create or subclass this directly.
	
	  @class Descriptor
	  @namespace Ember
	  @private
	  @constructor
	*/
	var Descriptor = Ember.Descriptor = function() {};
	
	// ..........................................................
	// DEFINING PROPERTIES API
	//
	
	/**
	  @private
	
	  NOTE: This is a low-level method used by other parts of the API.  You almost
	  never want to call this method directly.  Instead you should use Ember.mixin()
	  to define new properties.
	
	  Defines a property on an object.  This method works much like the ES5
	  Object.defineProperty() method except that it can also accept computed
	  properties and other special descriptors.
	
	  Normally this method takes only three parameters.  However if you pass an
	  instance of Ember.Descriptor as the third param then you can pass an optional
	  value as the fourth parameter.  This is often more efficient than creating
	  new descriptor hashes for each property.
	
	  ## Examples
	
	      // ES5 compatible mode
	      Ember.defineProperty(contact, 'firstName', {
	        writable: true,
	        configurable: false,
	        enumerable: true,
	        value: 'Charles'
	      });
	
	      // define a simple property
	      Ember.defineProperty(contact, 'lastName', undefined, 'Jolley');
	
	      // define a computed property
	      Ember.defineProperty(contact, 'fullName', Ember.computed(function() {
	        return this.firstName+' '+this.lastName;
	      }).property('firstName', 'lastName'));
	
	  @method defineProperty
	  @for Ember
	  @param {Object} obj the object to define this property on. This may be a prototype.
	  @param {String} keyName the name of the property
	  @param {Ember.Descriptor} [desc] an instance of Ember.Descriptor (typically a
	    computed property) or an ES5 descriptor.
	    You must provide this or `data` but not both.
	  @param {anything} [data] something other than a descriptor, that will
	    become the explicit value of this property.
	*/
	Ember.defineProperty = function(obj, keyName, desc, data, meta) {
	  var descs, existingDesc, watching, value;
	
	  if (!meta) meta = metaFor(obj);
	  descs = meta.descs;
	  existingDesc = meta.descs[keyName];
	  watching = meta.watching[keyName] > 0;
	
	  if (existingDesc instanceof Ember.Descriptor) {
	    existingDesc.teardown(obj, keyName);
	  }
	
	  if (desc instanceof Ember.Descriptor) {
	    value = desc;
	
	    descs[keyName] = desc;
	    if (MANDATORY_SETTER && watching) {
	      objectDefineProperty(obj, keyName, {
	        configurable: true,
	        enumerable: true,
	        writable: true,
	        value: undefined // make enumerable
	      });
	    } else {
	      obj[keyName] = undefined; // make enumerable
	    }
	    desc.setup(obj, keyName);
	  } else {
	    descs[keyName] = undefined; // shadow descriptor in proto
	    if (desc == null) {
	      value = data;
	
	      if (MANDATORY_SETTER && watching) {
	        meta.values[keyName] = data;
	        objectDefineProperty(obj, keyName, {
	          configurable: true,
	          enumerable: true,
	          set: function() {
	            Ember.assert('Must use Ember.set() to access this property', false);
	          },
	          get: function() {
	            var meta = this[META_KEY];
	            return meta && meta.values[keyName];
	          }
	        });
	      } else {
	        obj[keyName] = data;
	      }
	    } else {
	      value = desc;
	
	      // compatibility with ES5
	      objectDefineProperty(obj, keyName, desc);
	    }
	  }
	
	  // if key is being watched, override chains that
	  // were initialized with the prototype
	  if (watching) { Ember.overrideChains(obj, keyName, meta); }
	
	  // The `value` passed to the `didDefineProperty` hook is
	  // either the descriptor or data, whichever was passed.
	  if (obj.didDefineProperty) { obj.didDefineProperty(obj, keyName, value); }
	
	  return this;
	};
	
	
	})();
	
	
	
	(function() {
	/**
	@module ember-metal
	*/
	
	var AFTER_OBSERVERS = ':change';
	var BEFORE_OBSERVERS = ':before';
	
	var guidFor = Ember.guidFor;
	
	var deferred = 0;
	
	/*
	  this.observerSet = {
	    [senderGuid]: { // variable name: `keySet`
	      [keyName]: listIndex
	    }
	  },
	  this.observers = [
	    {
	      sender: obj,
	      keyName: keyName,
	      eventName: eventName,
	      listeners: {
	        [targetGuid]: {        // variable name: `actionSet`
	          [methodGuid]: {      // variable name: `action`
	            target: [Object object],
	            method: [Function function]
	          }
	        }
	      }
	    },
	    ...
	  ]
	*/
	function ObserverSet() {
	  this.clear();
	}
	
	ObserverSet.prototype.add = function(sender, keyName, eventName) {
	  var observerSet = this.observerSet,
	      observers = this.observers,
	      senderGuid = Ember.guidFor(sender),
	      keySet = observerSet[senderGuid],
	      index;
	
	  if (!keySet) {
	    observerSet[senderGuid] = keySet = {};
	  }
	  index = keySet[keyName];
	  if (index === undefined) {
	    index = observers.push({
	      sender: sender,
	      keyName: keyName,
	      eventName: eventName,
	      listeners: {}
	    }) - 1;
	    keySet[keyName] = index;
	  }
	  return observers[index].listeners;
	};
	
	ObserverSet.prototype.flush = function() {
	  var observers = this.observers, i, len, observer, sender;
	  this.clear();
	  for (i=0, len=observers.length; i < len; ++i) {
	    observer = observers[i];
	    sender = observer.sender;
	    if (sender.isDestroyed) { continue; }
	    Ember.sendEvent(sender, observer.eventName, [sender, observer.keyName], observer.listeners);
	  }
	};
	
	ObserverSet.prototype.clear = function() {
	  this.observerSet = {};
	  this.observers = [];
	};
	
	var beforeObserverSet = new ObserverSet(), observerSet = new ObserverSet();
	
	/**
	  @method beginPropertyChanges
	  @chainable
	*/
	Ember.beginPropertyChanges = function() {
	  deferred++;
	};
	
	/**
	  @method endPropertyChanges
	*/
	Ember.endPropertyChanges = function() {
	  deferred--;
	  if (deferred<=0) {
	    beforeObserverSet.clear();
	    observerSet.flush();
	  }
	};
	
	/**
	  Make a series of property changes together in an
	  exception-safe way.
	
	      Ember.changeProperties(function() {
	        obj1.set('foo', mayBlowUpWhenSet);
	        obj2.set('bar', baz);
	      });
	
	  @method changeProperties
	  @param {Function} callback
	  @param [binding]
	*/
	Ember.changeProperties = function(cb, binding){
	  Ember.beginPropertyChanges();
	  try {
	    cb.call(binding);
	  } finally {
	    Ember.endPropertyChanges();
	  }
	};
	
	/**
	  Set a list of properties on an object. These properties are set inside
	  a single `beginPropertyChanges` and `endPropertyChanges` batch, so
	  observers will be buffered.
	
	  @method setProperties
	  @param target
	  @param {Hash} properties
	  @return target
	*/
	Ember.setProperties = function(self, hash) {
	  Ember.changeProperties(function(){
	    for(var prop in hash) {
	      if (hash.hasOwnProperty(prop)) Ember.set(self, prop, hash[prop]);
	    }
	  });
	  return self;
	};
	
	
	function changeEvent(keyName) {
	  return keyName+AFTER_OBSERVERS;
	}
	
	function beforeEvent(keyName) {
	  return keyName+BEFORE_OBSERVERS;
	}
	
	/**
	  @method addObserver
	  @param obj
	  @param {String} path
	  @param {Object|Function} targetOrMethod
	  @param {Function|String} [method]
	*/
	Ember.addObserver = function(obj, path, target, method) {
	  Ember.addListener(obj, changeEvent(path), target, method);
	  Ember.watch(obj, path);
	  return this;
	};
	
	Ember.observersFor = function(obj, path) {
	  return Ember.listenersFor(obj, changeEvent(path));
	};
	
	/**
	  @method removeObserver
	  @param obj
	  @param {String} path
	  @param {Object|Function} targetOrMethod
	  @param {Function|String} [method]
	*/
	Ember.removeObserver = function(obj, path, target, method) {
	  Ember.unwatch(obj, path);
	  Ember.removeListener(obj, changeEvent(path), target, method);
	  return this;
	};
	
	/**
	  @method addBeforeObserver
	  @param obj
	  @param {String} path
	  @param {Object|Function} targetOrMethod
	  @param {Function|String} [method]
	*/
	Ember.addBeforeObserver = function(obj, path, target, method) {
	  Ember.addListener(obj, beforeEvent(path), target, method);
	  Ember.watch(obj, path);
	  return this;
	};
	
	// Suspend observer during callback.
	//
	// This should only be used by the target of the observer
	// while it is setting the observed path.
	Ember._suspendBeforeObserver = function(obj, path, target, method, callback) {
	  return Ember._suspendListener(obj, beforeEvent(path), target, method, callback);
	};
	
	Ember._suspendObserver = function(obj, path, target, method, callback) {
	  return Ember._suspendListener(obj, changeEvent(path), target, method, callback);
	};
	
	var map = Ember.ArrayPolyfills.map;
	
	Ember._suspendBeforeObservers = function(obj, paths, target, method, callback) {
	  var events = map.call(paths, beforeEvent);
	  return Ember._suspendListeners(obj, events, target, method, callback);
	};
	
	Ember._suspendObservers = function(obj, paths, target, method, callback) {
	  var events = map.call(paths, changeEvent);
	  return Ember._suspendListeners(obj, events, target, method, callback);
	};
	
	Ember.beforeObserversFor = function(obj, path) {
	  return Ember.listenersFor(obj, beforeEvent(path));
	};
	
	/**
	  @method removeBeforeObserver
	  @param obj
	  @param {String} path
	  @param {Object|Function} targetOrMethod
	  @param {Function|String} [method]
	*/
	Ember.removeBeforeObserver = function(obj, path, target, method) {
	  Ember.unwatch(obj, path);
	  Ember.removeListener(obj, beforeEvent(path), target, method);
	  return this;
	};
	
	Ember.notifyBeforeObservers = function(obj, keyName) {
	  if (obj.isDestroying) { return; }
	
	  var eventName = beforeEvent(keyName), listeners, listenersDiff;
	  if (deferred) {
	    listeners = beforeObserverSet.add(obj, keyName, eventName);
	    listenersDiff = Ember.listenersDiff(obj, eventName, listeners);
	    Ember.sendEvent(obj, eventName, [obj, keyName], listenersDiff);
	  } else {
	    Ember.sendEvent(obj, eventName, [obj, keyName]);
	  }
	};
	
	Ember.notifyObservers = function(obj, keyName) {
	  if (obj.isDestroying) { return; }
	
	  var eventName = changeEvent(keyName), listeners;
	  if (deferred) {
	    listeners = observerSet.add(obj, keyName, eventName);
	    Ember.listenersUnion(obj, eventName, listeners);
	  } else {
	    Ember.sendEvent(obj, eventName, [obj, keyName]);
	  }
	};
	
	})();
	
	
	
	(function() {
	/**
	@module ember-metal
	*/
	
	var guidFor = Ember.guidFor, // utils.js
	    metaFor = Ember.meta, // utils.js
	    get = Ember.get, // accessors.js
	    set = Ember.set, // accessors.js
	    normalizeTuple = Ember.normalizeTuple, // accessors.js
	    GUID_KEY = Ember.GUID_KEY, // utils.js
	    META_KEY = Ember.META_KEY, // utils.js
	    // circular reference observer depends on Ember.watch
	    // we should move change events to this file or its own property_events.js
	    notifyObservers = Ember.notifyObservers, // observer.js
	    forEach = Ember.ArrayPolyfills.forEach, // array.js
	    FIRST_KEY = /^([^\.\*]+)/,
	    IS_PATH = /[\.\*]/;
	
	var MANDATORY_SETTER = Ember.ENV.MANDATORY_SETTER,
	o_defineProperty = Ember.platform.defineProperty;
	
	function firstKey(path) {
	  return path.match(FIRST_KEY)[0];
	}
	
	// returns true if the passed path is just a keyName
	function isKeyName(path) {
	  return path==='*' || !IS_PATH.test(path);
	}
	
	// ..........................................................
	// DEPENDENT KEYS
	//
	
	var DEP_SKIP = { __emberproto__: true }; // skip some keys and toString
	
	function iterDeps(method, obj, depKey, seen, meta) {
	
	  var guid = guidFor(obj);
	  if (!seen[guid]) seen[guid] = {};
	  if (seen[guid][depKey]) return;
	  seen[guid][depKey] = true;
	
	  var deps = meta.deps;
	  deps = deps && deps[depKey];
	  if (deps) {
	    for(var key in deps) {
	      if (DEP_SKIP[key]) continue;
	      var desc = meta.descs[key];
	      if (desc && desc._suspended === obj) continue;
	      method(obj, key);
	    }
	  }
	}
	
	
	var WILL_SEEN, DID_SEEN;
	
	// called whenever a property is about to change to clear the cache of any dependent keys (and notify those properties of changes, etc...)
	function dependentKeysWillChange(obj, depKey, meta) {
	  if (obj.isDestroying) { return; }
	
	  var seen = WILL_SEEN, top = !seen;
	  if (top) { seen = WILL_SEEN = {}; }
	  iterDeps(propertyWillChange, obj, depKey, seen, meta);
	  if (top) { WILL_SEEN = null; }
	}
	
	// called whenever a property has just changed to update dependent keys
	function dependentKeysDidChange(obj, depKey, meta) {
	  if (obj.isDestroying) { return; }
	
	  var seen = DID_SEEN, top = !seen;
	  if (top) { seen = DID_SEEN = {}; }
	  iterDeps(propertyDidChange, obj, depKey, seen, meta);
	  if (top) { DID_SEEN = null; }
	}
	
	// ..........................................................
	// CHAIN
	//
	
	function addChainWatcher(obj, keyName, node) {
	  if (!obj || ('object' !== typeof obj)) return; // nothing to do
	  var m = metaFor(obj);
	  var nodes = m.chainWatchers;
	  if (!nodes || nodes.__emberproto__ !== obj) {
	    nodes = m.chainWatchers = { __emberproto__: obj };
	  }
	
	  if (!nodes[keyName]) { nodes[keyName] = {}; }
	  nodes[keyName][guidFor(node)] = node;
	  Ember.watch(obj, keyName);
	}
	
	function removeChainWatcher(obj, keyName, node) {
	  if (!obj || 'object' !== typeof obj) { return; } // nothing to do
	  var m = metaFor(obj, false),
	      nodes = m.chainWatchers;
	  if (!nodes || nodes.__emberproto__ !== obj) { return; } //nothing to do
	  if (nodes[keyName]) { delete nodes[keyName][guidFor(node)]; }
	  Ember.unwatch(obj, keyName);
	}
	
	var pendingQueue = [];
	
	// attempts to add the pendingQueue chains again.  If some of them end up
	// back in the queue and reschedule is true, schedules a timeout to try
	// again.
	function flushPendingChains() {
	  if (pendingQueue.length === 0) { return; } // nothing to do
	
	  var queue = pendingQueue;
	  pendingQueue = [];
	
	  forEach.call(queue, function(q) { q[0].add(q[1]); });
	
	  Ember.warn('Watching an undefined global, Ember expects watched globals to be setup by the time the run loop is flushed, check for typos', pendingQueue.length === 0);
	}
	
	function isProto(pvalue) {
	  return metaFor(pvalue, false).proto === pvalue;
	}
	
	// A ChainNode watches a single key on an object.  If you provide a starting
	// value for the key then the node won't actually watch it.  For a root node
	// pass null for parent and key and object for value.
	var ChainNode = function(parent, key, value, separator) {
	  var obj;
	  this._parent = parent;
	  this._key    = key;
	
	  // _watching is true when calling get(this._parent, this._key) will
	  // return the value of this node.
	  //
	  // It is false for the root of a chain (because we have no parent)
	  // and for global paths (because the parent node is the object with
	  // the observer on it)
	  this._watching = value===undefined;
	
	  this._value  = value;
	  this._separator = separator || '.';
	  this._paths = {};
	  if (this._watching) {
	    this._object = parent.value();
	    if (this._object) { addChainWatcher(this._object, this._key, this); }
	  }
	
	  // Special-case: the EachProxy relies on immediate evaluation to
	  // establish its observers.
	  //
	  // TODO: Replace this with an efficient callback that the EachProxy
	  // can implement.
	  if (this._parent && this._parent._key === '@each') {
	    this.value();
	  }
	};
	
	var ChainNodePrototype = ChainNode.prototype;
	
	ChainNodePrototype.value = function() {
	  if (this._value === undefined && this._watching) {
	    var obj = this._parent.value();
	    this._value = (obj && !isProto(obj)) ? get(obj, this._key) : undefined;
	  }
	  return this._value;
	};
	
	ChainNodePrototype.destroy = function() {
	  if (this._watching) {
	    var obj = this._object;
	    if (obj) { removeChainWatcher(obj, this._key, this); }
	    this._watching = false; // so future calls do nothing
	  }
	};
	
	// copies a top level object only
	ChainNodePrototype.copy = function(obj) {
	  var ret = new ChainNode(null, null, obj, this._separator),
	      paths = this._paths, path;
	  for (path in paths) {
	    if (paths[path] <= 0) { continue; } // this check will also catch non-number vals.
	    ret.add(path);
	  }
	  return ret;
	};
	
	// called on the root node of a chain to setup watchers on the specified
	// path.
	ChainNodePrototype.add = function(path) {
	  var obj, tuple, key, src, separator, paths;
	
	  paths = this._paths;
	  paths[path] = (paths[path] || 0) + 1;
	
	  obj = this.value();
	  tuple = normalizeTuple(obj, path);
	
	  // the path was a local path
	  if (tuple[0] && tuple[0] === obj) {
	    path = tuple[1];
	    key  = firstKey(path);
	    path = path.slice(key.length+1);
	
	  // global path, but object does not exist yet.
	  // put into a queue and try to connect later.
	  } else if (!tuple[0]) {
	    pendingQueue.push([this, path]);
	    tuple.length = 0;
	    return;
	
	  // global path, and object already exists
	  } else {
	    src  = tuple[0];
	    key  = path.slice(0, 0-(tuple[1].length+1));
	    separator = path.slice(key.length, key.length+1);
	    path = tuple[1];
	  }
	
	  tuple.length = 0;
	  this.chain(key, path, src, separator);
	};
	
	// called on the root node of a chain to teardown watcher on the specified
	// path
	ChainNodePrototype.remove = function(path) {
	  var obj, tuple, key, src, paths;
	
	  paths = this._paths;
	  if (paths[path] > 0) { paths[path]--; }
	
	  obj = this.value();
	  tuple = normalizeTuple(obj, path);
	  if (tuple[0] === obj) {
	    path = tuple[1];
	    key  = firstKey(path);
	    path = path.slice(key.length+1);
	  } else {
	    src  = tuple[0];
	    key  = path.slice(0, 0-(tuple[1].length+1));
	    path = tuple[1];
	  }
	
	  tuple.length = 0;
	  this.unchain(key, path);
	};
	
	ChainNodePrototype.count = 0;
	
	ChainNodePrototype.chain = function(key, path, src, separator) {
	  var chains = this._chains, node;
	  if (!chains) { chains = this._chains = {}; }
	
	  node = chains[key];
	  if (!node) { node = chains[key] = new ChainNode(this, key, src, separator); }
	  node.count++; // count chains...
	
	  // chain rest of path if there is one
	  if (path && path.length>0) {
	    key = firstKey(path);
	    path = path.slice(key.length+1);
	    node.chain(key, path); // NOTE: no src means it will observe changes...
	  }
	};
	
	ChainNodePrototype.unchain = function(key, path) {
	  var chains = this._chains, node = chains[key];
	
	  // unchain rest of path first...
	  if (path && path.length>1) {
	    key  = firstKey(path);
	    path = path.slice(key.length+1);
	    node.unchain(key, path);
	  }
	
	  // delete node if needed.
	  node.count--;
	  if (node.count<=0) {
	    delete chains[node._key];
	    node.destroy();
	  }
	
	};
	
	ChainNodePrototype.willChange = function() {
	  var chains = this._chains;
	  if (chains) {
	    for(var key in chains) {
	      if (!chains.hasOwnProperty(key)) { continue; }
	      chains[key].willChange();
	    }
	  }
	
	  if (this._parent) { this._parent.chainWillChange(this, this._key, 1); }
	};
	
	ChainNodePrototype.chainWillChange = function(chain, path, depth) {
	  if (this._key) { path = this._key + this._separator + path; }
	
	  if (this._parent) {
	    this._parent.chainWillChange(this, path, depth+1);
	  } else {
	    if (depth > 1) { Ember.propertyWillChange(this.value(), path); }
	    path = 'this.' + path;
	    if (this._paths[path] > 0) { Ember.propertyWillChange(this.value(), path); }
	  }
	};
	
	ChainNodePrototype.chainDidChange = function(chain, path, depth) {
	  if (this._key) { path = this._key + this._separator + path; }
	  if (this._parent) {
	    this._parent.chainDidChange(this, path, depth+1);
	  } else {
	    if (depth > 1) { Ember.propertyDidChange(this.value(), path); }
	    path = 'this.' + path;
	    if (this._paths[path] > 0) { Ember.propertyDidChange(this.value(), path); }
	  }
	};
	
	ChainNodePrototype.didChange = function(suppressEvent) {
	  // invalidate my own value first.
	  if (this._watching) {
	    var obj = this._parent.value();
	    if (obj !== this._object) {
	      removeChainWatcher(this._object, this._key, this);
	      this._object = obj;
	      addChainWatcher(obj, this._key, this);
	    }
	    this._value  = undefined;
	
	    // Special-case: the EachProxy relies on immediate evaluation to
	    // establish its observers.
	    if (this._parent && this._parent._key === '@each')
	      this.value();
	  }
	
	  // then notify chains...
	  var chains = this._chains;
	  if (chains) {
	    for(var key in chains) {
	      if (!chains.hasOwnProperty(key)) { continue; }
	      chains[key].didChange(suppressEvent);
	    }
	  }
	
	  if (suppressEvent) { return; }
	
	  // and finally tell parent about my path changing...
	  if (this._parent) { this._parent.chainDidChange(this, this._key, 1); }
	};
	
	// get the chains for the current object.  If the current object has
	// chains inherited from the proto they will be cloned and reconfigured for
	// the current object.
	function chainsFor(obj) {
	  var m = metaFor(obj), ret = m.chains;
	  if (!ret) {
	    ret = m.chains = new ChainNode(null, null, obj);
	  } else if (ret.value() !== obj) {
	    ret = m.chains = ret.copy(obj);
	  }
	  return ret;
	}
	
	function notifyChains(obj, m, keyName, methodName, arg) {
	  var nodes = m.chainWatchers;
	
	  if (!nodes || nodes.__emberproto__ !== obj) { return; } // nothing to do
	
	  nodes = nodes[keyName];
	  if (!nodes) { return; }
	
	  for(var key in nodes) {
	    if (!nodes.hasOwnProperty(key)) { continue; }
	    nodes[key][methodName](arg);
	  }
	}
	
	Ember.overrideChains = function(obj, keyName, m) {
	  notifyChains(obj, m, keyName, 'didChange', true);
	};
	
	function chainsWillChange(obj, keyName, m) {
	  notifyChains(obj, m, keyName, 'willChange');
	}
	
	function chainsDidChange(obj, keyName, m) {
	  notifyChains(obj, m, keyName, 'didChange');
	}
	
	// ..........................................................
	// WATCH
	//
	
	/**
	  @private
	
	  Starts watching a property on an object.  Whenever the property changes,
	  invokes Ember.propertyWillChange and Ember.propertyDidChange.  This is the
	  primitive used by observers and dependent keys; usually you will never call
	  this method directly but instead use higher level methods like
	  Ember.addObserver().
	
	  @method watch
	  @for Ember
	  @param obj
	  @param {String} keyName
	*/
	Ember.watch = function(obj, keyName) {
	  // can't watch length on Array - it is special...
	  if (keyName === 'length' && Ember.typeOf(obj) === 'array') { return this; }
	
	  var m = metaFor(obj), watching = m.watching, desc;
	
	  // activate watching first time
	  if (!watching[keyName]) {
	    watching[keyName] = 1;
	    if (isKeyName(keyName)) {
	      desc = m.descs[keyName];
	      if (desc && desc.willWatch) { desc.willWatch(obj, keyName); }
	
	      if ('function' === typeof obj.willWatchProperty) {
	        obj.willWatchProperty(keyName);
	      }
	
	      if (MANDATORY_SETTER && keyName in obj) {
	        m.values[keyName] = obj[keyName];
	        o_defineProperty(obj, keyName, {
	          configurable: true,
	          enumerable: true,
	          set: function() {
	            Ember.assert('Must use Ember.set() to access this property', false);
	          },
	          get: function() {
	            var meta = this[META_KEY];
	            return meta && meta.values[keyName];
	          }
	        });
	      }
	    } else {
	      chainsFor(obj).add(keyName);
	    }
	
	  }  else {
	    watching[keyName] = (watching[keyName] || 0) + 1;
	  }
	  return this;
	};
	
	Ember.isWatching = function isWatching(obj, key) {
	  var meta = obj[META_KEY];
	  return (meta && meta.watching[key]) > 0;
	};
	
	Ember.watch.flushPending = flushPendingChains;
	
	Ember.unwatch = function(obj, keyName) {
	  // can't watch length on Array - it is special...
	  if (keyName === 'length' && Ember.typeOf(obj) === 'array') { return this; }
	
	  var m = metaFor(obj), watching = m.watching, desc;
	
	  if (watching[keyName] === 1) {
	    watching[keyName] = 0;
	
	    if (isKeyName(keyName)) {
	      desc = m.descs[keyName];
	      if (desc && desc.didUnwatch) { desc.didUnwatch(obj, keyName); }
	
	      if ('function' === typeof obj.didUnwatchProperty) {
	        obj.didUnwatchProperty(keyName);
	      }
	
	      if (MANDATORY_SETTER && keyName in obj) {
	        o_defineProperty(obj, keyName, {
	          configurable: true,
	          enumerable: true,
	          writable: true,
	          value: m.values[keyName]
	        });
	        delete m.values[keyName];
	      }
	    } else {
	      chainsFor(obj).remove(keyName);
	    }
	
	  } else if (watching[keyName]>1) {
	    watching[keyName]--;
	  }
	
	  return this;
	};
	
	/**
	  @private
	
	  Call on an object when you first beget it from another object.  This will
	  setup any chained watchers on the object instance as needed.  This method is
	  safe to call multiple times.
	
	  @method rewatch
	  @for Ember
	  @param obj
	*/
	Ember.rewatch = function(obj) {
	  var m = metaFor(obj, false), chains = m.chains;
	
	  // make sure the object has its own guid.
	  if (GUID_KEY in obj && !obj.hasOwnProperty(GUID_KEY)) {
	    Ember.generateGuid(obj, 'ember');
	  }
	
	  // make sure any chained watchers update.
	  if (chains && chains.value() !== obj) {
	    m.chains = chains.copy(obj);
	  }
	
	  return this;
	};
	
	Ember.finishChains = function(obj) {
	  var m = metaFor(obj, false), chains = m.chains;
	  if (chains) {
	    if (chains.value() !== obj) {
	      m.chains = chains = chains.copy(obj);
	    }
	    chains.didChange(true);
	  }
	};
	
	// ..........................................................
	// PROPERTY CHANGES
	//
	
	/**
	  This function is called just before an object property is about to change.
	  It will notify any before observers and prepare caches among other things.
	
	  Normally you will not need to call this method directly but if for some
	  reason you can't directly watch a property you can invoke this method
	  manually along with `Ember.propertyDidChange()` which you should call just
	  after the property value changes.
	
	  @method propertyWillChange
	  @for Ember
	  @param {Object} obj The object with the property that will change
	  @param {String} keyName The property key (or path) that will change.
	  @return {void}
	*/
	function propertyWillChange(obj, keyName, value) {
	  var m = metaFor(obj, false),
	      watching = m.watching[keyName] > 0 || keyName === 'length',
	      proto = m.proto,
	      desc = m.descs[keyName];
	
	  if (!watching) { return; }
	  if (proto === obj) { return; }
	  if (desc && desc.willChange) { desc.willChange(obj, keyName); }
	  dependentKeysWillChange(obj, keyName, m);
	  chainsWillChange(obj, keyName, m);
	  Ember.notifyBeforeObservers(obj, keyName);
	}
	
	Ember.propertyWillChange = propertyWillChange;
	
	/**
	  This function is called just after an object property has changed.
	  It will notify any observers and clear caches among other things.
	
	  Normally you will not need to call this method directly but if for some
	  reason you can't directly watch a property you can invoke this method
	  manually along with `Ember.propertyWilLChange()` which you should call just
	  before the property value changes.
	
	  @method propertyDidChange
	  @for Ember
	  @param {Object} obj The object with the property that will change
	  @param {String} keyName The property key (or path) that will change.
	  @return {void}
	*/
	function propertyDidChange(obj, keyName) {
	  var m = metaFor(obj, false),
	      watching = m.watching[keyName] > 0 || keyName === 'length',
	      proto = m.proto,
	      desc = m.descs[keyName];
	
	  if (proto === obj) { return; }
	
	  // shouldn't this mean that we're watching this key?
	  if (desc && desc.didChange) { desc.didChange(obj, keyName); }
	  if (!watching && keyName !== 'length') { return; }
	
	  dependentKeysDidChange(obj, keyName, m);
	  chainsDidChange(obj, keyName, m);
	  Ember.notifyObservers(obj, keyName);
	}
	
	Ember.propertyDidChange = propertyDidChange;
	
	var NODE_STACK = [];
	
	/**
	  Tears down the meta on an object so that it can be garbage collected.
	  Multiple calls will have no effect.
	
	  @method destroy
	  @for Ember
	  @param {Object} obj  the object to destroy
	  @return {void}
	*/
	Ember.destroy = function (obj) {
	  var meta = obj[META_KEY], node, nodes, key, nodeObject;
	  if (meta) {
	    obj[META_KEY] = null;
	    // remove chainWatchers to remove circular references that would prevent GC
	    node = meta.chains;
	    if (node) {
	      NODE_STACK.push(node);
	      // process tree
	      while (NODE_STACK.length > 0) {
	        node = NODE_STACK.pop();
	        // push children
	        nodes = node._chains;
	        if (nodes) {
	          for (key in nodes) {
	            if (nodes.hasOwnProperty(key)) {
	              NODE_STACK.push(nodes[key]);
	            }
	          }
	        }
	        // remove chainWatcher in node object
	        if (node._watching) {
	          nodeObject = node._object;
	          if (nodeObject) {
	            removeChainWatcher(nodeObject, node._key, node);
	          }
	        }
	      }
	    }
	  }
	};
	
	})();
	
	
	
	(function() {
	/**
	@module ember-metal
	*/
	
	Ember.warn("The CP_DEFAULT_CACHEABLE flag has been removed and computed properties are always cached by default. Use `volatile` if you don't want caching.", Ember.ENV.CP_DEFAULT_CACHEABLE !== false);
	
	
	var get = Ember.get,
	    metaFor = Ember.meta,
	    guidFor = Ember.guidFor,
	    a_slice = [].slice,
	    o_create = Ember.create,
	    META_KEY = Ember.META_KEY,
	    watch = Ember.watch,
	    unwatch = Ember.unwatch;
	
	// ..........................................................
	// DEPENDENT KEYS
	//
	
	// data structure:
	//  meta.deps = {
	//   'depKey': {
	//     'keyName': count,
	//     __emberproto__: SRC_OBJ [to detect clones]
	//     },
	//   __emberproto__: SRC_OBJ
	//  }
	
	/*
	  This function returns a map of unique dependencies for a
	  given object and key.
	*/
	function keysForDep(obj, depsMeta, depKey) {
	  var keys = depsMeta[depKey];
	  if (!keys) {
	    // if there are no dependencies yet for a the given key
	    // create a new empty list of dependencies for the key
	    keys = depsMeta[depKey] = { __emberproto__: obj };
	  } else if (keys.__emberproto__ !== obj) {
	    // otherwise if the dependency list is inherited from
	    // a superclass, clone the hash
	    keys = depsMeta[depKey] = o_create(keys);
	    keys.__emberproto__ = obj;
	  }
	  return keys;
	}
	
	/* return obj[META_KEY].deps */
	function metaForDeps(obj, meta) {
	  var deps = meta.deps;
	  // If the current object has no dependencies...
	  if (!deps) {
	    // initialize the dependencies with a pointer back to
	    // the current object
	    deps = meta.deps = { __emberproto__: obj };
	  } else if (deps.__emberproto__ !== obj) {
	    // otherwise if the dependencies are inherited from the
	    // object's superclass, clone the deps
	    deps = meta.deps = o_create(deps);
	    deps.__emberproto__ = obj;
	  }
	  return deps;
	}
	
	function addDependentKeys(desc, obj, keyName, meta) {
	  // the descriptor has a list of dependent keys, so
	  // add all of its dependent keys.
	  var depKeys = desc._dependentKeys, depsMeta, idx, len, depKey, keys;
	  if (!depKeys) return;
	
	  depsMeta = metaForDeps(obj, meta);
	
	  for(idx = 0, len = depKeys.length; idx < len; idx++) {
	    depKey = depKeys[idx];
	    // Lookup keys meta for depKey
	    keys = keysForDep(obj, depsMeta, depKey);
	    // Increment the number of times depKey depends on keyName.
	    keys[keyName] = (keys[keyName] || 0) + 1;
	    // Watch the depKey
	    watch(obj, depKey);
	  }
	}
	
	function removeDependentKeys(desc, obj, keyName, meta) {
	  // the descriptor has a list of dependent keys, so
	  // add all of its dependent keys.
	  var depKeys = desc._dependentKeys, depsMeta, idx, len, depKey, keys;
	  if (!depKeys) return;
	
	  depsMeta = metaForDeps(obj, meta);
	
	  for(idx = 0, len = depKeys.length; idx < len; idx++) {
	    depKey = depKeys[idx];
	    // Lookup keys meta for depKey
	    keys = keysForDep(obj, depsMeta, depKey);
	    // Increment the number of times depKey depends on keyName.
	    keys[keyName] = (keys[keyName] || 0) - 1;
	    // Watch the depKey
	    unwatch(obj, depKey);
	  }
	}
	
	// ..........................................................
	// COMPUTED PROPERTY
	//
	
	/**
	  @class ComputedProperty
	  @namespace Ember
	  @extends Ember.Descriptor
	  @constructor
	*/
	function ComputedProperty(func, opts) {
	  this.func = func;
	  this._cacheable = (opts && opts.cacheable !== undefined) ? opts.cacheable : true;
	  this._dependentKeys = opts && opts.dependentKeys;
	}
	
	Ember.ComputedProperty = ComputedProperty;
	ComputedProperty.prototype = new Ember.Descriptor();
	
	var ComputedPropertyPrototype = ComputedProperty.prototype;
	
	/**
	  Call on a computed property to set it into cacheable mode.  When in this
	  mode the computed property will automatically cache the return value of
	  your function until one of the dependent keys changes.
	
	      MyApp.president = Ember.Object.create({
	        fullName: function() {
	          return this.get('firstName') + ' ' + this.get('lastName');
	
	          // After calculating the value of this function, Ember.js will
	          // return that value without re-executing this function until
	          // one of the dependent properties change.
	        }.property('firstName', 'lastName')
	      });
	
	  Properties are cacheable by default.
	
	  @method cacheable
	  @param {Boolean} aFlag optional set to false to disable caching
	  @chainable
	*/
	ComputedPropertyPrototype.cacheable = function(aFlag) {
	  this._cacheable = aFlag !== false;
	  return this;
	};
	
	/**
	  Call on a computed property to set it into non-cached mode.  When in this
	  mode the computed property will not automatically cache the return value.
	
	      MyApp.outsideService = Ember.Object.create({
	        value: function() {
	          return OutsideService.getValue();
	        }.property().volatile()
	      });
	
	  @method volatile
	  @chainable
	*/
	ComputedPropertyPrototype.volatile = function() {
	  return this.cacheable(false);
	};
	
	/**
	  Sets the dependent keys on this computed property.  Pass any number of
	  arguments containing key paths that this computed property depends on.
	
	      MyApp.president = Ember.Object.create({
	        fullName: Ember.computed(function() {
	          return this.get('firstName') + ' ' + this.get('lastName');
	
	          // Tell Ember.js that this computed property depends on firstName
	          // and lastName
	        }).property('firstName', 'lastName')
	      });
	
	  @method property
	  @param {String} path* zero or more property paths
	  @chainable
	*/
	ComputedPropertyPrototype.property = function() {
	  var args = [];
	  for (var i = 0, l = arguments.length; i < l; i++) {
	    args.push(arguments[i]);
	  }
	  this._dependentKeys = args;
	  return this;
	};
	
	/**
	  In some cases, you may want to annotate computed properties with additional
	  metadata about how they function or what values they operate on. For example,
	  computed property functions may close over variables that are then no longer
	  available for introspection.
	
	  You can pass a hash of these values to a computed property like this:
	
	      person: function() {
	        var personId = this.get('personId');
	        return App.Person.create({ id: personId });
	      }.property().meta({ type: App.Person })
	
	  The hash that you pass to the `meta()` function will be saved on the
	  computed property descriptor under the `_meta` key. Ember runtime
	  exposes a public API for retrieving these values from classes,
	  via the `metaForProperty()` function.
	
	  @method meta
	  @param {Hash} meta
	  @chainable
	*/
	
	ComputedPropertyPrototype.meta = function(meta) {
	  if (arguments.length === 0) {
	    return this._meta || {};
	  } else {
	    this._meta = meta;
	    return this;
	  }
	};
	
	/* impl descriptor API */
	ComputedPropertyPrototype.willWatch = function(obj, keyName) {
	  // watch already creates meta for this instance
	  var meta = obj[META_KEY];
	  Ember.assert('watch should have setup meta to be writable', meta.source === obj);
	  if (!(keyName in meta.cache)) {
	    addDependentKeys(this, obj, keyName, meta);
	  }
	};
	
	ComputedPropertyPrototype.didUnwatch = function(obj, keyName) {
	  var meta = obj[META_KEY];
	  Ember.assert('unwatch should have setup meta to be writable', meta.source === obj);
	  if (!(keyName in meta.cache)) {
	    // unwatch already creates meta for this instance
	    removeDependentKeys(this, obj, keyName, meta);
	  }
	};
	
	/* impl descriptor API */
	ComputedPropertyPrototype.didChange = function(obj, keyName) {
	  // _suspended is set via a CP.set to ensure we don't clear
	  // the cached value set by the setter
	  if (this._cacheable && this._suspended !== obj) {
	    var meta = metaFor(obj);
	    if (keyName in meta.cache) {
	      delete meta.cache[keyName];
	      if (!meta.watching[keyName]) {
	        removeDependentKeys(this, obj, keyName, meta);
	      }
	    }
	  }
	};
	
	/* impl descriptor API */
	ComputedPropertyPrototype.get = function(obj, keyName) {
	  var ret, cache, meta;
	  if (this._cacheable) {
	    meta = metaFor(obj);
	    cache = meta.cache;
	    if (keyName in cache) { return cache[keyName]; }
	    ret = cache[keyName] = this.func.call(obj, keyName);
	    if (!meta.watching[keyName]) {
	      addDependentKeys(this, obj, keyName, meta);
	    }
	  } else {
	    ret = this.func.call(obj, keyName);
	  }
	  return ret;
	};
	
	/* impl descriptor API */
	ComputedPropertyPrototype.set = function(obj, keyName, value) {
	  var cacheable = this._cacheable,
	      meta = metaFor(obj, cacheable),
	      watched = meta.watching[keyName],
	      oldSuspended = this._suspended,
	      hadCachedValue = false,
	      ret;
	  this._suspended = obj;
	  try {
	    ret = this.func.call(obj, keyName, value);
	
	    if (cacheable && keyName in meta.cache) {
	      if (meta.cache[keyName] === ret) {
	        return;
	      }
	      hadCachedValue = true;
	    }
	
	    if (watched) { Ember.propertyWillChange(obj, keyName); }
	
	    if (cacheable && hadCachedValue) {
	      delete meta.cache[keyName];
	    }
	
	    if (cacheable) {
	      if (!watched && !hadCachedValue) {
	        addDependentKeys(this, obj, keyName, meta);
	      }
	      meta.cache[keyName] = ret;
	    }
	
	    if (watched) { Ember.propertyDidChange(obj, keyName); }
	  } finally {
	    this._suspended = oldSuspended;
	  }
	  return ret;
	};
	
	/* called when property is defined */
	ComputedPropertyPrototype.setup = function(obj, keyName) {
	  var meta = obj[META_KEY];
	  if (meta && meta.watching[keyName]) {
	    addDependentKeys(this, obj, keyName, metaFor(obj));
	  }
	};
	
	/* called before property is overridden */
	ComputedPropertyPrototype.teardown = function(obj, keyName) {
	  var meta = metaFor(obj);
	
	  if (meta.watching[keyName] || keyName in meta.cache) {
	    removeDependentKeys(this, obj, keyName, meta);
	  }
	
	  if (this._cacheable) { delete meta.cache[keyName]; }
	
	  return null; // no value to restore
	};
	
	
	/**
	  This helper returns a new property descriptor that wraps the passed
	  computed property function.  You can use this helper to define properties
	  with mixins or via Ember.defineProperty().
	
	  The function you pass will be used to both get and set property values.
	  The function should accept two parameters, key and value.  If value is not
	  undefined you should set the value first.  In either case return the
	  current value of the property.
	
	  @method computed
	  @for Ember
	  @param {Function} func The computed property function.
	  @return {Ember.ComputedProperty} property descriptor instance
	*/
	Ember.computed = function(func) {
	  var args;
	
	  if (arguments.length > 1) {
	    args = a_slice.call(arguments, 0, -1);
	    func = a_slice.call(arguments, -1)[0];
	  }
	
	  var cp = new ComputedProperty(func);
	
	  if (args) {
	    cp.property.apply(cp, args);
	  }
	
	  return cp;
	};
	
	/**
	  Returns the cached value for a property, if one exists.
	  This can be useful for peeking at the value of a computed
	  property that is generated lazily, without accidentally causing
	  it to be created.
	
	  @method cacheFor
	  @for Ember
	  @param {Object} obj the object whose property you want to check
	  @param {String} key the name of the property whose cached value you want
	                      to return
	*/
	Ember.cacheFor = function cacheFor(obj, key) {
	  var cache = metaFor(obj, false).cache;
	
	  if (cache && key in cache) {
	    return cache[key];
	  }
	};
	
	/**
	  @method computed.not
	  @for Ember
	  @param {String} dependentKey
	*/
	Ember.computed.not = function(dependentKey) {
	  return Ember.computed(dependentKey, function(key) {
	    return !get(this, dependentKey);
	  });
	};
	
	/**
	  @method computed.empty
	  @for Ember
	  @param {String} dependentKey
	*/
	Ember.computed.empty = function(dependentKey) {
	  return Ember.computed(dependentKey, function(key) {
	    var val = get(this, dependentKey);
	    return val === undefined || val === null || val === '' || (Ember.isArray(val) && get(val, 'length') === 0);
	  });
	};
	
	/**
	  @method computed.bool
	  @for Ember
	  @param {String} dependentKey
	*/
	Ember.computed.bool = function(dependentKey) {
	  return Ember.computed(dependentKey, function(key) {
	    return !!get(this, dependentKey);
	  });
	};
	
	})();
	
	
	
	(function() {
	/**
	@module ember-metal
	*/
	
	var o_create = Ember.create,
	    meta = Ember.meta,
	    metaPath = Ember.metaPath,
	    guidFor = Ember.guidFor,
	    a_slice = [].slice;
	
	/*
	  The event system uses a series of nested hashes to store listeners on an
	  object. When a listener is registered, or when an event arrives, these
	  hashes are consulted to determine which target and action pair to invoke.
	
	  The hashes are stored in the object's meta hash, and look like this:
	
	      // Object's meta hash
	      {
	        listeners: {               // variable name: `listenerSet`
	          "foo:changed": {         // variable name: `targetSet`
	            [targetGuid]: {        // variable name: `actionSet`
	              [methodGuid]: {      // variable name: `action`
	                target: [Object object],
	                method: [Function function]
	              }
	            }
	          }
	        }
	      }
	
	*/
	
	// Gets the set of all actions, keyed on the guid of each action's
	// method property.
	function actionSetFor(obj, eventName, target, writable) {
	  return metaPath(obj, ['listeners', eventName, guidFor(target)], writable);
	}
	
	// Gets the set of all targets, keyed on the guid of each action's
	// target property.
	function targetSetFor(obj, eventName) {
	  var listenerSet = meta(obj, false).listeners;
	  if (!listenerSet) { return false; }
	
	  return listenerSet[eventName] || false;
	}
	
	// TODO: This knowledge should really be a part of the
	// meta system.
	var SKIP_PROPERTIES = { __ember_source__: true };
	
	function iterateSet(targetSet, callback) {
	  if (!targetSet) { return false; }
	  // Iterate through all elements of the target set
	  for(var targetGuid in targetSet) {
	    if (SKIP_PROPERTIES[targetGuid]) { continue; }
	
	    var actionSet = targetSet[targetGuid];
	    if (actionSet) {
	      // Iterate through the elements of the action set
	      for(var methodGuid in actionSet) {
	        if (SKIP_PROPERTIES[methodGuid]) { continue; }
	
	        var action = actionSet[methodGuid];
	        if (action) {
	          if (callback(action) === true) {
	            return true;
	          }
	        }
	      }
	    }
	  }
	  return false;
	}
	
	function invokeAction(action, params, sender) {
	  var method = action.method, target = action.target;
	  // If there is no target, the target is the object
	  // on which the event was fired.
	  if (!target) { target = sender; }
	  if ('string' === typeof method) { method = target[method]; }
	  if (params) {
	    method.apply(target, params);
	  } else {
	    method.apply(target);
	  }
	}
	
	function targetSetUnion(obj, eventName, targetSet) {
	  iterateSet(targetSetFor(obj, eventName), function (action) {
	    var targetGuid = guidFor(action.target),
	        methodGuid = guidFor(action.method),
	        actionSet = targetSet[targetGuid];
	    if (!actionSet) actionSet = targetSet[targetGuid] = {};
	    actionSet[methodGuid] = action;
	  });
	}
	
	function targetSetDiff(obj, eventName, targetSet) {
	  var diffTargetSet = {};
	  iterateSet(targetSetFor(obj, eventName), function (action) {
	    var targetGuid = guidFor(action.target),
	        methodGuid = guidFor(action.method),
	        actionSet = targetSet[targetGuid],
	        diffActionSet = diffTargetSet[targetGuid];
	    if (!actionSet) actionSet = targetSet[targetGuid] = {};
	    if (actionSet[methodGuid]) return;
	    actionSet[methodGuid] = action;
	    if (!diffActionSet) diffActionSet = diffTargetSet[targetGuid] = {};
	    diffActionSet[methodGuid] = action;
	  });
	  return diffTargetSet;
	}
	
	/**
	  Add an event listener
	
	  @method addListener
	  @for Ember
	  @param obj
	  @param {String} eventName
	  @param {Object|Function} targetOrMethod A target object or a function
	  @param {Function|String} method A function or the name of a function to be called on `target`
	*/
	function addListener(obj, eventName, target, method, guid) {
	  Ember.assert("You must pass at least an object and event name to Ember.addListener", !!obj && !!eventName);
	
	  if (!method && 'function' === typeof target) {
	    method = target;
	    target = null;
	  }
	
	  var actionSet = actionSetFor(obj, eventName, target, true),
	      // guid is used in case we wrapp given method to register
	      // listener with method guid instead of the wrapper guid
	      methodGuid = guid || guidFor(method);
	
	  if (!actionSet[methodGuid]) {
	    actionSet[methodGuid] = { target: target, method: method };
	  }
	
	  if ('function' === typeof obj.didAddListener) {
	    obj.didAddListener(eventName, target, method);
	  }
	}
	
	/**
	  Remove an event listener
	
	  Arguments should match those passed to {{#crossLink "Ember/addListener"}}{{/crossLink}}
	
	  @method removeListener
	  @for Ember
	  @param obj
	  @param {String} eventName
	  @param {Object|Function} targetOrMethod A target object or a function
	  @param {Function|String} method A function or the name of a function to be called on `target`
	*/
	function removeListener(obj, eventName, target, method) {
	  Ember.assert("You must pass at least an object and event name to Ember.removeListener", !!obj && !!eventName);
	
	  if (!method && 'function' === typeof target) {
	    method = target;
	    target = null;
	  }
	
	  function _removeListener(target, method) {
	    var actionSet = actionSetFor(obj, eventName, target, true),
	        methodGuid = guidFor(method);
	
	    // we can't simply delete this parameter, because if we do, we might
	    // re-expose the property from the prototype chain.
	    if (actionSet && actionSet[methodGuid]) { actionSet[methodGuid] = null; }
	
	    if ('function' === typeof obj.didRemoveListener) {
	      obj.didRemoveListener(eventName, target, method);
	    }
	  }
	
	  if (method) {
	    _removeListener(target, method);
	  } else {
	    iterateSet(targetSetFor(obj, eventName), function(action) {
	      _removeListener(action.target, action.method);
	    });
	  }
	}
	
	/**
	  @private
	
	  Suspend listener during callback.
	
	  This should only be used by the target of the event listener
	  when it is taking an action that would cause the event, e.g.
	  an object might suspend its property change listener while it is
	  setting that property.
	
	  @method suspendListener
	  @for Ember
	  @param obj
	  @param {String} eventName
	  @param {Object|Function} targetOrMethod A target object or a function
	  @param {Function|String} method A function or the name of a function to be called on `target`
	  @param {Function} callback
	*/
	function suspendListener(obj, eventName, target, method, callback) {
	  if (!method && 'function' === typeof target) {
	    method = target;
	    target = null;
	  }
	
	  var actionSet = actionSetFor(obj, eventName, target, true),
	      methodGuid = guidFor(method),
	      action = actionSet && actionSet[methodGuid];
	
	  actionSet[methodGuid] = null;
	  try {
	    return callback.call(target);
	  } finally {
	    actionSet[methodGuid] = action;
	  }
	}
	
	/**
	  @private
	
	  Suspend listener during callback.
	
	  This should only be used by the target of the event listener
	  when it is taking an action that would cause the event, e.g.
	  an object might suspend its property change listener while it is
	  setting that property.
	
	  @method suspendListener
	  @for Ember
	  @param obj
	  @param {Array} eventName Array of event names
	  @param {Object|Function} targetOrMethod A target object or a function
	  @param {Function|String} method A function or the name of a function to be called on `target`
	  @param {Function} callback
	*/
	function suspendListeners(obj, eventNames, target, method, callback) {
	  if (!method && 'function' === typeof target) {
	    method = target;
	    target = null;
	  }
	
	  var oldActions = [],
	      actionSets = [],
	      eventName, actionSet, methodGuid, action, i, l;
	
	  for (i=0, l=eventNames.length; i<l; i++) {
	    eventName = eventNames[i];
	    actionSet = actionSetFor(obj, eventName, target, true),
	    methodGuid = guidFor(method);
	
	    oldActions.push(actionSet && actionSet[methodGuid]);
	    actionSets.push(actionSet);
	
	    actionSet[methodGuid] = null;
	  }
	
	  try {
	    return callback.call(target);
	  } finally {
	    for (i=0, l=oldActions.length; i<l; i++) {
	      eventName = eventNames[i];
	      actionSets[i][methodGuid] = oldActions[i];
	    }
	  }
	}
	
	/**
	  @private
	
	  Return a list of currently watched events
	
	  @method watchedEvents
	  @for Ember
	  @param obj
	*/
	function watchedEvents(obj) {
	  var listeners = meta(obj, false).listeners, ret = [];
	
	  if (listeners) {
	    for(var eventName in listeners) {
	      if (!SKIP_PROPERTIES[eventName] && listeners[eventName]) {
	        ret.push(eventName);
	      }
	    }
	  }
	  return ret;
	}
	
	/**
	  @method sendEvent
	  @for Ember
	  @param obj
	  @param {String} eventName
	  @param {Array} params
	  @return true
	*/
	function sendEvent(obj, eventName, params, targetSet) {
	  // first give object a chance to handle it
	  if (obj !== Ember && 'function' === typeof obj.sendEvent) {
	    obj.sendEvent(eventName, params);
	  }
	
	  if (!targetSet) targetSet = targetSetFor(obj, eventName);
	
	  iterateSet(targetSet, function (action) {
	    invokeAction(action, params, obj);
	  });
	  return true;
	}
	
	/**
	  @private
	  @method hasListeners
	  @for Ember
	  @param obj
	  @param {String} eventName
	*/
	function hasListeners(obj, eventName) {
	  if (iterateSet(targetSetFor(obj, eventName), function() { return true; })) {
	    return true;
	  }
	
	  // no listeners!  might as well clean this up so it is faster later.
	  var set = metaPath(obj, ['listeners'], true);
	  set[eventName] = null;
	
	  return false;
	}
	
	/**
	  @private
	  @method listenersFor
	  @for Ember
	  @param obj
	  @param {String} eventName
	*/
	function listenersFor(obj, eventName) {
	  var ret = [];
	  iterateSet(targetSetFor(obj, eventName), function (action) {
	    ret.push([action.target, action.method]);
	  });
	  return ret;
	}
	
	Ember.addListener = addListener;
	Ember.removeListener = removeListener;
	Ember._suspendListener = suspendListener;
	Ember._suspendListeners = suspendListeners;
	Ember.sendEvent = sendEvent;
	Ember.hasListeners = hasListeners;
	Ember.watchedEvents = watchedEvents;
	Ember.listenersFor = listenersFor;
	Ember.listenersDiff = targetSetDiff;
	Ember.listenersUnion = targetSetUnion;
	})();
	
	
	
	(function() {
	// Ember.Logger
	// Ember.watch.flushPending
	// Ember.beginPropertyChanges, Ember.endPropertyChanges
	// Ember.guidFor
	
	/**
	@module ember-metal
	*/
	
	// ..........................................................
	// HELPERS
	//
	
	var slice = [].slice,
	    forEach = Ember.ArrayPolyfills.forEach;
	
	// invokes passed params - normalizing so you can pass target/func,
	// target/string or just func
	function invoke(target, method, args, ignore) {
	
	  if (method === undefined) {
	    method = target;
	    target = undefined;
	  }
	
	  if ('string' === typeof method) { method = target[method]; }
	  if (args && ignore > 0) {
	    args = args.length > ignore ? slice.call(args, ignore) : null;
	  }
	
	  return Ember.handleErrors(function() {
	    // IE8's Function.prototype.apply doesn't accept undefined/null arguments.
	    return method.apply(target || this, args || []);
	  }, this);
	}
	
	
	// ..........................................................
	// RUNLOOP
	//
	
	var timerMark; // used by timers...
	
	/**
	Ember RunLoop (Private)
	
	@class RunLoop
	@namespace Ember
	@private
	@constructor
	*/
	var RunLoop = function(prev) {
	  this._prev = prev || null;
	  this.onceTimers = {};
	};
	
	RunLoop.prototype = {
	  /**
	    @method end
	  */
	  end: function() {
	    this.flush();
	  },
	
	  /**
	    @method prev
	  */
	  prev: function() {
	    return this._prev;
	  },
	
	  // ..........................................................
	  // Delayed Actions
	  //
	
	  /**
	    @method schedule
	    @param {String} queueName
	    @param target
	    @param method
	  */
	  schedule: function(queueName, target, method) {
	    var queues = this._queues, queue;
	    if (!queues) { queues = this._queues = {}; }
	    queue = queues[queueName];
	    if (!queue) { queue = queues[queueName] = []; }
	
	    var args = arguments.length > 3 ? slice.call(arguments, 3) : null;
	    queue.push({ target: target, method: method, args: args });
	    return this;
	  },
	
	  /**
	    @method flush
	    @param {String} queueName
	  */
	  flush: function(queueName) {
	    var queueNames, idx, len, queue, log;
	
	    if (!this._queues) { return this; } // nothing to do
	
	    function iter(item) {
	      invoke(item.target, item.method, item.args);
	    }
	
	    Ember.watch.flushPending(); // make sure all chained watchers are setup
	
	    if (queueName) {
	      while (this._queues && (queue = this._queues[queueName])) {
	        this._queues[queueName] = null;
	
	        // the sync phase is to allow property changes to propagate.  don't
	        // invoke observers until that is finished.
	        if (queueName === 'sync') {
	          log = Ember.LOG_BINDINGS;
	          if (log) { Ember.Logger.log('Begin: Flush Sync Queue'); }
	
	          Ember.beginPropertyChanges();
	          try {
	            forEach.call(queue, iter);
	          } finally {
	            Ember.endPropertyChanges();
	          }
	
	          if (log) { Ember.Logger.log('End: Flush Sync Queue'); }
	
	        } else {
	          forEach.call(queue, iter);
	        }
	      }
	
	    } else {
	      queueNames = Ember.run.queues;
	      len = queueNames.length;
	      idx = 0;
	
	      outerloop:
	      while (idx < len) {
	        queueName = queueNames[idx];
	        queue = this._queues && this._queues[queueName];
	        delete this._queues[queueName];
	
	        if (queue) {
	          // the sync phase is to allow property changes to propagate.  don't
	          // invoke observers until that is finished.
	          if (queueName === 'sync') {
	            log = Ember.LOG_BINDINGS;
	            if (log) { Ember.Logger.log('Begin: Flush Sync Queue'); }
	
	            Ember.beginPropertyChanges();
	            try {
	              forEach.call(queue, iter);
	            } finally {
	              Ember.endPropertyChanges();
	            }
	
	            if (log) { Ember.Logger.log('End: Flush Sync Queue'); }
	          } else {
	            forEach.call(queue, iter);
	          }
	        }
	
	        // Loop through prior queues
	        for (var i = 0; i <= idx; i++) {
	          if (this._queues && this._queues[queueNames[i]]) {
	            // Start over at the first queue with contents
	            idx = i;
	            continue outerloop;
	          }
	        }
	
	        idx++;
	      }
	    }
	
	    timerMark = null;
	
	    return this;
	  }
	
	};
	
	Ember.RunLoop = RunLoop;
	
	// ..........................................................
	// Ember.run - this is ideally the only public API the dev sees
	//
	
	/**
	  Runs the passed target and method inside of a RunLoop, ensuring any
	  deferred actions including bindings and views updates are flushed at the
	  end.
	
	  Normally you should not need to invoke this method yourself.  However if
	  you are implementing raw event handlers when interfacing with other
	  libraries or plugins, you should probably wrap all of your code inside this
	  call.
	
	      Ember.run(function(){
	        // code to be execute within a RunLoop 
	      });
	
	  @class run
	  @namespace Ember
	  @static
	  @constructor
	  @param {Object} [target] target of method to call
	  @param {Function|String} method Method to invoke.
	    May be a function or a string.  If you pass a string
	    then it will be looked up on the passed target.
	  @param {Object} [args*] Any additional arguments you wish to pass to the method.
	  @return {Object} return value from invoking the passed function.
	*/
	Ember.run = function(target, method) {
	  var ret, loop;
	  run.begin();
	  try {
	    if (target || method) { ret = invoke(target, method, arguments, 2); }
	  } finally {
	    run.end();
	  }
	  return ret;
	};
	
	var run = Ember.run;
	
	
	/**
	  Begins a new RunLoop.  Any deferred actions invoked after the begin will
	  be buffered until you invoke a matching call to Ember.run.end().  This is
	  an lower-level way to use a RunLoop instead of using Ember.run().
	
	      Ember.run.begin();
	      // code to be execute within a RunLoop 
	      Ember.run.end();
	
	  @method begin
	  @return {void}
	*/
	Ember.run.begin = function() {
	  run.currentRunLoop = new RunLoop(run.currentRunLoop);
	};
	
	/**
	  Ends a RunLoop.  This must be called sometime after you call Ember.run.begin()
	  to flush any deferred actions.  This is a lower-level way to use a RunLoop
	  instead of using Ember.run().
	
	      Ember.run.begin();
	      // code to be execute within a RunLoop 
	      Ember.run.end();
	
	  @method end
	  @return {void}
	*/
	Ember.run.end = function() {
	  Ember.assert('must have a current run loop', run.currentRunLoop);
	  try {
	    run.currentRunLoop.end();
	  }
	  finally {
	    run.currentRunLoop = run.currentRunLoop.prev();
	  }
	};
	
	/**
	  Array of named queues.  This array determines the order in which queues
	  are flushed at the end of the RunLoop.  You can define your own queues by
	  simply adding the queue name to this array.  Normally you should not need
	  to inspect or modify this property.
	
	  @property queues
	  @type Array
	  @default ['sync', 'actions', 'destroy', 'timers']
	*/
	Ember.run.queues = ['sync', 'actions', 'destroy', 'timers'];
	
	/**
	  Adds the passed target/method and any optional arguments to the named
	  queue to be executed at the end of the RunLoop.  If you have not already
	  started a RunLoop when calling this method one will be started for you
	  automatically.
	
	  At the end of a RunLoop, any methods scheduled in this way will be invoked.
	  Methods will be invoked in an order matching the named queues defined in
	  the run.queues property.
	
	      Ember.run.schedule('timers', this, function(){
	        // this will be executed at the end of the RunLoop, when timers are run
	        console.log("scheduled on timers queue");
	      });
	      Ember.run.schedule('sync', this, function(){
	        // this will be executed at the end of the RunLoop, when bindings are synced
	        console.log("scheduled on sync queue");
	      });
	      // Note the functions will be run in order based on the run queues order. Output would be:
	      //   scheduled on sync queue
	      //   scheduled on timers queue
	
	  @method schedule
	  @param {String} queue The name of the queue to schedule against.
	    Default queues are 'sync' and 'actions'
	
	  @param {Object} [target] target object to use as the context when invoking a method.
	
	  @param {String|Function} method The method to invoke.  If you pass a string it
	    will be resolved on the target object at the time the scheduled item is
	    invoked allowing you to change the target function.
	
	  @param {Object} [arguments*] Optional arguments to be passed to the queued method.
	
	  @return {void}
	*/
	Ember.run.schedule = function(queue, target, method) {
	  var loop = run.autorun();
	  loop.schedule.apply(loop, arguments);
	};
	
	var scheduledAutorun;
	function autorun() {
	  scheduledAutorun = null;
	  if (run.currentRunLoop) { run.end(); }
	}
	
	// Used by global test teardown
	Ember.run.hasScheduledTimers = function() {
	  return !!(scheduledAutorun || scheduledLater || scheduledNext);
	};
	
	// Used by global test teardown
	Ember.run.cancelTimers = function () {
	  if (scheduledAutorun) {
	    clearTimeout(scheduledAutorun);
	    scheduledAutorun = null;
	  }
	  if (scheduledLater) {
	    clearTimeout(scheduledLater);
	    scheduledLater = null;
	  }
	  if (scheduledNext) {
	    clearTimeout(scheduledNext);
	    scheduledNext = null;
	  }
	  timers = {};
	};
	
	/**
	  Begins a new RunLoop if necessary and schedules a timer to flush the
	  RunLoop at a later time.  This method is used by parts of Ember to
	  ensure the RunLoop always finishes.  You normally do not need to call this
	  method directly.  Instead use Ember.run().
	
	
	  @method autorun
	  @example
	    Ember.run.autorun();
	  @return {Ember.RunLoop} the new current RunLoop
	*/
	Ember.run.autorun = function() {
	  if (!run.currentRunLoop) {
	    Ember.assert("You have turned on testing mode, which disabled the run-loop's autorun. You will need to wrap any code with asynchronous side-effects in an Ember.run", !Ember.testing);
	
	    run.begin();
	
	    if (!scheduledAutorun) {
	      scheduledAutorun = setTimeout(autorun, 1);
	    }
	  }
	
	  return run.currentRunLoop;
	};
	
	/**
	  Immediately flushes any events scheduled in the 'sync' queue.  Bindings
	  use this queue so this method is a useful way to immediately force all
	  bindings in the application to sync.
	
	  You should call this method anytime you need any changed state to propagate
	  throughout the app immediately without repainting the UI.
	
	      Ember.run.sync();
	
	  @method sync
	  @return {void}
	*/
	Ember.run.sync = function() {
	  run.autorun();
	  run.currentRunLoop.flush('sync');
	};
	
	// ..........................................................
	// TIMERS
	//
	
	var timers = {}; // active timers...
	
	var scheduledLater;
	function invokeLaterTimers() {
	  scheduledLater = null;
	  var now = (+ new Date()), earliest = -1;
	  for (var key in timers) {
	    if (!timers.hasOwnProperty(key)) { continue; }
	    var timer = timers[key];
	    if (timer && timer.expires) {
	      if (now >= timer.expires) {
	        delete timers[key];
	        invoke(timer.target, timer.method, timer.args, 2);
	      } else {
	        if (earliest<0 || (timer.expires < earliest)) earliest=timer.expires;
	      }
	    }
	  }
	
	  // schedule next timeout to fire...
	  if (earliest > 0) { scheduledLater = setTimeout(invokeLaterTimers, earliest-(+ new Date())); }
	}
	
	/**
	  Invokes the passed target/method and optional arguments after a specified
	  period if time.  The last parameter of this method must always be a number
	  of milliseconds.
	
	  You should use this method whenever you need to run some action after a
	  period of time instead of using setTimeout().  This method will ensure that
	  items that expire during the same script execution cycle all execute
	  together, which is often more efficient than using a real setTimeout.
	
	      Ember.run.later(myContext, function(){
	        // code here will execute within a RunLoop in about 500ms with this == myContext
	      }, 500);
	
	  @method later
	  @param {Object} [target] target of method to invoke
	
	  @param {Function|String} method The method to invoke.
	    If you pass a string it will be resolved on the
	    target at the time the method is invoked.
	
	  @param {Object} [args*] Optional arguments to pass to the timeout.
	
	  @param {Number} wait
	    Number of milliseconds to wait.
	
	  @return {String} a string you can use to cancel the timer in
	    {{#crossLink "Ember/run.cancel"}}{{/crossLink}} later.
	*/
	Ember.run.later = function(target, method) {
	  var args, expires, timer, guid, wait;
	
	  // setTimeout compatibility...
	  if (arguments.length===2 && 'function' === typeof target) {
	    wait   = method;
	    method = target;
	    target = undefined;
	    args   = [target, method];
	  } else {
	    args = slice.call(arguments);
	    wait = args.pop();
	  }
	
	  expires = (+ new Date()) + wait;
	  timer   = { target: target, method: method, expires: expires, args: args };
	  guid    = Ember.guidFor(timer);
	  timers[guid] = timer;
	  run.once(timers, invokeLaterTimers);
	  return guid;
	};
	
	function invokeOnceTimer(guid, onceTimers) {
	  if (onceTimers[this.tguid]) { delete onceTimers[this.tguid][this.mguid]; }
	  if (timers[guid]) { invoke(this.target, this.method, this.args); }
	  delete timers[guid];
	}
	
	function scheduleOnce(queue, target, method, args) {
	  var tguid = Ember.guidFor(target),
	    mguid = Ember.guidFor(method),
	    onceTimers = run.autorun().onceTimers,
	    guid = onceTimers[tguid] && onceTimers[tguid][mguid],
	    timer;
	
	  if (guid && timers[guid]) {
	    timers[guid].args = args; // replace args
	  } else {
	    timer = {
	      target: target,
	      method: method,
	      args:   args,
	      tguid:  tguid,
	      mguid:  mguid
	    };
	
	    guid  = Ember.guidFor(timer);
	    timers[guid] = timer;
	    if (!onceTimers[tguid]) { onceTimers[tguid] = {}; }
	    onceTimers[tguid][mguid] = guid; // so it isn't scheduled more than once
	
	    run.schedule(queue, timer, invokeOnceTimer, guid, onceTimers);
	  }
	
	  return guid;
	}
	
	/**
	  Schedules an item to run one time during the current RunLoop.  Calling
	  this method with the same target/method combination will have no effect.
	
	  Note that although you can pass optional arguments these will not be
	  considered when looking for duplicates.  New arguments will replace previous
	  calls.
	
	      Ember.run(function(){
	        var doFoo = function() { foo(); }
	        Ember.run.once(myContext, doFoo);
	        Ember.run.once(myContext, doFoo);
	        // doFoo will only be executed once at the end of the RunLoop
	      });
	
	  @method once
	  @param {Object} [target] target of method to invoke
	
	  @param {Function|String} method The method to invoke.
	    If you pass a string it will be resolved on the
	    target at the time the method is invoked.
	
	  @param {Object} [args*] Optional arguments to pass to the timeout.
	
	
	  @return {Object} timer
	*/
	Ember.run.once = function(target, method) {
	  return scheduleOnce('actions', target, method, slice.call(arguments, 2));
	};
	
	Ember.run.scheduleOnce = function(queue, target, method, args) {
	  return scheduleOnce(queue, target, method, slice.call(arguments, 3));
	};
	
	var scheduledNext;
	function invokeNextTimers() {
	  scheduledNext = null;
	  for(var key in timers) {
	    if (!timers.hasOwnProperty(key)) { continue; }
	    var timer = timers[key];
	    if (timer.next) {
	      delete timers[key];
	      invoke(timer.target, timer.method, timer.args, 2);
	    }
	  }
	}
	
	/**
	  Schedules an item to run after control has been returned to the system.
	  This is often equivalent to calling setTimeout(function...,1).
	
	      Ember.run.next(myContext, function(){
	        // code to be executed in the next RunLoop, which will be scheduled after the current one
	      });
	
	  @method next
	  @param {Object} [target] target of method to invoke
	
	  @param {Function|String} method The method to invoke.
	    If you pass a string it will be resolved on the
	    target at the time the method is invoked.
	
	  @param {Object} [args*] Optional arguments to pass to the timeout.
	
	  @return {Object} timer
	*/
	Ember.run.next = function(target, method) {
	  var guid,
	      timer = {
	        target: target,
	        method: method,
	        args: slice.call(arguments),
	        next: true
	      };
	
	  guid = Ember.guidFor(timer);
	  timers[guid] = timer;
	
	  if (!scheduledNext) { scheduledNext = setTimeout(invokeNextTimers, 1); }
	  return guid;
	};
	
	/**
	  Cancels a scheduled item.  Must be a value returned by `Ember.run.later()`,
	  `Ember.run.once()`, or `Ember.run.next()`.
	
	      var runNext = Ember.run.next(myContext, function(){
	        // will not be executed
	      });
	      Ember.run.cancel(runNext);
	
	      var runLater = Ember.run.later(myContext, function(){
	        // will not be executed
	      }, 500);
	      Ember.run.cancel(runLater);
	
	      var runOnce = Ember.run.once(myContext, function(){
	        // will not be executed
	      });
	      Ember.run.cancel(runOnce);
	
	  @method cancel
	  @param {Object} timer Timer object to cancel
	  @return {void}
	*/
	Ember.run.cancel = function(timer) {
	  delete timers[timer];
	};
	
	})();
	
	
	
	(function() {
	// Ember.Logger
	// get, set, trySet
	// guidFor, isArray, meta
	// addObserver, removeObserver
	// Ember.run.schedule
	/**
	@module ember-metal
	*/
	
	// ..........................................................
	// CONSTANTS
	//
	
	/**
	  Debug parameter you can turn on. This will log all bindings that fire to
	  the console. This should be disabled in production code. Note that you
	  can also enable this from the console or temporarily.
	
	  @property LOG_BINDINGS
	  @for Ember
	  @type Boolean
	  @default false
	*/
	Ember.LOG_BINDINGS = false || !!Ember.ENV.LOG_BINDINGS;
	
	var get     = Ember.get,
	    set     = Ember.set,
	    guidFor = Ember.guidFor,
	    isGlobalPath = Ember.isGlobalPath;
	
	
	function getWithGlobals(obj, path) {
	  return get(isGlobalPath(path) ? Ember.lookup : obj, path);
	}
	
	// ..........................................................
	// BINDING
	//
	
	var Binding = function(toPath, fromPath) {
	  this._direction = 'fwd';
	  this._from = fromPath;
	  this._to   = toPath;
	  this._directionMap = Ember.Map.create();
	};
	
	/**
	@class Binding
	@namespace Ember
	*/
	
	Binding.prototype = {
	  /**
	    This copies the Binding so it can be connected to another object.
	
	    @method copy
	    @return {Ember.Binding}
	  */
	  copy: function () {
	    var copy = new Binding(this._to, this._from);
	    if (this._oneWay) { copy._oneWay = true; }
	    return copy;
	  },
	
	  // ..........................................................
	  // CONFIG
	  //
	
	  /**
	    This will set "from" property path to the specified value. It will not
	    attempt to resolve this property path to an actual object until you
	    connect the binding.
	
	    The binding will search for the property path starting at the root object
	    you pass when you connect() the binding.  It follows the same rules as
	    `get()` - see that method for more information.
	
	    @method from
	    @param {String} propertyPath the property path to connect to
	    @return {Ember.Binding} receiver
	  */
	  from: function(path) {
	    this._from = path;
	    return this;
	  },
	
	  /**
	    This will set the "to" property path to the specified value. It will not
	    attempt to resolve this property path to an actual object until you
	    connect the binding.
	
	    The binding will search for the property path starting at the root object
	    you pass when you connect() the binding.  It follows the same rules as
	    `get()` - see that method for more information.
	
	    @method to
	    @param {String|Tuple} propertyPath A property path or tuple
	    @return {Ember.Binding} this
	  */
	  to: function(path) {
	    this._to = path;
	    return this;
	  },
	
	  /**
	    Configures the binding as one way. A one-way binding will relay changes
	    on the "from" side to the "to" side, but not the other way around. This
	    means that if you change the "to" side directly, the "from" side may have
	    a different value.
	
	    @method oneWay
	    @return {Ember.Binding} receiver
	  */
	  oneWay: function() {
	    this._oneWay = true;
	    return this;
	  },
	
	  toString: function() {
	    var oneWay = this._oneWay ? '[oneWay]' : '';
	    return "Ember.Binding<" + guidFor(this) + ">(" + this._from + " -> " + this._to + ")" + oneWay;
	  },
	
	  // ..........................................................
	  // CONNECT AND SYNC
	  //
	
	  /**
	    Attempts to connect this binding instance so that it can receive and relay
	    changes. This method will raise an exception if you have not set the
	    from/to properties yet.
	
	    @method connect
	    @param {Object} obj The root object for this binding.
	    @return {Ember.Binding} this
	  */
	  connect: function(obj) {
	    Ember.assert('Must pass a valid object to Ember.Binding.connect()', !!obj);
	
	    var fromPath = this._from, toPath = this._to;
	    Ember.trySet(obj, toPath, getWithGlobals(obj, fromPath));
	
	    // add an observer on the object to be notified when the binding should be updated
	    Ember.addObserver(obj, fromPath, this, this.fromDidChange);
	
	    // if the binding is a two-way binding, also set up an observer on the target
	    if (!this._oneWay) { Ember.addObserver(obj, toPath, this, this.toDidChange); }
	
	    this._readyToSync = true;
	
	    return this;
	  },
	
	  /**
	    Disconnects the binding instance. Changes will no longer be relayed. You
	    will not usually need to call this method.
	
	    @method disconnect
	    @param {Object} obj The root object you passed when connecting the binding.
	    @return {Ember.Binding} this
	  */
	  disconnect: function(obj) {
	    Ember.assert('Must pass a valid object to Ember.Binding.disconnect()', !!obj);
	
	    var twoWay = !this._oneWay;
	
	    // remove an observer on the object so we're no longer notified of
	    // changes that should update bindings.
	    Ember.removeObserver(obj, this._from, this, this.fromDidChange);
	
	    // if the binding is two-way, remove the observer from the target as well
	    if (twoWay) { Ember.removeObserver(obj, this._to, this, this.toDidChange); }
	
	    this._readyToSync = false; // disable scheduled syncs...
	    return this;
	  },
	
	  // ..........................................................
	  // PRIVATE
	  //
	
	  /* called when the from side changes */
	  fromDidChange: function(target) {
	    this._scheduleSync(target, 'fwd');
	  },
	
	  /* called when the to side changes */
	  toDidChange: function(target) {
	    this._scheduleSync(target, 'back');
	  },
	
	  _scheduleSync: function(obj, dir) {
	    var directionMap = this._directionMap;
	    var existingDir = directionMap.get(obj);
	
	    // if we haven't scheduled the binding yet, schedule it
	    if (!existingDir) {
	      Ember.run.schedule('sync', this, this._sync, obj);
	      directionMap.set(obj, dir);
	    }
	
	    // If both a 'back' and 'fwd' sync have been scheduled on the same object,
	    // default to a 'fwd' sync so that it remains deterministic.
	    if (existingDir === 'back' && dir === 'fwd') {
	      directionMap.set(obj, 'fwd');
	    }
	  },
	
	  _sync: function(obj) {
	    var log = Ember.LOG_BINDINGS;
	
	    // don't synchronize destroyed objects or disconnected bindings
	    if (obj.isDestroyed || !this._readyToSync) { return; }
	
	    // get the direction of the binding for the object we are
	    // synchronizing from
	    var directionMap = this._directionMap;
	    var direction = directionMap.get(obj);
	
	    var fromPath = this._from, toPath = this._to;
	
	    directionMap.remove(obj);
	
	    // if we're synchronizing from the remote object...
	    if (direction === 'fwd') {
	      var fromValue = getWithGlobals(obj, this._from);
	      if (log) {
	        Ember.Logger.log(' ', this.toString(), '->', fromValue, obj);
	      }
	      if (this._oneWay) {
	        Ember.trySet(obj, toPath, fromValue);
	      } else {
	        Ember._suspendObserver(obj, toPath, this, this.toDidChange, function () {
	          Ember.trySet(obj, toPath, fromValue);
	        });
	      }
	    // if we're synchronizing *to* the remote object
	    } else if (direction === 'back') {
	      var toValue = get(obj, this._to);
	      if (log) {
	        Ember.Logger.log(' ', this.toString(), '<-', toValue, obj);
	      }
	      Ember._suspendObserver(obj, fromPath, this, this.fromDidChange, function () {
	        Ember.trySet(Ember.isGlobalPath(fromPath) ? Ember.lookup : obj, fromPath, toValue);
	      });
	    }
	  }
	
	};
	
	function mixinProperties(to, from) {
	  for (var key in from) {
	    if (from.hasOwnProperty(key)) {
	      to[key] = from[key];
	    }
	  }
	}
	
	mixinProperties(Binding, {
	
	  /**
	    See {{#crossLink "Ember.Binding/from"}}{{/crossLink}}
	
	    @method from
	    @static
	  */
	  from: function() {
	    var C = this, binding = new C();
	    return binding.from.apply(binding, arguments);
	  },
	
	  /**
	    See {{#crossLink "Ember.Binding/to"}}{{/crossLink}}
	
	    @method to
	    @static
	  */
	  to: function() {
	    var C = this, binding = new C();
	    return binding.to.apply(binding, arguments);
	  },
	
	  /**
	    Creates a new Binding instance and makes it apply in a single direction.
	    A one-way binding will relay changes on the "from" side object (supplied
	    as the `from` argument) the "to" side, but not the other way around.
	    This means that if you change the "to" side directly, the "from" side may have
	    a different value.
	
	    See {{#crossLink "Binding/oneWay"}}{{/crossLink}}
	
	    @method oneWay
	    @param {String} from from path.
	    @param {Boolean} [flag] (Optional) passing nothing here will make the binding oneWay.  You can
	      instead pass false to disable oneWay, making the binding two way again.
	  */
	  oneWay: function(from, flag) {
	    var C = this, binding = new C(null, from);
	    return binding.oneWay(flag);
	  }
	
	});
	
	/**
	  An Ember.Binding connects the properties of two objects so that whenever the
	  value of one property changes, the other property will be changed also.
	
	  ## Automatic Creation of Bindings with `/^*Binding/`-named Properties
	  You do not usually create Binding objects directly but instead describe
	  bindings in your class or object definition using automatic binding detection.
	
	  Properties ending in a `Binding` suffix will be converted to Ember.Binding instances.
	  The value of this property should be a string representing a path to another object or
	  a custom binding instanced created using Binding helpers (see "Customizing Your Bindings"):
	
	      valueBinding: "MyApp.someController.title"
	
	  This will create a binding from `MyApp.someController.title` to the `value`
	  property of your object instance automatically. Now the two values will be
	  kept in sync.
	
	  ## One Way Bindings
	
	  One especially useful binding customization you can use is the `oneWay()`
	  helper. This helper tells Ember that you are only interested in
	  receiving changes on the object you are binding from. For example, if you
	  are binding to a preference and you want to be notified if the preference
	  has changed, but your object will not be changing the preference itself, you
	  could do:
	
	      bigTitlesBinding: Ember.Binding.oneWay("MyApp.preferencesController.bigTitles")
	
	  This way if the value of MyApp.preferencesController.bigTitles changes the
	  "bigTitles" property of your object will change also. However, if you
	  change the value of your "bigTitles" property, it will not update the
	  preferencesController.
	
	  One way bindings are almost twice as fast to setup and twice as fast to
	  execute because the binding only has to worry about changes to one side.
	
	  You should consider using one way bindings anytime you have an object that
	  may be created frequently and you do not intend to change a property; only
	  to monitor it for changes. (such as in the example above).
	
	  ## Adding Bindings Manually
	
	  All of the examples above show you how to configure a custom binding, but
	  the result of these customizations will be a binding template, not a fully
	  active Binding instance. The binding will actually become active only when you
	  instantiate the object the binding belongs to. It is useful however, to
	  understand what actually happens when the binding is activated.
	
	  For a binding to function it must have at least a "from" property and a "to"
	  property. The from property path points to the object/key that you want to
	  bind from while the to path points to the object/key you want to bind to.
	
	  When you define a custom binding, you are usually describing the property
	  you want to bind from (such as "MyApp.someController.value" in the examples
	  above). When your object is created, it will automatically assign the value
	  you want to bind "to" based on the name of your binding key. In the
	  examples above, during init, Ember objects will effectively call
	  something like this on your binding:
	
	      binding = Ember.Binding.from(this.valueBinding).to("value");
	
	  This creates a new binding instance based on the template you provide, and
	  sets the to path to the "value" property of the new object. Now that the
	  binding is fully configured with a "from" and a "to", it simply needs to be
	  connected to become active. This is done through the connect() method:
	
	      binding.connect(this);
	
	  Note that when you connect a binding you pass the object you want it to be
	  connected to.  This object will be used as the root for both the from and
	  to side of the binding when inspecting relative paths.  This allows the
	  binding to be automatically inherited by subclassed objects as well.
	
	  Now that the binding is connected, it will observe both the from and to side
	  and relay changes.
	
	  If you ever needed to do so (you almost never will, but it is useful to
	  understand this anyway), you could manually create an active binding by
	  using the Ember.bind() helper method. (This is the same method used by
	  to setup your bindings on objects):
	
	      Ember.bind(MyApp.anotherObject, "value", "MyApp.someController.value");
	
	  Both of these code fragments have the same effect as doing the most friendly
	  form of binding creation like so:
	
	      MyApp.anotherObject = Ember.Object.create({
	        valueBinding: "MyApp.someController.value",
	
	        // OTHER CODE FOR THIS OBJECT...
	
	      });
	
	  Ember's built in binding creation method makes it easy to automatically
	  create bindings for you. You should always use the highest-level APIs
	  available, even if you understand how it works underneath.
	
	  @class Binding
	  @namespace Ember
	  @since Ember 0.9
	*/
	Ember.Binding = Binding;
	
	
	/**
	  Global helper method to create a new binding.  Just pass the root object
	  along with a to and from path to create and connect the binding.
	
	  @method bind
	  @for Ember
	  @param {Object} obj The root object of the transform.
	
	  @param {String} to The path to the 'to' side of the binding.
	    Must be relative to obj.
	
	  @param {String} from The path to the 'from' side of the binding.
	    Must be relative to obj or a global path.
	
	  @return {Ember.Binding} binding instance
	*/
	Ember.bind = function(obj, to, from) {
	  return new Ember.Binding(to, from).connect(obj);
	};
	
	/**
	  @method oneWay
	  @for Ember
	  @param {Object} obj The root object of the transform.
	
	  @param {String} to The path to the 'to' side of the binding.
	    Must be relative to obj.
	
	  @param {String} from The path to the 'from' side of the binding.
	    Must be relative to obj or a global path.
	
	  @return {Ember.Binding} binding instance
	*/
	Ember.oneWay = function(obj, to, from) {
	  return new Ember.Binding(to, from).oneWay().connect(obj);
	};
	
	})();
	
	
	
	(function() {
	/**
	@module ember-metal
	*/
	
	var Mixin, REQUIRED, Alias,
	    classToString, superClassString,
	    a_map = Ember.ArrayPolyfills.map,
	    a_indexOf = Ember.ArrayPolyfills.indexOf,
	    a_forEach = Ember.ArrayPolyfills.forEach,
	    a_slice = [].slice,
	    EMPTY_META = {}, // dummy for non-writable meta
	    META_SKIP = { __emberproto__: true, __ember_count__: true },
	    o_create = Ember.create,
	    defineProperty = Ember.defineProperty,
	    guidFor = Ember.guidFor;
	
	function mixinsMeta(obj) {
	  var m = Ember.meta(obj, true), ret = m.mixins;
	  if (!ret) {
	    ret = m.mixins = { __emberproto__: obj };
	  } else if (ret.__emberproto__ !== obj) {
	    ret = m.mixins = o_create(ret);
	    ret.__emberproto__ = obj;
	  }
	  return ret;
	}
	
	function initMixin(mixin, args) {
	  if (args && args.length > 0) {
	    mixin.mixins = a_map.call(args, function(x) {
	      if (x instanceof Mixin) { return x; }
	
	      // Note: Manually setup a primitive mixin here.  This is the only
	      // way to actually get a primitive mixin.  This way normal creation
	      // of mixins will give you combined mixins...
	      var mixin = new Mixin();
	      mixin.properties = x;
	      return mixin;
	    });
	  }
	  return mixin;
	}
	
	function isMethod(obj) {
	  return 'function' === typeof obj &&
	         obj.isMethod !== false &&
	         obj !== Boolean && obj !== Object && obj !== Number && obj !== Array && obj !== Date && obj !== String;
	}
	
	function mergeMixins(mixins, m, descs, values, base) {
	  var len = mixins.length, idx, mixin, guid, props, value, key, ovalue, concats;
	
	  function removeKeys(keyName) {
	    delete descs[keyName];
	    delete values[keyName];
	  }
	
	  for(idx=0; idx < len; idx++) {
	    mixin = mixins[idx];
	    Ember.assert('Expected hash or Mixin instance, got ' + Object.prototype.toString.call(mixin), typeof mixin === 'object' && mixin !== null && Object.prototype.toString.call(mixin) !== '[object Array]');
	
	    if (mixin instanceof Mixin) {
	      guid = guidFor(mixin);
	      if (m[guid]) { continue; }
	      m[guid] = mixin;
	      props = mixin.properties;
	    } else {
	      props = mixin; // apply anonymous mixin properties
	    }
	
	    if (props) {
	      // reset before adding each new mixin to pickup concats from previous
	      concats = values.concatenatedProperties || base.concatenatedProperties;
	      if (props.concatenatedProperties) {
	        concats = concats ? concats.concat(props.concatenatedProperties) : props.concatenatedProperties;
	      }
	
	      for (key in props) {
	        if (!props.hasOwnProperty(key)) { continue; }
	        value = props[key];
	        if (value instanceof Ember.Descriptor) {
	          if (value === REQUIRED && descs[key]) { continue; }
	
	          descs[key]  = value;
	          values[key] = undefined;
	        } else {
	          // impl super if needed...
	          if (isMethod(value)) {
	            ovalue = descs[key] === undefined && values[key];
	            if (!ovalue) { ovalue = base[key]; }
	            if ('function' !== typeof ovalue) { ovalue = null; }
	            if (ovalue) {
	              var o = value.__ember_observes__, ob = value.__ember_observesBefore__;
	              value = Ember.wrap(value, ovalue);
	              value.__ember_observes__ = o;
	              value.__ember_observesBefore__ = ob;
	            }
	          } else if ((concats && a_indexOf.call(concats, key) >= 0) || key === 'concatenatedProperties') {
	            var baseValue = values[key] || base[key];
	            if (baseValue) {
	              if ('function' === typeof baseValue.concat) {
	                value = baseValue.concat(value);
	              } else {
	                value = Ember.makeArray(baseValue).concat(value);
	              }
	            } else {
	              value = Ember.makeArray(value);
	            }
	          }
	
	          descs[key] = undefined;
	          values[key] = value;
	        }
	      }
	
	      // manually copy toString() because some JS engines do not enumerate it
	      if (props.hasOwnProperty('toString')) {
	        base.toString = props.toString;
	      }
	
	    } else if (mixin.mixins) {
	      mergeMixins(mixin.mixins, m, descs, values, base);
	      if (mixin._without) { a_forEach.call(mixin._without, removeKeys); }
	    }
	  }
	}
	
	function writableReq(obj) {
	  var m = Ember.meta(obj), req = m.required;
	  if (!req || req.__emberproto__ !== obj) {
	    req = m.required = req ? o_create(req) : { __ember_count__: 0 };
	    req.__emberproto__ = obj;
	  }
	  return req;
	}
	
	var IS_BINDING = Ember.IS_BINDING = /^.+Binding$/;
	
	function detectBinding(obj, key, value, m) {
	  if (IS_BINDING.test(key)) {
	    var bindings = m.bindings;
	    if (!bindings) {
	      bindings = m.bindings = { __emberproto__: obj };
	    } else if (bindings.__emberproto__ !== obj) {
	      bindings = m.bindings = o_create(m.bindings);
	      bindings.__emberproto__ = obj;
	    }
	    bindings[key] = value;
	  }
	}
	
	function connectBindings(obj, m) {
	  // TODO Mixin.apply(instance) should disconnect binding if exists
	  var bindings = m.bindings, key, binding, to;
	  if (bindings) {
	    for (key in bindings) {
	      binding = key !== '__emberproto__' && bindings[key];
	      if (binding) {
	        to = key.slice(0, -7); // strip Binding off end
	        if (binding instanceof Ember.Binding) {
	          binding = binding.copy(); // copy prototypes' instance
	          binding.to(to);
	        } else { // binding is string path
	          binding = new Ember.Binding(to, binding);
	        }
	        binding.connect(obj);
	        obj[key] = binding;
	      }
	    }
	    // mark as applied
	    m.bindings = { __emberproto__: obj };
	  }
	}
	
	function finishPartial(obj, m) {
	  connectBindings(obj, m || Ember.meta(obj));
	  return obj;
	}
	
	function applyMixin(obj, mixins, partial) {
	  var descs = {}, values = {}, m = Ember.meta(obj), req = m.required,
	      key, value, desc, prevValue, paths, len, idx;
	
	  // Go through all mixins and hashes passed in, and:
	  //
	  // * Handle concatenated properties
	  // * Set up _super wrapping if necessary
	  // * Set up computed property descriptors
	  // * Copying `toString` in broken browsers
	  mergeMixins(mixins, mixinsMeta(obj), descs, values, obj);
	
	  for(key in values) {
	    if (key === 'contructor') { continue; }
	    if (!values.hasOwnProperty(key)) { continue; }
	
	    desc = descs[key];
	    value = values[key];
	
	    if (desc === REQUIRED) {
	      if (!(key in obj)) {
	        Ember.assert('Required property not defined: '+key, !!partial);
	
	        // for partial applies add to hash of required keys
	        req = writableReq(obj);
	        req.__ember_count__++;
	        req[key] = true;
	      }
	    } else {
	      while (desc && desc instanceof Alias) {
	        var altKey = desc.methodName;
	        if (descs[altKey] || values[altKey]) {
	          value = values[altKey];
	          desc  = descs[altKey];
	        } else if (m.descs[altKey]) {
	          desc  = m.descs[altKey];
	          value = undefined;
	        } else {
	          desc = undefined;
	          value = obj[altKey];
	        }
	      }
	
	      if (desc === undefined && value === undefined) { continue; }
	
	      prevValue = obj[key];
	
	      if ('function' === typeof prevValue) {
	        if ((paths = prevValue.__ember_observesBefore__)) {
	          len = paths.length;
	          for (idx=0; idx < len; idx++) {
	            Ember.removeBeforeObserver(obj, paths[idx], null, key);
	          }
	        } else if ((paths = prevValue.__ember_observes__)) {
	          len = paths.length;
	          for (idx=0; idx < len; idx++) {
	            Ember.removeObserver(obj, paths[idx], null, key);
	          }
	        }
	      }
	
	      detectBinding(obj, key, value, m);
	
	      defineProperty(obj, key, desc, value, m);
	
	      if ('function' === typeof value) {
	        if (paths = value.__ember_observesBefore__) {
	          len = paths.length;
	          for (idx=0; idx < len; idx++) {
	            Ember.addBeforeObserver(obj, paths[idx], null, key);
	          }
	        } else if (paths = value.__ember_observes__) {
	          len = paths.length;
	          for (idx=0; idx < len; idx++) {
	            Ember.addObserver(obj, paths[idx], null, key);
	          }
	        }
	      }
	
	      if (req && req[key]) {
	        req = writableReq(obj);
	        req.__ember_count__--;
	        req[key] = false;
	      }
	    }
	  }
	
	  if (!partial) { // don't apply to prototype
	    finishPartial(obj, m);
	  }
	
	  // Make sure no required attrs remain
	  if (!partial && req && req.__ember_count__>0) {
	    var keys = [];
	    for (key in req) {
	      if (META_SKIP[key]) { continue; }
	      keys.push(key);
	    }
	    // TODO: Remove surrounding if clause from production build
	    Ember.assert('Required properties not defined: '+keys.join(','));
	  }
	  return obj;
	}
	
	/**
	  @method mixin
	  @for Ember
	  @param obj
	  @param mixins*
	  @return obj
	*/
	Ember.mixin = function(obj) {
	  var args = a_slice.call(arguments, 1);
	  applyMixin(obj, args, false);
	  return obj;
	};
	
	/**
	  The `Ember.Mixin` class allows you to create mixins, whose properties can be
	  added to other classes. For instance,
	
	      App.Editable = Ember.Mixin.create({
	        edit: function() {
	          console.log('starting to edit');
	          this.set('isEditing', true);
	        },
	        isEditing: false
	      });
	
	      // Mix mixins into classes by passing them as the first arguments to
	      // .extend or .create.
	      App.CommentView = Ember.View.extend(App.Editable, {
	        template: Ember.Handlebars.compile('{{#if isEditing}}...{{else}}...{{/if}}')
	      });
	
	      commentView = App.CommentView.create();
	      commentView.edit(); // => outputs 'starting to edit'
	
	  Note that Mixins are created with `Ember.Mixin.create`, not
	  `Ember.Mixin.extend`.
	
	  @class Mixin
	  @namespace Ember
	*/
	Ember.Mixin = function() { return initMixin(this, arguments); };
	
	Mixin = Ember.Mixin;
	
	Mixin._apply = applyMixin;
	
	Mixin.applyPartial = function(obj) {
	  var args = a_slice.call(arguments, 1);
	  return applyMixin(obj, args, true);
	};
	
	Mixin.finishPartial = finishPartial;
	
	/**
	  @method create
	  @static
	  @param arguments*
	*/
	Mixin.create = function() {
	  classToString.processed = false;
	  var M = this;
	  return initMixin(new M(), arguments);
	};
	
	var MixinPrototype = Mixin.prototype;
	
	/**
	  @method reopen
	  @param arguments*
	*/
	MixinPrototype.reopen = function() {
	  var mixin, tmp;
	
	  if (this.properties) {
	    mixin = Mixin.create();
	    mixin.properties = this.properties;
	    delete this.properties;
	    this.mixins = [mixin];
	  } else if (!this.mixins) {
	    this.mixins = [];
	  }
	
	  var len = arguments.length, mixins = this.mixins, idx;
	
	  for(idx=0; idx < len; idx++) {
	    mixin = arguments[idx];
	    Ember.assert('Expected hash or Mixin instance, got ' + Object.prototype.toString.call(mixin), typeof mixin === 'object' && mixin !== null && Object.prototype.toString.call(mixin) !== '[object Array]');
	
	    if (mixin instanceof Mixin) {
	      mixins.push(mixin);
	    } else {
	      tmp = Mixin.create();
	      tmp.properties = mixin;
	      mixins.push(tmp);
	    }
	  }
	
	  return this;
	};
	
	/**
	  @method apply
	  @param obj
	  @return applied object
	*/
	MixinPrototype.apply = function(obj) {
	  return applyMixin(obj, [this], false);
	};
	
	MixinPrototype.applyPartial = function(obj) {
	  return applyMixin(obj, [this], true);
	};
	
	function _detect(curMixin, targetMixin, seen) {
	  var guid = guidFor(curMixin);
	
	  if (seen[guid]) { return false; }
	  seen[guid] = true;
	
	  if (curMixin === targetMixin) { return true; }
	  var mixins = curMixin.mixins, loc = mixins ? mixins.length : 0;
	  while (--loc >= 0) {
	    if (_detect(mixins[loc], targetMixin, seen)) { return true; }
	  }
	  return false;
	}
	
	/**
	  @method detect
	  @param obj
	  @return {Boolean}
	*/
	MixinPrototype.detect = function(obj) {
	  if (!obj) { return false; }
	  if (obj instanceof Mixin) { return _detect(obj, this, {}); }
	  var mixins = Ember.meta(obj, false).mixins;
	  if (mixins) {
	    return !!mixins[guidFor(this)];
	  }
	  return false;
	};
	
	MixinPrototype.without = function() {
	  var ret = new Mixin(this);
	  ret._without = a_slice.call(arguments);
	  return ret;
	};
	
	function _keys(ret, mixin, seen) {
	  if (seen[guidFor(mixin)]) { return; }
	  seen[guidFor(mixin)] = true;
	
	  if (mixin.properties) {
	    var props = mixin.properties;
	    for (var key in props) {
	      if (props.hasOwnProperty(key)) { ret[key] = true; }
	    }
	  } else if (mixin.mixins) {
	    a_forEach.call(mixin.mixins, function(x) { _keys(ret, x, seen); });
	  }
	}
	
	MixinPrototype.keys = function() {
	  var keys = {}, seen = {}, ret = [];
	  _keys(keys, this, seen);
	  for(var key in keys) {
	    if (keys.hasOwnProperty(key)) { ret.push(key); }
	  }
	  return ret;
	};
	
	/* make Mixins have nice displayNames */
	
	var NAME_KEY = Ember.GUID_KEY+'_name';
	var get = Ember.get;
	
	function processNames(paths, root, seen) {
	  var idx = paths.length;
	  for(var key in root) {
	    if (!root.hasOwnProperty || !root.hasOwnProperty(key)) { continue; }
	    var obj = root[key];
	    paths[idx] = key;
	
	    if (obj && obj.toString === classToString) {
	      obj[NAME_KEY] = paths.join('.');
	    } else if (obj && get(obj, 'isNamespace')) {
	      if (seen[guidFor(obj)]) { continue; }
	      seen[guidFor(obj)] = true;
	      processNames(paths, obj, seen);
	    }
	  }
	  paths.length = idx; // cut out last item
	}
	
	function findNamespaces() {
	  var Namespace = Ember.Namespace, lookup = Ember.lookup, obj, isNamespace;
	
	  if (Namespace.PROCESSED) { return; }
	
	  for (var prop in lookup) {
	    //  get(window.globalStorage, 'isNamespace') would try to read the storage for domain isNamespace and cause exception in Firefox.
	    // globalStorage is a storage obsoleted by the WhatWG storage specification. See https://developer.mozilla.org/en/DOM/Storage#globalStorage
	    if (prop === "globalStorage" && lookup.StorageList && lookup.globalStorage instanceof lookup.StorageList) { continue; }
	    // Unfortunately, some versions of IE don't support window.hasOwnProperty
	    if (lookup.hasOwnProperty && !lookup.hasOwnProperty(prop)) { continue; }
	
	    // At times we are not allowed to access certain properties for security reasons.
	    // There are also times where even if we can access them, we are not allowed to access their properties.
	    try {
	      obj = Ember.lookup[prop];
	      isNamespace = obj && get(obj, 'isNamespace');
	    } catch (e) {
	      continue;
	    }
	
	    if (isNamespace) {
	      Ember.deprecate("Namespaces should not begin with lowercase.", /^[A-Z]/.test(prop));
	      obj[NAME_KEY] = prop;
	    }
	  }
	}
	
	/**
	  @private
	  @method identifyNamespaces
	  @for Ember
	*/
	Ember.identifyNamespaces = findNamespaces;
	
	superClassString = function(mixin) {
	  var superclass = mixin.superclass;
	  if (superclass) {
	    if (superclass[NAME_KEY]) { return superclass[NAME_KEY]; }
	    else { return superClassString(superclass); }
	  } else {
	    return;
	  }
	};
	
	classToString = function() {
	  var Namespace = Ember.Namespace, namespace;
	
	  // TODO: Namespace should really be in Metal
	  if (Namespace) {
	    if (!this[NAME_KEY] && !classToString.processed) {
	      if (!Namespace.PROCESSED) {
	        findNamespaces();
	        Namespace.PROCESSED = true;
	      }
	
	      classToString.processed = true;
	
	      var namespaces = Namespace.NAMESPACES;
	      for (var i=0, l=namespaces.length; i<l; i++) {
	        namespace = namespaces[i];
	        processNames([namespace.toString()], namespace, {});
	      }
	    }
	  }
	
	  if (this[NAME_KEY]) {
	    return this[NAME_KEY];
	  } else {
	    var str = superClassString(this);
	    if (str) {
	      return "(subclass of " + str + ")";
	    } else {
	      return "(unknown mixin)";
	    }
	  }
	};
	
	MixinPrototype.toString = classToString;
	
	// returns the mixins currently applied to the specified object
	// TODO: Make Ember.mixin
	Mixin.mixins = function(obj) {
	  var ret = [], mixins = Ember.meta(obj, false).mixins, key, mixin;
	  if (mixins) {
	    for(key in mixins) {
	      if (META_SKIP[key]) { continue; }
	      mixin = mixins[key];
	
	      // skip primitive mixins since these are always anonymous
	      if (!mixin.properties) { ret.push(mixins[key]); }
	    }
	  }
	  return ret;
	};
	
	REQUIRED = new Ember.Descriptor();
	REQUIRED.toString = function() { return '(Required Property)'; };
	
	/**
	  Denotes a required property for a mixin
	
	  @method required
	  @for Ember
	*/
	Ember.required = function() {
	  return REQUIRED;
	};
	
	Alias = function(methodName) {
	  this.methodName = methodName;
	};
	Alias.prototype = new Ember.Descriptor();
	
	/**
	  Makes a property or method available via an additional name.
	
	      App.PaintSample = Ember.Object.extend({
	        color: 'red',
	        colour: Ember.alias('color'),
	        name: function(){
	          return "Zed";
	        },
	        moniker: Ember.alias("name")
	      });
	      var paintSample = App.PaintSample.create()
	      paintSample.get('colour'); //=> 'red'
	      paintSample.moniker(); //=> 'Zed'
	
	  @method alias
	  @for Ember
	  @param {String} methodName name of the method or property to alias
	  @return {Ember.Descriptor}
	*/
	Ember.alias = function(methodName) {
	  return new Alias(methodName);
	};
	
	// ..........................................................
	// OBSERVER HELPER
	//
	
	/**
	  @method observer
	  @for Ember
	  @param {Function} func
	  @param {String} propertyNames*
	  @return func
	*/
	Ember.observer = function(func) {
	  var paths = a_slice.call(arguments, 1);
	  func.__ember_observes__ = paths;
	  return func;
	};
	
	// If observers ever become asynchronous, Ember.immediateObserver
	// must remain synchronous.
	/**
	  @method immediateObserver
	  @for Ember
	  @param {Function} func
	  @param {String} propertyNames*
	  @return func
	*/
	Ember.immediateObserver = function() {
	  for (var i=0, l=arguments.length; i<l; i++) {
	    var arg = arguments[i];
	    Ember.assert("Immediate observers must observe internal properties only, not properties on other objects.", typeof arg !== "string" || arg.indexOf('.') === -1);
	  }
	
	  return Ember.observer.apply(this, arguments);
	};
	
	/**
	  @method beforeObserver
	  @for Ember
	  @param {Function} func
	  @param {String} propertyNames*
	  @return func
	*/
	Ember.beforeObserver = function(func) {
	  var paths = a_slice.call(arguments, 1);
	  func.__ember_observesBefore__ = paths;
	  return func;
	};
	
	})();
	
	
	
	(function() {
	/**
	Ember Metal
	
	@module ember
	@submodule ember-metal
	*/
	
	})();
	
	
	})("undefined" === typeof global ? window : global);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {//
	// This file is automatically generated. any changes will be lost
	//
	
	
	
	(function() {
	(function(exports) { "use strict";
	
	var browserGlobal = (typeof window !== 'undefined') ? window : {};
	
	var MutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
	var async;
	
	if (typeof process !== 'undefined') {
	  async = function(callback, binding) {
	    process.nextTick(function() {
	      callback.call(binding);
	    });
	  };
	} else if (MutationObserver) {
	  var queue = [];
	
	  var observer = new MutationObserver(function() {
	    var toProcess = queue.slice();
	    queue = [];
	
	    toProcess.forEach(function(tuple) {
	      var callback = tuple[0], binding = tuple[1];
	      callback.call(binding);
	    });
	  });
	
	  var element = document.createElement('div');
	  observer.observe(element, { attributes: true });
	
	  async = function(callback, binding) {
	    queue.push([callback, binding]);
	    element.setAttribute('drainQueue', 'drainQueue');
	  };
	} else {
	  async = function(callback, binding) {
	    setTimeout(function() {
	      callback.call(binding);
	    }, 1);
	  };
	}
	
	exports.async = async;
	
	var Event = exports.Event = function(type, options) {
	  this.type = type;
	
	  for (var option in options) {
	    if (!options.hasOwnProperty(option)) { continue; }
	
	    this[option] = options[option];
	  }
	};
	
	var indexOf = function(callbacks, callback) {
	  for (var i=0, l=callbacks.length; i<l; i++) {
	    if (callbacks[i][0] === callback) { return i; }
	  }
	
	  return -1;
	};
	
	var callbacksFor = function(object) {
	  var callbacks = object._promiseCallbacks;
	
	  if (!callbacks) {
	    callbacks = object._promiseCallbacks = {};
	  }
	
	  return callbacks;
	};
	
	var EventTarget = exports.EventTarget = {
	  mixin: function(object) {
	    object.on = this.on;
	    object.off = this.off;
	    object.trigger = this.trigger;
	    return object;
	  },
	
	  on: function(eventName, callback, binding) {
	    var allCallbacks = callbacksFor(this), callbacks;
	    binding = binding || this;
	
	    callbacks = allCallbacks[eventName];
	
	    if (!callbacks) {
	      callbacks = allCallbacks[eventName] = [];
	    }
	
	    if (indexOf(callbacks, callback) === -1) {
	      callbacks.push([callback, binding]);
	    }
	  },
	
	  off: function(eventName, callback) {
	    var allCallbacks = callbacksFor(this), callbacks;
	
	    if (!callback) {
	      allCallbacks[eventName] = [];
	      return;
	    }
	
	    callbacks = allCallbacks[eventName];
	
	    var index = indexOf(callbacks, callback);
	
	    if (index !== -1) { callbacks.splice(index, 1); }
	  },
	
	  trigger: function(eventName, options) {
	    var allCallbacks = callbacksFor(this),
	        callbacks, callbackTuple, callback, binding, event;
	
	    if (callbacks = allCallbacks[eventName]) {
	      for (var i=0, l=callbacks.length; i<l; i++) {
	        callbackTuple = callbacks[i];
	        callback = callbackTuple[0];
	        binding = callbackTuple[1];
	
	        if (typeof options !== 'object') {
	          options = { detail: options };
	        }
	
	        event = new Event(eventName, options);
	        callback.call(binding, event);
	      }
	    }
	  }
	};
	
	var Promise = exports.Promise = function() {
	  this.on('promise:resolved', function(event) {
	    this.trigger('success', { detail: event.detail });
	  }, this);
	
	  this.on('promise:failed', function(event) {
	    this.trigger('error', { detail: event.detail });
	  }, this);
	};
	
	var noop = function() {};
	
	var invokeCallback = function(type, promise, callback, event) {
	  var value, error;
	
	  if (callback) {
	    try {
	      value = callback(event.detail);
	    } catch(e) {
	      error = e;
	    }
	  } else {
	    value = event.detail;
	  }
	
	  if (value instanceof Promise) {
	    value.then(function(value) {
	      promise.resolve(value);
	    }, function(error) {
	      promise.reject(error);
	    });
	  } else if (callback && value) {
	    promise.resolve(value);
	  } else if (error) {
	    promise.reject(error);
	  } else {
	    promise[type](value);
	  }
	};
	
	Promise.prototype = {
	  then: function(done, fail) {
	    var thenPromise = new Promise();
	
	    this.on('promise:resolved', function(event) {
	      invokeCallback('resolve', thenPromise, done, event);
	    });
	
	    this.on('promise:failed', function(event) {
	      invokeCallback('reject', thenPromise, fail, event);
	    });
	
	    return thenPromise;
	  },
	
	  resolve: function(value) {
	    exports.async(function() {
	      this.trigger('promise:resolved', { detail: value });
	      this.isResolved = value;
	    }, this);
	
	    this.resolve = noop;
	    this.reject = noop;
	  },
	
	  reject: function(value) {
	    exports.async(function() {
	      this.trigger('promise:failed', { detail: value });
	      this.isRejected = value;
	    }, this);
	
	    this.resolve = noop;
	    this.reject = noop;
	  }
	};
	
	EventTarget.mixin(Promise.prototype);
	 })(window.RSVP = {});
	
	})();
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	//
	// This file is automatically generated. any changes will be lost
	//
	
	__webpack_require__(11);
	
	
	(function() {
	// ==========================================================================
	// Project:   metamorph
	// Copyright: Â©2011 My Company Inc. All rights reserved.
	// ==========================================================================
	
	(function(window) {
	
	  var K = function(){},
	      guid = 0,
	      document = window.document,
	
	      // Feature-detect the W3C range API, the extended check is for IE9 which only partially supports ranges
	      supportsRange = ('createRange' in document) && (typeof Range !== 'undefined') && Range.prototype.createContextualFragment,
	
	      // Internet Explorer prior to 9 does not allow setting innerHTML if the first element
	      // is a "zero-scope" element. This problem can be worked around by making
	      // the first node an invisible text node. We, like Modernizr, use &shy;
	      needsShy = (function(){
	        var testEl = document.createElement('div');
	        testEl.innerHTML = "<div></div>";
	        testEl.firstChild.innerHTML = "<script></script>";
	        return testEl.firstChild.innerHTML === '';
	      })();
	
	  // Constructor that supports either Metamorph('foo') or new
	  // Metamorph('foo');
	  //
	  // Takes a string of HTML as the argument.
	
	  var Metamorph = function(html) {
	    var self;
	
	    if (this instanceof Metamorph) {
	      self = this;
	    } else {
	      self = new K();
	    }
	
	    self.innerHTML = html;
	    var myGuid = 'metamorph-'+(guid++);
	    self.start = myGuid + '-start';
	    self.end = myGuid + '-end';
	
	    return self;
	  };
	
	  K.prototype = Metamorph.prototype;
	
	  var rangeFor, htmlFunc, removeFunc, outerHTMLFunc, appendToFunc, afterFunc, prependFunc, startTagFunc, endTagFunc;
	
	  outerHTMLFunc = function() {
	    return this.startTag() + this.innerHTML + this.endTag();
	  };
	
	  startTagFunc = function() {
	    return "<script id='" + this.start + "' type='text/x-placeholder'></script>";
	  };
	
	  endTagFunc = function() {
	    return "<script id='" + this.end + "' type='text/x-placeholder'></script>";
	  };
	
	  // If we have the W3C range API, this process is relatively straight forward.
	  if (supportsRange) {
	
	    // Get a range for the current morph. Optionally include the starting and
	    // ending placeholders.
	    rangeFor = function(morph, outerToo) {
	      var range = document.createRange();
	      var before = document.getElementById(morph.start);
	      var after = document.getElementById(morph.end);
	
	      if (outerToo) {
	        range.setStartBefore(before);
	        range.setEndAfter(after);
	      } else {
	        range.setStartAfter(before);
	        range.setEndBefore(after);
	      }
	
	      return range;
	    };
	
	    htmlFunc = function(html, outerToo) {
	      // get a range for the current metamorph object
	      var range = rangeFor(this, outerToo);
	
	      // delete the contents of the range, which will be the
	      // nodes between the starting and ending placeholder.
	      range.deleteContents();
	
	      // create a new document fragment for the HTML
	      var fragment = range.createContextualFragment(html);
	
	      // insert the fragment into the range
	      range.insertNode(fragment);
	    };
	
	    removeFunc = function() {
	      // get a range for the current metamorph object including
	      // the starting and ending placeholders.
	      var range = rangeFor(this, true);
	
	      // delete the entire range.
	      range.deleteContents();
	    };
	
	    appendToFunc = function(node) {
	      var range = document.createRange();
	      range.setStart(node);
	      range.collapse(false);
	      var frag = range.createContextualFragment(this.outerHTML());
	      node.appendChild(frag);
	    };
	
	    afterFunc = function(html) {
	      var range = document.createRange();
	      var after = document.getElementById(this.end);
	
	      range.setStartAfter(after);
	      range.setEndAfter(after);
	
	      var fragment = range.createContextualFragment(html);
	      range.insertNode(fragment);
	    };
	
	    prependFunc = function(html) {
	      var range = document.createRange();
	      var start = document.getElementById(this.start);
	
	      range.setStartAfter(start);
	      range.setEndAfter(start);
	
	      var fragment = range.createContextualFragment(html);
	      range.insertNode(fragment);
	    };
	
	  } else {
	    /**
	     * This code is mostly taken from jQuery, with one exception. In jQuery's case, we
	     * have some HTML and we need to figure out how to convert it into some nodes.
	     *
	     * In this case, jQuery needs to scan the HTML looking for an opening tag and use
	     * that as the key for the wrap map. In our case, we know the parent node, and
	     * can use its type as the key for the wrap map.
	     **/
	    var wrapMap = {
	      select: [ 1, "<select multiple='multiple'>", "</select>" ],
	      fieldset: [ 1, "<fieldset>", "</fieldset>" ],
	      table: [ 1, "<table>", "</table>" ],
	      tbody: [ 2, "<table><tbody>", "</tbody></table>" ],
	      tr: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
	      colgroup: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
	      map: [ 1, "<map>", "</map>" ],
	      _default: [ 0, "", "" ]
	    };
	
	    /**
	     * Given a parent node and some HTML, generate a set of nodes. Return the first
	     * node, which will allow us to traverse the rest using nextSibling.
	     *
	     * We need to do this because innerHTML in IE does not really parse the nodes.
	     **/
	    var firstNodeFor = function(parentNode, html) {
	      var arr = wrapMap[parentNode.tagName.toLowerCase()] || wrapMap._default;
	      var depth = arr[0], start = arr[1], end = arr[2];
	
	      if (needsShy) { html = '&shy;'+html; }
	
	      var element = document.createElement('div');
	      element.innerHTML = start + html + end;
	
	      for (var i=0; i<=depth; i++) {
	        element = element.firstChild;
	      }
	
	      // Look for &shy; to remove it.
	      if (needsShy) {
	        var shyElement = element;
	
	        // Sometimes we get nameless elements with the shy inside
	        while (shyElement.nodeType === 1 && !shyElement.nodeName) {
	          shyElement = shyElement.firstChild;
	        }
	
	        // At this point it's the actual unicode character.
	        if (shyElement.nodeType === 3 && shyElement.nodeValue.charAt(0) === "\u00AD") {
	          shyElement.nodeValue = shyElement.nodeValue.slice(1);
	        }
	      }
	
	      return element;
	    };
	
	    /**
	     * In some cases, Internet Explorer can create an anonymous node in
	     * the hierarchy with no tagName. You can create this scenario via:
	     *
	     *     div = document.createElement("div");
	     *     div.innerHTML = "<table>&shy<script></script><tr><td>hi</td></tr></table>";
	     *     div.firstChild.firstChild.tagName //=> ""
	     *
	     * If our script markers are inside such a node, we need to find that
	     * node and use *it* as the marker.
	     **/
	    var realNode = function(start) {
	      while (start.parentNode.tagName === "") {
	        start = start.parentNode;
	      }
	
	      return start;
	    };
	
	    /**
	     * When automatically adding a tbody, Internet Explorer inserts the
	     * tbody immediately before the first <tr>. Other browsers create it
	     * before the first node, no matter what.
	     *
	     * This means the the following code:
	     *
	     *     div = document.createElement("div");
	     *     div.innerHTML = "<table><script id='first'></script><tr><td>hi</td></tr><script id='last'></script></table>
	     *
	     * Generates the following DOM in IE:
	     *
	     *     + div
	     *       + table
	     *         - script id='first'
	     *         + tbody
	     *           + tr
	     *             + td
	     *               - "hi"
	     *           - script id='last'
	     *
	     * Which means that the two script tags, even though they were
	     * inserted at the same point in the hierarchy in the original
	     * HTML, now have different parents.
	     *
	     * This code reparents the first script tag by making it the tbody's
	     * first child.
	     **/
	    var fixParentage = function(start, end) {
	      if (start.parentNode !== end.parentNode) {
	        end.parentNode.insertBefore(start, end.parentNode.firstChild);
	      }
	    };
	
	    htmlFunc = function(html, outerToo) {
	      // get the real starting node. see realNode for details.
	      var start = realNode(document.getElementById(this.start));
	      var end = document.getElementById(this.end);
	      var parentNode = end.parentNode;
	      var node, nextSibling, last;
	
	      // make sure that the start and end nodes share the same
	      // parent. If not, fix it.
	      fixParentage(start, end);
	
	      // remove all of the nodes after the starting placeholder and
	      // before the ending placeholder.
	      node = start.nextSibling;
	      while (node) {
	        nextSibling = node.nextSibling;
	        last = node === end;
	
	        // if this is the last node, and we want to remove it as well,
	        // set the `end` node to the next sibling. This is because
	        // for the rest of the function, we insert the new nodes
	        // before the end (note that insertBefore(node, null) is
	        // the same as appendChild(node)).
	        //
	        // if we do not want to remove it, just break.
	        if (last) {
	          if (outerToo) { end = node.nextSibling; } else { break; }
	        }
	
	        node.parentNode.removeChild(node);
	
	        // if this is the last node and we didn't break before
	        // (because we wanted to remove the outer nodes), break
	        // now.
	        if (last) { break; }
	
	        node = nextSibling;
	      }
	
	      // get the first node for the HTML string, even in cases like
	      // tables and lists where a simple innerHTML on a div would
	      // swallow some of the content.
	      node = firstNodeFor(start.parentNode, html);
	
	      // copy the nodes for the HTML between the starting and ending
	      // placeholder.
	      while (node) {
	        nextSibling = node.nextSibling;
	        parentNode.insertBefore(node, end);
	        node = nextSibling;
	      }
	    };
	
	    // remove the nodes in the DOM representing this metamorph.
	    //
	    // this includes the starting and ending placeholders.
	    removeFunc = function() {
	      var start = realNode(document.getElementById(this.start));
	      var end = document.getElementById(this.end);
	
	      this.html('');
	      start.parentNode.removeChild(start);
	      end.parentNode.removeChild(end);
	    };
	
	    appendToFunc = function(parentNode) {
	      var node = firstNodeFor(parentNode, this.outerHTML());
	
	      while (node) {
	        nextSibling = node.nextSibling;
	        parentNode.appendChild(node);
	        node = nextSibling;
	      }
	    };
	
	    afterFunc = function(html) {
	      // get the real starting node. see realNode for details.
	      var end = document.getElementById(this.end);
	      var insertBefore = end.nextSibling;
	      var parentNode = end.parentNode;
	      var nextSibling;
	      var node;
	
	      // get the first node for the HTML string, even in cases like
	      // tables and lists where a simple innerHTML on a div would
	      // swallow some of the content.
	      node = firstNodeFor(parentNode, html);
	
	      // copy the nodes for the HTML between the starting and ending
	      // placeholder.
	      while (node) {
	        nextSibling = node.nextSibling;
	        parentNode.insertBefore(node, insertBefore);
	        node = nextSibling;
	      }
	    };
	
	    prependFunc = function(html) {
	      var start = document.getElementById(this.start);
	      var parentNode = start.parentNode;
	      var nextSibling;
	      var node;
	
	      node = firstNodeFor(parentNode, html);
	      var insertBefore = start.nextSibling;
	
	      while (node) {
	        nextSibling = node.nextSibling;
	        parentNode.insertBefore(node, insertBefore);
	        node = nextSibling;
	      }
	    }
	  }
	
	  Metamorph.prototype.html = function(html) {
	    this.checkRemoved();
	    if (html === undefined) { return this.innerHTML; }
	
	    htmlFunc.call(this, html);
	
	    this.innerHTML = html;
	  };
	
	  Metamorph.prototype.replaceWith = function(html) {
	    this.checkRemoved();
	    htmlFunc.call(this, html, true);
	  };
	
	  Metamorph.prototype.remove = removeFunc;
	  Metamorph.prototype.outerHTML = outerHTMLFunc;
	  Metamorph.prototype.appendTo = appendToFunc;
	  Metamorph.prototype.after = afterFunc;
	  Metamorph.prototype.prepend = prependFunc;
	  Metamorph.prototype.startTag = startTagFunc;
	  Metamorph.prototype.endTag = endTagFunc;
	
	  Metamorph.prototype.isRemoved = function() {
	    var before = document.getElementById(this.start);
	    var after = document.getElementById(this.end);
	
	    return !before || !after;
	  };
	
	  Metamorph.prototype.checkRemoved = function() {
	    if (this.isRemoved()) {
	      throw new Error("Cannot perform operations on a Metamorph that is not in the DOM.");
	    }
	  };
	
	  window.Metamorph = Metamorph;
	})(this);
	
	
	})();
	


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	if ('undefined' === typeof window) {
	  // extend the global namespace so that 
	  window = __webpack_require__(21).jsdom().createWindow(this);
	  //window.XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest;
	}
	
	if ('undefined' === typeof document) {
	  document = window.document;
	}
	
	module.exports = window;


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function () {
	function create(window) {
	
	  if(window == null ) {
	    window = __webpack_require__(28).jsdom().createWindow();
	    // assume window is a jsdom instance...
	    // jsdom includes an incomplete version of XMLHttpRequest
	    window.XMLHttpRequest = __webpack_require__(29).XMLHttpRequest;
	    // trick jQuery into thinking CORS is supported (should be in node-XMLHttpRequest)
	    window.XMLHttpRequest.prototype.withCredentials = false;
	    
	    if(window.location == null) {
	      window.location = __webpack_require__(23);  
	    }
	
	    if(window.navigator == null) {
	      window.navigator = __webpack_require__(19);
	    }
	  }
	  
	
	  var location = window.location,
	      navigator = window.navigator,
	      XMLHttpRequest = window.XMLHttpRequest;
	
	  /*!
	 * jQuery JavaScript Library v1.7.2
	 * http://jquery.com/
	 *
	 * Copyright 2011, John Resig
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 * http://jquery.org/license
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 * Copyright 2011, The Dojo Foundation
	 * Released under the MIT, BSD, and GPL Licenses.
	 *
	 * Date: Wed Mar 21 12:46:34 2012 -0700
	 */
	(function( window, undefined ) {
	
	// Use the correct document accordingly with window argument (sandbox)
	var document = window.document,
		navigator = window.navigator,
		location = window.location;
	var jQuery = (function() {
	
	// Define a local copy of jQuery
	var jQuery = function( selector, context ) {
			// The jQuery object is actually just the init constructor 'enhanced'
			return new jQuery.fn.init( selector, context, rootjQuery );
		},
	
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,
	
		// Map over the $ in case of overwrite
		_$ = window.$,
	
		// A central reference to the root jQuery(document)
		rootjQuery,
	
		// A simple way to check for HTML strings or ID strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		quickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,
	
		// Check if a string has a non-whitespace character in it
		rnotwhite = /\S/,
	
		// Used for trimming whitespace
		trimLeft = /^\s+/,
		trimRight = /\s+$/,
	
		// Match a standalone tag
		rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,
	
		// JSON RegExp
		rvalidchars = /^[\],:{}\s]*$/,
		rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
		rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
		rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	
		// Useragent RegExp
		rwebkit = /(webkit)[ \/]([\w.]+)/,
		ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/,
		rmsie = /(msie) ([\w.]+)/,
		rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/,
	
		// Matches dashed string for camelizing
		rdashAlpha = /-([a-z]|[0-9])/ig,
		rmsPrefix = /^-ms-/,
	
		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return ( letter + "" ).toUpperCase();
		},
	
		// Keep a UserAgent string for use with jQuery.browser
		userAgent = navigator.userAgent,
	
		// For matching the engine and version of the browser
		browserMatch,
	
		// The deferred used on DOM ready
		readyList,
	
		// The ready event handler
		DOMContentLoaded,
	
		// Save a reference to some core methods
		toString = Object.prototype.toString,
		hasOwn = Object.prototype.hasOwnProperty,
		push = Array.prototype.push,
		slice = Array.prototype.slice,
		trim = String.prototype.trim,
		indexOf = Array.prototype.indexOf,
	
		// [[Class]] -> type pairs
		class2type = {};
	
	jQuery.fn = jQuery.prototype = {
		constructor: jQuery,
		init: function( selector, context, rootjQuery ) {
			var match, elem, ret, doc;
	
			// Handle $(""), $(null), or $(undefined)
			if ( !selector ) {
				return this;
			}
	
			// Handle $(DOMElement)
			if ( selector.nodeType ) {
				this.context = this[0] = selector;
				this.length = 1;
				return this;
			}
	
			// The body element only exists once, optimize finding it
			if ( selector === "body" && !context && document.body ) {
				this.context = document;
				this[0] = document.body;
				this.selector = selector;
				this.length = 1;
				return this;
			}
	
			// Handle HTML strings
			if ( typeof selector === "string" ) {
				// Are we dealing with HTML string or an ID?
				if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];
	
				} else {
					match = quickExpr.exec( selector );
				}
	
				// Verify a match, and that no context was specified for #id
				if ( match && (match[1] || !context) ) {
	
					// HANDLE: $(html) -> $(array)
					if ( match[1] ) {
						context = context instanceof jQuery ? context[0] : context;
						doc = ( context ? context.ownerDocument || context : document );
	
						// If a single string is passed in and it's a single tag
						// just do a createElement and skip the rest
						ret = rsingleTag.exec( selector );
	
						if ( ret ) {
							if ( jQuery.isPlainObject( context ) ) {
								selector = [ document.createElement( ret[1] ) ];
								jQuery.fn.attr.call( selector, context, true );
	
							} else {
								selector = [ doc.createElement( ret[1] ) ];
							}
	
						} else {
							ret = jQuery.buildFragment( [ match[1] ], [ doc ] );
							selector = ( ret.cacheable ? jQuery.clone(ret.fragment) : ret.fragment ).childNodes;
						}
	
						return jQuery.merge( this, selector );
	
					// HANDLE: $("#id")
					} else {
						elem = document.getElementById( match[2] );
	
						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						if ( elem && elem.parentNode ) {
							// Handle the case where IE and Opera return items
							// by name instead of ID
							if ( elem.id !== match[2] ) {
								return rootjQuery.find( selector );
							}
	
							// Otherwise, we inject the element directly into the jQuery object
							this.length = 1;
							this[0] = elem;
						}
	
						this.context = document;
						this.selector = selector;
						return this;
					}
	
				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || rootjQuery ).find( selector );
	
				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}
	
			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return rootjQuery.ready( selector );
			}
	
			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}
	
			return jQuery.makeArray( selector, this );
		},
	
		// Start with an empty selector
		selector: "",
	
		// The current version of jQuery being used
		jquery: "1.7.2",
	
		// The default length of a jQuery object is 0
		length: 0,
	
		// The number of elements contained in the matched element set
		size: function() {
			return this.length;
		},
	
		toArray: function() {
			return slice.call( this, 0 );
		},
	
		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num == null ?
	
				// Return a 'clean' array
				this.toArray() :
	
				// Return just the object
				( num < 0 ? this[ this.length + num ] : this[ num ] );
		},
	
		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems, name, selector ) {
			// Build a new jQuery matched element set
			var ret = this.constructor();
	
			if ( jQuery.isArray( elems ) ) {
				push.apply( ret, elems );
	
			} else {
				jQuery.merge( ret, elems );
			}
	
			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
	
			ret.context = this.context;
	
			if ( name === "find" ) {
				ret.selector = this.selector + ( this.selector ? " " : "" ) + selector;
			} else if ( name ) {
				ret.selector = this.selector + "." + name + "(" + selector + ")";
			}
	
			// Return the newly-formed element set
			return ret;
		},
	
		// Execute a callback for every element in the matched set.
		// (You can seed the arguments with an array of args, but this is
		// only used internally.)
		each: function( callback, args ) {
			return jQuery.each( this, callback, args );
		},
	
		ready: function( fn ) {
			// Attach the listeners
			jQuery.bindReady();
	
			// Add the callback
			readyList.add( fn );
	
			return this;
		},
	
		eq: function( i ) {
			i = +i;
			return i === -1 ?
				this.slice( i ) :
				this.slice( i, i + 1 );
		},
	
		first: function() {
			return this.eq( 0 );
		},
	
		last: function() {
			return this.eq( -1 );
		},
	
		slice: function() {
			return this.pushStack( slice.apply( this, arguments ),
				"slice", slice.call(arguments).join(",") );
		},
	
		map: function( callback ) {
			return this.pushStack( jQuery.map(this, function( elem, i ) {
				return callback.call( elem, i, elem );
			}));
		},
	
		end: function() {
			return this.prevObject || this.constructor(null);
		},
	
		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: [].sort,
		splice: [].splice
	};
	
	// Give the init function the jQuery prototype for later instantiation
	jQuery.fn.init.prototype = jQuery.fn;
	
	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[0] || {},
			i = 1,
			length = arguments.length,
			deep = false;
	
		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;
			target = arguments[1] || {};
			// skip the boolean and the target
			i = 2;
		}
	
		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
			target = {};
		}
	
		// extend jQuery itself if only one argument is passed
		if ( length === i ) {
			target = this;
			--i;
		}
	
		for ( ; i < length; i++ ) {
			// Only deal with non-null/undefined values
			if ( (options = arguments[ i ]) != null ) {
				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];
	
					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}
	
					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray(src) ? src : [];
	
						} else {
							clone = src && jQuery.isPlainObject(src) ? src : {};
						}
	
						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );
	
					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}
	
		// Return the modified object
		return target;
	};
	
	jQuery.extend({
		noConflict: function( deep ) {
			if ( window.$ === jQuery ) {
				window.$ = _$;
			}
	
			if ( deep && window.jQuery === jQuery ) {
				window.jQuery = _jQuery;
			}
	
			return jQuery;
		},
	
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,
	
		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,
	
		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},
	
		// Handle when the DOM is ready
		ready: function( wait ) {
			// Either a released hold or an DOMready/load event and not yet ready
			if ( (wait === true && !--jQuery.readyWait) || (wait !== true && !jQuery.isReady) ) {
				// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
				if ( !document.body ) {
					return setTimeout( jQuery.ready, 1 );
				}
	
				// Remember that the DOM is ready
				jQuery.isReady = true;
	
				// If a normal DOM Ready event fired, decrement, and wait if need be
				if ( wait !== true && --jQuery.readyWait > 0 ) {
					return;
				}
	
				// If there are functions bound, to execute
				readyList.fireWith( document, [ jQuery ] );
	
				// Trigger any bound ready events
				if ( jQuery.fn.trigger ) {
					jQuery( document ).trigger( "ready" ).off( "ready" );
				}
			}
		},
	
		bindReady: function() {
			if ( readyList ) {
				return;
			}
	
			readyList = jQuery.Callbacks( "once memory" );
	
			// Catch cases where $(document).ready() is called after the
			// browser event has already occurred.
			if ( document.readyState === "complete" ) {
				// Handle it asynchronously to allow scripts the opportunity to delay ready
				return setTimeout( jQuery.ready, 1 );
			}
	
			// Mozilla, Opera and webkit nightlies currently support this event
			if ( document.addEventListener ) {
				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );
	
				// A fallback to window.onload, that will always work
				window.addEventListener( "load", jQuery.ready, false );
	
			// If IE event model is used
			} else if ( document.attachEvent ) {
				// ensure firing before onload,
				// maybe late but safe also for iframes
				document.attachEvent( "onreadystatechange", DOMContentLoaded );
	
				// A fallback to window.onload, that will always work
				window.attachEvent( "onload", jQuery.ready );
	
				// If IE and not a frame
				// continually check to see if the document is ready
				var toplevel = false;
	
				try {
					toplevel = window.frameElement == null;
				} catch(e) {}
	
				if ( document.documentElement.doScroll && toplevel ) {
					doScrollCheck();
				}
			}
		},
	
		// See test/unit/core.js for details concerning isFunction.
		// Since version 1.3, DOM methods and functions like alert
		// aren't supported. They return false on IE (#2968).
		isFunction: function( obj ) {
			return jQuery.type(obj) === "function";
		},
	
		isArray: Array.isArray || function( obj ) {
			return jQuery.type(obj) === "array";
		},
	
		isWindow: function( obj ) {
			return obj != null && obj == obj.window;
		},
	
		isNumeric: function( obj ) {
			return !isNaN( parseFloat(obj) ) && isFinite( obj );
		},
	
		type: function( obj ) {
			return obj == null ?
				String( obj ) :
				class2type[ toString.call(obj) ] || "object";
		},
	
		isPlainObject: function( obj ) {
			// Must be an Object.
			// Because of IE, we also have to check the presence of the constructor property.
			// Make sure that DOM nodes and window objects don't pass through, as well
			if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}
	
			try {
				// Not own constructor property must be Object
				if ( obj.constructor &&
					!hasOwn.call(obj, "constructor") &&
					!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
					return false;
				}
			} catch ( e ) {
				// IE8,9 Will throw exceptions on certain host objects #9897
				return false;
			}
	
			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own.
	
			var key;
			for ( key in obj ) {}
	
			return key === undefined || hasOwn.call( obj, key );
		},
	
		isEmptyObject: function( obj ) {
			for ( var name in obj ) {
				return false;
			}
			return true;
		},
	
		error: function( msg ) {
			throw new Error( msg );
		},
	
		parseJSON: function( data ) {
			if ( typeof data !== "string" || !data ) {
				return null;
			}
	
			// Make sure leading/trailing whitespace is removed (IE can't handle it)
			data = jQuery.trim( data );
	
			// Attempt to parse using the native JSON parser first
			if ( window.JSON && window.JSON.parse ) {
				return window.JSON.parse( data );
			}
	
			// Make sure the incoming data is actual JSON
			// Logic borrowed from http://json.org/json2.js
			if ( rvalidchars.test( data.replace( rvalidescape, "@" )
				.replace( rvalidtokens, "]" )
				.replace( rvalidbraces, "")) ) {
	
				return ( new Function( "return " + data ) )();
	
			}
			jQuery.error( "Invalid JSON: " + data );
		},
	
		// Cross-browser xml parsing
		parseXML: function( data ) {
			if ( typeof data !== "string" || !data ) {
				return null;
			}
			var xml, tmp;
			try {
				if ( window.DOMParser ) { // Standard
					tmp = new DOMParser();
					xml = tmp.parseFromString( data , "text/xml" );
				} else { // IE
					xml = new ActiveXObject( "Microsoft.XMLDOM" );
					xml.async = "false";
					xml.loadXML( data );
				}
			} catch( e ) {
				xml = undefined;
			}
			if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
				jQuery.error( "Invalid XML: " + data );
			}
			return xml;
		},
	
		noop: function() {},
	
		// Evaluates a script in a global context
		// Workarounds based on findings by Jim Driscoll
		// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
		globalEval: function( data ) {
			if ( data && rnotwhite.test( data ) ) {
				// We use execScript on Internet Explorer
				// We use an anonymous function so that context is window
				// rather than jQuery in Firefox
				( window.execScript || function( data ) {
					window[ "eval" ].call( window, data );
				} )( data );
			}
		},
	
		// Convert dashed to camelCase; used by the css and data modules
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},
	
		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase();
		},
	
		// args is for internal usage only
		each: function( object, callback, args ) {
			var name, i = 0,
				length = object.length,
				isObj = length === undefined || jQuery.isFunction( object );
	
			if ( args ) {
				if ( isObj ) {
					for ( name in object ) {
						if ( callback.apply( object[ name ], args ) === false ) {
							break;
						}
					}
				} else {
					for ( ; i < length; ) {
						if ( callback.apply( object[ i++ ], args ) === false ) {
							break;
						}
					}
				}
	
			// A special, fast, case for the most common use of each
			} else {
				if ( isObj ) {
					for ( name in object ) {
						if ( callback.call( object[ name ], name, object[ name ] ) === false ) {
							break;
						}
					}
				} else {
					for ( ; i < length; ) {
						if ( callback.call( object[ i ], i, object[ i++ ] ) === false ) {
							break;
						}
					}
				}
			}
	
			return object;
		},
	
		// Use native String.trim function wherever possible
		trim: trim ?
			function( text ) {
				return text == null ?
					"" :
					trim.call( text );
			} :
	
			// Otherwise use our own trimming functionality
			function( text ) {
				return text == null ?
					"" :
					text.toString().replace( trimLeft, "" ).replace( trimRight, "" );
			},
	
		// results is for internal usage only
		makeArray: function( array, results ) {
			var ret = results || [];
	
			if ( array != null ) {
				// The window, strings (and functions) also have 'length'
				// Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
				var type = jQuery.type( array );
	
				if ( array.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow( array ) ) {
					push.call( ret, array );
				} else {
					jQuery.merge( ret, array );
				}
			}
	
			return ret;
		},
	
		inArray: function( elem, array, i ) {
			var len;
	
			if ( array ) {
				if ( indexOf ) {
					return indexOf.call( array, elem, i );
				}
	
				len = array.length;
				i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;
	
				for ( ; i < len; i++ ) {
					// Skip accessing in sparse arrays
					if ( i in array && array[ i ] === elem ) {
						return i;
					}
				}
			}
	
			return -1;
		},
	
		merge: function( first, second ) {
			var i = first.length,
				j = 0;
	
			if ( typeof second.length === "number" ) {
				for ( var l = second.length; j < l; j++ ) {
					first[ i++ ] = second[ j ];
				}
	
			} else {
				while ( second[j] !== undefined ) {
					first[ i++ ] = second[ j++ ];
				}
			}
	
			first.length = i;
	
			return first;
		},
	
		grep: function( elems, callback, inv ) {
			var ret = [], retVal;
			inv = !!inv;
	
			// Go through the array, only saving the items
			// that pass the validator function
			for ( var i = 0, length = elems.length; i < length; i++ ) {
				retVal = !!callback( elems[ i ], i );
				if ( inv !== retVal ) {
					ret.push( elems[ i ] );
				}
			}
	
			return ret;
		},
	
		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var value, key, ret = [],
				i = 0,
				length = elems.length,
				// jquery objects are treated as arrays
				isArray = elems instanceof jQuery || length !== undefined && typeof length === "number" && ( ( length > 0 && elems[ 0 ] && elems[ length -1 ] ) || length === 0 || jQuery.isArray( elems ) ) ;
	
			// Go through the array, translating each of the items to their
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret[ ret.length ] = value;
					}
				}
	
			// Go through every key on the object,
			} else {
				for ( key in elems ) {
					value = callback( elems[ key ], key, arg );
	
					if ( value != null ) {
						ret[ ret.length ] = value;
					}
				}
			}
	
			// Flatten any nested arrays
			return ret.concat.apply( [], ret );
		},
	
		// A global GUID counter for objects
		guid: 1,
	
		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			if ( typeof context === "string" ) {
				var tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}
	
			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}
	
			// Simulated bind
			var args = slice.call( arguments, 2 ),
				proxy = function() {
					return fn.apply( context, args.concat( slice.call( arguments ) ) );
				};
	
			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++;
	
			return proxy;
		},
	
		// Mutifunctional method to get and set values to a collection
		// The value/s can optionally be executed if it's a function
		access: function( elems, fn, key, value, chainable, emptyGet, pass ) {
			var exec,
				bulk = key == null,
				i = 0,
				length = elems.length;
	
			// Sets many values
			if ( key && typeof key === "object" ) {
				for ( i in key ) {
					jQuery.access( elems, fn, i, key[i], 1, emptyGet, value );
				}
				chainable = 1;
	
			// Sets one value
			} else if ( value !== undefined ) {
				// Optionally, function values get executed if exec is true
				exec = pass === undefined && jQuery.isFunction( value );
	
				if ( bulk ) {
					// Bulk operations only iterate when executing function values
					if ( exec ) {
						exec = fn;
						fn = function( elem, key, value ) {
							return exec.call( jQuery( elem ), value );
						};
	
					// Otherwise they run against the entire set
					} else {
						fn.call( elems, value );
						fn = null;
					}
				}
	
				if ( fn ) {
					for (; i < length; i++ ) {
						fn( elems[i], key, exec ? value.call( elems[i], i, fn( elems[i], key ) ) : value, pass );
					}
				}
	
				chainable = 1;
			}
	
			return chainable ?
				elems :
	
				// Gets
				bulk ?
					fn.call( elems ) :
					length ? fn( elems[0], key ) : emptyGet;
		},
	
		now: function() {
			return ( new Date() ).getTime();
		},
	
		// Use of jQuery.browser is frowned upon.
		// More details: http://docs.jquery.com/Utilities/jQuery.browser
		uaMatch: function( ua ) {
			ua = ua.toLowerCase();
	
			var match = rwebkit.exec( ua ) ||
				ropera.exec( ua ) ||
				rmsie.exec( ua ) ||
				ua.indexOf("compatible") < 0 && rmozilla.exec( ua ) ||
				[];
	
			return { browser: match[1] || "", version: match[2] || "0" };
		},
	
		sub: function() {
			function jQuerySub( selector, context ) {
				return new jQuerySub.fn.init( selector, context );
			}
			jQuery.extend( true, jQuerySub, this );
			jQuerySub.superclass = this;
			jQuerySub.fn = jQuerySub.prototype = this();
			jQuerySub.fn.constructor = jQuerySub;
			jQuerySub.sub = this.sub;
			jQuerySub.fn.init = function init( selector, context ) {
				if ( context && context instanceof jQuery && !(context instanceof jQuerySub) ) {
					context = jQuerySub( context );
				}
	
				return jQuery.fn.init.call( this, selector, context, rootjQuerySub );
			};
			jQuerySub.fn.init.prototype = jQuerySub.fn;
			var rootjQuerySub = jQuerySub(document);
			return jQuerySub;
		},
	
		browser: {}
	});
	
	// Populate the class2type map
	jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(i, name) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	});
	
	browserMatch = jQuery.uaMatch( userAgent );
	if ( browserMatch.browser ) {
		jQuery.browser[ browserMatch.browser ] = true;
		jQuery.browser.version = browserMatch.version;
	}
	
	// Deprecated, use jQuery.browser.webkit instead
	if ( jQuery.browser.webkit ) {
		jQuery.browser.safari = true;
	}
	
	// IE doesn't match non-breaking spaces with \s
	if ( rnotwhite.test( "\xA0" ) ) {
		trimLeft = /^[\s\xA0]+/;
		trimRight = /[\s\xA0]+$/;
	}
	
	// All jQuery objects should point back to these
	rootjQuery = jQuery(document);
	
	// Cleanup functions for the document ready method
	if ( document.addEventListener ) {
		DOMContentLoaded = function() {
			document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
			jQuery.ready();
		};
	
	} else if ( document.attachEvent ) {
		DOMContentLoaded = function() {
			// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
			if ( document.readyState === "complete" ) {
				document.detachEvent( "onreadystatechange", DOMContentLoaded );
				jQuery.ready();
			}
		};
	}
	
	// The DOM ready check for Internet Explorer
	function doScrollCheck() {
		if ( jQuery.isReady ) {
			return;
		}
	
		try {
			// If IE is used, use the trick by Diego Perini
			// http://javascript.nwbox.com/IEContentLoaded/
			document.documentElement.doScroll("left");
		} catch(e) {
			setTimeout( doScrollCheck, 1 );
			return;
		}
	
		// and execute any waiting functions
		jQuery.ready();
	}
	
	return jQuery;
	
	})();
	
	
	// String to Object flags format cache
	var flagsCache = {};
	
	// Convert String-formatted flags into Object-formatted ones and store in cache
	function createFlags( flags ) {
		var object = flagsCache[ flags ] = {},
			i, length;
		flags = flags.split( /\s+/ );
		for ( i = 0, length = flags.length; i < length; i++ ) {
			object[ flags[i] ] = true;
		}
		return object;
	}
	
	/*
	 * Create a callback list using the following parameters:
	 *
	 *	flags:	an optional list of space-separated flags that will change how
	 *			the callback list behaves
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible flags:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( flags ) {
	
		// Convert flags from String-formatted to Object-formatted
		// (we check in cache first)
		flags = flags ? ( flagsCache[ flags ] || createFlags( flags ) ) : {};
	
		var // Actual callback list
			list = [],
			// Stack of fire calls for repeatable lists
			stack = [],
			// Last fire value (for non-forgettable lists)
			memory,
			// Flag to know if list was already fired
			fired,
			// Flag to know if list is currently firing
			firing,
			// First callback to fire (used internally by add and fireWith)
			firingStart,
			// End of the loop when firing
			firingLength,
			// Index of currently firing callback (modified by remove if needed)
			firingIndex,
			// Add one or several callbacks to the list
			add = function( args ) {
				var i,
					length,
					elem,
					type,
					actual;
				for ( i = 0, length = args.length; i < length; i++ ) {
					elem = args[ i ];
					type = jQuery.type( elem );
					if ( type === "array" ) {
						// Inspect recursively
						add( elem );
					} else if ( type === "function" ) {
						// Add if not in unique mode and callback is not in
						if ( !flags.unique || !self.has( elem ) ) {
							list.push( elem );
						}
					}
				}
			},
			// Fire callbacks
			fire = function( context, args ) {
				args = args || [];
				memory = !flags.memory || [ context, args ];
				fired = true;
				firing = true;
				firingIndex = firingStart || 0;
				firingStart = 0;
				firingLength = list.length;
				for ( ; list && firingIndex < firingLength; firingIndex++ ) {
					if ( list[ firingIndex ].apply( context, args ) === false && flags.stopOnFalse ) {
						memory = true; // Mark as halted
						break;
					}
				}
				firing = false;
				if ( list ) {
					if ( !flags.once ) {
						if ( stack && stack.length ) {
							memory = stack.shift();
							self.fireWith( memory[ 0 ], memory[ 1 ] );
						}
					} else if ( memory === true ) {
						self.disable();
					} else {
						list = [];
					}
				}
			},
			// Actual Callbacks object
			self = {
				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {
						var length = list.length;
						add( arguments );
						// Do we need to add the callbacks to the
						// current firing batch?
						if ( firing ) {
							firingLength = list.length;
						// With memory, if we're not firing then
						// we should call right away, unless previous
						// firing was halted (stopOnFalse)
						} else if ( memory && memory !== true ) {
							firingStart = length;
							fire( memory[ 0 ], memory[ 1 ] );
						}
					}
					return this;
				},
				// Remove a callback from the list
				remove: function() {
					if ( list ) {
						var args = arguments,
							argIndex = 0,
							argLength = args.length;
						for ( ; argIndex < argLength ; argIndex++ ) {
							for ( var i = 0; i < list.length; i++ ) {
								if ( args[ argIndex ] === list[ i ] ) {
									// Handle firingIndex and firingLength
									if ( firing ) {
										if ( i <= firingLength ) {
											firingLength--;
											if ( i <= firingIndex ) {
												firingIndex--;
											}
										}
									}
									// Remove the element
									list.splice( i--, 1 );
									// If we have some unicity property then
									// we only need to do this once
									if ( flags.unique ) {
										break;
									}
								}
							}
						}
					}
					return this;
				},
				// Control if a given callback is in the list
				has: function( fn ) {
					if ( list ) {
						var i = 0,
							length = list.length;
						for ( ; i < length; i++ ) {
							if ( fn === list[ i ] ) {
								return true;
							}
						}
					}
					return false;
				},
				// Remove all callbacks from the list
				empty: function() {
					list = [];
					return this;
				},
				// Have the list do nothing anymore
				disable: function() {
					list = stack = memory = undefined;
					return this;
				},
				// Is it disabled?
				disabled: function() {
					return !list;
				},
				// Lock the list in its current state
				lock: function() {
					stack = undefined;
					if ( !memory || memory === true ) {
						self.disable();
					}
					return this;
				},
				// Is it locked?
				locked: function() {
					return !stack;
				},
				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( stack ) {
						if ( firing ) {
							if ( !flags.once ) {
								stack.push( [ context, args ] );
							}
						} else if ( !( flags.once && memory ) ) {
							fire( context, args );
						}
					}
					return this;
				},
				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},
				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};
	
		return self;
	};
	
	
	
	
	var // Static reference to slice
		sliceDeferred = [].slice;
	
	jQuery.extend({
	
		Deferred: function( func ) {
			var doneList = jQuery.Callbacks( "once memory" ),
				failList = jQuery.Callbacks( "once memory" ),
				progressList = jQuery.Callbacks( "memory" ),
				state = "pending",
				lists = {
					resolve: doneList,
					reject: failList,
					notify: progressList
				},
				promise = {
					done: doneList.add,
					fail: failList.add,
					progress: progressList.add,
	
					state: function() {
						return state;
					},
	
					// Deprecated
					isResolved: doneList.fired,
					isRejected: failList.fired,
	
					then: function( doneCallbacks, failCallbacks, progressCallbacks ) {
						deferred.done( doneCallbacks ).fail( failCallbacks ).progress( progressCallbacks );
						return this;
					},
					always: function() {
						deferred.done.apply( deferred, arguments ).fail.apply( deferred, arguments );
						return this;
					},
					pipe: function( fnDone, fnFail, fnProgress ) {
						return jQuery.Deferred(function( newDefer ) {
							jQuery.each( {
								done: [ fnDone, "resolve" ],
								fail: [ fnFail, "reject" ],
								progress: [ fnProgress, "notify" ]
							}, function( handler, data ) {
								var fn = data[ 0 ],
									action = data[ 1 ],
									returned;
								if ( jQuery.isFunction( fn ) ) {
									deferred[ handler ](function() {
										returned = fn.apply( this, arguments );
										if ( returned && jQuery.isFunction( returned.promise ) ) {
											returned.promise().then( newDefer.resolve, newDefer.reject, newDefer.notify );
										} else {
											newDefer[ action + "With" ]( this === deferred ? newDefer : this, [ returned ] );
										}
									});
								} else {
									deferred[ handler ]( newDefer[ action ] );
								}
							});
						}).promise();
					},
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						if ( obj == null ) {
							obj = promise;
						} else {
							for ( var key in promise ) {
								obj[ key ] = promise[ key ];
							}
						}
						return obj;
					}
				},
				deferred = promise.promise({}),
				key;
	
			for ( key in lists ) {
				deferred[ key ] = lists[ key ].fire;
				deferred[ key + "With" ] = lists[ key ].fireWith;
			}
	
			// Handle state
			deferred.done( function() {
				state = "resolved";
			}, failList.disable, progressList.lock ).fail( function() {
				state = "rejected";
			}, doneList.disable, progressList.lock );
	
			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}
	
			// All done!
			return deferred;
		},
	
		// Deferred helper
		when: function( firstParam ) {
			var args = sliceDeferred.call( arguments, 0 ),
				i = 0,
				length = args.length,
				pValues = new Array( length ),
				count = length,
				pCount = length,
				deferred = length <= 1 && firstParam && jQuery.isFunction( firstParam.promise ) ?
					firstParam :
					jQuery.Deferred(),
				promise = deferred.promise();
			function resolveFunc( i ) {
				return function( value ) {
					args[ i ] = arguments.length > 1 ? sliceDeferred.call( arguments, 0 ) : value;
					if ( !( --count ) ) {
						deferred.resolveWith( deferred, args );
					}
				};
			}
			function progressFunc( i ) {
				return function( value ) {
					pValues[ i ] = arguments.length > 1 ? sliceDeferred.call( arguments, 0 ) : value;
					deferred.notifyWith( promise, pValues );
				};
			}
			if ( length > 1 ) {
				for ( ; i < length; i++ ) {
					if ( args[ i ] && args[ i ].promise && jQuery.isFunction( args[ i ].promise ) ) {
						args[ i ].promise().then( resolveFunc(i), deferred.reject, progressFunc(i) );
					} else {
						--count;
					}
				}
				if ( !count ) {
					deferred.resolveWith( deferred, args );
				}
			} else if ( deferred !== firstParam ) {
				deferred.resolveWith( deferred, length ? [ firstParam ] : [] );
			}
			return promise;
		}
	});
	
	
	
	
	jQuery.support = (function() {
	
		var support,
			all,
			a,
			select,
			opt,
			input,
			fragment,
			tds,
			events,
			eventName,
			i,
			isSupported,
			div = document.createElement( "div" ),
			documentElement = document.documentElement;
	
		// Preliminary tests
		div.setAttribute("className", "t");
		div.innerHTML = "   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>";
	
		all = div.getElementsByTagName( "*" );
		a = div.getElementsByTagName( "a" )[ 0 ];
	
		// Can't get basic test support
		if ( !all || !all.length || !a ) {
			return {};
		}
	
		// First batch of supports tests
		select = document.createElement( "select" );
		opt = select.appendChild( document.createElement("option") );
		input = div.getElementsByTagName( "input" )[ 0 ];
	
		support = {
			// IE strips leading whitespace when .innerHTML is used
			leadingWhitespace: ( div.firstChild.nodeType === 3 ),
	
			// Make sure that tbody elements aren't automatically inserted
			// IE will insert them into empty tables
			tbody: !div.getElementsByTagName("tbody").length,
	
			// Make sure that link elements get serialized correctly by innerHTML
			// This requires a wrapper element in IE
			htmlSerialize: !!div.getElementsByTagName("link").length,
	
			// Get the style information from getAttribute
			// (IE uses .cssText instead)
			style: /top/.test( a.getAttribute("style") ),
	
			// Make sure that URLs aren't manipulated
			// (IE normalizes it by default)
			hrefNormalized: ( a.getAttribute("href") === "/a" ),
	
			// Make sure that element opacity exists
			// (IE uses filter instead)
			// Use a regex to work around a WebKit issue. See #5145
			opacity: /^0.55/.test( a.style.opacity ),
	
			// Verify style float existence
			// (IE uses styleFloat instead of cssFloat)
			cssFloat: !!a.style.cssFloat,
	
			// Make sure that if no value is specified for a checkbox
			// that it defaults to "on".
			// (WebKit defaults to "" instead)
			checkOn: ( input.value === "on" ),
	
			// Make sure that a selected-by-default option has a working selected property.
			// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
			optSelected: opt.selected,
	
			// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
			getSetAttribute: div.className !== "t",
	
			// Tests for enctype support on a form(#6743)
			enctype: !!document.createElement("form").enctype,
	
			// Makes sure cloning an html5 element does not cause problems
			// Where outerHTML is undefined, this still works
			html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",
	
			// Will be defined later
			submitBubbles: true,
			changeBubbles: true,
			focusinBubbles: false,
			deleteExpando: true,
			noCloneEvent: true,
			inlineBlockNeedsLayout: false,
			shrinkWrapBlocks: false,
			reliableMarginRight: true,
			pixelMargin: true
		};
	
		// jQuery.boxModel DEPRECATED in 1.3, use jQuery.support.boxModel instead
		jQuery.boxModel = support.boxModel = (document.compatMode === "CSS1Compat");
	
		// Make sure checked status is properly cloned
		input.checked = true;
		support.noCloneChecked = input.cloneNode( true ).checked;
	
		// Make sure that the options inside disabled selects aren't marked as disabled
		// (WebKit marks them as disabled)
		select.disabled = true;
		support.optDisabled = !opt.disabled;
	
		// Test to see if it's possible to delete an expando from an element
		// Fails in Internet Explorer
		try {
			delete div.test;
		} catch( e ) {
			support.deleteExpando = false;
		}
	
		if ( !div.addEventListener && div.attachEvent && div.fireEvent ) {
			div.attachEvent( "onclick", function() {
				// Cloning a node shouldn't copy over any
				// bound event handlers (IE does this)
				support.noCloneEvent = false;
			});
			div.cloneNode( true ).fireEvent( "onclick" );
		}
	
		// Check if a radio maintains its value
		// after being appended to the DOM
		input = document.createElement("input");
		input.value = "t";
		input.setAttribute("type", "radio");
		support.radioValue = input.value === "t";
	
		input.setAttribute("checked", "checked");
	
		// #11217 - WebKit loses check when the name is after the checked attribute
		input.setAttribute( "name", "t" );
	
		div.appendChild( input );
		fragment = document.createDocumentFragment();
		fragment.appendChild( div.lastChild );
	
		// WebKit doesn't clone checked state correctly in fragments
		support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;
	
		// Check if a disconnected checkbox will retain its checked
		// value of true after appended to the DOM (IE6/7)
		support.appendChecked = input.checked;
	
		fragment.removeChild( input );
		fragment.appendChild( div );
	
		// Technique from Juriy Zaytsev
		// http://perfectionkills.com/detecting-event-support-without-browser-sniffing/
		// We only care about the case where non-standard event systems
		// are used, namely in IE. Short-circuiting here helps us to
		// avoid an eval call (in setAttribute) which can cause CSP
		// to go haywire. See: https://developer.mozilla.org/en/Security/CSP
		if ( div.attachEvent ) {
			for ( i in {
				submit: 1,
				change: 1,
				focusin: 1
			}) {
				eventName = "on" + i;
				isSupported = ( eventName in div );
				if ( !isSupported ) {
					div.setAttribute( eventName, "return;" );
					isSupported = ( typeof div[ eventName ] === "function" );
				}
				support[ i + "Bubbles" ] = isSupported;
			}
		}
	
		fragment.removeChild( div );
	
		// Null elements to avoid leaks in IE
		fragment = select = opt = div = input = null;
	
		// Run tests that need a body at doc ready
		jQuery(function() {
			var container, outer, inner, table, td, offsetSupport,
				marginDiv, conMarginTop, style, html, positionTopLeftWidthHeight,
				paddingMarginBorderVisibility, paddingMarginBorder,
				body = document.getElementsByTagName("body")[0];
	
			if ( !body ) {
				// Return for frameset docs that don't have a body
				return;
			}
	
			conMarginTop = 1;
			paddingMarginBorder = "padding:0;margin:0;border:";
			positionTopLeftWidthHeight = "position:absolute;top:0;left:0;width:1px;height:1px;";
			paddingMarginBorderVisibility = paddingMarginBorder + "0;visibility:hidden;";
			style = "style='" + positionTopLeftWidthHeight + paddingMarginBorder + "5px solid #000;";
			html = "<div " + style + "display:block;'><div style='" + paddingMarginBorder + "0;display:block;overflow:hidden;'></div></div>" +
				"<table " + style + "' cellpadding='0' cellspacing='0'>" +
				"<tr><td></td></tr></table>";
	
			container = document.createElement("div");
			container.style.cssText = paddingMarginBorderVisibility + "width:0;height:0;position:static;top:0;margin-top:" + conMarginTop + "px";
			body.insertBefore( container, body.firstChild );
	
			// Construct the test element
			div = document.createElement("div");
			container.appendChild( div );
	
			// Check if table cells still have offsetWidth/Height when they are set
			// to display:none and there are still other visible table cells in a
			// table row; if so, offsetWidth/Height are not reliable for use when
			// determining if an element has been hidden directly using
			// display:none (it is still safe to use offsets if a parent element is
			// hidden; don safety goggles and see bug #4512 for more information).
			// (only IE 8 fails this test)
			div.innerHTML = "<table><tr><td style='" + paddingMarginBorder + "0;display:none'></td><td>t</td></tr></table>";
			tds = div.getElementsByTagName( "td" );
			isSupported = ( tds[ 0 ].offsetHeight === 0 );
	
			tds[ 0 ].style.display = "";
			tds[ 1 ].style.display = "none";
	
			// Check if empty table cells still have offsetWidth/Height
			// (IE <= 8 fail this test)
			support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );
	
			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. For more
			// info see bug #3333
			// Fails in WebKit before Feb 2011 nightlies
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			if ( window.getComputedStyle ) {
				div.innerHTML = "";
				marginDiv = document.createElement( "div" );
				marginDiv.style.width = "0";
				marginDiv.style.marginRight = "0";
				div.style.width = "2px";
				div.appendChild( marginDiv );
				support.reliableMarginRight =
					( parseInt( ( window.getComputedStyle( marginDiv, null ) || { marginRight: 0 } ).marginRight, 10 ) || 0 ) === 0;
			}
	
			if ( typeof div.style.zoom !== "undefined" ) {
				// Check if natively block-level elements act like inline-block
				// elements when setting their display to 'inline' and giving
				// them layout
				// (IE < 8 does this)
				div.innerHTML = "";
				div.style.width = div.style.padding = "1px";
				div.style.border = 0;
				div.style.overflow = "hidden";
				div.style.display = "inline";
				div.style.zoom = 1;
				support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );
	
				// Check if elements with layout shrink-wrap their children
				// (IE 6 does this)
				div.style.display = "block";
				div.style.overflow = "visible";
				div.innerHTML = "<div style='width:5px;'></div>";
				support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );
			}
	
			div.style.cssText = positionTopLeftWidthHeight + paddingMarginBorderVisibility;
			div.innerHTML = html;
	
			outer = div.firstChild;
			inner = outer.firstChild;
			td = outer.nextSibling.firstChild.firstChild;
	
			offsetSupport = {
				doesNotAddBorder: ( inner.offsetTop !== 5 ),
				doesAddBorderForTableAndCells: ( td.offsetTop === 5 )
			};
	
			inner.style.position = "fixed";
			inner.style.top = "20px";
	
			// safari subtracts parent border width here which is 5px
			offsetSupport.fixedPosition = ( inner.offsetTop === 20 || inner.offsetTop === 15 );
			inner.style.position = inner.style.top = "";
	
			outer.style.overflow = "hidden";
			outer.style.position = "relative";
	
			offsetSupport.subtractsBorderForOverflowNotVisible = ( inner.offsetTop === -5 );
			offsetSupport.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== conMarginTop );
	
			if ( window.getComputedStyle ) {
				div.style.marginTop = "1%";
				support.pixelMargin = ( window.getComputedStyle( div, null ) || { marginTop: 0 } ).marginTop !== "1%";
			}
	
			if ( typeof container.style.zoom !== "undefined" ) {
				container.style.zoom = 1;
			}
	
			body.removeChild( container );
			marginDiv = div = container = null;
	
			jQuery.extend( support, offsetSupport );
		});
	
		return support;
	})();
	
	
	
	
	var rbrace = /^(?:\{.*\}|\[.*\])$/,
		rmultiDash = /([A-Z])/g;
	
	jQuery.extend({
		cache: {},
	
		// Please use with caution
		uuid: 0,
	
		// Unique for each copy of jQuery on the page
		// Non-digits removed to match rinlinejQuery
		expando: "jQuery" + ( jQuery.fn.jquery + Math.random() ).replace( /\D/g, "" ),
	
		// The following elements throw uncatchable exceptions if you
		// attempt to add expando properties to them.
		noData: {
			"embed": true,
			// Ban all objects except for Flash (which handle expandos)
			"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
			"applet": true
		},
	
		hasData: function( elem ) {
			elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
			return !!elem && !isEmptyDataObject( elem );
		},
	
		data: function( elem, name, data, pvt /* Internal Use Only */ ) {
			if ( !jQuery.acceptData( elem ) ) {
				return;
			}
	
			var privateCache, thisCache, ret,
				internalKey = jQuery.expando,
				getByName = typeof name === "string",
	
				// We have to handle DOM nodes and JS objects differently because IE6-7
				// can't GC object references properly across the DOM-JS boundary
				isNode = elem.nodeType,
	
				// Only DOM nodes need the global jQuery cache; JS object data is
				// attached directly to the object so GC can occur automatically
				cache = isNode ? jQuery.cache : elem,
	
				// Only defining an ID for JS objects if its cache already exists allows
				// the code to shortcut on the same path as a DOM node with no cache
				id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey,
				isEvents = name === "events";
	
			// Avoid doing any more work than we need to when trying to get data on an
			// object that has no data at all
			if ( (!id || !cache[id] || (!isEvents && !pvt && !cache[id].data)) && getByName && data === undefined ) {
				return;
			}
	
			if ( !id ) {
				// Only DOM nodes need a new unique ID for each element since their data
				// ends up in the global cache
				if ( isNode ) {
					elem[ internalKey ] = id = ++jQuery.uuid;
				} else {
					id = internalKey;
				}
			}
	
			if ( !cache[ id ] ) {
				cache[ id ] = {};
	
				// Avoids exposing jQuery metadata on plain JS objects when the object
				// is serialized using JSON.stringify
				if ( !isNode ) {
					cache[ id ].toJSON = jQuery.noop;
				}
			}
	
			// An object can be passed to jQuery.data instead of a key/value pair; this gets
			// shallow copied over onto the existing cache
			if ( typeof name === "object" || typeof name === "function" ) {
				if ( pvt ) {
					cache[ id ] = jQuery.extend( cache[ id ], name );
				} else {
					cache[ id ].data = jQuery.extend( cache[ id ].data, name );
				}
			}
	
			privateCache = thisCache = cache[ id ];
	
			// jQuery data() is stored in a separate object inside the object's internal data
			// cache in order to avoid key collisions between internal data and user-defined
			// data.
			if ( !pvt ) {
				if ( !thisCache.data ) {
					thisCache.data = {};
				}
	
				thisCache = thisCache.data;
			}
	
			if ( data !== undefined ) {
				thisCache[ jQuery.camelCase( name ) ] = data;
			}
	
			// Users should not attempt to inspect the internal events object using jQuery.data,
			// it is undocumented and subject to change. But does anyone listen? No.
			if ( isEvents && !thisCache[ name ] ) {
				return privateCache.events;
			}
	
			// Check for both converted-to-camel and non-converted data property names
			// If a data property was specified
			if ( getByName ) {
	
				// First Try to find as-is property data
				ret = thisCache[ name ];
	
				// Test for null|undefined property data
				if ( ret == null ) {
	
					// Try to find the camelCased property
					ret = thisCache[ jQuery.camelCase( name ) ];
				}
			} else {
				ret = thisCache;
			}
	
			return ret;
		},
	
		removeData: function( elem, name, pvt /* Internal Use Only */ ) {
			if ( !jQuery.acceptData( elem ) ) {
				return;
			}
	
			var thisCache, i, l,
	
				// Reference to internal data cache key
				internalKey = jQuery.expando,
	
				isNode = elem.nodeType,
	
				// See jQuery.data for more information
				cache = isNode ? jQuery.cache : elem,
	
				// See jQuery.data for more information
				id = isNode ? elem[ internalKey ] : internalKey;
	
			// If there is already no cache entry for this object, there is no
			// purpose in continuing
			if ( !cache[ id ] ) {
				return;
			}
	
			if ( name ) {
	
				thisCache = pvt ? cache[ id ] : cache[ id ].data;
	
				if ( thisCache ) {
	
					// Support array or space separated string names for data keys
					if ( !jQuery.isArray( name ) ) {
	
						// try the string as a key before any manipulation
						if ( name in thisCache ) {
							name = [ name ];
						} else {
	
							// split the camel cased version by spaces unless a key with the spaces exists
							name = jQuery.camelCase( name );
							if ( name in thisCache ) {
								name = [ name ];
							} else {
								name = name.split( " " );
							}
						}
					}
	
					for ( i = 0, l = name.length; i < l; i++ ) {
						delete thisCache[ name[i] ];
					}
	
					// If there is no data left in the cache, we want to continue
					// and let the cache object itself get destroyed
					if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
						return;
					}
				}
			}
	
			// See jQuery.data for more information
			if ( !pvt ) {
				delete cache[ id ].data;
	
				// Don't destroy the parent cache unless the internal data object
				// had been the only thing left in it
				if ( !isEmptyDataObject(cache[ id ]) ) {
					return;
				}
			}
	
			// Browsers that fail expando deletion also refuse to delete expandos on
			// the window, but it will allow it on all other JS objects; other browsers
			// don't care
			// Ensure that `cache` is not a window object #10080
			if ( jQuery.support.deleteExpando || !cache.setInterval ) {
				delete cache[ id ];
			} else {
				cache[ id ] = null;
			}
	
			// We destroyed the cache and need to eliminate the expando on the node to avoid
			// false lookups in the cache for entries that no longer exist
			if ( isNode ) {
				// IE does not allow us to delete expando properties from nodes,
				// nor does it have a removeAttribute function on Document nodes;
				// we must handle all of these cases
				if ( jQuery.support.deleteExpando ) {
					delete elem[ internalKey ];
				} else if ( elem.removeAttribute ) {
					elem.removeAttribute( internalKey );
				} else {
					elem[ internalKey ] = null;
				}
			}
		},
	
		// For internal use only.
		_data: function( elem, name, data ) {
			return jQuery.data( elem, name, data, true );
		},
	
		// A method for determining if a DOM node can handle the data expando
		acceptData: function( elem ) {
			if ( elem.nodeName ) {
				var match = jQuery.noData[ elem.nodeName.toLowerCase() ];
	
				if ( match ) {
					return !(match === true || elem.getAttribute("classid") !== match);
				}
			}
	
			return true;
		}
	});
	
	jQuery.fn.extend({
		data: function( key, value ) {
			var parts, part, attr, name, l,
				elem = this[0],
				i = 0,
				data = null;
	
			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = jQuery.data( elem );
	
					if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
						attr = elem.attributes;
						for ( l = attr.length; i < l; i++ ) {
							name = attr[i].name;
	
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.substring(5) );
	
								dataAttr( elem, name, data[ name ] );
							}
						}
						jQuery._data( elem, "parsedAttrs", true );
					}
				}
	
				return data;
			}
	
			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each(function() {
					jQuery.data( this, key );
				});
			}
	
			parts = key.split( ".", 2 );
			parts[1] = parts[1] ? "." + parts[1] : "";
			part = parts[1] + "!";
	
			return jQuery.access( this, function( value ) {
	
				if ( value === undefined ) {
					data = this.triggerHandler( "getData" + part, [ parts[0] ] );
	
					// Try to fetch any internally stored data first
					if ( data === undefined && elem ) {
						data = jQuery.data( elem, key );
						data = dataAttr( elem, key, data );
					}
	
					return data === undefined && parts[1] ?
						this.data( parts[0] ) :
						data;
				}
	
				parts[1] = value;
				this.each(function() {
					var self = jQuery( this );
	
					self.triggerHandler( "setData" + part, parts );
					jQuery.data( this, key, value );
					self.triggerHandler( "changeData" + part, parts );
				});
			}, null, value, arguments.length > 1, null, false );
		},
	
		removeData: function( key ) {
			return this.each(function() {
				jQuery.removeData( this, key );
			});
		}
	});
	
	function dataAttr( elem, key, data ) {
		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
	
			var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
	
			data = elem.getAttribute( name );
	
			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					jQuery.isNumeric( data ) ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch( e ) {}
	
				// Make sure we set the data so it isn't changed later
				jQuery.data( elem, key, data );
	
			} else {
				data = undefined;
			}
		}
	
		return data;
	}
	
	// checks a cache object for emptiness
	function isEmptyDataObject( obj ) {
		for ( var name in obj ) {
	
			// if the public data object is empty, the private is still empty
			if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
				continue;
			}
			if ( name !== "toJSON" ) {
				return false;
			}
		}
	
		return true;
	}
	
	
	
	
	function handleQueueMarkDefer( elem, type, src ) {
		var deferDataKey = type + "defer",
			queueDataKey = type + "queue",
			markDataKey = type + "mark",
			defer = jQuery._data( elem, deferDataKey );
		if ( defer &&
			( src === "queue" || !jQuery._data(elem, queueDataKey) ) &&
			( src === "mark" || !jQuery._data(elem, markDataKey) ) ) {
			// Give room for hard-coded callbacks to fire first
			// and eventually mark/queue something else on the element
			setTimeout( function() {
				if ( !jQuery._data( elem, queueDataKey ) &&
					!jQuery._data( elem, markDataKey ) ) {
					jQuery.removeData( elem, deferDataKey, true );
					defer.fire();
				}
			}, 0 );
		}
	}
	
	jQuery.extend({
	
		_mark: function( elem, type ) {
			if ( elem ) {
				type = ( type || "fx" ) + "mark";
				jQuery._data( elem, type, (jQuery._data( elem, type ) || 0) + 1 );
			}
		},
	
		_unmark: function( force, elem, type ) {
			if ( force !== true ) {
				type = elem;
				elem = force;
				force = false;
			}
			if ( elem ) {
				type = type || "fx";
				var key = type + "mark",
					count = force ? 0 : ( (jQuery._data( elem, key ) || 1) - 1 );
				if ( count ) {
					jQuery._data( elem, key, count );
				} else {
					jQuery.removeData( elem, key, true );
					handleQueueMarkDefer( elem, type, "mark" );
				}
			}
		},
	
		queue: function( elem, type, data ) {
			var q;
			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				q = jQuery._data( elem, type );
	
				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !q || jQuery.isArray(data) ) {
						q = jQuery._data( elem, type, jQuery.makeArray(data) );
					} else {
						q.push( data );
					}
				}
				return q || [];
			}
		},
	
		dequeue: function( elem, type ) {
			type = type || "fx";
	
			var queue = jQuery.queue( elem, type ),
				fn = queue.shift(),
				hooks = {};
	
			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
			}
	
			if ( fn ) {
				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}
	
				jQuery._data( elem, type + ".run", hooks );
				fn.call( elem, function() {
					jQuery.dequeue( elem, type );
				}, hooks );
			}
	
			if ( !queue.length ) {
				jQuery.removeData( elem, type + "queue " + type + ".run", true );
				handleQueueMarkDefer( elem, type, "queue" );
			}
		}
	});
	
	jQuery.fn.extend({
		queue: function( type, data ) {
			var setter = 2;
	
			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}
	
			if ( arguments.length < setter ) {
				return jQuery.queue( this[0], type );
			}
	
			return data === undefined ?
				this :
				this.each(function() {
					var queue = jQuery.queue( this, type, data );
	
					if ( type === "fx" && queue[0] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				});
		},
		dequeue: function( type ) {
			return this.each(function() {
				jQuery.dequeue( this, type );
			});
		},
		// Based off of the plugin by Clint Helfers, with permission.
		// http://blindsignals.com/index.php/2009/07/jquery-delay/
		delay: function( time, type ) {
			time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
			type = type || "fx";
	
			return this.queue( type, function( next, hooks ) {
				var timeout = setTimeout( next, time );
				hooks.stop = function() {
					clearTimeout( timeout );
				};
			});
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, object ) {
			if ( typeof type !== "string" ) {
				object = type;
				type = undefined;
			}
			type = type || "fx";
			var defer = jQuery.Deferred(),
				elements = this,
				i = elements.length,
				count = 1,
				deferDataKey = type + "defer",
				queueDataKey = type + "queue",
				markDataKey = type + "mark",
				tmp;
			function resolve() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			}
			while( i-- ) {
				if (( tmp = jQuery.data( elements[ i ], deferDataKey, undefined, true ) ||
						( jQuery.data( elements[ i ], queueDataKey, undefined, true ) ||
							jQuery.data( elements[ i ], markDataKey, undefined, true ) ) &&
						jQuery.data( elements[ i ], deferDataKey, jQuery.Callbacks( "once memory" ), true ) )) {
					count++;
					tmp.add( resolve );
				}
			}
			resolve();
			return defer.promise( object );
		}
	});
	
	
	
	
	var rclass = /[\n\t\r]/g,
		rspace = /\s+/,
		rreturn = /\r/g,
		rtype = /^(?:button|input)$/i,
		rfocusable = /^(?:button|input|object|select|textarea)$/i,
		rclickable = /^a(?:rea)?$/i,
		rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
		getSetAttribute = jQuery.support.getSetAttribute,
		nodeHook, boolHook, fixSpecified;
	
	jQuery.fn.extend({
		attr: function( name, value ) {
			return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
		},
	
		removeAttr: function( name ) {
			return this.each(function() {
				jQuery.removeAttr( this, name );
			});
		},
	
		prop: function( name, value ) {
			return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
		},
	
		removeProp: function( name ) {
			name = jQuery.propFix[ name ] || name;
			return this.each(function() {
				// try/catch handles cases where IE balks (such as removing a property on window)
				try {
					this[ name ] = undefined;
					delete this[ name ];
				} catch( e ) {}
			});
		},
	
		addClass: function( value ) {
			var classNames, i, l, elem,
				setClass, c, cl;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each(function( j ) {
					jQuery( this ).addClass( value.call(this, j, this.className) );
				});
			}
	
			if ( value && typeof value === "string" ) {
				classNames = value.split( rspace );
	
				for ( i = 0, l = this.length; i < l; i++ ) {
					elem = this[ i ];
	
					if ( elem.nodeType === 1 ) {
						if ( !elem.className && classNames.length === 1 ) {
							elem.className = value;
	
						} else {
							setClass = " " + elem.className + " ";
	
							for ( c = 0, cl = classNames.length; c < cl; c++ ) {
								if ( !~setClass.indexOf( " " + classNames[ c ] + " " ) ) {
									setClass += classNames[ c ] + " ";
								}
							}
							elem.className = jQuery.trim( setClass );
						}
					}
				}
			}
	
			return this;
		},
	
		removeClass: function( value ) {
			var classNames, i, l, elem, className, c, cl;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each(function( j ) {
					jQuery( this ).removeClass( value.call(this, j, this.className) );
				});
			}
	
			if ( (value && typeof value === "string") || value === undefined ) {
				classNames = ( value || "" ).split( rspace );
	
				for ( i = 0, l = this.length; i < l; i++ ) {
					elem = this[ i ];
	
					if ( elem.nodeType === 1 && elem.className ) {
						if ( value ) {
							className = (" " + elem.className + " ").replace( rclass, " " );
							for ( c = 0, cl = classNames.length; c < cl; c++ ) {
								className = className.replace(" " + classNames[ c ] + " ", " ");
							}
							elem.className = jQuery.trim( className );
	
						} else {
							elem.className = "";
						}
					}
				}
			}
	
			return this;
		},
	
		toggleClass: function( value, stateVal ) {
			var type = typeof value,
				isBool = typeof stateVal === "boolean";
	
			if ( jQuery.isFunction( value ) ) {
				return this.each(function( i ) {
					jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
				});
			}
	
			return this.each(function() {
				if ( type === "string" ) {
					// toggle individual class names
					var className,
						i = 0,
						self = jQuery( this ),
						state = stateVal,
						classNames = value.split( rspace );
	
					while ( (className = classNames[ i++ ]) ) {
						// check each className given, space seperated list
						state = isBool ? state : !self.hasClass( className );
						self[ state ? "addClass" : "removeClass" ]( className );
					}
	
				} else if ( type === "undefined" || type === "boolean" ) {
					if ( this.className ) {
						// store className if set
						jQuery._data( this, "__className__", this.className );
					}
	
					// toggle whole className
					this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
				}
			});
		},
	
		hasClass: function( selector ) {
			var className = " " + selector + " ",
				i = 0,
				l = this.length;
			for ( ; i < l; i++ ) {
				if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) > -1 ) {
					return true;
				}
			}
	
			return false;
		},
	
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[0];
	
			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];
	
					if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
						return ret;
					}
	
					ret = elem.value;
	
					return typeof ret === "string" ?
						// handle most common string cases
						ret.replace(rreturn, "") :
						// handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}
	
				return;
			}
	
			isFunction = jQuery.isFunction( value );
	
			return this.each(function( i ) {
				var self = jQuery(this), val;
	
				if ( this.nodeType !== 1 ) {
					return;
				}
	
				if ( isFunction ) {
					val = value.call( this, i, self.val() );
				} else {
					val = value;
				}
	
				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";
				} else if ( typeof val === "number" ) {
					val += "";
				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map(val, function ( value ) {
						return value == null ? "" : value + "";
					});
				}
	
				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];
	
				// If set returns undefined, fall back to normal setting
				if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			});
		}
	});
	
	jQuery.extend({
		valHooks: {
			option: {
				get: function( elem ) {
					// attributes.value is undefined in Blackberry 4.7 but
					// uses .value. See #6932
					var val = elem.attributes.value;
					return !val || val.specified ? elem.value : elem.text;
				}
			},
			select: {
				get: function( elem ) {
					var value, i, max, option,
						index = elem.selectedIndex,
						values = [],
						options = elem.options,
						one = elem.type === "select-one";
	
					// Nothing was selected
					if ( index < 0 ) {
						return null;
					}
	
					// Loop through all the selected options
					i = one ? index : 0;
					max = one ? index + 1 : options.length;
					for ( ; i < max; i++ ) {
						option = options[ i ];
	
						// Don't return options that are disabled or in a disabled optgroup
						if ( option.selected && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) &&
								(!option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" )) ) {
	
							// Get the specific value for the option
							value = jQuery( option ).val();
	
							// We don't need an array for one selects
							if ( one ) {
								return value;
							}
	
							// Multi-Selects return an array
							values.push( value );
						}
					}
	
					// Fixes Bug #2551 -- select.val() broken in IE after form.reset()
					if ( one && !values.length && options.length ) {
						return jQuery( options[ index ] ).val();
					}
	
					return values;
				},
	
				set: function( elem, value ) {
					var values = jQuery.makeArray( value );
	
					jQuery(elem).find("option").each(function() {
						this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
					});
	
					if ( !values.length ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		},
	
		attrFn: {
			val: true,
			css: true,
			html: true,
			text: true,
			data: true,
			width: true,
			height: true,
			offset: true
		},
	
		attr: function( elem, name, value, pass ) {
			var ret, hooks, notxml,
				nType = elem.nodeType;
	
			// don't get/set attributes on text, comment and attribute nodes
			if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			if ( pass && name in jQuery.attrFn ) {
				return jQuery( elem )[ name ]( value );
			}
	
			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}
	
			notxml = nType !== 1 || !jQuery.isXMLDoc( elem );
	
			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( notxml ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
			}
	
			if ( value !== undefined ) {
	
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
	
				} else if ( hooks && "set" in hooks && notxml && (ret = hooks.set( elem, value, name )) !== undefined ) {
					return ret;
	
				} else {
					elem.setAttribute( name, "" + value );
					return value;
				}
	
			} else if ( hooks && "get" in hooks && notxml && (ret = hooks.get( elem, name )) !== null ) {
				return ret;
	
			} else {
	
				ret = elem.getAttribute( name );
	
				// Non-existent attributes return null, we normalize to undefined
				return ret === null ?
					undefined :
					ret;
			}
		},
	
		removeAttr: function( elem, value ) {
			var propName, attrNames, name, l, isBool,
				i = 0;
	
			if ( value && elem.nodeType === 1 ) {
				attrNames = value.toLowerCase().split( rspace );
				l = attrNames.length;
	
				for ( ; i < l; i++ ) {
					name = attrNames[ i ];
	
					if ( name ) {
						propName = jQuery.propFix[ name ] || name;
						isBool = rboolean.test( name );
	
						// See #9699 for explanation of this approach (setting first, then removal)
						// Do not do this for boolean attributes (see #10870)
						if ( !isBool ) {
							jQuery.attr( elem, name, "" );
						}
						elem.removeAttribute( getSetAttribute ? name : propName );
	
						// Set corresponding property to false for boolean attributes
						if ( isBool && propName in elem ) {
							elem[ propName ] = false;
						}
					}
				}
			}
		},
	
		attrHooks: {
			type: {
				set: function( elem, value ) {
					// We can't allow the type property to be changed (since it causes problems in IE)
					if ( rtype.test( elem.nodeName ) && elem.parentNode ) {
						jQuery.error( "type property can't be changed" );
					} else if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
						// Setting the type on a radio button after the value resets the value in IE6-9
						// Reset value to it's default in case type is set after value
						// This is for element creation
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			},
			// Use the value property for back compat
			// Use the nodeHook for button elements in IE6/7 (#1954)
			value: {
				get: function( elem, name ) {
					if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
						return nodeHook.get( elem, name );
					}
					return name in elem ?
						elem.value :
						null;
				},
				set: function( elem, value, name ) {
					if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
						return nodeHook.set( elem, value, name );
					}
					// Does not return so that setAttribute is also used
					elem.value = value;
				}
			}
		},
	
		propFix: {
			tabindex: "tabIndex",
			readonly: "readOnly",
			"for": "htmlFor",
			"class": "className",
			maxlength: "maxLength",
			cellspacing: "cellSpacing",
			cellpadding: "cellPadding",
			rowspan: "rowSpan",
			colspan: "colSpan",
			usemap: "useMap",
			frameborder: "frameBorder",
			contenteditable: "contentEditable"
		},
	
		prop: function( elem, name, value ) {
			var ret, hooks, notxml,
				nType = elem.nodeType;
	
			// don't get/set properties on text, comment and attribute nodes
			if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			notxml = nType !== 1 || !jQuery.isXMLDoc( elem );
	
			if ( notxml ) {
				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}
	
			if ( value !== undefined ) {
				if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
					return ret;
	
				} else {
					return ( elem[ name ] = value );
				}
	
			} else {
				if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
					return ret;
	
				} else {
					return elem[ name ];
				}
			}
		},
	
		propHooks: {
			tabIndex: {
				get: function( elem ) {
					// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					var attributeNode = elem.getAttributeNode("tabindex");
	
					return attributeNode && attributeNode.specified ?
						parseInt( attributeNode.value, 10 ) :
						rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
							0 :
							undefined;
				}
			}
		}
	});
	
	// Add the tabIndex propHook to attrHooks for back-compat (different case is intentional)
	jQuery.attrHooks.tabindex = jQuery.propHooks.tabIndex;
	
	// Hook for boolean attributes
	boolHook = {
		get: function( elem, name ) {
			// Align boolean attributes with corresponding properties
			// Fall back to attribute presence where some booleans are not supported
			var attrNode,
				property = jQuery.prop( elem, name );
			return property === true || typeof property !== "boolean" && ( attrNode = elem.getAttributeNode(name) ) && attrNode.nodeValue !== false ?
				name.toLowerCase() :
				undefined;
		},
		set: function( elem, value, name ) {
			var propName;
			if ( value === false ) {
				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				// value is true since we know at this point it's type boolean and not false
				// Set boolean attributes to the same name and set the DOM property
				propName = jQuery.propFix[ name ] || name;
				if ( propName in elem ) {
					// Only set the IDL specifically if it already exists on the element
					elem[ propName ] = true;
				}
	
				elem.setAttribute( name, name.toLowerCase() );
			}
			return name;
		}
	};
	
	// IE6/7 do not support getting/setting some attributes with get/setAttribute
	if ( !getSetAttribute ) {
	
		fixSpecified = {
			name: true,
			id: true,
			coords: true
		};
	
		// Use this for any attribute in IE6/7
		// This fixes almost every IE6/7 issue
		nodeHook = jQuery.valHooks.button = {
			get: function( elem, name ) {
				var ret;
				ret = elem.getAttributeNode( name );
				return ret && ( fixSpecified[ name ] ? ret.nodeValue !== "" : ret.specified ) ?
					ret.nodeValue :
					undefined;
			},
			set: function( elem, value, name ) {
				// Set the existing or create a new attribute node
				var ret = elem.getAttributeNode( name );
				if ( !ret ) {
					ret = document.createAttribute( name );
					elem.setAttributeNode( ret );
				}
				return ( ret.nodeValue = value + "" );
			}
		};
	
		// Apply the nodeHook to tabindex
		jQuery.attrHooks.tabindex.set = nodeHook.set;
	
		// Set width and height to auto instead of 0 on empty string( Bug #8150 )
		// This is for removals
		jQuery.each([ "width", "height" ], function( i, name ) {
			jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
				set: function( elem, value ) {
					if ( value === "" ) {
						elem.setAttribute( name, "auto" );
						return value;
					}
				}
			});
		});
	
		// Set contenteditable to false on removals(#10429)
		// Setting to empty string throws an error as an invalid value
		jQuery.attrHooks.contenteditable = {
			get: nodeHook.get,
			set: function( elem, value, name ) {
				if ( value === "" ) {
					value = "false";
				}
				nodeHook.set( elem, value, name );
			}
		};
	}
	
	
	// Some attributes require a special call on IE
	if ( !jQuery.support.hrefNormalized ) {
		jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
			jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
				get: function( elem ) {
					var ret = elem.getAttribute( name, 2 );
					return ret === null ? undefined : ret;
				}
			});
		});
	}
	
	if ( !jQuery.support.style ) {
		jQuery.attrHooks.style = {
			get: function( elem ) {
				// Return undefined in the case of empty string
				// Normalize to lowercase since IE uppercases css property names
				return elem.style.cssText.toLowerCase() || undefined;
			},
			set: function( elem, value ) {
				return ( elem.style.cssText = "" + value );
			}
		};
	}
	
	// Safari mis-reports the default selected property of an option
	// Accessing the parent's selectedIndex property fixes it
	if ( !jQuery.support.optSelected ) {
		jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
			get: function( elem ) {
				var parent = elem.parentNode;
	
				if ( parent ) {
					parent.selectedIndex;
	
					// Make sure that it also works with optgroups, see #5701
					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
				return null;
			}
		});
	}
	
	// IE6/7 call enctype encoding
	if ( !jQuery.support.enctype ) {
		jQuery.propFix.enctype = "encoding";
	}
	
	// Radios and checkboxes getter/setter
	if ( !jQuery.support.checkOn ) {
		jQuery.each([ "radio", "checkbox" ], function() {
			jQuery.valHooks[ this ] = {
				get: function( elem ) {
					// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
					return elem.getAttribute("value") === null ? "on" : elem.value;
				}
			};
		});
	}
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
				}
			}
		});
	});
	
	
	
	
	var rformElems = /^(?:textarea|input|select)$/i,
		rtypenamespace = /^([^\.]*)?(?:\.(.+))?$/,
		rhoverHack = /(?:^|\s)hover(\.\S+)?\b/,
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|contextmenu)|click/,
		rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
		rquickIs = /^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/,
		quickParse = function( selector ) {
			var quick = rquickIs.exec( selector );
			if ( quick ) {
				//   0  1    2   3
				// [ _, tag, id, class ]
				quick[1] = ( quick[1] || "" ).toLowerCase();
				quick[3] = quick[3] && new RegExp( "(?:^|\\s)" + quick[3] + "(?:\\s|$)" );
			}
			return quick;
		},
		quickIs = function( elem, m ) {
			var attrs = elem.attributes || {};
			return (
				(!m[1] || elem.nodeName.toLowerCase() === m[1]) &&
				(!m[2] || (attrs.id || {}).value === m[2]) &&
				(!m[3] || m[3].test( (attrs[ "class" ] || {}).value ))
			);
		},
		hoverHack = function( events ) {
			return jQuery.event.special.hover ? events : events.replace( rhoverHack, "mouseenter$1 mouseleave$1" );
		};
	
	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {
	
		add: function( elem, types, handler, data, selector ) {
	
			var elemData, eventHandle, events,
				t, tns, type, namespaces, handleObj,
				handleObjIn, quick, handlers, special;
	
			// Don't attach events to noData or text/comment nodes (allow plain objects tho)
			if ( elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data( elem )) ) {
				return;
			}
	
			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}
	
			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}
	
			// Init the element's event structure and main handler, if this is the first
			events = elemData.events;
			if ( !events ) {
				elemData.events = events = {};
			}
			eventHandle = elemData.handle;
			if ( !eventHandle ) {
				elemData.handle = eventHandle = function( e ) {
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ?
						jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
						undefined;
				};
				// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
				eventHandle.elem = elem;
			}
	
			// Handle multiple events separated by a space
			// jQuery(...).bind("mouseover mouseout", fn);
			types = jQuery.trim( hoverHack(types) ).split( " " );
			for ( t = 0; t < types.length; t++ ) {
	
				tns = rtypenamespace.exec( types[t] ) || [];
				type = tns[1];
				namespaces = ( tns[2] || "" ).split( "." ).sort();
	
				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};
	
				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;
	
				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};
	
				// handleObj is passed to all event handlers
				handleObj = jQuery.extend({
					type: type,
					origType: tns[1],
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					quick: selector && quickParse( selector ),
					namespace: namespaces.join(".")
				}, handleObjIn );
	
				// Init the event handler queue if we're the first
				handlers = events[ type ];
				if ( !handlers ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;
	
					// Only use addEventListener/attachEvent if the special events handler returns false
					if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
						// Bind the global event handler to the element
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle, false );
	
						} else if ( elem.attachEvent ) {
							elem.attachEvent( "on" + type, eventHandle );
						}
					}
				}
	
				if ( special.add ) {
					special.add.call( elem, handleObj );
	
					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}
	
				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}
	
				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}
	
			// Nullify elem to prevent memory leaks in IE
			elem = null;
		},
	
		global: {},
	
		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {
	
			var elemData = jQuery.hasData( elem ) && jQuery._data( elem ),
				t, tns, type, origType, namespaces, origCount,
				j, events, special, handle, eventType, handleObj;
	
			if ( !elemData || !(events = elemData.events) ) {
				return;
			}
	
			// Once for each type.namespace in types; type may be omitted
			types = jQuery.trim( hoverHack( types || "" ) ).split(" ");
			for ( t = 0; t < types.length; t++ ) {
				tns = rtypenamespace.exec( types[t] ) || [];
				type = origType = tns[1];
				namespaces = tns[2];
	
				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}
	
				special = jQuery.event.special[ type ] || {};
				type = ( selector? special.delegateType : special.bindType ) || type;
				eventType = events[ type ] || [];
				origCount = eventType.length;
				namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
	
				// Remove matching events
				for ( j = 0; j < eventType.length; j++ ) {
					handleObj = eventType[ j ];
	
					if ( ( mappedTypes || origType === handleObj.origType ) &&
						 ( !handler || handler.guid === handleObj.guid ) &&
						 ( !namespaces || namespaces.test( handleObj.namespace ) ) &&
						 ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
						eventType.splice( j--, 1 );
	
						if ( handleObj.selector ) {
							eventType.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}
	
				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( eventType.length === 0 && origCount !== eventType.length ) {
					if ( !special.teardown || special.teardown.call( elem, namespaces ) === false ) {
						jQuery.removeEvent( elem, type, elemData.handle );
					}
	
					delete events[ type ];
				}
			}
	
			// Remove the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				handle = elemData.handle;
				if ( handle ) {
					handle.elem = null;
				}
	
				// removeData also checks for emptiness and clears the expando if empty
				// so use it instead of delete
				jQuery.removeData( elem, [ "events", "handle" ], true );
			}
		},
	
		// Events that are safe to short-circuit if no handlers are attached.
		// Native DOM events should not be added, they may have inline handlers.
		customEvent: {
			"getData": true,
			"setData": true,
			"changeData": true
		},
	
		trigger: function( event, data, elem, onlyHandlers ) {
			// Don't do events on text and comment nodes
			if ( elem && (elem.nodeType === 3 || elem.nodeType === 8) ) {
				return;
			}
	
			// Event object or event type
			var type = event.type || event,
				namespaces = [],
				cache, exclusive, i, cur, old, ontype, special, handle, eventPath, bubbleType;
	
			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}
	
			if ( type.indexOf( "!" ) >= 0 ) {
				// Exclusive events trigger only for the exact event (no namespaces)
				type = type.slice(0, -1);
				exclusive = true;
			}
	
			if ( type.indexOf( "." ) >= 0 ) {
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split(".");
				type = namespaces.shift();
				namespaces.sort();
			}
	
			if ( (!elem || jQuery.event.customEvent[ type ]) && !jQuery.event.global[ type ] ) {
				// No jQuery handlers for this event type, and it can't have inline handlers
				return;
			}
	
			// Caller can pass in an Event, Object, or just an event type string
			event = typeof event === "object" ?
				// jQuery.Event object
				event[ jQuery.expando ] ? event :
				// Object literal
				new jQuery.Event( type, event ) :
				// Just the event type (string)
				new jQuery.Event( type );
	
			event.type = type;
			event.isTrigger = true;
			event.exclusive = exclusive;
			event.namespace = namespaces.join( "." );
			event.namespace_re = event.namespace? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
			ontype = type.indexOf( ":" ) < 0 ? "on" + type : "";
	
			// Handle a global trigger
			if ( !elem ) {
	
				// TODO: Stop taunting the data cache; remove global events and always attach to document
				cache = jQuery.cache;
				for ( i in cache ) {
					if ( cache[ i ].events && cache[ i ].events[ type ] ) {
						jQuery.event.trigger( event, data, cache[ i ].handle.elem, true );
					}
				}
				return;
			}
	
			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}
	
			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data != null ? jQuery.makeArray( data ) : [];
			data.unshift( event );
	
			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}
	
			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			eventPath = [[ elem, special.bindType || type ]];
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {
	
				bubbleType = special.delegateType || type;
				cur = rfocusMorph.test( bubbleType + type ) ? elem : elem.parentNode;
				old = null;
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push([ cur, bubbleType ]);
					old = cur;
				}
	
				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( old && old === elem.ownerDocument ) {
					eventPath.push([ old.defaultView || old.parentWindow || window, bubbleType ]);
				}
			}
	
			// Fire handlers on the event path
			for ( i = 0; i < eventPath.length && !event.isPropagationStopped(); i++ ) {
	
				cur = eventPath[i][0];
				event.type = eventPath[i][1];
	
				handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}
				// Note that this is a bare JS function and not a jQuery handler
				handle = ontype && cur[ ontype ];
				if ( handle && jQuery.acceptData( cur ) && handle.apply( cur, data ) === false ) {
					event.preventDefault();
				}
			}
			event.type = type;
	
			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {
	
				if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
					!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {
	
					// Call a native DOM method on the target with the same name name as the event.
					// Can't use an .isFunction() check here because IE6/7 fails that test.
					// Don't do default actions on window, that's where global variables be (#6170)
					// IE<9 dies on focus/blur to hidden element (#1486)
					if ( ontype && elem[ type ] && ((type !== "focus" && type !== "blur") || event.target.offsetWidth !== 0) && !jQuery.isWindow( elem ) ) {
	
						// Don't re-trigger an onFOO event when we call its FOO() method
						old = elem[ ontype ];
	
						if ( old ) {
							elem[ ontype ] = null;
						}
	
						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;
	
						if ( old ) {
							elem[ ontype ] = old;
						}
					}
				}
			}
	
			return event.result;
		},
	
		dispatch: function( event ) {
	
			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event || window.event );
	
			var handlers = ( (jQuery._data( this, "events" ) || {} )[ event.type ] || []),
				delegateCount = handlers.delegateCount,
				args = [].slice.call( arguments, 0 ),
				run_all = !event.exclusive && !event.namespace,
				special = jQuery.event.special[ event.type ] || {},
				handlerQueue = [],
				i, j, cur, jqcur, ret, selMatch, matched, matches, handleObj, sel, related;
	
			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[0] = event;
			event.delegateTarget = this;
	
			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}
	
			// Determine handlers that should run if there are delegated events
			// Avoid non-left-click bubbling in Firefox (#3861)
			if ( delegateCount && !(event.button && event.type === "click") ) {
	
				// Pregenerate a single jQuery object for reuse with .is()
				jqcur = jQuery(this);
				jqcur.context = this.ownerDocument || this;
	
				for ( cur = event.target; cur != this; cur = cur.parentNode || this ) {
	
					// Don't process events on disabled elements (#6911, #8165)
					if ( cur.disabled !== true ) {
						selMatch = {};
						matches = [];
						jqcur[0] = cur;
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];
							sel = handleObj.selector;
	
							if ( selMatch[ sel ] === undefined ) {
								selMatch[ sel ] = (
									handleObj.quick ? quickIs( cur, handleObj.quick ) : jqcur.is( sel )
								);
							}
							if ( selMatch[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push({ elem: cur, matches: matches });
						}
					}
				}
			}
	
			// Add the remaining (directly-bound) handlers
			if ( handlers.length > delegateCount ) {
				handlerQueue.push({ elem: this, matches: handlers.slice( delegateCount ) });
			}
	
			// Run delegates first; they may want to stop propagation beneath us
			for ( i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++ ) {
				matched = handlerQueue[ i ];
				event.currentTarget = matched.elem;
	
				for ( j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++ ) {
					handleObj = matched.matches[ j ];
	
					// Triggered event must either 1) be non-exclusive and have no namespace, or
					// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
					if ( run_all || (!event.namespace && !handleObj.namespace) || event.namespace_re && event.namespace_re.test( handleObj.namespace ) ) {
	
						event.data = handleObj.data;
						event.handleObj = handleObj;
	
						ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
								.apply( matched.elem, args );
	
						if ( ret !== undefined ) {
							event.result = ret;
							if ( ret === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}
	
			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}
	
			return event.result;
		},
	
		// Includes some event props shared by KeyEvent and MouseEvent
		// *** attrChange attrName relatedNode srcElement  are not normalized, non-W3C, deprecated, will be removed in 1.8 ***
		props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
	
		fixHooks: {},
	
		keyHooks: {
			props: "char charCode key keyCode".split(" "),
			filter: function( event, original ) {
	
				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}
	
				return event;
			}
		},
	
		mouseHooks: {
			props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
			filter: function( event, original ) {
				var eventDoc, doc, body,
					button = original.button,
					fromElement = original.fromElement;
	
				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;
	
					event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}
	
				// Add relatedTarget, if necessary
				if ( !event.relatedTarget && fromElement ) {
					event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
				}
	
				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}
	
				return event;
			}
		},
	
		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}
	
			// Create a writable copy of the event object and normalize some properties
			var i, prop,
				originalEvent = event,
				fixHook = jQuery.event.fixHooks[ event.type ] || {},
				copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;
	
			event = jQuery.Event( originalEvent );
	
			for ( i = copy.length; i; ) {
				prop = copy[ --i ];
				event[ prop ] = originalEvent[ prop ];
			}
	
			// Fix target property, if necessary (#1925, IE 6/7/8 & Safari2)
			if ( !event.target ) {
				event.target = originalEvent.srcElement || document;
			}
	
			// Target should not be a text node (#504, Safari)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}
	
			// For mouse/key events; add metaKey if it's not there (#3368, IE6/7/8)
			if ( event.metaKey === undefined ) {
				event.metaKey = event.ctrlKey;
			}
	
			return fixHook.filter? fixHook.filter( event, originalEvent ) : event;
		},
	
		special: {
			ready: {
				// Make sure the ready event is setup
				setup: jQuery.bindReady
			},
	
			load: {
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
	
			focus: {
				delegateType: "focusin"
			},
			blur: {
				delegateType: "focusout"
			},
	
			beforeunload: {
				setup: function( data, namespaces, eventHandle ) {
					// We only want to do this special case on windows
					if ( jQuery.isWindow( this ) ) {
						this.onbeforeunload = eventHandle;
					}
				},
	
				teardown: function( namespaces, eventHandle ) {
					if ( this.onbeforeunload === eventHandle ) {
						this.onbeforeunload = null;
					}
				}
			}
		},
	
		simulate: function( type, elem, event, bubble ) {
			// Piggyback on a donor event to simulate a different one.
			// Fake originalEvent to avoid donor's stopPropagation, but if the
			// simulated event prevents default then we do the same on the donor.
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{ type: type,
					isSimulated: true,
					originalEvent: {}
				}
			);
			if ( bubble ) {
				jQuery.event.trigger( e, null, elem );
			} else {
				jQuery.event.dispatch.call( elem, e );
			}
			if ( e.isDefaultPrevented() ) {
				event.preventDefault();
			}
		}
	};
	
	// Some plugins are using, but it's undocumented/deprecated and will be removed.
	// The 1.7 special event interface should provide all the hooks needed now.
	jQuery.event.handle = jQuery.event.dispatch;
	
	jQuery.removeEvent = document.removeEventListener ?
		function( elem, type, handle ) {
			if ( elem.removeEventListener ) {
				elem.removeEventListener( type, handle, false );
			}
		} :
		function( elem, type, handle ) {
			if ( elem.detachEvent ) {
				elem.detachEvent( "on" + type, handle );
			}
		};
	
	jQuery.Event = function( src, props ) {
		// Allow instantiation without the 'new' keyword
		if ( !(this instanceof jQuery.Event) ) {
			return new jQuery.Event( src, props );
		}
	
		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;
	
			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
				src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;
	
		// Event type
		} else {
			this.type = src;
		}
	
		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}
	
		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();
	
		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};
	
	function returnFalse() {
		return false;
	}
	function returnTrue() {
		return true;
	}
	
	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		preventDefault: function() {
			this.isDefaultPrevented = returnTrue;
	
			var e = this.originalEvent;
			if ( !e ) {
				return;
			}
	
			// if preventDefault exists run it on the original event
			if ( e.preventDefault ) {
				e.preventDefault();
	
			// otherwise set the returnValue property of the original event to false (IE)
			} else {
				e.returnValue = false;
			}
		},
		stopPropagation: function() {
			this.isPropagationStopped = returnTrue;
	
			var e = this.originalEvent;
			if ( !e ) {
				return;
			}
			// if stopPropagation exists run it on the original event
			if ( e.stopPropagation ) {
				e.stopPropagation();
			}
			// otherwise set the cancelBubble property of the original event to true (IE)
			e.cancelBubble = true;
		},
		stopImmediatePropagation: function() {
			this.isImmediatePropagationStopped = returnTrue;
			this.stopPropagation();
		},
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse
	};
	
	// Create mouseenter/leave events using mouseover/out and event-time checks
	jQuery.each({
		mouseenter: "mouseover",
		mouseleave: "mouseout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,
	
			handle: function( event ) {
				var target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj,
					selector = handleObj.selector,
					ret;
	
				// For mousenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	});
	
	// IE submit delegation
	if ( !jQuery.support.submitBubbles ) {
	
		jQuery.event.special.submit = {
			setup: function() {
				// Only need this for delegated form submit events
				if ( jQuery.nodeName( this, "form" ) ) {
					return false;
				}
	
				// Lazy-add a submit handler when a descendant form may potentially be submitted
				jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
					// Node name check avoids a VML-related crash in IE (#9807)
					var elem = e.target,
						form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
					if ( form && !form._submit_attached ) {
						jQuery.event.add( form, "submit._submit", function( event ) {
							event._submit_bubble = true;
						});
						form._submit_attached = true;
					}
				});
				// return undefined since we don't need an event listener
			},
			
			postDispatch: function( event ) {
				// If form was submitted by the user, bubble the event up the tree
				if ( event._submit_bubble ) {
					delete event._submit_bubble;
					if ( this.parentNode && !event.isTrigger ) {
						jQuery.event.simulate( "submit", this.parentNode, event, true );
					}
				}
			},
	
			teardown: function() {
				// Only need this for delegated form submit events
				if ( jQuery.nodeName( this, "form" ) ) {
					return false;
				}
	
				// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
				jQuery.event.remove( this, "._submit" );
			}
		};
	}
	
	// IE change delegation and checkbox/radio fix
	if ( !jQuery.support.changeBubbles ) {
	
		jQuery.event.special.change = {
	
			setup: function() {
	
				if ( rformElems.test( this.nodeName ) ) {
					// IE doesn't fire change on a check/radio until blur; trigger it on click
					// after a propertychange. Eat the blur-change in special.change.handle.
					// This still fires onchange a second time for check/radio after blur.
					if ( this.type === "checkbox" || this.type === "radio" ) {
						jQuery.event.add( this, "propertychange._change", function( event ) {
							if ( event.originalEvent.propertyName === "checked" ) {
								this._just_changed = true;
							}
						});
						jQuery.event.add( this, "click._change", function( event ) {
							if ( this._just_changed && !event.isTrigger ) {
								this._just_changed = false;
								jQuery.event.simulate( "change", this, event, true );
							}
						});
					}
					return false;
				}
				// Delegated event; lazy-add a change handler on descendant inputs
				jQuery.event.add( this, "beforeactivate._change", function( e ) {
					var elem = e.target;
	
					if ( rformElems.test( elem.nodeName ) && !elem._change_attached ) {
						jQuery.event.add( elem, "change._change", function( event ) {
							if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
								jQuery.event.simulate( "change", this.parentNode, event, true );
							}
						});
						elem._change_attached = true;
					}
				});
			},
	
			handle: function( event ) {
				var elem = event.target;
	
				// Swallow native change events from checkbox/radio, we already triggered them above
				if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
					return event.handleObj.handler.apply( this, arguments );
				}
			},
	
			teardown: function() {
				jQuery.event.remove( this, "._change" );
	
				return rformElems.test( this.nodeName );
			}
		};
	}
	
	// Create "bubbling" focus and blur events
	if ( !jQuery.support.focusinBubbles ) {
		jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {
	
			// Attach a single capturing handler while someone wants focusin/focusout
			var attaches = 0,
				handler = function( event ) {
					jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
				};
	
			jQuery.event.special[ fix ] = {
				setup: function() {
					if ( attaches++ === 0 ) {
						document.addEventListener( orig, handler, true );
					}
				},
				teardown: function() {
					if ( --attaches === 0 ) {
						document.removeEventListener( orig, handler, true );
					}
				}
			};
		});
	}
	
	jQuery.fn.extend({
	
		on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
			var origFn, type;
	
			// Types can be a map of types/handlers
			if ( typeof types === "object" ) {
				// ( types-Object, selector, data )
				if ( typeof selector !== "string" ) { // && selector != null
					// ( types-Object, data )
					data = data || selector;
					selector = undefined;
				}
				for ( type in types ) {
					this.on( type, selector, data, types[ type ], one );
				}
				return this;
			}
	
			if ( data == null && fn == null ) {
				// ( types, fn )
				fn = selector;
				data = selector = undefined;
			} else if ( fn == null ) {
				if ( typeof selector === "string" ) {
					// ( types, selector, fn )
					fn = data;
					data = undefined;
				} else {
					// ( types, data, fn )
					fn = data;
					data = selector;
					selector = undefined;
				}
			}
			if ( fn === false ) {
				fn = returnFalse;
			} else if ( !fn ) {
				return this;
			}
	
			if ( one === 1 ) {
				origFn = fn;
				fn = function( event ) {
					// Can use an empty set, since event contains the info
					jQuery().off( event );
					return origFn.apply( this, arguments );
				};
				// Use same guid so caller can remove using origFn
				fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
			}
			return this.each( function() {
				jQuery.event.add( this, types, fn, data, selector );
			});
		},
		one: function( types, selector, data, fn ) {
			return this.on( types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			if ( types && types.preventDefault && types.handleObj ) {
				// ( event )  dispatched jQuery.Event
				var handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {
				// ( types-object [, selector] )
				for ( var type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each(function() {
				jQuery.event.remove( this, types, fn, selector );
			});
		},
	
		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},
	
		live: function( types, data, fn ) {
			jQuery( this.context ).on( types, this.selector, data, fn );
			return this;
		},
		die: function( types, fn ) {
			jQuery( this.context ).off( types, this.selector || "**", fn );
			return this;
		},
	
		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length == 1? this.off( selector, "**" ) : this.off( types, selector, fn );
		},
	
		trigger: function( type, data ) {
			return this.each(function() {
				jQuery.event.trigger( type, data, this );
			});
		},
		triggerHandler: function( type, data ) {
			if ( this[0] ) {
				return jQuery.event.trigger( type, data, this[0], true );
			}
		},
	
		toggle: function( fn ) {
			// Save reference to arguments for access in closure
			var args = arguments,
				guid = fn.guid || jQuery.guid++,
				i = 0,
				toggler = function( event ) {
					// Figure out which function to execute
					var lastToggle = ( jQuery._data( this, "lastToggle" + fn.guid ) || 0 ) % i;
					jQuery._data( this, "lastToggle" + fn.guid, lastToggle + 1 );
	
					// Make sure that clicks stop
					event.preventDefault();
	
					// and execute the function
					return args[ lastToggle ].apply( this, arguments ) || false;
				};
	
			// link all the functions, so any of them can unbind this click handler
			toggler.guid = guid;
			while ( i < args.length ) {
				args[ i++ ].guid = guid;
			}
	
			return this.click( toggler );
		},
	
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	});
	
	jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {
	
		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			if ( fn == null ) {
				fn = data;
				data = null;
			}
	
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	
		if ( jQuery.attrFn ) {
			jQuery.attrFn[ name ] = true;
		}
	
		if ( rkeyEvent.test( name ) ) {
			jQuery.event.fixHooks[ name ] = jQuery.event.keyHooks;
		}
	
		if ( rmouseEvent.test( name ) ) {
			jQuery.event.fixHooks[ name ] = jQuery.event.mouseHooks;
		}
	});
	
	
	
	/*!
	 * Sizzle CSS Selector Engine
	 *  Copyright 2011, The Dojo Foundation
	 *  Released under the MIT, BSD, and GPL Licenses.
	 *  More information: http://sizzlejs.com/
	 */
	(function(){
	
	var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
		expando = "sizcache" + (Math.random() + '').replace('.', ''),
		done = 0,
		toString = Object.prototype.toString,
		hasDuplicate = false,
		baseHasDuplicate = true,
		rBackslash = /\\/g,
		rReturn = /\r\n/g,
		rNonWord = /\W/;
	
	// Here we check if the JavaScript engine is using some sort of
	// optimization where it does not always call our comparision
	// function. If that is the case, discard the hasDuplicate value.
	//   Thus far that includes Google Chrome.
	[0, 0].sort(function() {
		baseHasDuplicate = false;
		return 0;
	});
	
	var Sizzle = function( selector, context, results, seed ) {
		results = results || [];
		context = context || document;
	
		var origContext = context;
	
		if ( context.nodeType !== 1 && context.nodeType !== 9 ) {
			return [];
		}
	
		if ( !selector || typeof selector !== "string" ) {
			return results;
		}
	
		var m, set, checkSet, extra, ret, cur, pop, i,
			prune = true,
			contextXML = Sizzle.isXML( context ),
			parts = [],
			soFar = selector;
	
		// Reset the position of the chunker regexp (start from head)
		do {
			chunker.exec( "" );
			m = chunker.exec( soFar );
	
			if ( m ) {
				soFar = m[3];
	
				parts.push( m[1] );
	
				if ( m[2] ) {
					extra = m[3];
					break;
				}
			}
		} while ( m );
	
		if ( parts.length > 1 && origPOS.exec( selector ) ) {
	
			if ( parts.length === 2 && Expr.relative[ parts[0] ] ) {
				set = posProcess( parts[0] + parts[1], context, seed );
	
			} else {
				set = Expr.relative[ parts[0] ] ?
					[ context ] :
					Sizzle( parts.shift(), context );
	
				while ( parts.length ) {
					selector = parts.shift();
	
					if ( Expr.relative[ selector ] ) {
						selector += parts.shift();
					}
	
					set = posProcess( selector, set, seed );
				}
			}
	
		} else {
			// Take a shortcut and set the context if the root selector is an ID
			// (but not if it'll be faster if the inner selector is an ID)
			if ( !seed && parts.length > 1 && context.nodeType === 9 && !contextXML &&
					Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1]) ) {
	
				ret = Sizzle.find( parts.shift(), context, contextXML );
				context = ret.expr ?
					Sizzle.filter( ret.expr, ret.set )[0] :
					ret.set[0];
			}
	
			if ( context ) {
				ret = seed ?
					{ expr: parts.pop(), set: makeArray(seed) } :
					Sizzle.find( parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML );
	
				set = ret.expr ?
					Sizzle.filter( ret.expr, ret.set ) :
					ret.set;
	
				if ( parts.length > 0 ) {
					checkSet = makeArray( set );
	
				} else {
					prune = false;
				}
	
				while ( parts.length ) {
					cur = parts.pop();
					pop = cur;
	
					if ( !Expr.relative[ cur ] ) {
						cur = "";
					} else {
						pop = parts.pop();
					}
	
					if ( pop == null ) {
						pop = context;
					}
	
					Expr.relative[ cur ]( checkSet, pop, contextXML );
				}
	
			} else {
				checkSet = parts = [];
			}
		}
	
		if ( !checkSet ) {
			checkSet = set;
		}
	
		if ( !checkSet ) {
			Sizzle.error( cur || selector );
		}
	
		if ( toString.call(checkSet) === "[object Array]" ) {
			if ( !prune ) {
				results.push.apply( results, checkSet );
	
			} else if ( context && context.nodeType === 1 ) {
				for ( i = 0; checkSet[i] != null; i++ ) {
					if ( checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && Sizzle.contains(context, checkSet[i])) ) {
						results.push( set[i] );
					}
				}
	
			} else {
				for ( i = 0; checkSet[i] != null; i++ ) {
					if ( checkSet[i] && checkSet[i].nodeType === 1 ) {
						results.push( set[i] );
					}
				}
			}
	
		} else {
			makeArray( checkSet, results );
		}
	
		if ( extra ) {
			Sizzle( extra, origContext, results, seed );
			Sizzle.uniqueSort( results );
		}
	
		return results;
	};
	
	Sizzle.uniqueSort = function( results ) {
		if ( sortOrder ) {
			hasDuplicate = baseHasDuplicate;
			results.sort( sortOrder );
	
			if ( hasDuplicate ) {
				for ( var i = 1; i < results.length; i++ ) {
					if ( results[i] === results[ i - 1 ] ) {
						results.splice( i--, 1 );
					}
				}
			}
		}
	
		return results;
	};
	
	Sizzle.matches = function( expr, set ) {
		return Sizzle( expr, null, null, set );
	};
	
	Sizzle.matchesSelector = function( node, expr ) {
		return Sizzle( expr, null, null, [node] ).length > 0;
	};
	
	Sizzle.find = function( expr, context, isXML ) {
		var set, i, len, match, type, left;
	
		if ( !expr ) {
			return [];
		}
	
		for ( i = 0, len = Expr.order.length; i < len; i++ ) {
			type = Expr.order[i];
	
			if ( (match = Expr.leftMatch[ type ].exec( expr )) ) {
				left = match[1];
				match.splice( 1, 1 );
	
				if ( left.substr( left.length - 1 ) !== "\\" ) {
					match[1] = (match[1] || "").replace( rBackslash, "" );
					set = Expr.find[ type ]( match, context, isXML );
	
					if ( set != null ) {
						expr = expr.replace( Expr.match[ type ], "" );
						break;
					}
				}
			}
		}
	
		if ( !set ) {
			set = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( "*" ) :
				[];
		}
	
		return { set: set, expr: expr };
	};
	
	Sizzle.filter = function( expr, set, inplace, not ) {
		var match, anyFound,
			type, found, item, filter, left,
			i, pass,
			old = expr,
			result = [],
			curLoop = set,
			isXMLFilter = set && set[0] && Sizzle.isXML( set[0] );
	
		while ( expr && set.length ) {
			for ( type in Expr.filter ) {
				if ( (match = Expr.leftMatch[ type ].exec( expr )) != null && match[2] ) {
					filter = Expr.filter[ type ];
					left = match[1];
	
					anyFound = false;
	
					match.splice(1,1);
	
					if ( left.substr( left.length - 1 ) === "\\" ) {
						continue;
					}
	
					if ( curLoop === result ) {
						result = [];
					}
	
					if ( Expr.preFilter[ type ] ) {
						match = Expr.preFilter[ type ]( match, curLoop, inplace, result, not, isXMLFilter );
	
						if ( !match ) {
							anyFound = found = true;
	
						} else if ( match === true ) {
							continue;
						}
					}
	
					if ( match ) {
						for ( i = 0; (item = curLoop[i]) != null; i++ ) {
							if ( item ) {
								found = filter( item, match, i, curLoop );
								pass = not ^ found;
	
								if ( inplace && found != null ) {
									if ( pass ) {
										anyFound = true;
	
									} else {
										curLoop[i] = false;
									}
	
								} else if ( pass ) {
									result.push( item );
									anyFound = true;
								}
							}
						}
					}
	
					if ( found !== undefined ) {
						if ( !inplace ) {
							curLoop = result;
						}
	
						expr = expr.replace( Expr.match[ type ], "" );
	
						if ( !anyFound ) {
							return [];
						}
	
						break;
					}
				}
			}
	
			// Improper expression
			if ( expr === old ) {
				if ( anyFound == null ) {
					Sizzle.error( expr );
	
				} else {
					break;
				}
			}
	
			old = expr;
		}
	
		return curLoop;
	};
	
	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};
	
	/**
	 * Utility function for retreiving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	var getText = Sizzle.getText = function( elem ) {
	    var i, node,
			nodeType = elem.nodeType,
			ret = "";
	
		if ( nodeType ) {
			if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
				// Use textContent || innerText for elements
				if ( typeof elem.textContent === 'string' ) {
					return elem.textContent;
				} else if ( typeof elem.innerText === 'string' ) {
					// Replace IE's carriage returns
					return elem.innerText.replace( rReturn, '' );
				} else {
					// Traverse it's children
					for ( elem = elem.firstChild; elem; elem = elem.nextSibling) {
						ret += getText( elem );
					}
				}
			} else if ( nodeType === 3 || nodeType === 4 ) {
				return elem.nodeValue;
			}
		} else {
	
			// If no nodeType, this is expected to be an array
			for ( i = 0; (node = elem[i]); i++ ) {
				// Do not traverse comment nodes
				if ( node.nodeType !== 8 ) {
					ret += getText( node );
				}
			}
		}
		return ret;
	};
	
	var Expr = Sizzle.selectors = {
		order: [ "ID", "NAME", "TAG" ],
	
		match: {
			ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
			CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
			NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
			ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,
			TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
			CHILD: /:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,
			POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
			PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
		},
	
		leftMatch: {},
	
		attrMap: {
			"class": "className",
			"for": "htmlFor"
		},
	
		attrHandle: {
			href: function( elem ) {
				return elem.getAttribute( "href" );
			},
			type: function( elem ) {
				return elem.getAttribute( "type" );
			}
		},
	
		relative: {
			"+": function(checkSet, part){
				var isPartStr = typeof part === "string",
					isTag = isPartStr && !rNonWord.test( part ),
					isPartStrNotTag = isPartStr && !isTag;
	
				if ( isTag ) {
					part = part.toLowerCase();
				}
	
				for ( var i = 0, l = checkSet.length, elem; i < l; i++ ) {
					if ( (elem = checkSet[i]) ) {
						while ( (elem = elem.previousSibling) && elem.nodeType !== 1 ) {}
	
						checkSet[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ?
							elem || false :
							elem === part;
					}
				}
	
				if ( isPartStrNotTag ) {
					Sizzle.filter( part, checkSet, true );
				}
			},
	
			">": function( checkSet, part ) {
				var elem,
					isPartStr = typeof part === "string",
					i = 0,
					l = checkSet.length;
	
				if ( isPartStr && !rNonWord.test( part ) ) {
					part = part.toLowerCase();
	
					for ( ; i < l; i++ ) {
						elem = checkSet[i];
	
						if ( elem ) {
							var parent = elem.parentNode;
							checkSet[i] = parent.nodeName.toLowerCase() === part ? parent : false;
						}
					}
	
				} else {
					for ( ; i < l; i++ ) {
						elem = checkSet[i];
	
						if ( elem ) {
							checkSet[i] = isPartStr ?
								elem.parentNode :
								elem.parentNode === part;
						}
					}
	
					if ( isPartStr ) {
						Sizzle.filter( part, checkSet, true );
					}
				}
			},
	
			"": function(checkSet, part, isXML){
				var nodeCheck,
					doneName = done++,
					checkFn = dirCheck;
	
				if ( typeof part === "string" && !rNonWord.test( part ) ) {
					part = part.toLowerCase();
					nodeCheck = part;
					checkFn = dirNodeCheck;
				}
	
				checkFn( "parentNode", part, doneName, checkSet, nodeCheck, isXML );
			},
	
			"~": function( checkSet, part, isXML ) {
				var nodeCheck,
					doneName = done++,
					checkFn = dirCheck;
	
				if ( typeof part === "string" && !rNonWord.test( part ) ) {
					part = part.toLowerCase();
					nodeCheck = part;
					checkFn = dirNodeCheck;
				}
	
				checkFn( "previousSibling", part, doneName, checkSet, nodeCheck, isXML );
			}
		},
	
		find: {
			ID: function( match, context, isXML ) {
				if ( typeof context.getElementById !== "undefined" && !isXML ) {
					var m = context.getElementById(match[1]);
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					return m && m.parentNode ? [m] : [];
				}
			},
	
			NAME: function( match, context ) {
				if ( typeof context.getElementsByName !== "undefined" ) {
					var ret = [],
						results = context.getElementsByName( match[1] );
	
					for ( var i = 0, l = results.length; i < l; i++ ) {
						if ( results[i].getAttribute("name") === match[1] ) {
							ret.push( results[i] );
						}
					}
	
					return ret.length === 0 ? null : ret;
				}
			},
	
			TAG: function( match, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( match[1] );
				}
			}
		},
		preFilter: {
			CLASS: function( match, curLoop, inplace, result, not, isXML ) {
				match = " " + match[1].replace( rBackslash, "" ) + " ";
	
				if ( isXML ) {
					return match;
				}
	
				for ( var i = 0, elem; (elem = curLoop[i]) != null; i++ ) {
					if ( elem ) {
						if ( not ^ (elem.className && (" " + elem.className + " ").replace(/[\t\n\r]/g, " ").indexOf(match) >= 0) ) {
							if ( !inplace ) {
								result.push( elem );
							}
	
						} else if ( inplace ) {
							curLoop[i] = false;
						}
					}
				}
	
				return false;
			},
	
			ID: function( match ) {
				return match[1].replace( rBackslash, "" );
			},
	
			TAG: function( match, curLoop ) {
				return match[1].replace( rBackslash, "" ).toLowerCase();
			},
	
			CHILD: function( match ) {
				if ( match[1] === "nth" ) {
					if ( !match[2] ) {
						Sizzle.error( match[0] );
					}
	
					match[2] = match[2].replace(/^\+|\s*/g, '');
	
					// parse equations like 'even', 'odd', '5', '2n', '3n+2', '4n-1', '-n+6'
					var test = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(
						match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" ||
						!/\D/.test( match[2] ) && "0n+" + match[2] || match[2]);
	
					// calculate the numbers (first)n+(last) including if they are negative
					match[2] = (test[1] + (test[2] || 1)) - 0;
					match[3] = test[3] - 0;
				}
				else if ( match[2] ) {
					Sizzle.error( match[0] );
				}
	
				// TODO: Move to normal caching system
				match[0] = done++;
	
				return match;
			},
	
			ATTR: function( match, curLoop, inplace, result, not, isXML ) {
				var name = match[1] = match[1].replace( rBackslash, "" );
	
				if ( !isXML && Expr.attrMap[name] ) {
					match[1] = Expr.attrMap[name];
				}
	
				// Handle if an un-quoted value was used
				match[4] = ( match[4] || match[5] || "" ).replace( rBackslash, "" );
	
				if ( match[2] === "~=" ) {
					match[4] = " " + match[4] + " ";
				}
	
				return match;
			},
	
			PSEUDO: function( match, curLoop, inplace, result, not ) {
				if ( match[1] === "not" ) {
					// If we're dealing with a complex expression, or a simple one
					if ( ( chunker.exec(match[3]) || "" ).length > 1 || /^\w/.test(match[3]) ) {
						match[3] = Sizzle(match[3], null, null, curLoop);
	
					} else {
						var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);
	
						if ( !inplace ) {
							result.push.apply( result, ret );
						}
	
						return false;
					}
	
				} else if ( Expr.match.POS.test( match[0] ) || Expr.match.CHILD.test( match[0] ) ) {
					return true;
				}
	
				return match;
			},
	
			POS: function( match ) {
				match.unshift( true );
	
				return match;
			}
		},
	
		filters: {
			enabled: function( elem ) {
				return elem.disabled === false && elem.type !== "hidden";
			},
	
			disabled: function( elem ) {
				return elem.disabled === true;
			},
	
			checked: function( elem ) {
				return elem.checked === true;
			},
	
			selected: function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}
	
				return elem.selected === true;
			},
	
			parent: function( elem ) {
				return !!elem.firstChild;
			},
	
			empty: function( elem ) {
				return !elem.firstChild;
			},
	
			has: function( elem, i, match ) {
				return !!Sizzle( match[3], elem ).length;
			},
	
			header: function( elem ) {
				return (/h\d/i).test( elem.nodeName );
			},
	
			text: function( elem ) {
				var attr = elem.getAttribute( "type" ), type = elem.type;
				// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
				// use getAttribute instead to test this case
				return elem.nodeName.toLowerCase() === "input" && "text" === type && ( attr === type || attr === null );
			},
	
			radio: function( elem ) {
				return elem.nodeName.toLowerCase() === "input" && "radio" === elem.type;
			},
	
			checkbox: function( elem ) {
				return elem.nodeName.toLowerCase() === "input" && "checkbox" === elem.type;
			},
	
			file: function( elem ) {
				return elem.nodeName.toLowerCase() === "input" && "file" === elem.type;
			},
	
			password: function( elem ) {
				return elem.nodeName.toLowerCase() === "input" && "password" === elem.type;
			},
	
			submit: function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return (name === "input" || name === "button") && "submit" === elem.type;
			},
	
			image: function( elem ) {
				return elem.nodeName.toLowerCase() === "input" && "image" === elem.type;
			},
	
			reset: function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return (name === "input" || name === "button") && "reset" === elem.type;
			},
	
			button: function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && "button" === elem.type || name === "button";
			},
	
			input: function( elem ) {
				return (/input|select|textarea|button/i).test( elem.nodeName );
			},
	
			focus: function( elem ) {
				return elem === elem.ownerDocument.activeElement;
			}
		},
		setFilters: {
			first: function( elem, i ) {
				return i === 0;
			},
	
			last: function( elem, i, match, array ) {
				return i === array.length - 1;
			},
	
			even: function( elem, i ) {
				return i % 2 === 0;
			},
	
			odd: function( elem, i ) {
				return i % 2 === 1;
			},
	
			lt: function( elem, i, match ) {
				return i < match[3] - 0;
			},
	
			gt: function( elem, i, match ) {
				return i > match[3] - 0;
			},
	
			nth: function( elem, i, match ) {
				return match[3] - 0 === i;
			},
	
			eq: function( elem, i, match ) {
				return match[3] - 0 === i;
			}
		},
		filter: {
			PSEUDO: function( elem, match, i, array ) {
				var name = match[1],
					filter = Expr.filters[ name ];
	
				if ( filter ) {
					return filter( elem, i, match, array );
	
				} else if ( name === "contains" ) {
					return (elem.textContent || elem.innerText || getText([ elem ]) || "").indexOf(match[3]) >= 0;
	
				} else if ( name === "not" ) {
					var not = match[3];
	
					for ( var j = 0, l = not.length; j < l; j++ ) {
						if ( not[j] === elem ) {
							return false;
						}
					}
	
					return true;
	
				} else {
					Sizzle.error( name );
				}
			},
	
			CHILD: function( elem, match ) {
				var first, last,
					doneName, parent, cache,
					count, diff,
					type = match[1],
					node = elem;
	
				switch ( type ) {
					case "only":
					case "first":
						while ( (node = node.previousSibling) ) {
							if ( node.nodeType === 1 ) {
								return false;
							}
						}
	
						if ( type === "first" ) {
							return true;
						}
	
						node = elem;
	
						/* falls through */
					case "last":
						while ( (node = node.nextSibling) ) {
							if ( node.nodeType === 1 ) {
								return false;
							}
						}
	
						return true;
	
					case "nth":
						first = match[2];
						last = match[3];
	
						if ( first === 1 && last === 0 ) {
							return true;
						}
	
						doneName = match[0];
						parent = elem.parentNode;
	
						if ( parent && (parent[ expando ] !== doneName || !elem.nodeIndex) ) {
							count = 0;
	
							for ( node = parent.firstChild; node; node = node.nextSibling ) {
								if ( node.nodeType === 1 ) {
									node.nodeIndex = ++count;
								}
							}
	
							parent[ expando ] = doneName;
						}
	
						diff = elem.nodeIndex - last;
	
						if ( first === 0 ) {
							return diff === 0;
	
						} else {
							return ( diff % first === 0 && diff / first >= 0 );
						}
				}
			},
	
			ID: function( elem, match ) {
				return elem.nodeType === 1 && elem.getAttribute("id") === match;
			},
	
			TAG: function( elem, match ) {
				return (match === "*" && elem.nodeType === 1) || !!elem.nodeName && elem.nodeName.toLowerCase() === match;
			},
	
			CLASS: function( elem, match ) {
				return (" " + (elem.className || elem.getAttribute("class")) + " ")
					.indexOf( match ) > -1;
			},
	
			ATTR: function( elem, match ) {
				var name = match[1],
					result = Sizzle.attr ?
						Sizzle.attr( elem, name ) :
						Expr.attrHandle[ name ] ?
						Expr.attrHandle[ name ]( elem ) :
						elem[ name ] != null ?
							elem[ name ] :
							elem.getAttribute( name ),
					value = result + "",
					type = match[2],
					check = match[4];
	
				return result == null ?
					type === "!=" :
					!type && Sizzle.attr ?
					result != null :
					type === "=" ?
					value === check :
					type === "*=" ?
					value.indexOf(check) >= 0 :
					type === "~=" ?
					(" " + value + " ").indexOf(check) >= 0 :
					!check ?
					value && result !== false :
					type === "!=" ?
					value !== check :
					type === "^=" ?
					value.indexOf(check) === 0 :
					type === "$=" ?
					value.substr(value.length - check.length) === check :
					type === "|=" ?
					value === check || value.substr(0, check.length + 1) === check + "-" :
					false;
			},
	
			POS: function( elem, match, i, array ) {
				var name = match[2],
					filter = Expr.setFilters[ name ];
	
				if ( filter ) {
					return filter( elem, i, match, array );
				}
			}
		}
	};
	
	var origPOS = Expr.match.POS,
		fescape = function(all, num){
			return "\\" + (num - 0 + 1);
		};
	
	for ( var type in Expr.match ) {
		Expr.match[ type ] = new RegExp( Expr.match[ type ].source + (/(?![^\[]*\])(?![^\(]*\))/.source) );
		Expr.leftMatch[ type ] = new RegExp( /(^(?:.|\r|\n)*?)/.source + Expr.match[ type ].source.replace(/\\(\d+)/g, fescape) );
	}
	// Expose origPOS
	// "global" as in regardless of relation to brackets/parens
	Expr.match.globalPOS = origPOS;
	
	var makeArray = function( array, results ) {
		array = Array.prototype.slice.call( array, 0 );
	
		if ( results ) {
			results.push.apply( results, array );
			return results;
		}
	
		return array;
	};
	
	// Perform a simple check to determine if the browser is capable of
	// converting a NodeList to an array using builtin methods.
	// Also verifies that the returned array holds DOM nodes
	// (which is not the case in the Blackberry browser)
	try {
		Array.prototype.slice.call( document.documentElement.childNodes, 0 )[0].nodeType;
	
	// Provide a fallback method if it does not work
	} catch( e ) {
		makeArray = function( array, results ) {
			var i = 0,
				ret = results || [];
	
			if ( toString.call(array) === "[object Array]" ) {
				Array.prototype.push.apply( ret, array );
	
			} else {
				if ( typeof array.length === "number" ) {
					for ( var l = array.length; i < l; i++ ) {
						ret.push( array[i] );
					}
	
				} else {
					for ( ; array[i]; i++ ) {
						ret.push( array[i] );
					}
				}
			}
	
			return ret;
		};
	}
	
	var sortOrder, siblingCheck;
	
	if ( document.documentElement.compareDocumentPosition ) {
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			if ( !a.compareDocumentPosition || !b.compareDocumentPosition ) {
				return a.compareDocumentPosition ? -1 : 1;
			}
	
			return a.compareDocumentPosition(b) & 4 ? -1 : 1;
		};
	
	} else {
		sortOrder = function( a, b ) {
			// The nodes are identical, we can exit early
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
	
			// Fallback to using sourceIndex (in IE) if it's available on both nodes
			} else if ( a.sourceIndex && b.sourceIndex ) {
				return a.sourceIndex - b.sourceIndex;
			}
	
			var al, bl,
				ap = [],
				bp = [],
				aup = a.parentNode,
				bup = b.parentNode,
				cur = aup;
	
			// If the nodes are siblings (or identical) we can do a quick check
			if ( aup === bup ) {
				return siblingCheck( a, b );
	
			// If no parents were found then the nodes are disconnected
			} else if ( !aup ) {
				return -1;
	
			} else if ( !bup ) {
				return 1;
			}
	
			// Otherwise they're somewhere else in the tree so we need
			// to build up a full list of the parentNodes for comparison
			while ( cur ) {
				ap.unshift( cur );
				cur = cur.parentNode;
			}
	
			cur = bup;
	
			while ( cur ) {
				bp.unshift( cur );
				cur = cur.parentNode;
			}
	
			al = ap.length;
			bl = bp.length;
	
			// Start walking down the tree looking for a discrepancy
			for ( var i = 0; i < al && i < bl; i++ ) {
				if ( ap[i] !== bp[i] ) {
					return siblingCheck( ap[i], bp[i] );
				}
			}
	
			// We ended someplace up the tree so do a sibling check
			return i === al ?
				siblingCheck( a, bp[i], -1 ) :
				siblingCheck( ap[i], b, 1 );
		};
	
		siblingCheck = function( a, b, ret ) {
			if ( a === b ) {
				return ret;
			}
	
			var cur = a.nextSibling;
	
			while ( cur ) {
				if ( cur === b ) {
					return -1;
				}
	
				cur = cur.nextSibling;
			}
	
			return 1;
		};
	}
	
	// Check to see if the browser returns elements by name when
	// querying by getElementById (and provide a workaround)
	(function(){
		// We're going to inject a fake input element with a specified name
		var form = document.createElement("div"),
			id = "script" + (new Date()).getTime(),
			root = document.documentElement;
	
		form.innerHTML = "<a name='" + id + "'/>";
	
		// Inject it into the root element, check its status, and remove it quickly
		root.insertBefore( form, root.firstChild );
	
		// The workaround has to do additional checks after a getElementById
		// Which slows things down for other browsers (hence the branching)
		if ( document.getElementById( id ) ) {
			Expr.find.ID = function( match, context, isXML ) {
				if ( typeof context.getElementById !== "undefined" && !isXML ) {
					var m = context.getElementById(match[1]);
	
					return m ?
						m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ?
							[m] :
							undefined :
						[];
				}
			};
	
			Expr.filter.ID = function( elem, match ) {
				var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
	
				return elem.nodeType === 1 && node && node.nodeValue === match;
			};
		}
	
		root.removeChild( form );
	
		// release memory in IE
		root = form = null;
	})();
	
	(function(){
		// Check to see if the browser returns only elements
		// when doing getElementsByTagName("*")
	
		// Create a fake element
		var div = document.createElement("div");
		div.appendChild( document.createComment("") );
	
		// Make sure no comments are found
		if ( div.getElementsByTagName("*").length > 0 ) {
			Expr.find.TAG = function( match, context ) {
				var results = context.getElementsByTagName( match[1] );
	
				// Filter out possible comments
				if ( match[1] === "*" ) {
					var tmp = [];
	
					for ( var i = 0; results[i]; i++ ) {
						if ( results[i].nodeType === 1 ) {
							tmp.push( results[i] );
						}
					}
	
					results = tmp;
				}
	
				return results;
			};
		}
	
		// Check to see if an attribute returns normalized href attributes
		div.innerHTML = "<a href='#'></a>";
	
		if ( div.firstChild && typeof div.firstChild.getAttribute !== "undefined" &&
				div.firstChild.getAttribute("href") !== "#" ) {
	
			Expr.attrHandle.href = function( elem ) {
				return elem.getAttribute( "href", 2 );
			};
		}
	
		// release memory in IE
		div = null;
	})();
	
	if ( document.querySelectorAll ) {
		(function(){
			var oldSizzle = Sizzle,
				div = document.createElement("div"),
				id = "__sizzle__";
	
			div.innerHTML = "<p class='TEST'></p>";
	
			// Safari can't handle uppercase or unicode characters when
			// in quirks mode.
			if ( div.querySelectorAll && div.querySelectorAll(".TEST").length === 0 ) {
				return;
			}
	
			Sizzle = function( query, context, extra, seed ) {
				context = context || document;
	
				// Only use querySelectorAll on non-XML documents
				// (ID selectors don't work in non-HTML documents)
				if ( !seed && !Sizzle.isXML(context) ) {
					// See if we find a selector to speed up
					var match = /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec( query );
	
					if ( match && (context.nodeType === 1 || context.nodeType === 9) ) {
						// Speed-up: Sizzle("TAG")
						if ( match[1] ) {
							return makeArray( context.getElementsByTagName( query ), extra );
	
						// Speed-up: Sizzle(".CLASS")
						} else if ( match[2] && Expr.find.CLASS && context.getElementsByClassName ) {
							return makeArray( context.getElementsByClassName( match[2] ), extra );
						}
					}
	
					if ( context.nodeType === 9 ) {
						// Speed-up: Sizzle("body")
						// The body element only exists once, optimize finding it
						if ( query === "body" && context.body ) {
							return makeArray( [ context.body ], extra );
	
						// Speed-up: Sizzle("#ID")
						} else if ( match && match[3] ) {
							var elem = context.getElementById( match[3] );
	
							// Check parentNode to catch when Blackberry 4.6 returns
							// nodes that are no longer in the document #6963
							if ( elem && elem.parentNode ) {
								// Handle the case where IE and Opera return items
								// by name instead of ID
								if ( elem.id === match[3] ) {
									return makeArray( [ elem ], extra );
								}
	
							} else {
								return makeArray( [], extra );
							}
						}
	
						try {
							return makeArray( context.querySelectorAll(query), extra );
						} catch(qsaError) {}
	
					// qSA works strangely on Element-rooted queries
					// We can work around this by specifying an extra ID on the root
					// and working up from there (Thanks to Andrew Dupont for the technique)
					// IE 8 doesn't work on object elements
					} else if ( context.nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
						var oldContext = context,
							old = context.getAttribute( "id" ),
							nid = old || id,
							hasParent = context.parentNode,
							relativeHierarchySelector = /^\s*[+~]/.test( query );
	
						if ( !old ) {
							context.setAttribute( "id", nid );
						} else {
							nid = nid.replace( /'/g, "\\//JQUERY_SOURCE" );
						}
						if ( relativeHierarchySelector && hasParent ) {
							context = context.parentNode;
						}
	
						try {
							if ( !relativeHierarchySelector || hasParent ) {
								return makeArray( context.querySelectorAll( "[id='" + nid + "'] " + query ), extra );
							}
	
						} catch(pseudoError) {
						} finally {
							if ( !old ) {
								oldContext.removeAttribute( "id" );
							}
						}
					}
				}
	
				return oldSizzle(query, context, extra, seed);
			};
	
			for ( var prop in oldSizzle ) {
				Sizzle[ prop ] = oldSizzle[ prop ];
			}
	
			// release memory in IE
			div = null;
		})();
	}
	
	(function(){
		var html = document.documentElement,
			matches = html.matchesSelector || html.mozMatchesSelector || html.webkitMatchesSelector || html.msMatchesSelector;
	
		if ( matches ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9 fails this)
			var disconnectedMatch = !matches.call( document.createElement( "div" ), "div" ),
				pseudoWorks = false;
	
			try {
				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( document.documentElement, "[test!='']:sizzle" );
	
			} catch( pseudoError ) {
				pseudoWorks = true;
			}
	
			Sizzle.matchesSelector = function( node, expr ) {
				// Make sure that attribute selectors are quoted
				expr = expr.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");
	
				if ( !Sizzle.isXML( node ) ) {
					try {
						if ( pseudoWorks || !Expr.match.PSEUDO.test( expr ) && !/!=/.test( expr ) ) {
							var ret = matches.call( node, expr );
	
							// IE 9's matchesSelector returns false on disconnected nodes
							if ( ret || !disconnectedMatch ||
									// As well, disconnected nodes are said to be in a document
									// fragment in IE 9, so check for that
									node.document && node.document.nodeType !== 11 ) {
								return ret;
							}
						}
					} catch(e) {}
				}
	
				return Sizzle(expr, null, null, [node]).length > 0;
			};
		}
	})();
	
	(function(){
		var div = document.createElement("div");
	
		div.innerHTML = "<div class='test e'></div><div class='test'></div>";
	
		// Opera can't find a second classname (in 9.6)
		// Also, make sure that getElementsByClassName actually exists
		if ( !div.getElementsByClassName || div.getElementsByClassName("e").length === 0 ) {
			return;
		}
	
		// Safari caches class attributes, doesn't catch changes (in 3.2)
		div.lastChild.className = "e";
	
		if ( div.getElementsByClassName("e").length === 1 ) {
			return;
		}
	
		Expr.order.splice(1, 0, "CLASS");
		Expr.find.CLASS = function( match, context, isXML ) {
			if ( typeof context.getElementsByClassName !== "undefined" && !isXML ) {
				return context.getElementsByClassName(match[1]);
			}
		};
	
		// release memory in IE
		div = null;
	})();
	
	function dirNodeCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
		for ( var i = 0, l = checkSet.length; i < l; i++ ) {
			var elem = checkSet[i];
	
			if ( elem ) {
				var match = false;
	
				elem = elem[dir];
	
				while ( elem ) {
					if ( elem[ expando ] === doneName ) {
						match = checkSet[elem.sizset];
						break;
					}
	
					if ( elem.nodeType === 1 && !isXML ){
						elem[ expando ] = doneName;
						elem.sizset = i;
					}
	
					if ( elem.nodeName.toLowerCase() === cur ) {
						match = elem;
						break;
					}
	
					elem = elem[dir];
				}
	
				checkSet[i] = match;
			}
		}
	}
	
	function dirCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
		for ( var i = 0, l = checkSet.length; i < l; i++ ) {
			var elem = checkSet[i];
	
			if ( elem ) {
				var match = false;
	
				elem = elem[dir];
	
				while ( elem ) {
					if ( elem[ expando ] === doneName ) {
						match = checkSet[elem.sizset];
						break;
					}
	
					if ( elem.nodeType === 1 ) {
						if ( !isXML ) {
							elem[ expando ] = doneName;
							elem.sizset = i;
						}
	
						if ( typeof cur !== "string" ) {
							if ( elem === cur ) {
								match = true;
								break;
							}
	
						} else if ( Sizzle.filter( cur, [elem] ).length > 0 ) {
							match = elem;
							break;
						}
					}
	
					elem = elem[dir];
				}
	
				checkSet[i] = match;
			}
		}
	}
	
	if ( document.documentElement.contains ) {
		Sizzle.contains = function( a, b ) {
			return a !== b && (a.contains ? a.contains(b) : true);
		};
	
	} else if ( document.documentElement.compareDocumentPosition ) {
		Sizzle.contains = function( a, b ) {
			return !!(a.compareDocumentPosition(b) & 16);
		};
	
	} else {
		Sizzle.contains = function() {
			return false;
		};
	}
	
	Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = (elem ? elem.ownerDocument || elem : 0).documentElement;
	
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};
	
	var posProcess = function( selector, context, seed ) {
		var match,
			tmpSet = [],
			later = "",
			root = context.nodeType ? [context] : context;
	
		// Position selectors must be done after the filter
		// And so must :not(positional) so we move all PSEUDOs to the end
		while ( (match = Expr.match.PSEUDO.exec( selector )) ) {
			later += match[0];
			selector = selector.replace( Expr.match.PSEUDO, "" );
		}
	
		selector = Expr.relative[selector] ? selector + "*" : selector;
	
		for ( var i = 0, l = root.length; i < l; i++ ) {
			Sizzle( selector, root[i], tmpSet, seed );
		}
	
		return Sizzle.filter( later, tmpSet );
	};
	
	// EXPOSE
	// Override sizzle attribute retrieval
	Sizzle.attr = jQuery.attr;
	Sizzle.selectors.attrMap = {};
	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[":"] = jQuery.expr.filters;
	jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	
	
	})();
	
	
	var runtil = /Until$/,
		rparentsprev = /^(?:parents|prevUntil|prevAll)/,
		// Note: This RegExp should be improved, or likely pulled from Sizzle
		rmultiselector = /,/,
		isSimple = /^.[^:#\[\.,]*$/,
		slice = Array.prototype.slice,
		POS = jQuery.expr.match.globalPOS,
		// methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};
	
	jQuery.fn.extend({
		find: function( selector ) {
			var self = this,
				i, l;
	
			if ( typeof selector !== "string" ) {
				return jQuery( selector ).filter(function() {
					for ( i = 0, l = self.length; i < l; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				});
			}
	
			var ret = this.pushStack( "", "find", selector ),
				length, n, r;
	
			for ( i = 0, l = this.length; i < l; i++ ) {
				length = ret.length;
				jQuery.find( selector, this[i], ret );
	
				if ( i > 0 ) {
					// Make sure that the results are unique
					for ( n = length; n < ret.length; n++ ) {
						for ( r = 0; r < length; r++ ) {
							if ( ret[r] === ret[n] ) {
								ret.splice(n--, 1);
								break;
							}
						}
					}
				}
			}
	
			return ret;
		},
	
		has: function( target ) {
			var targets = jQuery( target );
			return this.filter(function() {
				for ( var i = 0, l = targets.length; i < l; i++ ) {
					if ( jQuery.contains( this, targets[i] ) ) {
						return true;
					}
				}
			});
		},
	
		not: function( selector ) {
			return this.pushStack( winnow(this, selector, false), "not", selector);
		},
	
		filter: function( selector ) {
			return this.pushStack( winnow(this, selector, true), "filter", selector );
		},
	
		is: function( selector ) {
			return !!selector && (
				typeof selector === "string" ?
					// If this is a positional selector, check membership in the returned set
					// so $("p:first").is("p:last") won't return true for a doc with two "p".
					POS.test( selector ) ?
						jQuery( selector, this.context ).index( this[0] ) >= 0 :
						jQuery.filter( selector, this ).length > 0 :
					this.filter( selector ).length > 0 );
		},
	
		closest: function( selectors, context ) {
			var ret = [], i, l, cur = this[0];
	
			// Array (deprecated as of jQuery 1.7)
			if ( jQuery.isArray( selectors ) ) {
				var level = 1;
	
				while ( cur && cur.ownerDocument && cur !== context ) {
					for ( i = 0; i < selectors.length; i++ ) {
	
						if ( jQuery( cur ).is( selectors[ i ] ) ) {
							ret.push({ selector: selectors[ i ], elem: cur, level: level });
						}
					}
	
					cur = cur.parentNode;
					level++;
				}
	
				return ret;
			}
	
			// String
			var pos = POS.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;
	
			for ( i = 0, l = this.length; i < l; i++ ) {
				cur = this[i];
	
				while ( cur ) {
					if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
						ret.push( cur );
						break;
	
					} else {
						cur = cur.parentNode;
						if ( !cur || !cur.ownerDocument || cur === context || cur.nodeType === 11 ) {
							break;
						}
					}
				}
			}
	
			ret = ret.length > 1 ? jQuery.unique( ret ) : ret;
	
			return this.pushStack( ret, "closest", selectors );
		},
	
		// Determine the position of an element within
		// the matched set of elements
		index: function( elem ) {
	
			// No argument, return index in parent
			if ( !elem ) {
				return ( this[0] && this[0].parentNode ) ? this.prevAll().length : -1;
			}
	
			// index in selector
			if ( typeof elem === "string" ) {
				return jQuery.inArray( this[0], jQuery( elem ) );
			}
	
			// Locate the position of the desired element
			return jQuery.inArray(
				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[0] : elem, this );
		},
	
		add: function( selector, context ) {
			var set = typeof selector === "string" ?
					jQuery( selector, context ) :
					jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
				all = jQuery.merge( this.get(), set );
	
			return this.pushStack( isDisconnected( set[0] ) || isDisconnected( all[0] ) ?
				all :
				jQuery.unique( all ) );
		},
	
		andSelf: function() {
			return this.add( this.prevObject );
		}
	});
	
	// A painfully simple check to see if an element is disconnected
	// from a document (should be improved, where feasible).
	function isDisconnected( node ) {
		return !node || !node.parentNode || node.parentNode.nodeType === 11;
	}
	
	jQuery.each({
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return jQuery.dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return jQuery.dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return jQuery.nth( elem, 2, "nextSibling" );
		},
		prev: function( elem ) {
			return jQuery.nth( elem, 2, "previousSibling" );
		},
		nextAll: function( elem ) {
			return jQuery.dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return jQuery.dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return jQuery.dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return jQuery.dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return jQuery.sibling( elem.firstChild );
		},
		contents: function( elem ) {
			return jQuery.nodeName( elem, "iframe" ) ?
				elem.contentDocument || elem.contentWindow.document :
				jQuery.makeArray( elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var ret = jQuery.map( this, fn, until );
	
			if ( !runtil.test( name ) ) {
				selector = until;
			}
	
			if ( selector && typeof selector === "string" ) {
				ret = jQuery.filter( selector, ret );
			}
	
			ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;
	
			if ( (this.length > 1 || rmultiselector.test( selector )) && rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
	
			return this.pushStack( ret, name, slice.call( arguments ).join(",") );
		};
	});
	
	jQuery.extend({
		filter: function( expr, elems, not ) {
			if ( not ) {
				expr = ":not(" + expr + ")";
			}
	
			return elems.length === 1 ?
				jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
				jQuery.find.matches(expr, elems);
		},
	
		dir: function( elem, dir, until ) {
			var matched = [],
				cur = elem[ dir ];
	
			while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
				if ( cur.nodeType === 1 ) {
					matched.push( cur );
				}
				cur = cur[dir];
			}
			return matched;
		},
	
		nth: function( cur, result, dir, elem ) {
			result = result || 1;
			var num = 0;
	
			for ( ; cur; cur = cur[dir] ) {
				if ( cur.nodeType === 1 && ++num === result ) {
					break;
				}
			}
	
			return cur;
		},
	
		sibling: function( n, elem ) {
			var r = [];
	
			for ( ; n; n = n.nextSibling ) {
				if ( n.nodeType === 1 && n !== elem ) {
					r.push( n );
				}
			}
	
			return r;
		}
	});
	
	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, keep ) {
	
		// Can't pass null or undefined to indexOf in Firefox 4
		// Set to 0 to skip string check
		qualifier = qualifier || 0;
	
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep(elements, function( elem, i ) {
				var retVal = !!qualifier.call( elem, i, elem );
				return retVal === keep;
			});
	
		} else if ( qualifier.nodeType ) {
			return jQuery.grep(elements, function( elem, i ) {
				return ( elem === qualifier ) === keep;
			});
	
		} else if ( typeof qualifier === "string" ) {
			var filtered = jQuery.grep(elements, function( elem ) {
				return elem.nodeType === 1;
			});
	
			if ( isSimple.test( qualifier ) ) {
				return jQuery.filter(qualifier, filtered, !keep);
			} else {
				qualifier = jQuery.filter( qualifier, filtered );
			}
		}
	
		return jQuery.grep(elements, function( elem, i ) {
			return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
		});
	}
	
	
	
	
	function createSafeFragment( document ) {
		var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();
	
		if ( safeFrag.createElement ) {
			while ( list.length ) {
				safeFrag.createElement(
					list.pop()
				);
			}
		}
		return safeFrag;
	}
	
	var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
			"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
		rinlinejQuery = / jQuery\d+="(?:\d+|null)"/g,
		rleadingWhitespace = /^\s+/,
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,
		rtagName = /<([\w:]+)/,
		rtbody = /<tbody/i,
		rhtml = /<|&#?\w+;/,
		rnoInnerhtml = /<(?:script|style)/i,
		rnocache = /<(?:script|object|embed|option|style)/i,
		rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptType = /\/(java|ecma)script/i,
		rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)/,
		wrapMap = {
			option: [ 1, "<select multiple='multiple'>", "</select>" ],
			legend: [ 1, "<fieldset>", "</fieldset>" ],
			thead: [ 1, "<table>", "</table>" ],
			tr: [ 2, "<table><tbody>", "</tbody></table>" ],
			td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
			col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
			area: [ 1, "<map>", "</map>" ],
			_default: [ 0, "", "" ]
		},
		safeFragment = createSafeFragment( document );
	
	wrapMap.optgroup = wrapMap.option;
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	
	// IE can't serialize <link> and <script> tags normally
	if ( !jQuery.support.htmlSerialize ) {
		wrapMap._default = [ 1, "div<div>", "</div>" ];
	}
	
	jQuery.fn.extend({
		text: function( value ) {
			return jQuery.access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
			}, null, value, arguments.length );
		},
	
		wrapAll: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each(function(i) {
					jQuery(this).wrapAll( html.call(this, i) );
				});
			}
	
			if ( this[0] ) {
				// The elements to wrap the target around
				var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);
	
				if ( this[0].parentNode ) {
					wrap.insertBefore( this[0] );
				}
	
				wrap.map(function() {
					var elem = this;
	
					while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
						elem = elem.firstChild;
					}
	
					return elem;
				}).append( this );
			}
	
			return this;
		},
	
		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each(function(i) {
					jQuery(this).wrapInner( html.call(this, i) );
				});
			}
	
			return this.each(function() {
				var self = jQuery( this ),
					contents = self.contents();
	
				if ( contents.length ) {
					contents.wrapAll( html );
	
				} else {
					self.append( html );
				}
			});
		},
	
		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );
	
			return this.each(function(i) {
				jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
			});
		},
	
		unwrap: function() {
			return this.parent().each(function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			}).end();
		},
	
		append: function() {
			return this.domManip(arguments, true, function( elem ) {
				if ( this.nodeType === 1 ) {
					this.appendChild( elem );
				}
			});
		},
	
		prepend: function() {
			return this.domManip(arguments, true, function( elem ) {
				if ( this.nodeType === 1 ) {
					this.insertBefore( elem, this.firstChild );
				}
			});
		},
	
		before: function() {
			if ( this[0] && this[0].parentNode ) {
				return this.domManip(arguments, false, function( elem ) {
					this.parentNode.insertBefore( elem, this );
				});
			} else if ( arguments.length ) {
				var set = jQuery.clean( arguments );
				set.push.apply( set, this.toArray() );
				return this.pushStack( set, "before", arguments );
			}
		},
	
		after: function() {
			if ( this[0] && this[0].parentNode ) {
				return this.domManip(arguments, false, function( elem ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				});
			} else if ( arguments.length ) {
				var set = this.pushStack( this, "after", arguments );
				set.push.apply( set, jQuery.clean(arguments) );
				return set;
			}
		},
	
		// keepData is for internal use only--do not document
		remove: function( selector, keepData ) {
			for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
				if ( !selector || jQuery.filter( selector, [ elem ] ).length ) {
					if ( !keepData && elem.nodeType === 1 ) {
						jQuery.cleanData( elem.getElementsByTagName("*") );
						jQuery.cleanData( [ elem ] );
					}
	
					if ( elem.parentNode ) {
						elem.parentNode.removeChild( elem );
					}
				}
			}
	
			return this;
		},
	
		empty: function() {
			for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
				// Remove element nodes and prevent memory leaks
				if ( elem.nodeType === 1 ) {
					jQuery.cleanData( elem.getElementsByTagName("*") );
				}
	
				// Remove any remaining nodes
				while ( elem.firstChild ) {
					elem.removeChild( elem.firstChild );
				}
			}
	
			return this;
		},
	
		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
	
			return this.map( function () {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			});
		},
	
		html: function( value ) {
			return jQuery.access( this, function( value ) {
				var elem = this[0] || {},
					i = 0,
					l = this.length;
	
				if ( value === undefined ) {
					return elem.nodeType === 1 ?
						elem.innerHTML.replace( rinlinejQuery, "" ) :
						null;
				}
	
	
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
					!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {
	
					value = value.replace( rxhtmlTag, "<$1></$2>" );
	
					try {
						for (; i < l; i++ ) {
							// Remove element nodes and prevent memory leaks
							elem = this[i] || {};
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( elem.getElementsByTagName( "*" ) );
								elem.innerHTML = value;
							}
						}
	
						elem = 0;
	
					// If using innerHTML throws an exception, use the fallback method
					} catch(e) {}
				}
	
				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},
	
		replaceWith: function( value ) {
			if ( this[0] && this[0].parentNode ) {
				// Make sure that the elements are removed from the DOM before they are inserted
				// this can help fix replacing a parent with child elements
				if ( jQuery.isFunction( value ) ) {
					return this.each(function(i) {
						var self = jQuery(this), old = self.html();
						self.replaceWith( value.call( this, i, old ) );
					});
				}
	
				if ( typeof value !== "string" ) {
					value = jQuery( value ).detach();
				}
	
				return this.each(function() {
					var next = this.nextSibling,
						parent = this.parentNode;
	
					jQuery( this ).remove();
	
					if ( next ) {
						jQuery(next).before( value );
					} else {
						jQuery(parent).append( value );
					}
				});
			} else {
				return this.length ?
					this.pushStack( jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value ) :
					this;
			}
		},
	
		detach: function( selector ) {
			return this.remove( selector, true );
		},
	
		domManip: function( args, table, callback ) {
			var results, first, fragment, parent,
				value = args[0],
				scripts = [];
	
			// We can't cloneNode fragments that contain checked, in WebKit
			if ( !jQuery.support.checkClone && arguments.length === 3 && typeof value === "string" && rchecked.test( value ) ) {
				return this.each(function() {
					jQuery(this).domManip( args, table, callback, true );
				});
			}
	
			if ( jQuery.isFunction(value) ) {
				return this.each(function(i) {
					var self = jQuery(this);
					args[0] = value.call(this, i, table ? self.html() : undefined);
					self.domManip( args, table, callback );
				});
			}
	
			if ( this[0] ) {
				parent = value && value.parentNode;
	
				// If we're in a fragment, just use that instead of building a new one
				if ( jQuery.support.parentNode && parent && parent.nodeType === 11 && parent.childNodes.length === this.length ) {
					results = { fragment: parent };
	
				} else {
					results = jQuery.buildFragment( args, this, scripts );
				}
	
				fragment = results.fragment;
	
				if ( fragment.childNodes.length === 1 ) {
					first = fragment = fragment.firstChild;
				} else {
					first = fragment.firstChild;
				}
	
				if ( first ) {
					table = table && jQuery.nodeName( first, "tr" );
	
					for ( var i = 0, l = this.length, lastIndex = l - 1; i < l; i++ ) {
						callback.call(
							table ?
								root(this[i], first) :
								this[i],
							// Make sure that we do not leak memory by inadvertently discarding
							// the original fragment (which might have attached data) instead of
							// using it; in addition, use the original fragment object for the last
							// item instead of first because it can end up being emptied incorrectly
							// in certain situations (Bug #8070).
							// Fragments from the fragment cache must always be cloned and never used
							// in place.
							results.cacheable || ( l > 1 && i < lastIndex ) ?
								jQuery.clone( fragment, true, true ) :
								fragment
						);
					}
				}
	
				if ( scripts.length ) {
					jQuery.each( scripts, function( i, elem ) {
						if ( elem.src ) {
							jQuery.ajax({
								type: "GET",
								global: false,
								url: elem.src,
								async: false,
								dataType: "script"
							});
						} else {
							jQuery.globalEval( ( elem.text || elem.textContent || elem.innerHTML || "" ).replace( rcleanScript, "/*$0*/" ) );
						}
	
						if ( elem.parentNode ) {
							elem.parentNode.removeChild( elem );
						}
					});
				}
			}
	
			return this;
		}
	});
	
	function root( elem, cur ) {
		return jQuery.nodeName(elem, "table") ?
			(elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild(elem.ownerDocument.createElement("tbody"))) :
			elem;
	}
	
	function cloneCopyEvent( src, dest ) {
	
		if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
			return;
		}
	
		var type, i, l,
			oldData = jQuery._data( src ),
			curData = jQuery._data( dest, oldData ),
			events = oldData.events;
	
		if ( events ) {
			delete curData.handle;
			curData.events = {};
	
			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	
		// make the cloned public data object a copy from the original
		if ( curData.data ) {
			curData.data = jQuery.extend( {}, curData.data );
		}
	}
	
	function cloneFixAttributes( src, dest ) {
		var nodeName;
	
		// We do not need to do anything for non-Elements
		if ( dest.nodeType !== 1 ) {
			return;
		}
	
		// clearAttributes removes the attributes, which we don't want,
		// but also removes the attachEvent events, which we *do* want
		if ( dest.clearAttributes ) {
			dest.clearAttributes();
		}
	
		// mergeAttributes, in contrast, only merges back on the
		// original attributes, not the events
		if ( dest.mergeAttributes ) {
			dest.mergeAttributes( src );
		}
	
		nodeName = dest.nodeName.toLowerCase();
	
		// IE6-8 fail to clone children inside object elements that use
		// the proprietary classid attribute value (rather than the type
		// attribute) to identify the type of content to display
		if ( nodeName === "object" ) {
			dest.outerHTML = src.outerHTML;
	
		} else if ( nodeName === "input" && (src.type === "checkbox" || src.type === "radio") ) {
			// IE6-8 fails to persist the checked state of a cloned checkbox
			// or radio button. Worse, IE6-7 fail to give the cloned element
			// a checked appearance if the defaultChecked value isn't also set
			if ( src.checked ) {
				dest.defaultChecked = dest.checked = src.checked;
			}
	
			// IE6-7 get confused and end up setting the value of a cloned
			// checkbox/radio button to an empty string instead of "on"
			if ( dest.value !== src.value ) {
				dest.value = src.value;
			}
	
		// IE6-8 fails to return the selected option to the default selected
		// state when cloning options
		} else if ( nodeName === "option" ) {
			dest.selected = src.defaultSelected;
	
		// IE6-8 fails to set the defaultValue to the correct value when
		// cloning other types of input fields
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
	
		// IE blanks contents when cloning scripts
		} else if ( nodeName === "script" && dest.text !== src.text ) {
			dest.text = src.text;
		}
	
		// Event data gets referenced instead of copied if the expando
		// gets copied too
		dest.removeAttribute( jQuery.expando );
	
		// Clear flags for bubbling special change/submit events, they must
		// be reattached when the newly cloned events are first activated
		dest.removeAttribute( "_submit_attached" );
		dest.removeAttribute( "_change_attached" );
	}
	
	jQuery.buildFragment = function( args, nodes, scripts ) {
		var fragment, cacheable, cacheresults, doc,
		first = args[ 0 ];
	
		// nodes may contain either an explicit document object,
		// a jQuery collection or context object.
		// If nodes[0] contains a valid object to assign to doc
		if ( nodes && nodes[0] ) {
			doc = nodes[0].ownerDocument || nodes[0];
		}
	
		// Ensure that an attr object doesn't incorrectly stand in as a document object
		// Chrome and Firefox seem to allow this to occur and will throw exception
		// Fixes #8950
		if ( !doc.createDocumentFragment ) {
			doc = document;
		}
	
		// Only cache "small" (1/2 KB) HTML strings that are associated with the main document
		// Cloning options loses the selected state, so don't cache them
		// IE 6 doesn't like it when you put <object> or <embed> elements in a fragment
		// Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
		// Lastly, IE6,7,8 will not correctly reuse cached fragments that were created from unknown elems #10501
		if ( args.length === 1 && typeof first === "string" && first.length < 512 && doc === document &&
			first.charAt(0) === "<" && !rnocache.test( first ) &&
			(jQuery.support.checkClone || !rchecked.test( first )) &&
			(jQuery.support.html5Clone || !rnoshimcache.test( first )) ) {
	
			cacheable = true;
	
			cacheresults = jQuery.fragments[ first ];
			if ( cacheresults && cacheresults !== 1 ) {
				fragment = cacheresults;
			}
		}
	
		if ( !fragment ) {
			fragment = doc.createDocumentFragment();
			jQuery.clean( args, doc, fragment, scripts );
		}
	
		if ( cacheable ) {
			jQuery.fragments[ first ] = cacheresults ? fragment : 1;
		}
	
		return { fragment: fragment, cacheable: cacheable };
	};
	
	jQuery.fragments = {};
	
	jQuery.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var ret = [],
				insert = jQuery( selector ),
				parent = this.length === 1 && this[0].parentNode;
	
			if ( parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1 ) {
				insert[ original ]( this[0] );
				return this;
	
			} else {
				for ( var i = 0, l = insert.length; i < l; i++ ) {
					var elems = ( i > 0 ? this.clone(true) : this ).get();
					jQuery( insert[i] )[ original ]( elems );
					ret = ret.concat( elems );
				}
	
				return this.pushStack( ret, name, insert.selector );
			}
		};
	});
	
	function getAll( elem ) {
		if ( typeof elem.getElementsByTagName !== "undefined" ) {
			return elem.getElementsByTagName( "*" );
	
		} else if ( typeof elem.querySelectorAll !== "undefined" ) {
			return elem.querySelectorAll( "*" );
	
		} else {
			return [];
		}
	}
	
	// Used in clean, fixes the defaultChecked property
	function fixDefaultChecked( elem ) {
		if ( elem.type === "checkbox" || elem.type === "radio" ) {
			elem.defaultChecked = elem.checked;
		}
	}
	// Finds all inputs and passes them to fixDefaultChecked
	function findInputs( elem ) {
		var nodeName = ( elem.nodeName || "" ).toLowerCase();
		if ( nodeName === "input" ) {
			fixDefaultChecked( elem );
		// Skip scripts, get other children
		} else if ( nodeName !== "script" && typeof elem.getElementsByTagName !== "undefined" ) {
			jQuery.grep( elem.getElementsByTagName("input"), fixDefaultChecked );
		}
	}
	
	// Derived From: http://www.iecss.com/shimprove/javascript/shimprove.1-0-1.js
	function shimCloneNode( elem ) {
		var div = document.createElement( "div" );
		safeFragment.appendChild( div );
	
		div.innerHTML = elem.outerHTML;
		return div.firstChild;
	}
	
	jQuery.extend({
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var srcElements,
				destElements,
				i,
				// IE<=8 does not properly clone detached, unknown element nodes
				clone = jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ?
					elem.cloneNode( true ) :
					shimCloneNode( elem );
	
			if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
					(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {
				// IE copies events bound via attachEvent when using cloneNode.
				// Calling detachEvent on the clone will also remove the events
				// from the original. In order to get around this, we use some
				// proprietary methods to clear the events. Thanks to MooTools
				// guys for this hotness.
	
				cloneFixAttributes( elem, clone );
	
				// Using Sizzle here is crazy slow, so we use getElementsByTagName instead
				srcElements = getAll( elem );
				destElements = getAll( clone );
	
				// Weird iteration because IE will replace the length property
				// with an element if you are cloning the body and one of the
				// elements on the page has a name or id of "length"
				for ( i = 0; srcElements[i]; ++i ) {
					// Ensure that the destination node is not null; Fixes #9587
					if ( destElements[i] ) {
						cloneFixAttributes( srcElements[i], destElements[i] );
					}
				}
			}
	
			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				cloneCopyEvent( elem, clone );
	
				if ( deepDataAndEvents ) {
					srcElements = getAll( elem );
					destElements = getAll( clone );
	
					for ( i = 0; srcElements[i]; ++i ) {
						cloneCopyEvent( srcElements[i], destElements[i] );
					}
				}
			}
	
			srcElements = destElements = null;
	
			// Return the cloned set
			return clone;
		},
	
		clean: function( elems, context, fragment, scripts ) {
			var checkScriptType, script, j,
					ret = [];
	
			context = context || document;
	
			// !context.createElement fails in IE with an error but returns typeof 'object'
			if ( typeof context.createElement === "undefined" ) {
				context = context.ownerDocument || context[0] && context[0].ownerDocument || document;
			}
	
			for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
				if ( typeof elem === "number" ) {
					elem += "";
				}
	
				if ( !elem ) {
					continue;
				}
	
				// Convert html string into DOM nodes
				if ( typeof elem === "string" ) {
					if ( !rhtml.test( elem ) ) {
						elem = context.createTextNode( elem );
					} else {
						// Fix "XHTML"-style tags in all browsers
						elem = elem.replace(rxhtmlTag, "<$1></$2>");
	
						// Trim whitespace, otherwise indexOf won't work as expected
						var tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase(),
							wrap = wrapMap[ tag ] || wrapMap._default,
							depth = wrap[0],
							div = context.createElement("div"),
							safeChildNodes = safeFragment.childNodes,
							remove;
	
						// Append wrapper element to unknown element safe doc fragment
						if ( context === document ) {
							// Use the fragment we've already created for this document
							safeFragment.appendChild( div );
						} else {
							// Use a fragment created with the owner document
							createSafeFragment( context ).appendChild( div );
						}
	
						// Go to html and back, then peel off extra wrappers
						div.innerHTML = wrap[1] + elem + wrap[2];
	
						// Move to the right depth
						while ( depth-- ) {
							div = div.lastChild;
						}
	
						// Remove IE's autoinserted <tbody> from table fragments
						if ( !jQuery.support.tbody ) {
	
							// String was a <table>, *may* have spurious <tbody>
							var hasBody = rtbody.test(elem),
								tbody = tag === "table" && !hasBody ?
									div.firstChild && div.firstChild.childNodes :
	
									// String was a bare <thead> or <tfoot>
									wrap[1] === "<table>" && !hasBody ?
										div.childNodes :
										[];
	
							for ( j = tbody.length - 1; j >= 0 ; --j ) {
								if ( jQuery.nodeName( tbody[ j ], "tbody" ) && !tbody[ j ].childNodes.length ) {
									tbody[ j ].parentNode.removeChild( tbody[ j ] );
								}
							}
						}
	
						// IE completely kills leading whitespace when innerHTML is used
						if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
							div.insertBefore( context.createTextNode( rleadingWhitespace.exec(elem)[0] ), div.firstChild );
						}
	
						elem = div.childNodes;
	
						// Clear elements from DocumentFragment (safeFragment or otherwise)
						// to avoid hoarding elements. Fixes #11356
						if ( div ) {
							div.parentNode.removeChild( div );
	
							// Guard against -1 index exceptions in FF3.6
							if ( safeChildNodes.length > 0 ) {
								remove = safeChildNodes[ safeChildNodes.length - 1 ];
	
								if ( remove && remove.parentNode ) {
									remove.parentNode.removeChild( remove );
								}
							}
						}
					}
				}
	
				// Resets defaultChecked for any radios and checkboxes
				// about to be appended to the DOM in IE 6/7 (#8060)
				var len;
				if ( !jQuery.support.appendChecked ) {
					if ( elem[0] && typeof (len = elem.length) === "number" ) {
						for ( j = 0; j < len; j++ ) {
							findInputs( elem[j] );
						}
					} else {
						findInputs( elem );
					}
				}
	
				if ( elem.nodeType ) {
					ret.push( elem );
				} else {
					ret = jQuery.merge( ret, elem );
				}
			}
	
			if ( fragment ) {
				checkScriptType = function( elem ) {
					return !elem.type || rscriptType.test( elem.type );
				};
				for ( i = 0; ret[i]; i++ ) {
					script = ret[i];
					if ( scripts && jQuery.nodeName( script, "script" ) && (!script.type || rscriptType.test( script.type )) ) {
						scripts.push( script.parentNode ? script.parentNode.removeChild( script ) : script );
	
					} else {
						if ( script.nodeType === 1 ) {
							var jsTags = jQuery.grep( script.getElementsByTagName( "script" ), checkScriptType );
	
							ret.splice.apply( ret, [i + 1, 0].concat( jsTags ) );
						}
						fragment.appendChild( script );
					}
				}
			}
	
			return ret;
		},
	
		cleanData: function( elems ) {
			var data, id,
				cache = jQuery.cache,
				special = jQuery.event.special,
				deleteExpando = jQuery.support.deleteExpando;
	
			for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
				if ( elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()] ) {
					continue;
				}
	
				id = elem[ jQuery.expando ];
	
				if ( id ) {
					data = cache[ id ];
	
					if ( data && data.events ) {
						for ( var type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );
	
							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
	
						// Null the DOM reference to avoid IE6/7/8 leak (#7054)
						if ( data.handle ) {
							data.handle.elem = null;
						}
					}
	
					if ( deleteExpando ) {
						delete elem[ jQuery.expando ];
	
					} else if ( elem.removeAttribute ) {
						elem.removeAttribute( jQuery.expando );
					}
	
					delete cache[ id ];
				}
			}
		}
	});
	
	
	
	
	var ralpha = /alpha\([^)]*\)/i,
		ropacity = /opacity=([^)]*)/,
		// fixed for IE9, see #8346
		rupper = /([A-Z]|^ms)/g,
		rnum = /^[\-+]?(?:\d*\.)?\d+$/i,
		rnumnonpx = /^-?(?:\d*\.)?\d+(?!px)[^\d\s]+$/i,
		rrelNum = /^([\-+])=([\-+.\de]+)/,
		rmargin = /^margin/,
	
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	
		// order is important!
		cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	
		curCSS,
	
		getComputedStyle,
		currentStyle;
	
	jQuery.fn.css = function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	};
	
	jQuery.extend({
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {
						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
	
					} else {
						return elem.style.opacity;
					}
				}
			}
		},
	
		// Exclude the following css properties to add px
		cssNumber: {
			"fillOpacity": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},
	
		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			// normalize float css property
			"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
		},
	
		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {
			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}
	
			// Make sure that we're working with the right name
			var ret, type, origName = jQuery.camelCase( name ),
				style = elem.style, hooks = jQuery.cssHooks[ origName ];
	
			name = jQuery.cssProps[ origName ] || origName;
	
			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;
	
				// convert relative number strings (+= or -=) to relative numbers. #7345
				if ( type === "string" && (ret = rrelNum.exec( value )) ) {
					value = ( +( ret[1] + 1) * +ret[2] ) + parseFloat( jQuery.css( elem, name ) );
					// Fixes bug #9237
					type = "number";
				}
	
				// Make sure that NaN and null values aren't set. See: #7116
				if ( value == null || type === "number" && isNaN( value ) ) {
					return;
				}
	
				// If a number was passed in, add 'px' to the (except for certain CSS properties)
				if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
					value += "px";
				}
	
				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value )) !== undefined ) {
					// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
					// Fixes bug #5509
					try {
						style[ name ] = value;
					} catch(e) {}
				}
	
			} else {
				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
					return ret;
				}
	
				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},
	
		css: function( elem, name, extra ) {
			var ret, hooks;
	
			// Make sure that we're working with the right name
			name = jQuery.camelCase( name );
			hooks = jQuery.cssHooks[ name ];
			name = jQuery.cssProps[ name ] || name;
	
			// cssFloat needs a special treatment
			if ( name === "cssFloat" ) {
				name = "float";
			}
	
			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, true, extra )) !== undefined ) {
				return ret;
	
			// Otherwise, if a way to get the computed value exists, use that
			} else if ( curCSS ) {
				return curCSS( elem, name );
			}
		},
	
		// A method for quickly swapping in/out CSS properties to get correct calculations
		swap: function( elem, options, callback ) {
			var old = {},
				ret, name;
	
			// Remember the old values, and insert the new ones
			for ( name in options ) {
				old[ name ] = elem.style[ name ];
				elem.style[ name ] = options[ name ];
			}
	
			ret = callback.call( elem );
	
			// Revert the old values
			for ( name in options ) {
				elem.style[ name ] = old[ name ];
			}
	
			return ret;
		}
	});
	
	// DEPRECATED in 1.3, Use jQuery.css() instead
	jQuery.curCSS = jQuery.css;
	
	if ( document.defaultView && document.defaultView.getComputedStyle ) {
		getComputedStyle = function( elem, name ) {
			var ret, defaultView, computedStyle, width,
				style = elem.style;
	
			name = name.replace( rupper, "-$1" ).toLowerCase();
	
			if ( (defaultView = elem.ownerDocument.defaultView) &&
					(computedStyle = defaultView.getComputedStyle( elem, null )) ) {
	
				ret = computedStyle.getPropertyValue( name );
				if ( ret === "" && !jQuery.contains( elem.ownerDocument.documentElement, elem ) ) {
					ret = jQuery.style( elem, name );
				}
			}
	
			// A tribute to the "awesome hack by Dean Edwards"
			// WebKit uses "computed value (percentage if specified)" instead of "used value" for margins
			// which is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !jQuery.support.pixelMargin && computedStyle && rmargin.test( name ) && rnumnonpx.test( ret ) ) {
				width = style.width;
				style.width = ret;
				ret = computedStyle.width;
				style.width = width;
			}
	
			return ret;
		};
	}
	
	if ( document.documentElement.currentStyle ) {
		currentStyle = function( elem, name ) {
			var left, rsLeft, uncomputed,
				ret = elem.currentStyle && elem.currentStyle[ name ],
				style = elem.style;
	
			// Avoid setting ret to empty string here
			// so we don't default to auto
			if ( ret == null && style && (uncomputed = style[ name ]) ) {
				ret = uncomputed;
			}
	
			// From the awesome hack by Dean Edwards
			// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
	
			// If we're not dealing with a regular pixel number
			// but a number that has a weird ending, we need to convert it to pixels
			if ( rnumnonpx.test( ret ) ) {
	
				// Remember the original values
				left = style.left;
				rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;
	
				// Put in the new values to get a computed value out
				if ( rsLeft ) {
					elem.runtimeStyle.left = elem.currentStyle.left;
				}
				style.left = name === "fontSize" ? "1em" : ret;
				ret = style.pixelLeft + "px";
	
				// Revert the changed values
				style.left = left;
				if ( rsLeft ) {
					elem.runtimeStyle.left = rsLeft;
				}
			}
	
			return ret === "" ? "auto" : ret;
		};
	}
	
	curCSS = getComputedStyle || currentStyle;
	
	function getWidthOrHeight( elem, name, extra ) {
	
		// Start with offset property
		var val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			i = name === "width" ? 1 : 0,
			len = 4;
	
		if ( val > 0 ) {
			if ( extra !== "border" ) {
				for ( ; i < len; i += 2 ) {
					if ( !extra ) {
						val -= parseFloat( jQuery.css( elem, "padding" + cssExpand[ i ] ) ) || 0;
					}
					if ( extra === "margin" ) {
						val += parseFloat( jQuery.css( elem, extra + cssExpand[ i ] ) ) || 0;
					} else {
						val -= parseFloat( jQuery.css( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
					}
				}
			}
	
			return val + "px";
		}
	
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}
	
		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}
	
		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	
		// Add padding, border, margin
		if ( extra ) {
			for ( ; i < len; i += 2 ) {
				val += parseFloat( jQuery.css( elem, "padding" + cssExpand[ i ] ) ) || 0;
				if ( extra !== "padding" ) {
					val += parseFloat( jQuery.css( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
				}
				if ( extra === "margin" ) {
					val += parseFloat( jQuery.css( elem, extra + cssExpand[ i ]) ) || 0;
				}
			}
		}
	
		return val + "px";
	}
	
	jQuery.each([ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {
					if ( elem.offsetWidth !== 0 ) {
						return getWidthOrHeight( elem, name, extra );
					} else {
						return jQuery.swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						});
					}
				}
			},
	
			set: function( elem, value ) {
				return rnum.test( value ) ?
					value + "px" :
					value;
			}
		};
	});
	
	if ( !jQuery.support.opacity ) {
		jQuery.cssHooks.opacity = {
			get: function( elem, computed ) {
				// IE uses filters for opacity
				return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
					( parseFloat( RegExp.$1 ) / 100 ) + "" :
					computed ? "1" : "";
			},
	
			set: function( elem, value ) {
				var style = elem.style,
					currentStyle = elem.currentStyle,
					opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
					filter = currentStyle && currentStyle.filter || style.filter || "";
	
				// IE has trouble with opacity if it does not have layout
				// Force it by setting the zoom level
				style.zoom = 1;
	
				// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
				if ( value >= 1 && jQuery.trim( filter.replace( ralpha, "" ) ) === "" ) {
	
					// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
					// if "filter:" is present at all, clearType is disabled, we want to avoid this
					// style.removeAttribute is IE Only, but so apparently is this code path...
					style.removeAttribute( "filter" );
	
					// if there there is no filter style applied in a css rule, we are done
					if ( currentStyle && !currentStyle.filter ) {
						return;
					}
				}
	
				// otherwise, set new filter values
				style.filter = ralpha.test( filter ) ?
					filter.replace( ralpha, opacity ) :
					filter + " " + opacity;
			}
		};
	}
	
	jQuery(function() {
		// This hook cannot be added until DOM ready because the support test
		// for it is not run until after DOM ready
		if ( !jQuery.support.reliableMarginRight ) {
			jQuery.cssHooks.marginRight = {
				get: function( elem, computed ) {
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// Work around by temporarily setting element display to inline-block
					return jQuery.swap( elem, { "display": "inline-block" }, function() {
						if ( computed ) {
							return curCSS( elem, "margin-right" );
						} else {
							return elem.style.marginRight;
						}
					});
				}
			};
		}
	});
	
	if ( jQuery.expr && jQuery.expr.filters ) {
		jQuery.expr.filters.hidden = function( elem ) {
			var width = elem.offsetWidth,
				height = elem.offsetHeight;
	
			return ( width === 0 && height === 0 ) || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
		};
	
		jQuery.expr.filters.visible = function( elem ) {
			return !jQuery.expr.filters.hidden( elem );
		};
	}
	
	// These hooks are used by animate to expand properties
	jQuery.each({
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
	
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i,
	
					// assumes a single number if not a string
					parts = typeof value === "string" ? value.split(" ") : [ value ],
					expanded = {};
	
				for ( i = 0; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}
	
				return expanded;
			}
		};
	});
	
	
	
	
	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rhash = /#.*$/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
		rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
		rquery = /\?/,
		rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
		rselectTextarea = /^(?:select|textarea)/i,
		rspacesAjax = /\s+/,
		rts = /([?&])_=[^&]*/,
		rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,
	
		// Keep a copy of the old load method
		_load = jQuery.fn.load,
	
		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},
	
		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},
	
		// Document location
		ajaxLocation,
	
		// Document location segments
		ajaxLocParts,
	
		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = ["*/"] + ["*"];
	
	// #8138, IE may throw an exception when accessing
	// a field from window.location if document.domain has been set
	try {
		ajaxLocation = location.href;
	} catch( e ) {
		// Use the href attribute of an A element
		// since IE will modify it given document.location
		ajaxLocation = document.createElement( "a" );
		ajaxLocation.href = "";
		ajaxLocation = ajaxLocation.href;
	}
	
	// Segment location into parts
	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];
	
	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {
	
		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {
	
			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}
	
			if ( jQuery.isFunction( func ) ) {
				var dataTypes = dataTypeExpression.toLowerCase().split( rspacesAjax ),
					i = 0,
					length = dataTypes.length,
					dataType,
					list,
					placeBefore;
	
				// For each dataType in the dataTypeExpression
				for ( ; i < length; i++ ) {
					dataType = dataTypes[ i ];
					// We control if we're asked to add before
					// any existing element
					placeBefore = /^\+/.test( dataType );
					if ( placeBefore ) {
						dataType = dataType.substr( 1 ) || "*";
					}
					list = structure[ dataType ] = structure[ dataType ] || [];
					// then we add to the structure accordingly
					list[ placeBefore ? "unshift" : "push" ]( func );
				}
			}
		};
	}
	
	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR,
			dataType /* internal */, inspected /* internal */ ) {
	
		dataType = dataType || options.dataTypes[ 0 ];
		inspected = inspected || {};
	
		inspected[ dataType ] = true;
	
		var list = structure[ dataType ],
			i = 0,
			length = list ? list.length : 0,
			executeOnly = ( structure === prefilters ),
			selection;
	
		for ( ; i < length && ( executeOnly || !selection ); i++ ) {
			selection = list[ i ]( options, originalOptions, jqXHR );
			// If we got redirected to another dataType
			// we try there if executing only and not done already
			if ( typeof selection === "string" ) {
				if ( !executeOnly || inspected[ selection ] ) {
					selection = undefined;
				} else {
					options.dataTypes.unshift( selection );
					selection = inspectPrefiltersOrTransports(
							structure, options, originalOptions, jqXHR, selection, inspected );
				}
			}
		}
		// If we're only executing or nothing was selected
		// we try the catchall dataType if not done already
		if ( ( executeOnly || !selection ) && !inspected[ "*" ] ) {
			selection = inspectPrefiltersOrTransports(
					structure, options, originalOptions, jqXHR, "*", inspected );
		}
		// unnecessary when only executing (prefilters)
		// but it'll be ignored by the caller in that case
		return selection;
	}
	
	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};
		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}
	}
	
	jQuery.fn.extend({
		load: function( url, params, callback ) {
			if ( typeof url !== "string" && _load ) {
				return _load.apply( this, arguments );
	
			// Don't do a request if no elements are being requested
			} else if ( !this.length ) {
				return this;
			}
	
			var off = url.indexOf( " " );
			if ( off >= 0 ) {
				var selector = url.slice( off, url.length );
				url = url.slice( 0, off );
			}
	
			// Default to a GET request
			var type = "GET";
	
			// If the second parameter was provided
			if ( params ) {
				// If it's a function
				if ( jQuery.isFunction( params ) ) {
					// We assume that it's the callback
					callback = params;
					params = undefined;
	
				// Otherwise, build a param string
				} else if ( typeof params === "object" ) {
					params = jQuery.param( params, jQuery.ajaxSettings.traditional );
					type = "POST";
				}
			}
	
			var self = this;
	
			// Request the remote document
			jQuery.ajax({
				url: url,
				type: type,
				dataType: "html",
				data: params,
				// Complete callback (responseText is used internally)
				complete: function( jqXHR, status, responseText ) {
					// Store the response as specified by the jqXHR object
					responseText = jqXHR.responseText;
					// If successful, inject the HTML into all the matched elements
					if ( jqXHR.isResolved() ) {
						// #4825: Get the actual response in case
						// a dataFilter is present in ajaxSettings
						jqXHR.done(function( r ) {
							responseText = r;
						});
						// See if a selector was specified
						self.html( selector ?
							// Create a dummy div to hold the results
							jQuery("<div>")
								// inject the contents of the document in, removing the scripts
								// to avoid any 'Permission Denied' errors in IE
								.append(responseText.replace(rscript, ""))
	
								// Locate the specified elements
								.find(selector) :
	
							// If not, just inject the full result
							responseText );
					}
	
					if ( callback ) {
						self.each( callback, [ responseText, status, jqXHR ] );
					}
				}
			});
	
			return this;
		},
	
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
	
		serializeArray: function() {
			return this.map(function(){
				return this.elements ? jQuery.makeArray( this.elements ) : this;
			})
			.filter(function(){
				return this.name && !this.disabled &&
					( this.checked || rselectTextarea.test( this.nodeName ) ||
						rinput.test( this.type ) );
			})
			.map(function( i, elem ){
				var val = jQuery( this ).val();
	
				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val, i ){
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						}) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			}).get();
		}
	});
	
	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( "ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split( " " ), function( i, o ){
		jQuery.fn[ o ] = function( f ){
			return this.on( o, f );
		};
	});
	
	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {
			// shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}
	
			return jQuery.ajax({
				type: method,
				url: url,
				data: data,
				success: callback,
				dataType: type
			});
		};
	});
	
	jQuery.extend({
	
		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		},
	
		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},
	
		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			if ( settings ) {
				// Building a settings object
				ajaxExtend( target, jQuery.ajaxSettings );
			} else {
				// Extending ajaxSettings
				settings = target;
				target = jQuery.ajaxSettings;
			}
			ajaxExtend( target, settings );
			return target;
		},
	
		ajaxSettings: {
			url: ajaxLocation,
			isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
			global: true,
			type: "GET",
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			processData: true,
			async: true,
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			traditional: false,
			headers: {},
			*/
	
			accepts: {
				xml: "application/xml, text/xml",
				html: "text/html",
				text: "text/plain",
				json: "application/json, text/javascript",
				"*": allTypes
			},
	
			contents: {
				xml: /xml/,
				html: /html/,
				json: /json/
			},
	
			responseFields: {
				xml: "responseXML",
				text: "responseText"
			},
	
			// List of data converters
			// 1) key format is "source_type destination_type" (a single space in-between)
			// 2) the catchall symbol "*" can be used for source_type
			converters: {
	
				// Convert anything to text
				"* text": window.String,
	
				// Text to html (true = no transformation)
				"text html": true,
	
				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,
	
				// Parse text as xml
				"text xml": jQuery.parseXML
			},
	
			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				context: true,
				url: true
			}
		},
	
		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),
	
		// Main method
		ajax: function( url, options ) {
	
			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}
	
			// Force options to be an object
			options = options || {};
	
			var // Create the final options object
				s = jQuery.ajaxSetup( {}, options ),
				// Callbacks context
				callbackContext = s.context || s,
				// Context for global events
				// It's the callbackContext if one was provided in the options
				// and if it's a DOM node or a jQuery collection
				globalEventContext = callbackContext !== s &&
					( callbackContext.nodeType || callbackContext instanceof jQuery ) ?
							jQuery( callbackContext ) : jQuery.event,
				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),
				// Status-dependent callbacks
				statusCode = s.statusCode || {},
				// ifModified key
				ifModifiedKey,
				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},
				// Response headers
				responseHeadersString,
				responseHeaders,
				// transport
				transport,
				// timeout handle
				timeoutTimer,
				// Cross-domain detection vars
				parts,
				// The jqXHR state
				state = 0,
				// To know if global events are to be dispatched
				fireGlobals,
				// Loop variable
				i,
				// Fake xhr
				jqXHR = {
	
					readyState: 0,
	
					// Caches the header
					setRequestHeader: function( name, value ) {
						if ( !state ) {
							var lname = name.toLowerCase();
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},
	
					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},
	
					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match === undefined ? null : match;
					},
	
					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},
	
					// Cancel the request
					abort: function( statusText ) {
						statusText = statusText || "abort";
						if ( transport ) {
							transport.abort( statusText );
						}
						done( 0, statusText );
						return this;
					}
				};
	
			// Callback for when everything is done
			// It is defined here because jslint complains if it is declared
			// at the end of the function (which would be more logical and readable)
			function done( status, nativeStatusText, responses, headers ) {
	
				// Called once
				if ( state === 2 ) {
					return;
				}
	
				// State is "done" now
				state = 2;
	
				// Clear timeout if it exists
				if ( timeoutTimer ) {
					clearTimeout( timeoutTimer );
				}
	
				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;
	
				// Cache response headers
				responseHeadersString = headers || "";
	
				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;
	
				var isSuccess,
					success,
					error,
					statusText = nativeStatusText,
					response = responses ? ajaxHandleResponses( s, jqXHR, responses ) : undefined,
					lastModified,
					etag;
	
				// If successful, handle type chaining
				if ( status >= 200 && status < 300 || status === 304 ) {
	
					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
	
						if ( ( lastModified = jqXHR.getResponseHeader( "Last-Modified" ) ) ) {
							jQuery.lastModified[ ifModifiedKey ] = lastModified;
						}
						if ( ( etag = jqXHR.getResponseHeader( "Etag" ) ) ) {
							jQuery.etag[ ifModifiedKey ] = etag;
						}
					}
	
					// If not modified
					if ( status === 304 ) {
	
						statusText = "notmodified";
						isSuccess = true;
	
					// If we have data
					} else {
	
						try {
							success = ajaxConvert( s, response );
							statusText = "success";
							isSuccess = true;
						} catch(e) {
							// We have a parsererror
							statusText = "parsererror";
							error = e;
						}
					}
				} else {
					// We extract error from statusText
					// then normalize statusText and status for non-aborts
					error = statusText;
					if ( !statusText || status ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}
	
				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = "" + ( nativeStatusText || statusText );
	
				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}
	
				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;
	
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajax" + ( isSuccess ? "Success" : "Error" ),
							[ jqXHR, s, isSuccess ? success : error ] );
				}
	
				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
	
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}
	
			// Attach deferreds
			deferred.promise( jqXHR );
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;
			jqXHR.complete = completeDeferred.add;
	
			// Status-dependent callbacks
			jqXHR.statusCode = function( map ) {
				if ( map ) {
					var tmp;
					if ( state < 2 ) {
						for ( tmp in map ) {
							statusCode[ tmp ] = [ statusCode[tmp], map[tmp] ];
						}
					} else {
						tmp = map[ jqXHR.status ];
						jqXHR.then( tmp, tmp );
					}
				}
				return this;
			};
	
			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
			// We also use the url parameter if available
			s.url = ( ( url || s.url ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );
	
			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().split( rspacesAjax );
	
			// Determine if a cross-domain request is in order
			if ( s.crossDomain == null ) {
				parts = rurl.exec( s.url.toLowerCase() );
				s.crossDomain = !!( parts &&
					( parts[ 1 ] != ajaxLocParts[ 1 ] || parts[ 2 ] != ajaxLocParts[ 2 ] ||
						( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
							( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
				);
			}
	
			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}
	
			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
	
			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return false;
			}
	
			// We can fire global events as of now if asked to
			fireGlobals = s.global;
	
			// Uppercase the type
			s.type = s.type.toUpperCase();
	
			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );
	
			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}
	
			// More options handling for requests with no content
			if ( !s.hasContent ) {
	
				// If data is available, append data to url
				if ( s.data ) {
					s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.data;
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}
	
				// Get ifModifiedKey before adding the anti-cache parameter
				ifModifiedKey = s.url;
	
				// Add anti-cache in url if needed
				if ( s.cache === false ) {
	
					var ts = jQuery.now(),
						// try replacing _= if it is there
						ret = s.url.replace( rts, "$1_=" + ts );
	
					// if nothing was replaced, add timestamp to the end
					s.url = ret + ( ( ret === s.url ) ? ( rquery.test( s.url ) ? "&" : "?" ) + "_=" + ts : "" );
				}
			}
	
			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}
	
			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				ifModifiedKey = ifModifiedKey || s.url;
				if ( jQuery.lastModified[ ifModifiedKey ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ ifModifiedKey ] );
				}
				if ( jQuery.etag[ ifModifiedKey ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ ifModifiedKey ] );
				}
			}
	
			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
					s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);
	
			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}
	
			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
					// Abort if not done already
					jqXHR.abort();
					return false;
	
			}
	
			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}
	
			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
	
			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;
				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}
				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = setTimeout( function(){
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}
	
				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch (e) {
					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );
					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}
	
			return jqXHR;
		},
	
		// Serialize an array of form elements or a set of
		// key/values into a query string
		param: function( a, traditional ) {
			var s = [],
				add = function( key, value ) {
					// If value is a function, invoke it and return its value
					value = jQuery.isFunction( value ) ? value() : value;
					s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
				};
	
			// Set traditional to true for jQuery <= 1.3.2 behavior.
			if ( traditional === undefined ) {
				traditional = jQuery.ajaxSettings.traditional;
			}
	
			// If an array was passed in, assume that it is an array of form elements.
			if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
				// Serialize the form elements
				jQuery.each( a, function() {
					add( this.name, this.value );
				});
	
			} else {
				// If traditional, encode the "old" way (the way 1.3.2 or older
				// did it), otherwise encode params recursively.
				for ( var prefix in a ) {
					buildParams( prefix, a[ prefix ], traditional, add );
				}
			}
	
			// Return the resulting serialization
			return s.join( "&" ).replace( r20, "+" );
		}
	});
	
	function buildParams( prefix, obj, traditional, add ) {
		if ( jQuery.isArray( obj ) ) {
			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {
					// Treat each array item as a scalar.
					add( prefix, v );
	
				} else {
					// If array item is non-scalar (array or object), encode its
					// numeric index to resolve deserialization ambiguity issues.
					// Note that rack (as of 1.0.0) can't currently deserialize
					// nested arrays properly, and attempting to do so may cause
					// a server error. Possible fixes are to modify rack's
					// deserialization algorithm or to provide an option or flag
					// to force array serialization to be shallow.
					buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
				}
			});
	
		} else if ( !traditional && jQuery.type( obj ) === "object" ) {
			// Serialize object item.
			for ( var name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}
	
		} else {
			// Serialize scalar item.
			add( prefix, obj );
		}
	}
	
	// This is still on the jQuery object... for now
	// Want to move this to jQuery.ajax some day
	jQuery.extend({
	
		// Counter for holding the number of active queries
		active: 0,
	
		// Last-Modified header cache for next request
		lastModified: {},
		etag: {}
	
	});
	
	/* Handles responses to an ajax request:
	 * - sets all responseXXX fields accordingly
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {
	
		var contents = s.contents,
			dataTypes = s.dataTypes,
			responseFields = s.responseFields,
			ct,
			type,
			finalDataType,
			firstDataType;
	
		// Fill responseXXX fields
		for ( type in responseFields ) {
			if ( type in responses ) {
				jqXHR[ responseFields[type] ] = responses[ type ];
			}
		}
	
		// Remove auto dataType and get content-type in the process
		while( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "content-type" );
			}
		}
	
		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}
	
		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {
			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}
	
		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}
	
	// Chain conversions given the request and the original response
	function ajaxConvert( s, response ) {
	
		// Apply the dataFilter if provided
		if ( s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}
	
		var dataTypes = s.dataTypes,
			converters = {},
			i,
			key,
			length = dataTypes.length,
			tmp,
			// Current and previous dataTypes
			current = dataTypes[ 0 ],
			prev,
			// Conversion expression
			conversion,
			// Conversion function
			conv,
			// Conversion functions (transitive conversion)
			conv1,
			conv2;
	
		// For each dataType in the chain
		for ( i = 1; i < length; i++ ) {
	
			// Create converters map
			// with lowercased keys
			if ( i === 1 ) {
				for ( key in s.converters ) {
					if ( typeof key === "string" ) {
						converters[ key.toLowerCase() ] = s.converters[ key ];
					}
				}
			}
	
			// Get the dataTypes
			prev = current;
			current = dataTypes[ i ];
	
			// If current is auto dataType, update it to prev
			if ( current === "*" ) {
				current = prev;
			// If no auto and dataTypes are actually different
			} else if ( prev !== "*" && prev !== current ) {
	
				// Get the converter
				conversion = prev + " " + current;
				conv = converters[ conversion ] || converters[ "* " + current ];
	
				// If there is no direct converter, search transitively
				if ( !conv ) {
					conv2 = undefined;
					for ( conv1 in converters ) {
						tmp = conv1.split( " " );
						if ( tmp[ 0 ] === prev || tmp[ 0 ] === "*" ) {
							conv2 = converters[ tmp[1] + " " + current ];
							if ( conv2 ) {
								conv1 = converters[ conv1 ];
								if ( conv1 === true ) {
									conv = conv2;
								} else if ( conv2 === true ) {
									conv = conv1;
								}
								break;
							}
						}
					}
				}
				// If we found no converter, dispatch an error
				if ( !( conv || conv2 ) ) {
					jQuery.error( "No conversion from " + conversion.replace(" "," to ") );
				}
				// If found converter is not an equivalence
				if ( conv !== true ) {
					// Convert with 1 or 2 converters accordingly
					response = conv ? conv( response ) : conv2( conv1(response) );
				}
			}
		}
		return response;
	}
	
	
	
	
	var jsc = jQuery.now(),
		jsre = /(\=)\?(&|$)|\?\?/i;
	
	// Default jsonp settings
	jQuery.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function() {
			return jQuery.expando + "_" + ( jsc++ );
		}
	});
	
	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
	
		var inspectData = ( typeof s.data === "string" ) && /^application\/x\-www\-form\-urlencoded/.test( s.contentType );
	
		if ( s.dataTypes[ 0 ] === "jsonp" ||
			s.jsonp !== false && ( jsre.test( s.url ) ||
					inspectData && jsre.test( s.data ) ) ) {
	
			var responseContainer,
				jsonpCallback = s.jsonpCallback =
					jQuery.isFunction( s.jsonpCallback ) ? s.jsonpCallback() : s.jsonpCallback,
				previous = window[ jsonpCallback ],
				url = s.url,
				data = s.data,
				replace = "$1" + jsonpCallback + "$2";
	
			if ( s.jsonp !== false ) {
				url = url.replace( jsre, replace );
				if ( s.url === url ) {
					if ( inspectData ) {
						data = data.replace( jsre, replace );
					}
					if ( s.data === data ) {
						// Add callback manually
						url += (/\?/.test( url ) ? "&" : "?") + s.jsonp + "=" + jsonpCallback;
					}
				}
			}
	
			s.url = url;
			s.data = data;
	
			// Install callback
			window[ jsonpCallback ] = function( response ) {
				responseContainer = [ response ];
			};
	
			// Clean-up function
			jqXHR.always(function() {
				// Set callback back to previous value
				window[ jsonpCallback ] = previous;
				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( previous ) ) {
					window[ jsonpCallback ]( responseContainer[ 0 ] );
				}
			});
	
			// Use data converter to retrieve json after script execution
			s.converters["script json"] = function() {
				if ( !responseContainer ) {
					jQuery.error( jsonpCallback + " was not called" );
				}
				return responseContainer[ 0 ];
			};
	
			// force json dataType
			s.dataTypes[ 0 ] = "json";
	
			// Delegate to script
			return "script";
		}
	});
	
	
	
	
	// Install script dataType
	jQuery.ajaxSetup({
		accepts: {
			script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /javascript|ecmascript/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	});
	
	// Handle cache's special case and global
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
			s.global = false;
		}
	});
	
	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function(s) {
	
		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
	
			var script,
				head = document.head || document.getElementsByTagName( "head" )[0] || document.documentElement;
	
			return {
	
				send: function( _, callback ) {
	
					script = document.createElement( "script" );
	
					script.async = "async";
	
					if ( s.scriptCharset ) {
						script.charset = s.scriptCharset;
					}
	
					script.src = s.url;
	
					// Attach handlers for all browsers
					script.onload = script.onreadystatechange = function( _, isAbort ) {
	
						if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {
	
							// Handle memory leak in IE
							script.onload = script.onreadystatechange = null;
	
							// Remove the script
							if ( head && script.parentNode ) {
								head.removeChild( script );
							}
	
							// Dereference the script
							script = undefined;
	
							// Callback if not abort
							if ( !isAbort ) {
								callback( 200, "success" );
							}
						}
					};
					// Use insertBefore instead of appendChild  to circumvent an IE6 bug.
					// This arises when a base node is used (#2709 and #4378).
					head.insertBefore( script, head.firstChild );
				},
	
				abort: function() {
					if ( script ) {
						script.onload( 0, 1 );
					}
				}
			};
		}
	});
	
	
	
	
	var // #5280: Internet Explorer will keep connections alive if we don't abort on unload
		xhrOnUnloadAbort = window.ActiveXObject ? function() {
			// Abort all pending requests
			for ( var key in xhrCallbacks ) {
				xhrCallbacks[ key ]( 0, 1 );
			}
		} : false,
		xhrId = 0,
		xhrCallbacks;
	
	// Functions to create xhrs
	function createStandardXHR() {
		try {
			return new window.XMLHttpRequest();
		} catch( e ) {}
	}
	
	function createActiveXHR() {
		try {
			return new window.ActiveXObject( "Microsoft.XMLHTTP" );
		} catch( e ) {}
	}
	
	// Create the request object
	// (This is still attached to ajaxSettings for backward compatibility)
	jQuery.ajaxSettings.xhr = window.ActiveXObject ?
		/* Microsoft failed to properly
		 * implement the XMLHttpRequest in IE7 (can't request local files),
		 * so we use the ActiveXObject when it is available
		 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
		 * we need a fallback.
		 */
		function() {
			return !this.isLocal && createStandardXHR() || createActiveXHR();
		} :
		// For all other browsers, use the standard XMLHttpRequest object
		createStandardXHR;
	
	// Determine support properties
	(function( xhr ) {
		jQuery.extend( jQuery.support, {
			ajax: !!xhr,
			cors: !!xhr && ( "withCredentials" in xhr )
		});
	})( jQuery.ajaxSettings.xhr() );
	
	// Create transport if the browser can provide an xhr
	if ( jQuery.support.ajax ) {
	
		jQuery.ajaxTransport(function( s ) {
			// Cross domain only allowed if supported through XMLHttpRequest
			if ( !s.crossDomain || jQuery.support.cors ) {
	
				var callback;
	
				return {
					send: function( headers, complete ) {
	
						// Get a new xhr
						var xhr = s.xhr(),
							handle,
							i;
	
						// Open the socket
						// Passing null username, generates a login popup on Opera (#2865)
						if ( s.username ) {
							xhr.open( s.type, s.url, s.async, s.username, s.password );
						} else {
							xhr.open( s.type, s.url, s.async );
						}
	
						// Apply custom fields if provided
						if ( s.xhrFields ) {
							for ( i in s.xhrFields ) {
								xhr[ i ] = s.xhrFields[ i ];
							}
						}
	
						// Override mime type if needed
						if ( s.mimeType && xhr.overrideMimeType ) {
							xhr.overrideMimeType( s.mimeType );
						}
	
						// X-Requested-With header
						// For cross-domain requests, seeing as conditions for a preflight are
						// akin to a jigsaw puzzle, we simply never set it to be sure.
						// (it can always be set on a per-request basis or even using ajaxSetup)
						// For same-domain requests, won't change header if already provided.
						if ( !s.crossDomain && !headers["X-Requested-With"] ) {
							headers[ "X-Requested-With" ] = "XMLHttpRequest";
						}
	
						// Need an extra try/catch for cross domain requests in Firefox 3
						try {
							for ( i in headers ) {
								xhr.setRequestHeader( i, headers[ i ] );
							}
						} catch( _ ) {}
	
						// Do send the request
						// This may raise an exception which is actually
						// handled in jQuery.ajax (so no try/catch here)
						xhr.send( ( s.hasContent && s.data ) || null );
	
						// Listener
						callback = function( _, isAbort ) {
	
							var status,
								statusText,
								responseHeaders,
								responses,
								xml;
	
							// Firefox throws exceptions when accessing properties
							// of an xhr when a network error occured
							// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
							try {
	
								// Was never called and is aborted or complete
								if ( callback && ( isAbort || xhr.readyState === 4 ) ) {
	
									// Only called once
									callback = undefined;
	
									// Do not keep as active anymore
									if ( handle ) {
										xhr.onreadystatechange = jQuery.noop;
										if ( xhrOnUnloadAbort ) {
											delete xhrCallbacks[ handle ];
										}
									}
	
									// If it's an abort
									if ( isAbort ) {
										// Abort it manually if needed
										if ( xhr.readyState !== 4 ) {
											xhr.abort();
										}
									} else {
										status = xhr.status;
										responseHeaders = xhr.getAllResponseHeaders();
										responses = {};
										xml = xhr.responseXML;
	
										// Construct response list
										if ( xml && xml.documentElement /* #4958 */ ) {
											responses.xml = xml;
										}
	
										// When requesting binary data, IE6-9 will throw an exception
										// on any attempt to access responseText (#11426)
										try {
											responses.text = xhr.responseText;
										} catch( _ ) {
										}
	
										// Firefox throws an exception when accessing
										// statusText for faulty cross-domain requests
										try {
											statusText = xhr.statusText;
										} catch( e ) {
											// We normalize with Webkit giving an empty statusText
											statusText = "";
										}
	
										// Filter status for non standard behaviors
	
										// If the request is local and we have data: assume a success
										// (success with no data won't get notified, that's the best we
										// can do given current implementations)
										if ( !status && s.isLocal && !s.crossDomain ) {
											status = responses.text ? 200 : 404;
										// IE - #1450: sometimes returns 1223 when it should be 204
										} else if ( status === 1223 ) {
											status = 204;
										}
									}
								}
							} catch( firefoxAccessException ) {
								if ( !isAbort ) {
									complete( -1, firefoxAccessException );
								}
							}
	
							// Call complete if needed
							if ( responses ) {
								complete( status, statusText, responses, responseHeaders );
							}
						};
	
						// if we're in sync mode or it's in cache
						// and has been retrieved directly (IE6 & IE7)
						// we need to manually fire the callback
						if ( !s.async || xhr.readyState === 4 ) {
							callback();
						} else {
							handle = ++xhrId;
							if ( xhrOnUnloadAbort ) {
								// Create the active xhrs callbacks list if needed
								// and attach the unload handler
								if ( !xhrCallbacks ) {
									xhrCallbacks = {};
									jQuery( window ).unload( xhrOnUnloadAbort );
								}
								// Add to list of active xhrs callbacks
								xhrCallbacks[ handle ] = callback;
							}
							xhr.onreadystatechange = callback;
						}
					},
	
					abort: function() {
						if ( callback ) {
							callback(0,1);
						}
					}
				};
			}
		});
	}
	
	
	
	
	var elemdisplay = {},
		iframe, iframeDoc,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rfxnum = /^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,
		timerId,
		fxAttrs = [
			// height animations
			[ "height", "marginTop", "marginBottom", "paddingTop", "paddingBottom" ],
			// width animations
			[ "width", "marginLeft", "marginRight", "paddingLeft", "paddingRight" ],
			// opacity animations
			[ "opacity" ]
		],
		fxNow;
	
	jQuery.fn.extend({
		show: function( speed, easing, callback ) {
			var elem, display;
	
			if ( speed || speed === 0 ) {
				return this.animate( genFx("show", 3), speed, easing, callback );
	
			} else {
				for ( var i = 0, j = this.length; i < j; i++ ) {
					elem = this[ i ];
	
					if ( elem.style ) {
						display = elem.style.display;
	
						// Reset the inline display of this element to learn if it is
						// being hidden by cascaded rules or not
						if ( !jQuery._data(elem, "olddisplay") && display === "none" ) {
							display = elem.style.display = "";
						}
	
						// Set elements which have been overridden with display: none
						// in a stylesheet to whatever the default browser style is
						// for such an element
						if ( (display === "" && jQuery.css(elem, "display") === "none") ||
							!jQuery.contains( elem.ownerDocument.documentElement, elem ) ) {
							jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );
						}
					}
				}
	
				// Set the display of most of the elements in a second loop
				// to avoid the constant reflow
				for ( i = 0; i < j; i++ ) {
					elem = this[ i ];
	
					if ( elem.style ) {
						display = elem.style.display;
	
						if ( display === "" || display === "none" ) {
							elem.style.display = jQuery._data( elem, "olddisplay" ) || "";
						}
					}
				}
	
				return this;
			}
		},
	
		hide: function( speed, easing, callback ) {
			if ( speed || speed === 0 ) {
				return this.animate( genFx("hide", 3), speed, easing, callback);
	
			} else {
				var elem, display,
					i = 0,
					j = this.length;
	
				for ( ; i < j; i++ ) {
					elem = this[i];
					if ( elem.style ) {
						display = jQuery.css( elem, "display" );
	
						if ( display !== "none" && !jQuery._data( elem, "olddisplay" ) ) {
							jQuery._data( elem, "olddisplay", display );
						}
					}
				}
	
				// Set the display of the elements in a second loop
				// to avoid the constant reflow
				for ( i = 0; i < j; i++ ) {
					if ( this[i].style ) {
						this[i].style.display = "none";
					}
				}
	
				return this;
			}
		},
	
		// Save the old toggle function
		_toggle: jQuery.fn.toggle,
	
		toggle: function( fn, fn2, callback ) {
			var bool = typeof fn === "boolean";
	
			if ( jQuery.isFunction(fn) && jQuery.isFunction(fn2) ) {
				this._toggle.apply( this, arguments );
	
			} else if ( fn == null || bool ) {
				this.each(function() {
					var state = bool ? fn : jQuery(this).is(":hidden");
					jQuery(this)[ state ? "show" : "hide" ]();
				});
	
			} else {
				this.animate(genFx("toggle", 3), fn, fn2, callback);
			}
	
			return this;
		},
	
		fadeTo: function( speed, to, easing, callback ) {
			return this.filter(":hidden").css("opacity", 0).show().end()
						.animate({opacity: to}, speed, easing, callback);
		},
	
		animate: function( prop, speed, easing, callback ) {
			var optall = jQuery.speed( speed, easing, callback );
	
			if ( jQuery.isEmptyObject( prop ) ) {
				return this.each( optall.complete, [ false ] );
			}
	
			// Do not change referenced properties as per-property easing will be lost
			prop = jQuery.extend( {}, prop );
	
			function doAnimation() {
				// XXX 'this' does not always have a nodeName when running the
				// test suite
	
				if ( optall.queue === false ) {
					jQuery._mark( this );
				}
	
				var opt = jQuery.extend( {}, optall ),
					isElement = this.nodeType === 1,
					hidden = isElement && jQuery(this).is(":hidden"),
					name, val, p, e, hooks, replace,
					parts, start, end, unit,
					method;
	
				// will store per property easing and be used to determine when an animation is complete
				opt.animatedProperties = {};
	
				// first pass over propertys to expand / normalize
				for ( p in prop ) {
					name = jQuery.camelCase( p );
					if ( p !== name ) {
						prop[ name ] = prop[ p ];
						delete prop[ p ];
					}
	
					if ( ( hooks = jQuery.cssHooks[ name ] ) && "expand" in hooks ) {
						replace = hooks.expand( prop[ name ] );
						delete prop[ name ];
	
						// not quite $.extend, this wont overwrite keys already present.
						// also - reusing 'p' from above because we have the correct "name"
						for ( p in replace ) {
							if ( ! ( p in prop ) ) {
								prop[ p ] = replace[ p ];
							}
						}
					}
				}
	
				for ( name in prop ) {
					val = prop[ name ];
					// easing resolution: per property > opt.specialEasing > opt.easing > 'swing' (default)
					if ( jQuery.isArray( val ) ) {
						opt.animatedProperties[ name ] = val[ 1 ];
						val = prop[ name ] = val[ 0 ];
					} else {
						opt.animatedProperties[ name ] = opt.specialEasing && opt.specialEasing[ name ] || opt.easing || 'swing';
					}
	
					if ( val === "hide" && hidden || val === "show" && !hidden ) {
						return opt.complete.call( this );
					}
	
					if ( isElement && ( name === "height" || name === "width" ) ) {
						// Make sure that nothing sneaks out
						// Record all 3 overflow attributes because IE does not
						// change the overflow attribute when overflowX and
						// overflowY are set to the same value
						opt.overflow = [ this.style.overflow, this.style.overflowX, this.style.overflowY ];
	
						// Set display property to inline-block for height/width
						// animations on inline elements that are having width/height animated
						if ( jQuery.css( this, "display" ) === "inline" &&
								jQuery.css( this, "float" ) === "none" ) {
	
							// inline-level elements accept inline-block;
							// block-level elements need to be inline with layout
							if ( !jQuery.support.inlineBlockNeedsLayout || defaultDisplay( this.nodeName ) === "inline" ) {
								this.style.display = "inline-block";
	
							} else {
								this.style.zoom = 1;
							}
						}
					}
				}
	
				if ( opt.overflow != null ) {
					this.style.overflow = "hidden";
				}
	
				for ( p in prop ) {
					e = new jQuery.fx( this, opt, p );
					val = prop[ p ];
	
					if ( rfxtypes.test( val ) ) {
	
						// Tracks whether to show or hide based on private
						// data attached to the element
						method = jQuery._data( this, "toggle" + p ) || ( val === "toggle" ? hidden ? "show" : "hide" : 0 );
						if ( method ) {
							jQuery._data( this, "toggle" + p, method === "show" ? "hide" : "show" );
							e[ method ]();
						} else {
							e[ val ]();
						}
	
					} else {
						parts = rfxnum.exec( val );
						start = e.cur();
	
						if ( parts ) {
							end = parseFloat( parts[2] );
							unit = parts[3] || ( jQuery.cssNumber[ p ] ? "" : "px" );
	
							// We need to compute starting value
							if ( unit !== "px" ) {
								jQuery.style( this, p, (end || 1) + unit);
								start = ( (end || 1) / e.cur() ) * start;
								jQuery.style( this, p, start + unit);
							}
	
							// If a +=/-= token was provided, we're doing a relative animation
							if ( parts[1] ) {
								end = ( (parts[ 1 ] === "-=" ? -1 : 1) * end ) + start;
							}
	
							e.custom( start, end, unit );
	
						} else {
							e.custom( start, val, "" );
						}
					}
				}
	
				// For JS strict compliance
				return true;
			}
	
			return optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
	
		stop: function( type, clearQueue, gotoEnd ) {
			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}
	
			return this.each(function() {
				var index,
					hadTimers = false,
					timers = jQuery.timers,
					data = jQuery._data( this );
	
				// clear marker counters if we know they won't be
				if ( !gotoEnd ) {
					jQuery._unmark( true, this );
				}
	
				function stopQueue( elem, data, index ) {
					var hooks = data[ index ];
					jQuery.removeData( elem, index, true );
					hooks.stop( gotoEnd );
				}
	
				if ( type == null ) {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && index.indexOf(".run") === index.length - 4 ) {
							stopQueue( this, data, index );
						}
					}
				} else if ( data[ index = type + ".run" ] && data[ index ].stop ){
					stopQueue( this, data, index );
				}
	
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
						if ( gotoEnd ) {
	
							// force the next step to be the last
							timers[ index ]( true );
						} else {
							timers[ index ].saveState();
						}
						hadTimers = true;
						timers.splice( index, 1 );
					}
				}
	
				// start the next in the queue if the last step wasn't forced
				// timers currently will call their complete callbacks, which will dequeue
				// but only if they were gotoEnd
				if ( !( gotoEnd && hadTimers ) ) {
					jQuery.dequeue( this, type );
				}
			});
		}
	
	});
	
	// Animations created synchronously will run synchronously
	function createFxNow() {
		setTimeout( clearFxNow, 0 );
		return ( fxNow = jQuery.now() );
	}
	
	function clearFxNow() {
		fxNow = undefined;
	}
	
	// Generate parameters to create a standard animation
	function genFx( type, num ) {
		var obj = {};
	
		jQuery.each( fxAttrs.concat.apply([], fxAttrs.slice( 0, num )), function() {
			obj[ this ] = type;
		});
	
		return obj;
	}
	
	// Generate shortcuts for custom animations
	jQuery.each({
		slideDown: genFx( "show", 1 ),
		slideUp: genFx( "hide", 1 ),
		slideToggle: genFx( "toggle", 1 ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	});
	
	jQuery.extend({
		speed: function( speed, easing, fn ) {
			var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
				complete: fn || !fn && easing ||
					jQuery.isFunction( speed ) && speed,
				duration: speed,
				easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
			};
	
			opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
				opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
	
			// normalize opt.queue - true/undefined/null -> "fx"
			if ( opt.queue == null || opt.queue === true ) {
				opt.queue = "fx";
			}
	
			// Queueing
			opt.old = opt.complete;
	
			opt.complete = function( noUnmark ) {
				if ( jQuery.isFunction( opt.old ) ) {
					opt.old.call( this );
				}
	
				if ( opt.queue ) {
					jQuery.dequeue( this, opt.queue );
				} else if ( noUnmark !== false ) {
					jQuery._unmark( this );
				}
			};
	
			return opt;
		},
	
		easing: {
			linear: function( p ) {
				return p;
			},
			swing: function( p ) {
				return ( -Math.cos( p*Math.PI ) / 2 ) + 0.5;
			}
		},
	
		timers: [],
	
		fx: function( elem, options, prop ) {
			this.options = options;
			this.elem = elem;
			this.prop = prop;
	
			options.orig = options.orig || {};
		}
	
	});
	
	jQuery.fx.prototype = {
		// Simple function for setting a style value
		update: function() {
			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}
	
			( jQuery.fx.step[ this.prop ] || jQuery.fx.step._default )( this );
		},
	
		// Get the current size
		cur: function() {
			if ( this.elem[ this.prop ] != null && (!this.elem.style || this.elem.style[ this.prop ] == null) ) {
				return this.elem[ this.prop ];
			}
	
			var parsed,
				r = jQuery.css( this.elem, this.prop );
			// Empty strings, null, undefined and "auto" are converted to 0,
			// complex values such as "rotate(1rad)" are returned as is,
			// simple values such as "10px" are parsed to Float.
			return isNaN( parsed = parseFloat( r ) ) ? !r || r === "auto" ? 0 : r : parsed;
		},
	
		// Start an animation from one number to another
		custom: function( from, to, unit ) {
			var self = this,
				fx = jQuery.fx;
	
			this.startTime = fxNow || createFxNow();
			this.end = to;
			this.now = this.start = from;
			this.pos = this.state = 0;
			this.unit = unit || this.unit || ( jQuery.cssNumber[ this.prop ] ? "" : "px" );
	
			function t( gotoEnd ) {
				return self.step( gotoEnd );
			}
	
			t.queue = this.options.queue;
			t.elem = this.elem;
			t.saveState = function() {
				if ( jQuery._data( self.elem, "fxshow" + self.prop ) === undefined ) {
					if ( self.options.hide ) {
						jQuery._data( self.elem, "fxshow" + self.prop, self.start );
					} else if ( self.options.show ) {
						jQuery._data( self.elem, "fxshow" + self.prop, self.end );
					}
				}
			};
	
			if ( t() && jQuery.timers.push(t) && !timerId ) {
				timerId = setInterval( fx.tick, fx.interval );
			}
		},
	
		// Simple 'show' function
		show: function() {
			var dataShow = jQuery._data( this.elem, "fxshow" + this.prop );
	
			// Remember where we started, so that we can go back to it later
			this.options.orig[ this.prop ] = dataShow || jQuery.style( this.elem, this.prop );
			this.options.show = true;
	
			// Begin the animation
			// Make sure that we start at a small width/height to avoid any flash of content
			if ( dataShow !== undefined ) {
				// This show is picking up where a previous hide or show left off
				this.custom( this.cur(), dataShow );
			} else {
				this.custom( this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur() );
			}
	
			// Start by showing the element
			jQuery( this.elem ).show();
		},
	
		// Simple 'hide' function
		hide: function() {
			// Remember where we started, so that we can go back to it later
			this.options.orig[ this.prop ] = jQuery._data( this.elem, "fxshow" + this.prop ) || jQuery.style( this.elem, this.prop );
			this.options.hide = true;
	
			// Begin the animation
			this.custom( this.cur(), 0 );
		},
	
		// Each step of an animation
		step: function( gotoEnd ) {
			var p, n, complete,
				t = fxNow || createFxNow(),
				done = true,
				elem = this.elem,
				options = this.options;
	
			if ( gotoEnd || t >= options.duration + this.startTime ) {
				this.now = this.end;
				this.pos = this.state = 1;
				this.update();
	
				options.animatedProperties[ this.prop ] = true;
	
				for ( p in options.animatedProperties ) {
					if ( options.animatedProperties[ p ] !== true ) {
						done = false;
					}
				}
	
				if ( done ) {
					// Reset the overflow
					if ( options.overflow != null && !jQuery.support.shrinkWrapBlocks ) {
	
						jQuery.each( [ "", "X", "Y" ], function( index, value ) {
							elem.style[ "overflow" + value ] = options.overflow[ index ];
						});
					}
	
					// Hide the element if the "hide" operation was done
					if ( options.hide ) {
						jQuery( elem ).hide();
					}
	
					// Reset the properties, if the item has been hidden or shown
					if ( options.hide || options.show ) {
						for ( p in options.animatedProperties ) {
							jQuery.style( elem, p, options.orig[ p ] );
							jQuery.removeData( elem, "fxshow" + p, true );
							// Toggle data is no longer needed
							jQuery.removeData( elem, "toggle" + p, true );
						}
					}
	
					// Execute the complete function
					// in the event that the complete function throws an exception
					// we must ensure it won't be called twice. #5684
	
					complete = options.complete;
					if ( complete ) {
	
						options.complete = false;
						complete.call( elem );
					}
				}
	
				return false;
	
			} else {
				// classical easing cannot be used with an Infinity duration
				if ( options.duration == Infinity ) {
					this.now = t;
				} else {
					n = t - this.startTime;
					this.state = n / options.duration;
	
					// Perform the easing function, defaults to swing
					this.pos = jQuery.easing[ options.animatedProperties[this.prop] ]( this.state, n, 0, 1, options.duration );
					this.now = this.start + ( (this.end - this.start) * this.pos );
				}
				// Perform the next step of the animation
				this.update();
			}
	
			return true;
		}
	};
	
	jQuery.extend( jQuery.fx, {
		tick: function() {
			var timer,
				timers = jQuery.timers,
				i = 0;
	
			for ( ; i < timers.length; i++ ) {
				timer = timers[ i ];
				// Checks the timer has not already been removed
				if ( !timer() && timers[ i ] === timer ) {
					timers.splice( i--, 1 );
				}
			}
	
			if ( !timers.length ) {
				jQuery.fx.stop();
			}
		},
	
		interval: 13,
	
		stop: function() {
			clearInterval( timerId );
			timerId = null;
		},
	
		speeds: {
			slow: 600,
			fast: 200,
			// Default speed
			_default: 400
		},
	
		step: {
			opacity: function( fx ) {
				jQuery.style( fx.elem, "opacity", fx.now );
			},
	
			_default: function( fx ) {
				if ( fx.elem.style && fx.elem.style[ fx.prop ] != null ) {
					fx.elem.style[ fx.prop ] = fx.now + fx.unit;
				} else {
					fx.elem[ fx.prop ] = fx.now;
				}
			}
		}
	});
	
	// Ensure props that can't be negative don't go there on undershoot easing
	jQuery.each( fxAttrs.concat.apply( [], fxAttrs ), function( i, prop ) {
		// exclude marginTop, marginLeft, marginBottom and marginRight from this list
		if ( prop.indexOf( "margin" ) ) {
			jQuery.fx.step[ prop ] = function( fx ) {
				jQuery.style( fx.elem, prop, Math.max(0, fx.now) + fx.unit );
			};
		}
	});
	
	if ( jQuery.expr && jQuery.expr.filters ) {
		jQuery.expr.filters.animated = function( elem ) {
			return jQuery.grep(jQuery.timers, function( fn ) {
				return elem === fn.elem;
			}).length;
		};
	}
	
	// Try to restore the default display value of an element
	function defaultDisplay( nodeName ) {
	
		if ( !elemdisplay[ nodeName ] ) {
	
			var body = document.body,
				elem = jQuery( "<" + nodeName + ">" ).appendTo( body ),
				display = elem.css( "display" );
			elem.remove();
	
			// If the simple way fails,
			// get element's real default display by attaching it to a temp iframe
			if ( display === "none" || display === "" ) {
				// No iframe to use yet, so create it
				if ( !iframe ) {
					iframe = document.createElement( "iframe" );
					iframe.frameBorder = iframe.width = iframe.height = 0;
				}
	
				body.appendChild( iframe );
	
				// Create a cacheable copy of the iframe document on first call.
				// IE and Opera will allow us to reuse the iframeDoc without re-writing the fake HTML
				// document to it; WebKit & Firefox won't allow reusing the iframe document.
				if ( !iframeDoc || !iframe.createElement ) {
					iframeDoc = ( iframe.contentWindow || iframe.contentDocument ).document;
					iframeDoc.write( ( jQuery.support.boxModel ? "<!doctype html>" : "" ) + "<html><body>" );
					iframeDoc.close();
				}
	
				elem = iframeDoc.createElement( nodeName );
	
				iframeDoc.body.appendChild( elem );
	
				display = jQuery.css( elem, "display" );
				body.removeChild( iframe );
			}
	
			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}
	
		return elemdisplay[ nodeName ];
	}
	
	
	
	
	var getOffset,
		rtable = /^t(?:able|d|h)$/i,
		rroot = /^(?:body|html)$/i;
	
	if ( "getBoundingClientRect" in document.documentElement ) {
		getOffset = function( elem, doc, docElem, box ) {
			try {
				box = elem.getBoundingClientRect();
			} catch(e) {}
	
			// Make sure we're not dealing with a disconnected DOM node
			if ( !box || !jQuery.contains( docElem, elem ) ) {
				return box ? { top: box.top, left: box.left } : { top: 0, left: 0 };
			}
	
			var body = doc.body,
				win = getWindow( doc ),
				clientTop  = docElem.clientTop  || body.clientTop  || 0,
				clientLeft = docElem.clientLeft || body.clientLeft || 0,
				scrollTop  = win.pageYOffset || jQuery.support.boxModel && docElem.scrollTop  || body.scrollTop,
				scrollLeft = win.pageXOffset || jQuery.support.boxModel && docElem.scrollLeft || body.scrollLeft,
				top  = box.top  + scrollTop  - clientTop,
				left = box.left + scrollLeft - clientLeft;
	
			return { top: top, left: left };
		};
	
	} else {
		getOffset = function( elem, doc, docElem ) {
			var computedStyle,
				offsetParent = elem.offsetParent,
				prevOffsetParent = elem,
				body = doc.body,
				defaultView = doc.defaultView,
				prevComputedStyle = defaultView ? defaultView.getComputedStyle( elem, null ) : elem.currentStyle,
				top = elem.offsetTop,
				left = elem.offsetLeft;
	
			while ( (elem = elem.parentNode) && elem !== body && elem !== docElem ) {
				if ( jQuery.support.fixedPosition && prevComputedStyle.position === "fixed" ) {
					break;
				}
	
				computedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle;
				top  -= elem.scrollTop;
				left -= elem.scrollLeft;
	
				if ( elem === offsetParent ) {
					top  += elem.offsetTop;
					left += elem.offsetLeft;
	
					if ( jQuery.support.doesNotAddBorder && !(jQuery.support.doesAddBorderForTableAndCells && rtable.test(elem.nodeName)) ) {
						top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
						left += parseFloat( computedStyle.borderLeftWidth ) || 0;
					}
	
					prevOffsetParent = offsetParent;
					offsetParent = elem.offsetParent;
				}
	
				if ( jQuery.support.subtractsBorderForOverflowNotVisible && computedStyle.overflow !== "visible" ) {
					top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
					left += parseFloat( computedStyle.borderLeftWidth ) || 0;
				}
	
				prevComputedStyle = computedStyle;
			}
	
			if ( prevComputedStyle.position === "relative" || prevComputedStyle.position === "static" ) {
				top  += body.offsetTop;
				left += body.offsetLeft;
			}
	
			if ( jQuery.support.fixedPosition && prevComputedStyle.position === "fixed" ) {
				top  += Math.max( docElem.scrollTop, body.scrollTop );
				left += Math.max( docElem.scrollLeft, body.scrollLeft );
			}
	
			return { top: top, left: left };
		};
	}
	
	jQuery.fn.offset = function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}
	
		var elem = this[0],
			doc = elem && elem.ownerDocument;
	
		if ( !doc ) {
			return null;
		}
	
		if ( elem === doc.body ) {
			return jQuery.offset.bodyOffset( elem );
		}
	
		return getOffset( elem, doc, doc.documentElement );
	};
	
	jQuery.offset = {
	
		bodyOffset: function( body ) {
			var top = body.offsetTop,
				left = body.offsetLeft;
	
			if ( jQuery.support.doesNotIncludeMarginInBodyOffset ) {
				top  += parseFloat( jQuery.css(body, "marginTop") ) || 0;
				left += parseFloat( jQuery.css(body, "marginLeft") ) || 0;
			}
	
			return { top: top, left: left };
		},
	
		setOffset: function( elem, options, i ) {
			var position = jQuery.css( elem, "position" );
	
			// set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}
	
			var curElem = jQuery( elem ),
				curOffset = curElem.offset(),
				curCSSTop = jQuery.css( elem, "top" ),
				curCSSLeft = jQuery.css( elem, "left" ),
				calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
				props = {}, curPosition = {}, curTop, curLeft;
	
			// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}
	
			if ( jQuery.isFunction( options ) ) {
				options = options.call( elem, i, curOffset );
			}
	
			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}
	
			if ( "using" in options ) {
				options.using.call( elem, props );
			} else {
				curElem.css( props );
			}
		}
	};
	
	
	jQuery.fn.extend({
	
		position: function() {
			if ( !this[0] ) {
				return null;
			}
	
			var elem = this[0],
	
			// Get *real* offsetParent
			offsetParent = this.offsetParent(),
	
			// Get correct offsets
			offset       = this.offset(),
			parentOffset = rroot.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();
	
			// Subtract element margins
			// note: when an element has margin: auto the offsetLeft and marginLeft
			// are the same in Safari causing offset.left to incorrectly be 0
			offset.top  -= parseFloat( jQuery.css(elem, "marginTop") ) || 0;
			offset.left -= parseFloat( jQuery.css(elem, "marginLeft") ) || 0;
	
			// Add offsetParent borders
			parentOffset.top  += parseFloat( jQuery.css(offsetParent[0], "borderTopWidth") ) || 0;
			parentOffset.left += parseFloat( jQuery.css(offsetParent[0], "borderLeftWidth") ) || 0;
	
			// Subtract the two offsets
			return {
				top:  offset.top  - parentOffset.top,
				left: offset.left - parentOffset.left
			};
		},
	
		offsetParent: function() {
			return this.map(function() {
				var offsetParent = this.offsetParent || document.body;
				while ( offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static") ) {
					offsetParent = offsetParent.offsetParent;
				}
				return offsetParent;
			});
		}
	});
	
	
	// Create scrollLeft and scrollTop methods
	jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
		var top = /Y/.test( prop );
	
		jQuery.fn[ method ] = function( val ) {
			return jQuery.access( this, function( elem, method, val ) {
				var win = getWindow( elem );
	
				if ( val === undefined ) {
					return win ? (prop in win) ? win[ prop ] :
						jQuery.support.boxModel && win.document.documentElement[ method ] ||
							win.document.body[ method ] :
						elem[ method ];
				}
	
				if ( win ) {
					win.scrollTo(
						!top ? val : jQuery( win ).scrollLeft(),
						 top ? val : jQuery( win ).scrollTop()
					);
	
				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length, null );
		};
	});
	
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ?
			elem :
			elem.nodeType === 9 ?
				elem.defaultView || elem.parentWindow :
				false;
	}
	
	
	
	
	// Create width, height, innerHeight, innerWidth, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		var clientProp = "client" + name,
			scrollProp = "scroll" + name,
			offsetProp = "offset" + name;
	
		// innerHeight and innerWidth
		jQuery.fn[ "inner" + name ] = function() {
			var elem = this[0];
			return elem ?
				elem.style ?
				parseFloat( jQuery.css( elem, type, "padding" ) ) :
				this[ type ]() :
				null;
		};
	
		// outerHeight and outerWidth
		jQuery.fn[ "outer" + name ] = function( margin ) {
			var elem = this[0];
			return elem ?
				elem.style ?
				parseFloat( jQuery.css( elem, type, margin ? "margin" : "border" ) ) :
				this[ type ]() :
				null;
		};
	
		jQuery.fn[ type ] = function( value ) {
			return jQuery.access( this, function( elem, type, value ) {
				var doc, docElemProp, orig, ret;
	
				if ( jQuery.isWindow( elem ) ) {
					// 3rd condition allows Nokia support, as it supports the docElem prop but not CSS1Compat
					doc = elem.document;
					docElemProp = doc.documentElement[ clientProp ];
					return jQuery.support.boxModel && docElemProp ||
						doc.body && doc.body[ clientProp ] || docElemProp;
				}
	
				// Get document width or height
				if ( elem.nodeType === 9 ) {
					// Either scroll[Width/Height] or offset[Width/Height], whichever is greater
					doc = elem.documentElement;
	
					// when a window > document, IE6 reports a offset[Width/Height] > client[Width/Height]
					// so we can't use max, as it'll choose the incorrect offset[Width/Height]
					// instead we use the correct client[Width/Height]
					// support:IE6
					if ( doc[ clientProp ] >= doc[ scrollProp ] ) {
						return doc[ clientProp ];
					}
	
					return Math.max(
						elem.body[ scrollProp ], doc[ scrollProp ],
						elem.body[ offsetProp ], doc[ offsetProp ]
					);
				}
	
				// Get width or height on the element
				if ( value === undefined ) {
					orig = jQuery.css( elem, type );
					ret = parseFloat( orig );
					return jQuery.isNumeric( ret ) ? ret : orig;
				}
	
				// Set the width or height on the element
				jQuery( elem ).css( type, value );
			}, type, value, arguments.length, null );
		};
	});
	
	
	
	
	// Expose jQuery to the global object
	window.jQuery = window.$ = jQuery;
	
	// Expose jQuery as an AMD module, but only for AMD loaders that
	// understand the issues with loading multiple versions of jQuery
	// in a page that all might call define(). The loader will indicate
	// they have special allowances for multiple jQuery versions by
	// specifying define.amd.jQuery = true. Register as a named module,
	// since jQuery can be concatenated with other files that may use define,
	// but not use a proper concatenation script that understands anonymous
	// AMD modules. A named AMD is safest and most robust way to register.
	// Lowercase jquery is used because AMD module names are derived from
	// file names, and jQuery is normally delivered in a lowercase file name.
	// Do this after creating the global so that if an AMD module wants to call
	// noConflict to hide this version of jQuery, it will work.
	if ( 'function' === "function" && __webpack_require__(20) && __webpack_require__(20).jQuery ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () { return jQuery; }.apply(null, __WEBPACK_AMD_DEFINE_ARRAY__)), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	
	
	
	})( window );
	
	
	  window.jQuery.noConflict();
	  return window.jQuery;
	}
	module.exports = create('undefined' === typeof window ? undefined : window);
	module.exports.create = create;
	}());


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var handlebars = __webpack_require__(15),
	
	// Each of these augment the Handlebars object. No need to setup here.
	// (This is done to easily share code between commonjs and browse envs)
	  utils = __webpack_require__(16),
	  compiler = __webpack_require__(18),
	  runtime = __webpack_require__(17);
	
	var create = function() {
	  var hb = handlebars.create();
	
	  utils.attach(hb);
	  compiler.attach(hb);
	  runtime.attach(hb);
	
	  return hb;
	};
	
	var Handlebars = create();
	Handlebars.create = create;
	
	module.exports = Handlebars; // instantiate an instance
	
	// Publish a Node.js require() handler for .handlebars and .hbs files
	if ((void 0)) {
	  var extension = function(module, filename) {
	    var fs = __webpack_require__(22);
	    var templateString = fs.readFileSync(filename, "utf8");
	    module.exports = Handlebars.compile(templateString);
	  };
	  (void 0)[".handlebars"] = extension;
	  (void 0)[".hbs"] = extension;
	}
	
	// BEGIN(BROWSER)
	
	// END(BROWSER)
	
	// USAGE:
	// var handlebars = require('handlebars');
	
	// var singleton = handlebars.Handlebars,
	//  local = handlebars.create();


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	// shim for using process in browser
	
	var process = module.exports = {};
	
	process.nextTick = (function () {
	    var canSetImmediate = typeof window !== 'undefined'
	    && window.setImmediate;
	    var canPost = typeof window !== 'undefined'
	    && window.postMessage && window.addEventListener
	    ;
	
	    if (canSetImmediate) {
	        return function (f) { return window.setImmediate(f) };
	    }
	
	    if (canPost) {
	        var queue = [];
	        window.addEventListener('message', function (ev) {
	            var source = ev.source;
	            if ((source === window || source === null) && ev.data === 'process-tick') {
	                ev.stopPropagation();
	                if (queue.length > 0) {
	                    var fn = queue.shift();
	                    fn();
	                }
	            }
	        }, true);
	
	        return function nextTick(fn) {
	            queue.push(fn);
	            window.postMessage('process-tick', '*');
	        };
	    }
	
	    return function nextTick(fn) {
	        setTimeout(fn, 0);
	    };
	})();
	
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	}
	
	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/*jshint eqnull: true */
	
	module.exports.create = function() {
	
	var Handlebars = {};
	
	// BEGIN(BROWSER)
	
	Handlebars.VERSION = "1.0.0";
	Handlebars.COMPILER_REVISION = 4;
	
	Handlebars.REVISION_CHANGES = {
	  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
	  2: '== 1.0.0-rc.3',
	  3: '== 1.0.0-rc.4',
	  4: '>= 1.0.0'
	};
	
	Handlebars.helpers  = {};
	Handlebars.partials = {};
	
	var toString = Object.prototype.toString,
	    functionType = '[object Function]',
	    objectType = '[object Object]';
	
	Handlebars.registerHelper = function(name, fn, inverse) {
	  if (toString.call(name) === objectType) {
	    if (inverse || fn) { throw new Handlebars.Exception('Arg not supported with multiple helpers'); }
	    Handlebars.Utils.extend(this.helpers, name);
	  } else {
	    if (inverse) { fn.not = inverse; }
	    this.helpers[name] = fn;
	  }
	};
	
	Handlebars.registerPartial = function(name, str) {
	  if (toString.call(name) === objectType) {
	    Handlebars.Utils.extend(this.partials,  name);
	  } else {
	    this.partials[name] = str;
	  }
	};
	
	Handlebars.registerHelper('helperMissing', function(arg) {
	  if(arguments.length === 2) {
	    return undefined;
	  } else {
	    throw new Error("Missing helper: '" + arg + "'");
	  }
	});
	
	Handlebars.registerHelper('blockHelperMissing', function(context, options) {
	  var inverse = options.inverse || function() {}, fn = options.fn;
	
	  var type = toString.call(context);
	
	  if(type === functionType) { context = context.call(this); }
	
	  if(context === true) {
	    return fn(this);
	  } else if(context === false || context == null) {
	    return inverse(this);
	  } else if(type === "[object Array]") {
	    if(context.length > 0) {
	      return Handlebars.helpers.each(context, options);
	    } else {
	      return inverse(this);
	    }
	  } else {
	    return fn(context);
	  }
	});
	
	Handlebars.K = function() {};
	
	Handlebars.createFrame = Object.create || function(object) {
	  Handlebars.K.prototype = object;
	  var obj = new Handlebars.K();
	  Handlebars.K.prototype = null;
	  return obj;
	};
	
	Handlebars.logger = {
	  DEBUG: 0, INFO: 1, WARN: 2, ERROR: 3, level: 3,
	
	  methodMap: {0: 'debug', 1: 'info', 2: 'warn', 3: 'error'},
	
	  // can be overridden in the host environment
	  log: function(level, obj) {
	    if (Handlebars.logger.level <= level) {
	      var method = Handlebars.logger.methodMap[level];
	      if (typeof console !== 'undefined' && console[method]) {
	        console[method].call(console, obj);
	      }
	    }
	  }
	};
	
	Handlebars.log = function(level, obj) { Handlebars.logger.log(level, obj); };
	
	Handlebars.registerHelper('each', function(context, options) {
	  var fn = options.fn, inverse = options.inverse;
	  var i = 0, ret = "", data;
	
	  var type = toString.call(context);
	  if(type === functionType) { context = context.call(this); }
	
	  if (options.data) {
	    data = Handlebars.createFrame(options.data);
	  }
	
	  if(context && typeof context === 'object') {
	    if(context instanceof Array){
	      for(var j = context.length; i<j; i++) {
	        if (data) { data.index = i; }
	        ret = ret + fn(context[i], { data: data });
	      }
	    } else {
	      for(var key in context) {
	        if(context.hasOwnProperty(key)) {
	          if(data) { data.key = key; }
	          ret = ret + fn(context[key], {data: data});
	          i++;
	        }
	      }
	    }
	  }
	
	  if(i === 0){
	    ret = inverse(this);
	  }
	
	  return ret;
	});
	
	Handlebars.registerHelper('if', function(conditional, options) {
	  var type = toString.call(conditional);
	  if(type === functionType) { conditional = conditional.call(this); }
	
	  if(!conditional || Handlebars.Utils.isEmpty(conditional)) {
	    return options.inverse(this);
	  } else {
	    return options.fn(this);
	  }
	});
	
	Handlebars.registerHelper('unless', function(conditional, options) {
	  return Handlebars.helpers['if'].call(this, conditional, {fn: options.inverse, inverse: options.fn});
	});
	
	Handlebars.registerHelper('with', function(context, options) {
	  var type = toString.call(context);
	  if(type === functionType) { context = context.call(this); }
	
	  if (!Handlebars.Utils.isEmpty(context)) return options.fn(context);
	});
	
	Handlebars.registerHelper('log', function(context, options) {
	  var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
	  Handlebars.log(level, context);
	});
	
	// END(BROWSER)
	
	return Handlebars;
	};


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	exports.attach = function(Handlebars) {
	
	var toString = Object.prototype.toString;
	
	// BEGIN(BROWSER)
	
	var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];
	
	Handlebars.Exception = function(message) {
	  var tmp = Error.prototype.constructor.apply(this, arguments);
	
	  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
	  for (var idx = 0; idx < errorProps.length; idx++) {
	    this[errorProps[idx]] = tmp[errorProps[idx]];
	  }
	};
	Handlebars.Exception.prototype = new Error();
	
	// Build out our basic SafeString type
	Handlebars.SafeString = function(string) {
	  this.string = string;
	};
	Handlebars.SafeString.prototype.toString = function() {
	  return this.string.toString();
	};
	
	var escape = {
	  "&": "&amp;",
	  "<": "&lt;",
	  ">": "&gt;",
	  '"': "&quot;",
	  "'": "&#x27;",
	  "`": "&#x60;"
	};
	
	var badChars = /[&<>"'`]/g;
	var possible = /[&<>"'`]/;
	
	var escapeChar = function(chr) {
	  return escape[chr] || "&amp;";
	};
	
	Handlebars.Utils = {
	  extend: function(obj, value) {
	    for(var key in value) {
	      if(value.hasOwnProperty(key)) {
	        obj[key] = value[key];
	      }
	    }
	  },
	
	  escapeExpression: function(string) {
	    // don't escape SafeStrings, since they're already safe
	    if (string instanceof Handlebars.SafeString) {
	      return string.toString();
	    } else if (string == null || string === false) {
	      return "";
	    }
	
	    // Force a string conversion as this will be done by the append regardless and
	    // the regex test will do this transparently behind the scenes, causing issues if
	    // an object's to string has escaped characters in it.
	    string = string.toString();
	
	    if(!possible.test(string)) { return string; }
	    return string.replace(badChars, escapeChar);
	  },
	
	  isEmpty: function(value) {
	    if (!value && value !== 0) {
	      return true;
	    } else if(toString.call(value) === "[object Array]" && value.length === 0) {
	      return true;
	    } else {
	      return false;
	    }
	  }
	};
	
	// END(BROWSER)
	
	return Handlebars;
	};


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	exports.attach = function(Handlebars) {
	
	// BEGIN(BROWSER)
	
	Handlebars.VM = {
	  template: function(templateSpec) {
	    // Just add water
	    var container = {
	      escapeExpression: Handlebars.Utils.escapeExpression,
	      invokePartial: Handlebars.VM.invokePartial,
	      programs: [],
	      program: function(i, fn, data) {
	        var programWrapper = this.programs[i];
	        if(data) {
	          programWrapper = Handlebars.VM.program(i, fn, data);
	        } else if (!programWrapper) {
	          programWrapper = this.programs[i] = Handlebars.VM.program(i, fn);
	        }
	        return programWrapper;
	      },
	      merge: function(param, common) {
	        var ret = param || common;
	
	        if (param && common) {
	          ret = {};
	          Handlebars.Utils.extend(ret, common);
	          Handlebars.Utils.extend(ret, param);
	        }
	        return ret;
	      },
	      programWithDepth: Handlebars.VM.programWithDepth,
	      noop: Handlebars.VM.noop,
	      compilerInfo: null
	    };
	
	    return function(context, options) {
	      options = options || {};
	      var result = templateSpec.call(container, Handlebars, context, options.helpers, options.partials, options.data);
	
	      var compilerInfo = container.compilerInfo || [],
	          compilerRevision = compilerInfo[0] || 1,
	          currentRevision = Handlebars.COMPILER_REVISION;
	
	      if (compilerRevision !== currentRevision) {
	        if (compilerRevision < currentRevision) {
	          var runtimeVersions = Handlebars.REVISION_CHANGES[currentRevision],
	              compilerVersions = Handlebars.REVISION_CHANGES[compilerRevision];
	          throw "Template was precompiled with an older version of Handlebars than the current runtime. "+
	                "Please update your precompiler to a newer version ("+runtimeVersions+") or downgrade your runtime to an older version ("+compilerVersions+").";
	        } else {
	          // Use the embedded version info since the runtime doesn't know about this revision yet
	          throw "Template was precompiled with a newer version of Handlebars than the current runtime. "+
	                "Please update your runtime to a newer version ("+compilerInfo[1]+").";
	        }
	      }
	
	      return result;
	    };
	  },
	
	  programWithDepth: function(i, fn, data /*, $depth */) {
	    var args = Array.prototype.slice.call(arguments, 3);
	
	    var program = function(context, options) {
	      options = options || {};
	
	      return fn.apply(this, [context, options.data || data].concat(args));
	    };
	    program.program = i;
	    program.depth = args.length;
	    return program;
	  },
	  program: function(i, fn, data) {
	    var program = function(context, options) {
	      options = options || {};
	
	      return fn(context, options.data || data);
	    };
	    program.program = i;
	    program.depth = 0;
	    return program;
	  },
	  noop: function() { return ""; },
	  invokePartial: function(partial, name, context, helpers, partials, data) {
	    var options = { helpers: helpers, partials: partials, data: data };
	
	    if(partial === undefined) {
	      throw new Handlebars.Exception("The partial " + name + " could not be found");
	    } else if(partial instanceof Function) {
	      return partial(context, options);
	    } else if (!Handlebars.compile) {
	      throw new Handlebars.Exception("The partial " + name + " could not be compiled when running in runtime-only mode");
	    } else {
	      partials[name] = Handlebars.compile(partial, {data: data !== undefined});
	      return partials[name](context, options);
	    }
	  }
	};
	
	Handlebars.template = Handlebars.VM.template;
	
	// END(BROWSER)
	
	return Handlebars;
	
	};


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	// Each of these module will augment the Handlebars object as it loads. No need to perform addition operations
	module.exports.attach = function(Handlebars) {
	
	var visitor = __webpack_require__(24),
	    printer = __webpack_require__(25),
	    ast = __webpack_require__(26),
	    compiler = __webpack_require__(27);
	
	visitor.attach(Handlebars);
	printer.attach(Handlebars);
	ast.attach(Handlebars);
	compiler.attach(Handlebars);
	
	return Handlebars;
	
	};


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	(function () {
	  "use strict";
	
	  var machine = "Macintosh"
	    , arch = "Intel Mac OS X 10_6_7"
	    , engine = "AppleWebKit/534.36 (KHTML, like Gecko) NodeJS/v0.4.7 Chrome/13.0.767.0 Safari/534.36";
	
	  module.exports = {
	      appCodeName: "Mozilla"
	    , appName: "Netscape"
	    , appVersion: "5.0 (" + machine + "; " + arch + ") " + engine
	    , cookieEnabled: true
	    , geolocation: undefined
	      /*
	        clearWatch
	        getCurrentPosition
	        watchPosition
	      */
	    , mimeTypes: []
	      /*
	      */
	    , onLine: true
	    , platform: "MacIntel"
	    , plugins: []
	      /*
	      */
	    , product: "Gecko"
	    , productSub: "20030107"
	    , userAgent: "Mozilla/5.0 (" + machine + "; " + arch + ") " + engine
	    , vendor: "Joyent"
	    , vendorSub: ""
	  }
	}());


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;
	
	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname, module, process) {var dom      = exports.dom = __webpack_require__(32).dom,
	    features = __webpack_require__(33),
	    fs       = __webpack_require__(22),
	    pkg      = JSON.parse(fs.readFileSync(__dirname + "/../package.json")),
	    request  = __webpack_require__(45),
	    URL      = __webpack_require__(44);
	
	var style = __webpack_require__(35);
	exports.defaultLevel = dom.level3.html;
	exports.browserAugmentation = __webpack_require__(34).browserAugmentation;
	exports.windowAugmentation = __webpack_require__(34).windowAugmentation;
	
	// Proxy feature functions to features module.
	['availableDocumentFeatures',
	 'defaultDocumentFeatures',
	 'applyDocumentFeatures'].forEach(function (propName) {
	  exports.__defineGetter__(propName, function () {
	    return features[propName];
	  });
	  exports.__defineSetter__(propName, function (val) {
	    return features[propName] = val;
	  });
	});
	
	exports.debugMode = false;
	
	var createWindow = exports.createWindow = __webpack_require__(34).createWindow;
	
	exports.__defineGetter__('version', function() {
	  return pkg.version;
	});
	
	exports.level = function (level, feature) {
		if(!feature) feature = 'core'
		return __webpack_require__(30)('./jsdom/level' + level + '/' + feature).dom['level' + level][feature]
	}
	
	exports.jsdom = function (html, level, options) {
	
	  options = options || {};
	  if(typeof level == "string") {
	    level = exports.level(level, 'html')
	  } else {
	    level   = level || exports.defaultLevel;
	  }
	
	  if (!options.url) {
	    options.url = (module.parent.id === 'jsdom') ?
	                  module.parent.parent.filename  :
	                  module.parent.filename;
	    options.url = options.url.replace(/\\/g, '/');
	    if (options.url[0] !== '/') {
	      options.url = '/' + options.url;
	    }
	    options.url = 'file://' + options.url;
	  }
	
	  var browser = exports.browserAugmentation(level, options),
	      doc     = (browser.HTMLDocument)             ?
	                 new browser.HTMLDocument(options) :
	                 new browser.Document(options);
	
	  if (options.features && options.features.QuerySelector) {
	    __webpack_require__(36).applyQuerySelector(doc, level);
	  }
	
	  features.applyDocumentFeatures(doc, options.features);
	
	  if (typeof html === 'undefined' || html === null) {
	    doc.write('<html><head></head><body></body></html>');
	  } else {
	    doc.write(html + '');
	  }
	
	  if (doc.close && !options.deferClose) {
	    doc.close();
	  }
	
	  // Kept for backwards-compatibility. The window is lazily created when
	  // document.parentWindow or document.defaultView is accessed.
	  doc.createWindow = function() {
	    // Remove ourself
	    if (doc.createWindow) {
	      delete doc.createWindow;
	    }
	    return doc.parentWindow;
	  };
	
	  return doc;
	};
	
	exports.html = function(html, level, options) {
	  html += '';
	
	  // TODO: cache a regex and use it here instead
	  //       or make the parser handle it
	  var htmlLowered = html.toLowerCase();
	
	  // body
	  if (!~htmlLowered.indexOf('<body')) {
	    html = '<body>' + html + '</body>';
	  }
	
	  // html
	  if (!~htmlLowered.indexOf('<html')) {
	    html = '<html>' + html + '</html>';
	  }
	  return exports.jsdom(html, level, options);
	};
	
	exports.jQueryify = exports.jsdom.jQueryify = function (window /* path [optional], callback */) {
	
	  if (!window || !window.document) { return; }
	
	  var args = Array.prototype.slice.call(arguments),
	      callback = (typeof(args[args.length - 1]) === 'function') && args.pop(),
	      path,
	      jQueryTag = window.document.createElement("script");
	      jQueryTag.className = "jsdom";
	
	  if (args.length > 1 && typeof(args[1] === 'string')) {
	    path = args[1];
	  }
	
	  var features = window.document.implementation._features;
	
	  window.document.implementation.addFeature('FetchExternalResources', ['script']);
	  window.document.implementation.addFeature('ProcessExternalResources', ['script']);
	  window.document.implementation.addFeature('MutationEvents', ["1.0"]);
	  jQueryTag.src = path || 'http://code.jquery.com/jquery-latest.js';
	  window.document.body.appendChild(jQueryTag);
	
	  jQueryTag.onload = function() {
	    if (callback) {
	      callback(window, window.jQuery);
	    }
	
	    window.document.implementation._features = features;
	  };
	
	  return window;
	};
	
	
	exports.env = exports.jsdom.env = function() {
	  var
	  args        = Array.prototype.slice.call(arguments),
	  config      = exports.env.processArguments(args),
	  callback    = config.done,
	  processHTML = function(err, html) {
	
	    html += '';
	    if(err) {
	      return callback(err);
	    }
	
	    config.scripts = config.scripts || [];
	    if (typeof config.scripts === 'string') {
	      config.scripts = [config.scripts];
	    }
	
	    config.src = config.src || [];
	    if (typeof config.src === 'string') {
	      config.src = [config.src];
	    }
	
	    var
	    options    = {
	      features: config.features || {
	        'FetchExternalResources' : false,
	        'ProcessExternalResources' : false,
	        'SkipExternalResources' : false
	      },
	      url: config.url
	    },
	    window     = exports.html(html, null, options).createWindow(),
	    features   = JSON.parse(JSON.stringify(window.document.implementation._features)),
	    docsLoaded = 0,
	    totalDocs  = config.scripts.length + config.src.length,
	    readyState = null,
	    errors     = null;
	
	    if (!window || !window.document) {
	      return callback(new Error('JSDOM: a window object could not be created.'));
	    }
	
	    if( config.document ) {
	      window.document._referrer = config.document.referrer;
	      window.document._cookie = config.document.cookie;
	    }
	
	    window.document.implementation.addFeature('FetchExternalResources', ['script']);
	    window.document.implementation.addFeature('ProcessExternalResources', ['script']);
	    window.document.implementation.addFeature('MutationEvents', ['1.0']);
	
	    var scriptComplete = function() {
	      docsLoaded++;
	      if (docsLoaded >= totalDocs) {
	        window.document.implementation._features = features;
	
	        if (errors) {
	          errors = errors.concat(window.document.errors || []);
	        }
	
	        process.nextTick(function() { callback(errors, window); });
	      }
	    }
	
	    if (config.scripts.length > 0 || config.src.length > 0) {
	      config.scripts.forEach(function(src) {
	        var script = window.document.createElement('script');
	        script.className = "jsdom";
	        script.onload = function() {
	          scriptComplete()
	        };
	
	        script.onerror = function(e) {
	          if (!errors) {
	            errors = [];
	          }
	          errors.push(e.error);
	          scriptComplete();
	        };
	
	        script.src = src;
	        try {
	          // project against invalid dom
	          // ex: http://www.google.com/foo#bar
	          window.document.documentElement.appendChild(script);
	        } catch(e) {
	          if(!errors) {
	            errors=[];
	          }
	          errors.push(e.error || e.message);
	          scriptComplete();
	        }
	      });
	
	      config.src.forEach(function(src) {
	        var script = window.document.createElement('script');
	        script.onload = function() {
	          process.nextTick(scriptComplete);
	        };
	
	        script.onerror = function(e) {
	          if (!errors) {
	            errors = [];
	          }
	          errors.push(e.error || e.message);
	          // nextTick so that an exception within scriptComplete won't cause
	          // another script onerror (which would be an infinite loop)
	          process.nextTick(scriptComplete);
	        };
	
	        script.text = src;
	        window.document.documentElement.appendChild(script);
	        window.document.documentElement.removeChild(script);
	      });
	    } else {
	      scriptComplete();
	    }
	  };
	
	  config.html += '';
	
	  // Handle markup
	  if (config.html.indexOf("\n") > 0 || config.html.match(/^\W*</)) {
	    processHTML(null, config.html);
	
	  // Handle url/file
	  } else {
	    var url = URL.parse(config.html);
	    config.url = config.url || url.href;
	    if (url.hostname) {
	      request({
	        uri      : url,
	        encoding : config.encoding || 'utf8',
	        headers  : config.headers || {},
	        proxy    : config.proxy || null
	      },
	      function(err, request, body) {
	        processHTML(err, body);
	      });
	    } else {
	      fs.readFile(config.html, processHTML);
	    }
	  }
	};
	
	/*
	  Since jsdom.env() is a helper for quickly and easily setting up a
	  window with scripts and such already loaded into it, the arguments
	  should be fairly flexible.  Here are the requirements
	
	  1) collect `html` (url, string, or file on disk)  (STRING)
	  2) load `code` into the window (array of scripts) (ARRAY)
	  3) callback when resources are `done`             (FUNCTION)
	  4) configuration                                  (OBJECT)
	
	  Rules:
	  + if there is one argument it had better be an object with atleast
	    a `html` and `done` property (other properties are gravy)
	
	  + arguments above are pulled out of the arguments and put into the
	    config object that is returned
	*/
	exports.env.processArguments = function(args) {
	  if (!args || !args.length || args.length < 1) {
	    throw new Error('No arguments passed to jsdom.env().');
	  }
	
	  var
	  props = {
	    'html'    : true,
	    'done'    : true,
	    'scripts' : false,
	    'config'  : false,
	    'url'     : false,  // the URL for location.href if different from html
	    'document': false   // HTMLDocument properties
	  },
	  propKeys = Object.keys(props),
	  config = {
	    code : []
	  },
	  l    = args.length
	  ;
	  if (l === 1) {
	    config = args[0];
	  } else {
	    args.forEach(function(v) {
	      var type = typeof v;
	      if (!v) {
	        return;
	      }
	      if (type === 'string' || v + '' === v) {
	        config.html = v;
	      } else if (type === 'object') {
	        // Array
	        if (v.length && v[0]) {
	          config.scripts = v;
	        } else {
	          // apply missing required properties if appropriate
	          propKeys.forEach(function(req) {
	
	            if (typeof v[req] !== 'undefined' &&
	                typeof config[req] === 'undefined') {
	
	              config[req] = v[req];
	              delete v[req];
	            }
	          });
	          config.config = v;
	        }
	      } else if (type === 'function') {
	        config.done = v;
	      }
	    });
	  }
	
	  propKeys.forEach(function(req) {
	    var required = props[req];
	    if (required && typeof config[req] === 'undefined') {
	      throw new Error("jsdom.env requires a '" + req + "' argument");
	    }
	  });
	  return config;
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, "/", __webpack_require__(31)(module), __webpack_require__(14)))

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {



/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	(function () {
	  "use strict";
	
	  var fs = __webpack_require__(22)
	    , location
	    , defaultLocation
	    ;
	
	  defaultLocation = {
	    "origin": "http://localhost:3000",
	    "pathname": "/",
	    "host": "localhost:3000",
	    "hostname": "localhost",
	    "port": "3000",
	    "search": "",
	    "hash": "#home",
	    "href": "http://localhost:3000/#home",
	    "protocol": "http:"
	  };
	
	  try {
	    location = fs.readFileSync('./location.config.js');
	  } catch(e) {
	    location = defaultLocation;
	  }
	
	  module.exports = location;
	}());


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	exports.attach = function(Handlebars) {
	
	// BEGIN(BROWSER)
	
	Handlebars.Visitor = function() {};
	
	Handlebars.Visitor.prototype = {
	  accept: function(object) {
	    return this[object.type](object);
	  }
	};
	
	// END(BROWSER)
	
	return Handlebars;
	};
	
	


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	exports.attach = function(Handlebars) {
	
	// BEGIN(BROWSER)
	
	Handlebars.print = function(ast) {
	  return new Handlebars.PrintVisitor().accept(ast);
	};
	
	Handlebars.PrintVisitor = function() { this.padding = 0; };
	Handlebars.PrintVisitor.prototype = new Handlebars.Visitor();
	
	Handlebars.PrintVisitor.prototype.pad = function(string, newline) {
	  var out = "";
	
	  for(var i=0,l=this.padding; i<l; i++) {
	    out = out + "  ";
	  }
	
	  out = out + string;
	
	  if(newline !== false) { out = out + "\n"; }
	  return out;
	};
	
	Handlebars.PrintVisitor.prototype.program = function(program) {
	  var out = "",
	      statements = program.statements,
	      inverse = program.inverse,
	      i, l;
	
	  for(i=0, l=statements.length; i<l; i++) {
	    out = out + this.accept(statements[i]);
	  }
	
	  this.padding--;
	
	  return out;
	};
	
	Handlebars.PrintVisitor.prototype.block = function(block) {
	  var out = "";
	
	  out = out + this.pad("BLOCK:");
	  this.padding++;
	  out = out + this.accept(block.mustache);
	  if (block.program) {
	    out = out + this.pad("PROGRAM:");
	    this.padding++;
	    out = out + this.accept(block.program);
	    this.padding--;
	  }
	  if (block.inverse) {
	    if (block.program) { this.padding++; }
	    out = out + this.pad("{{^}}");
	    this.padding++;
	    out = out + this.accept(block.inverse);
	    this.padding--;
	    if (block.program) { this.padding--; }
	  }
	  this.padding--;
	
	  return out;
	};
	
	Handlebars.PrintVisitor.prototype.mustache = function(mustache) {
	  var params = mustache.params, paramStrings = [], hash;
	
	  for(var i=0, l=params.length; i<l; i++) {
	    paramStrings.push(this.accept(params[i]));
	  }
	
	  params = "[" + paramStrings.join(", ") + "]";
	
	  hash = mustache.hash ? " " + this.accept(mustache.hash) : "";
	
	  return this.pad("{{ " + this.accept(mustache.id) + " " + params + hash + " }}");
	};
	
	Handlebars.PrintVisitor.prototype.partial = function(partial) {
	  var content = this.accept(partial.partialName);
	  if(partial.context) { content = content + " " + this.accept(partial.context); }
	  return this.pad("{{> " + content + " }}");
	};
	
	Handlebars.PrintVisitor.prototype.hash = function(hash) {
	  var pairs = hash.pairs;
	  var joinedPairs = [], left, right;
	
	  for(var i=0, l=pairs.length; i<l; i++) {
	    left = pairs[i][0];
	    right = this.accept(pairs[i][1]);
	    joinedPairs.push( left + "=" + right );
	  }
	
	  return "HASH{" + joinedPairs.join(", ") + "}";
	};
	
	Handlebars.PrintVisitor.prototype.STRING = function(string) {
	  return '"' + string.string + '"';
	};
	
	Handlebars.PrintVisitor.prototype.INTEGER = function(integer) {
	  return "INTEGER{" + integer.integer + "}";
	};
	
	Handlebars.PrintVisitor.prototype.BOOLEAN = function(bool) {
	  return "BOOLEAN{" + bool.bool + "}";
	};
	
	Handlebars.PrintVisitor.prototype.ID = function(id) {
	  var path = id.parts.join("/");
	  if(id.parts.length > 1) {
	    return "PATH:" + path;
	  } else {
	    return "ID:" + path;
	  }
	};
	
	Handlebars.PrintVisitor.prototype.PARTIAL_NAME = function(partialName) {
	    return "PARTIAL:" + partialName.name;
	};
	
	Handlebars.PrintVisitor.prototype.DATA = function(data) {
	  return "@" + this.accept(data.id);
	};
	
	Handlebars.PrintVisitor.prototype.content = function(content) {
	  return this.pad("CONTENT[ '" + content.string + "' ]");
	};
	
	Handlebars.PrintVisitor.prototype.comment = function(comment) {
	  return this.pad("{{! '" + comment.comment + "' }}");
	};
	// END(BROWSER)
	
	return Handlebars;
	};
	


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	exports.attach = function(Handlebars) {
	
	// BEGIN(BROWSER)
	Handlebars.AST = {};
	
	Handlebars.AST.ProgramNode = function(statements, inverse) {
	  this.type = "program";
	  this.statements = statements;
	  if(inverse) { this.inverse = new Handlebars.AST.ProgramNode(inverse); }
	};
	
	Handlebars.AST.MustacheNode = function(rawParams, hash, unescaped) {
	  this.type = "mustache";
	  this.escaped = !unescaped;
	  this.hash = hash;
	
	  var id = this.id = rawParams[0];
	  var params = this.params = rawParams.slice(1);
	
	  // a mustache is an eligible helper if:
	  // * its id is simple (a single part, not `this` or `..`)
	  var eligibleHelper = this.eligibleHelper = id.isSimple;
	
	  // a mustache is definitely a helper if:
	  // * it is an eligible helper, and
	  // * it has at least one parameter or hash segment
	  this.isHelper = eligibleHelper && (params.length || hash);
	
	  // if a mustache is an eligible helper but not a definite
	  // helper, it is ambiguous, and will be resolved in a later
	  // pass or at runtime.
	};
	
	Handlebars.AST.PartialNode = function(partialName, context) {
	  this.type         = "partial";
	  this.partialName  = partialName;
	  this.context      = context;
	};
	
	Handlebars.AST.BlockNode = function(mustache, program, inverse, close) {
	  var verifyMatch = function(open, close) {
	    if(open.original !== close.original) {
	      throw new Handlebars.Exception(open.original + " doesn't match " + close.original);
	    }
	  };
	
	  verifyMatch(mustache.id, close);
	  this.type = "block";
	  this.mustache = mustache;
	  this.program  = program;
	  this.inverse  = inverse;
	
	  if (this.inverse && !this.program) {
	    this.isInverse = true;
	  }
	};
	
	Handlebars.AST.ContentNode = function(string) {
	  this.type = "content";
	  this.string = string;
	};
	
	Handlebars.AST.HashNode = function(pairs) {
	  this.type = "hash";
	  this.pairs = pairs;
	};
	
	Handlebars.AST.IdNode = function(parts) {
	  this.type = "ID";
	
	  var original = "",
	      dig = [],
	      depth = 0;
	
	  for(var i=0,l=parts.length; i<l; i++) {
	    var part = parts[i].part;
	    original += (parts[i].separator || '') + part;
	
	    if (part === ".." || part === "." || part === "this") {
	      if (dig.length > 0) { throw new Handlebars.Exception("Invalid path: " + original); }
	      else if (part === "..") { depth++; }
	      else { this.isScoped = true; }
	    }
	    else { dig.push(part); }
	  }
	
	  this.original = original;
	  this.parts    = dig;
	  this.string   = dig.join('.');
	  this.depth    = depth;
	
	  // an ID is simple if it only has one part, and that part is not
	  // `..` or `this`.
	  this.isSimple = parts.length === 1 && !this.isScoped && depth === 0;
	
	  this.stringModeValue = this.string;
	};
	
	Handlebars.AST.PartialNameNode = function(name) {
	  this.type = "PARTIAL_NAME";
	  this.name = name.original;
	};
	
	Handlebars.AST.DataNode = function(id) {
	  this.type = "DATA";
	  this.id = id;
	};
	
	Handlebars.AST.StringNode = function(string) {
	  this.type = "STRING";
	  this.original =
	    this.string =
	    this.stringModeValue = string;
	};
	
	Handlebars.AST.IntegerNode = function(integer) {
	  this.type = "INTEGER";
	  this.original =
	    this.integer = integer;
	  this.stringModeValue = Number(integer);
	};
	
	Handlebars.AST.BooleanNode = function(bool) {
	  this.type = "BOOLEAN";
	  this.bool = bool;
	  this.stringModeValue = bool === "true";
	};
	
	Handlebars.AST.CommentNode = function(comment) {
	  this.type = "comment";
	  this.comment = comment;
	};
	
	// END(BROWSER)
	
	return Handlebars;
	};
	


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	var compilerbase = __webpack_require__(37);
	
	exports.attach = function(Handlebars) {
	
	compilerbase.attach(Handlebars);
	
	// BEGIN(BROWSER)
	
	/*jshint eqnull:true*/
	var Compiler = Handlebars.Compiler = function() {};
	var JavaScriptCompiler = Handlebars.JavaScriptCompiler = function() {};
	
	// the foundHelper register will disambiguate helper lookup from finding a
	// function in a context. This is necessary for mustache compatibility, which
	// requires that context functions in blocks are evaluated by blockHelperMissing,
	// and then proceed as if the resulting value was provided to blockHelperMissing.
	
	Compiler.prototype = {
	  compiler: Compiler,
	
	  disassemble: function() {
	    var opcodes = this.opcodes, opcode, out = [], params, param;
	
	    for (var i=0, l=opcodes.length; i<l; i++) {
	      opcode = opcodes[i];
	
	      if (opcode.opcode === 'DECLARE') {
	        out.push("DECLARE " + opcode.name + "=" + opcode.value);
	      } else {
	        params = [];
	        for (var j=0; j<opcode.args.length; j++) {
	          param = opcode.args[j];
	          if (typeof param === "string") {
	            param = "\"" + param.replace("\n", "\\n") + "\"";
	          }
	          params.push(param);
	        }
	        out.push(opcode.opcode + " " + params.join(" "));
	      }
	    }
	
	    return out.join("\n");
	  },
	  equals: function(other) {
	    var len = this.opcodes.length;
	    if (other.opcodes.length !== len) {
	      return false;
	    }
	
	    for (var i = 0; i < len; i++) {
	      var opcode = this.opcodes[i],
	          otherOpcode = other.opcodes[i];
	      if (opcode.opcode !== otherOpcode.opcode || opcode.args.length !== otherOpcode.args.length) {
	        return false;
	      }
	      for (var j = 0; j < opcode.args.length; j++) {
	        if (opcode.args[j] !== otherOpcode.args[j]) {
	          return false;
	        }
	      }
	    }
	
	    len = this.children.length;
	    if (other.children.length !== len) {
	      return false;
	    }
	    for (i = 0; i < len; i++) {
	      if (!this.children[i].equals(other.children[i])) {
	        return false;
	      }
	    }
	
	    return true;
	  },
	
	  guid: 0,
	
	  compile: function(program, options) {
	    this.children = [];
	    this.depths = {list: []};
	    this.options = options;
	
	    // These changes will propagate to the other compiler components
	    var knownHelpers = this.options.knownHelpers;
	    this.options.knownHelpers = {
	      'helperMissing': true,
	      'blockHelperMissing': true,
	      'each': true,
	      'if': true,
	      'unless': true,
	      'with': true,
	      'log': true
	    };
	    if (knownHelpers) {
	      for (var name in knownHelpers) {
	        this.options.knownHelpers[name] = knownHelpers[name];
	      }
	    }
	
	    return this.program(program);
	  },
	
	  accept: function(node) {
	    return this[node.type](node);
	  },
	
	  program: function(program) {
	    var statements = program.statements, statement;
	    this.opcodes = [];
	
	    for(var i=0, l=statements.length; i<l; i++) {
	      statement = statements[i];
	      this[statement.type](statement);
	    }
	    this.isSimple = l === 1;
	
	    this.depths.list = this.depths.list.sort(function(a, b) {
	      return a - b;
	    });
	
	    return this;
	  },
	
	  compileProgram: function(program) {
	    var result = new this.compiler().compile(program, this.options);
	    var guid = this.guid++, depth;
	
	    this.usePartial = this.usePartial || result.usePartial;
	
	    this.children[guid] = result;
	
	    for(var i=0, l=result.depths.list.length; i<l; i++) {
	      depth = result.depths.list[i];
	
	      if(depth < 2) { continue; }
	      else { this.addDepth(depth - 1); }
	    }
	
	    return guid;
	  },
	
	  block: function(block) {
	    var mustache = block.mustache,
	        program = block.program,
	        inverse = block.inverse;
	
	    if (program) {
	      program = this.compileProgram(program);
	    }
	
	    if (inverse) {
	      inverse = this.compileProgram(inverse);
	    }
	
	    var type = this.classifyMustache(mustache);
	
	    if (type === "helper") {
	      this.helperMustache(mustache, program, inverse);
	    } else if (type === "simple") {
	      this.simpleMustache(mustache);
	
	      // now that the simple mustache is resolved, we need to
	      // evaluate it by executing `blockHelperMissing`
	      this.opcode('pushProgram', program);
	      this.opcode('pushProgram', inverse);
	      this.opcode('emptyHash');
	      this.opcode('blockValue');
	    } else {
	      this.ambiguousMustache(mustache, program, inverse);
	
	      // now that the simple mustache is resolved, we need to
	      // evaluate it by executing `blockHelperMissing`
	      this.opcode('pushProgram', program);
	      this.opcode('pushProgram', inverse);
	      this.opcode('emptyHash');
	      this.opcode('ambiguousBlockValue');
	    }
	
	    this.opcode('append');
	  },
	
	  hash: function(hash) {
	    var pairs = hash.pairs, pair, val;
	
	    this.opcode('pushHash');
	
	    for(var i=0, l=pairs.length; i<l; i++) {
	      pair = pairs[i];
	      val  = pair[1];
	
	      if (this.options.stringParams) {
	        if(val.depth) {
	          this.addDepth(val.depth);
	        }
	        this.opcode('getContext', val.depth || 0);
	        this.opcode('pushStringParam', val.stringModeValue, val.type);
	      } else {
	        this.accept(val);
	      }
	
	      this.opcode('assignToHash', pair[0]);
	    }
	    this.opcode('popHash');
	  },
	
	  partial: function(partial) {
	    var partialName = partial.partialName;
	    this.usePartial = true;
	
	    if(partial.context) {
	      this.ID(partial.context);
	    } else {
	      this.opcode('push', 'depth0');
	    }
	
	    this.opcode('invokePartial', partialName.name);
	    this.opcode('append');
	  },
	
	  content: function(content) {
	    this.opcode('appendContent', content.string);
	  },
	
	  mustache: function(mustache) {
	    var options = this.options;
	    var type = this.classifyMustache(mustache);
	
	    if (type === "simple") {
	      this.simpleMustache(mustache);
	    } else if (type === "helper") {
	      this.helperMustache(mustache);
	    } else {
	      this.ambiguousMustache(mustache);
	    }
	
	    if(mustache.escaped && !options.noEscape) {
	      this.opcode('appendEscaped');
	    } else {
	      this.opcode('append');
	    }
	  },
	
	  ambiguousMustache: function(mustache, program, inverse) {
	    var id = mustache.id,
	        name = id.parts[0],
	        isBlock = program != null || inverse != null;
	
	    this.opcode('getContext', id.depth);
	
	    this.opcode('pushProgram', program);
	    this.opcode('pushProgram', inverse);
	
	    this.opcode('invokeAmbiguous', name, isBlock);
	  },
	
	  simpleMustache: function(mustache) {
	    var id = mustache.id;
	
	    if (id.type === 'DATA') {
	      this.DATA(id);
	    } else if (id.parts.length) {
	      this.ID(id);
	    } else {
	      // Simplified ID for `this`
	      this.addDepth(id.depth);
	      this.opcode('getContext', id.depth);
	      this.opcode('pushContext');
	    }
	
	    this.opcode('resolvePossibleLambda');
	  },
	
	  helperMustache: function(mustache, program, inverse) {
	    var params = this.setupFullMustacheParams(mustache, program, inverse),
	        name = mustache.id.parts[0];
	
	    if (this.options.knownHelpers[name]) {
	      this.opcode('invokeKnownHelper', params.length, name);
	    } else if (this.options.knownHelpersOnly) {
	      throw new Error("You specified knownHelpersOnly, but used the unknown helper " + name);
	    } else {
	      this.opcode('invokeHelper', params.length, name);
	    }
	  },
	
	  ID: function(id) {
	    this.addDepth(id.depth);
	    this.opcode('getContext', id.depth);
	
	    var name = id.parts[0];
	    if (!name) {
	      this.opcode('pushContext');
	    } else {
	      this.opcode('lookupOnContext', id.parts[0]);
	    }
	
	    for(var i=1, l=id.parts.length; i<l; i++) {
	      this.opcode('lookup', id.parts[i]);
	    }
	  },
	
	  DATA: function(data) {
	    this.options.data = true;
	    if (data.id.isScoped || data.id.depth) {
	      throw new Handlebars.Exception('Scoped data references are not supported: ' + data.original);
	    }
	
	    this.opcode('lookupData');
	    var parts = data.id.parts;
	    for(var i=0, l=parts.length; i<l; i++) {
	      this.opcode('lookup', parts[i]);
	    }
	  },
	
	  STRING: function(string) {
	    this.opcode('pushString', string.string);
	  },
	
	  INTEGER: function(integer) {
	    this.opcode('pushLiteral', integer.integer);
	  },
	
	  BOOLEAN: function(bool) {
	    this.opcode('pushLiteral', bool.bool);
	  },
	
	  comment: function() {},
	
	  // HELPERS
	  opcode: function(name) {
	    this.opcodes.push({ opcode: name, args: [].slice.call(arguments, 1) });
	  },
	
	  declare: function(name, value) {
	    this.opcodes.push({ opcode: 'DECLARE', name: name, value: value });
	  },
	
	  addDepth: function(depth) {
	    if(isNaN(depth)) { throw new Error("EWOT"); }
	    if(depth === 0) { return; }
	
	    if(!this.depths[depth]) {
	      this.depths[depth] = true;
	      this.depths.list.push(depth);
	    }
	  },
	
	  classifyMustache: function(mustache) {
	    var isHelper   = mustache.isHelper;
	    var isEligible = mustache.eligibleHelper;
	    var options    = this.options;
	
	    // if ambiguous, we can possibly resolve the ambiguity now
	    if (isEligible && !isHelper) {
	      var name = mustache.id.parts[0];
	
	      if (options.knownHelpers[name]) {
	        isHelper = true;
	      } else if (options.knownHelpersOnly) {
	        isEligible = false;
	      }
	    }
	
	    if (isHelper) { return "helper"; }
	    else if (isEligible) { return "ambiguous"; }
	    else { return "simple"; }
	  },
	
	  pushParams: function(params) {
	    var i = params.length, param;
	
	    while(i--) {
	      param = params[i];
	
	      if(this.options.stringParams) {
	        if(param.depth) {
	          this.addDepth(param.depth);
	        }
	
	        this.opcode('getContext', param.depth || 0);
	        this.opcode('pushStringParam', param.stringModeValue, param.type);
	      } else {
	        this[param.type](param);
	      }
	    }
	  },
	
	  setupMustacheParams: function(mustache) {
	    var params = mustache.params;
	    this.pushParams(params);
	
	    if(mustache.hash) {
	      this.hash(mustache.hash);
	    } else {
	      this.opcode('emptyHash');
	    }
	
	    return params;
	  },
	
	  // this will replace setupMustacheParams when we're done
	  setupFullMustacheParams: function(mustache, program, inverse) {
	    var params = mustache.params;
	    this.pushParams(params);
	
	    this.opcode('pushProgram', program);
	    this.opcode('pushProgram', inverse);
	
	    if(mustache.hash) {
	      this.hash(mustache.hash);
	    } else {
	      this.opcode('emptyHash');
	    }
	
	    return params;
	  }
	};
	
	var Literal = function(value) {
	  this.value = value;
	};
	
	JavaScriptCompiler.prototype = {
	  // PUBLIC API: You can override these methods in a subclass to provide
	  // alternative compiled forms for name lookup and buffering semantics
	  nameLookup: function(parent, name /* , type*/) {
	    if (/^[0-9]+$/.test(name)) {
	      return parent + "[" + name + "]";
	    } else if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
	      return parent + "." + name;
	    }
	    else {
	      return parent + "['" + name + "']";
	    }
	  },
	
	  appendToBuffer: function(string) {
	    if (this.environment.isSimple) {
	      return "return " + string + ";";
	    } else {
	      return {
	        appendToBuffer: true,
	        content: string,
	        toString: function() { return "buffer += " + string + ";"; }
	      };
	    }
	  },
	
	  initializeBuffer: function() {
	    return this.quotedString("");
	  },
	
	  namespace: "Handlebars",
	  // END PUBLIC API
	
	  compile: function(environment, options, context, asObject) {
	    this.environment = environment;
	    this.options = options || {};
	
	    Handlebars.log(Handlebars.logger.DEBUG, this.environment.disassemble() + "\n\n");
	
	    this.name = this.environment.name;
	    this.isChild = !!context;
	    this.context = context || {
	      programs: [],
	      environments: [],
	      aliases: { }
	    };
	
	    this.preamble();
	
	    this.stackSlot = 0;
	    this.stackVars = [];
	    this.registers = { list: [] };
	    this.compileStack = [];
	    this.inlineStack = [];
	
	    this.compileChildren(environment, options);
	
	    var opcodes = environment.opcodes, opcode;
	
	    this.i = 0;
	
	    for(l=opcodes.length; this.i<l; this.i++) {
	      opcode = opcodes[this.i];
	
	      if(opcode.opcode === 'DECLARE') {
	        this[opcode.name] = opcode.value;
	      } else {
	        this[opcode.opcode].apply(this, opcode.args);
	      }
	    }
	
	    return this.createFunctionContext(asObject);
	  },
	
	  nextOpcode: function() {
	    var opcodes = this.environment.opcodes;
	    return opcodes[this.i + 1];
	  },
	
	  eat: function() {
	    this.i = this.i + 1;
	  },
	
	  preamble: function() {
	    var out = [];
	
	    if (!this.isChild) {
	      var namespace = this.namespace;
	
	      var copies = "helpers = this.merge(helpers, " + namespace + ".helpers);";
	      if (this.environment.usePartial) { copies = copies + " partials = this.merge(partials, " + namespace + ".partials);"; }
	      if (this.options.data) { copies = copies + " data = data || {};"; }
	      out.push(copies);
	    } else {
	      out.push('');
	    }
	
	    if (!this.environment.isSimple) {
	      out.push(", buffer = " + this.initializeBuffer());
	    } else {
	      out.push("");
	    }
	
	    // track the last context pushed into place to allow skipping the
	    // getContext opcode when it would be a noop
	    this.lastContext = 0;
	    this.source = out;
	  },
	
	  createFunctionContext: function(asObject) {
	    var locals = this.stackVars.concat(this.registers.list);
	
	    if(locals.length > 0) {
	      this.source[1] = this.source[1] + ", " + locals.join(", ");
	    }
	
	    // Generate minimizer alias mappings
	    if (!this.isChild) {
	      for (var alias in this.context.aliases) {
	        if (this.context.aliases.hasOwnProperty(alias)) {
	          this.source[1] = this.source[1] + ', ' + alias + '=' + this.context.aliases[alias];
	        }
	      }
	    }
	
	    if (this.source[1]) {
	      this.source[1] = "var " + this.source[1].substring(2) + ";";
	    }
	
	    // Merge children
	    if (!this.isChild) {
	      this.source[1] += '\n' + this.context.programs.join('\n') + '\n';
	    }
	
	    if (!this.environment.isSimple) {
	      this.source.push("return buffer;");
	    }
	
	    var params = this.isChild ? ["depth0", "data"] : ["Handlebars", "depth0", "helpers", "partials", "data"];
	
	    for(var i=0, l=this.environment.depths.list.length; i<l; i++) {
	      params.push("depth" + this.environment.depths.list[i]);
	    }
	
	    // Perform a second pass over the output to merge content when possible
	    var source = this.mergeSource();
	
	    if (!this.isChild) {
	      var revision = Handlebars.COMPILER_REVISION,
	          versions = Handlebars.REVISION_CHANGES[revision];
	      source = "this.compilerInfo = ["+revision+",'"+versions+"'];\n"+source;
	    }
	
	    if (asObject) {
	      params.push(source);
	
	      return Function.apply(this, params);
	    } else {
	      var functionSource = 'function ' + (this.name || '') + '(' + params.join(',') + ') {\n  ' + source + '}';
	      Handlebars.log(Handlebars.logger.DEBUG, functionSource + "\n\n");
	      return functionSource;
	    }
	  },
	  mergeSource: function() {
	    // WARN: We are not handling the case where buffer is still populated as the source should
	    // not have buffer append operations as their final action.
	    var source = '',
	        buffer;
	    for (var i = 0, len = this.source.length; i < len; i++) {
	      var line = this.source[i];
	      if (line.appendToBuffer) {
	        if (buffer) {
	          buffer = buffer + '\n    + ' + line.content;
	        } else {
	          buffer = line.content;
	        }
	      } else {
	        if (buffer) {
	          source += 'buffer += ' + buffer + ';\n  ';
	          buffer = undefined;
	        }
	        source += line + '\n  ';
	      }
	    }
	    return source;
	  },
	
	  // [blockValue]
	  //
	  // On stack, before: hash, inverse, program, value
	  // On stack, after: return value of blockHelperMissing
	  //
	  // The purpose of this opcode is to take a block of the form
	  // `{{#foo}}...{{/foo}}`, resolve the value of `foo`, and
	  // replace it on the stack with the result of properly
	  // invoking blockHelperMissing.
	  blockValue: function() {
	    this.context.aliases.blockHelperMissing = 'helpers.blockHelperMissing';
	
	    var params = ["depth0"];
	    this.setupParams(0, params);
	
	    this.replaceStack(function(current) {
	      params.splice(1, 0, current);
	      return "blockHelperMissing.call(" + params.join(", ") + ")";
	    });
	  },
	
	  // [ambiguousBlockValue]
	  //
	  // On stack, before: hash, inverse, program, value
	  // Compiler value, before: lastHelper=value of last found helper, if any
	  // On stack, after, if no lastHelper: same as [blockValue]
	  // On stack, after, if lastHelper: value
	  ambiguousBlockValue: function() {
	    this.context.aliases.blockHelperMissing = 'helpers.blockHelperMissing';
	
	    var params = ["depth0"];
	    this.setupParams(0, params);
	
	    var current = this.topStack();
	    params.splice(1, 0, current);
	
	    // Use the options value generated from the invocation
	    params[params.length-1] = 'options';
	
	    this.source.push("if (!" + this.lastHelper + ") { " + current + " = blockHelperMissing.call(" + params.join(", ") + "); }");
	  },
	
	  // [appendContent]
	  //
	  // On stack, before: ...
	  // On stack, after: ...
	  //
	  // Appends the string value of `content` to the current buffer
	  appendContent: function(content) {
	    this.source.push(this.appendToBuffer(this.quotedString(content)));
	  },
	
	  // [append]
	  //
	  // On stack, before: value, ...
	  // On stack, after: ...
	  //
	  // Coerces `value` to a String and appends it to the current buffer.
	  //
	  // If `value` is truthy, or 0, it is coerced into a string and appended
	  // Otherwise, the empty string is appended
	  append: function() {
	    // Force anything that is inlined onto the stack so we don't have duplication
	    // when we examine local
	    this.flushInline();
	    var local = this.popStack();
	    this.source.push("if(" + local + " || " + local + " === 0) { " + this.appendToBuffer(local) + " }");
	    if (this.environment.isSimple) {
	      this.source.push("else { " + this.appendToBuffer("''") + " }");
	    }
	  },
	
	  // [appendEscaped]
	  //
	  // On stack, before: value, ...
	  // On stack, after: ...
	  //
	  // Escape `value` and append it to the buffer
	  appendEscaped: function() {
	    this.context.aliases.escapeExpression = 'this.escapeExpression';
	
	    this.source.push(this.appendToBuffer("escapeExpression(" + this.popStack() + ")"));
	  },
	
	  // [getContext]
	  //
	  // On stack, before: ...
	  // On stack, after: ...
	  // Compiler value, after: lastContext=depth
	  //
	  // Set the value of the `lastContext` compiler value to the depth
	  getContext: function(depth) {
	    if(this.lastContext !== depth) {
	      this.lastContext = depth;
	    }
	  },
	
	  // [lookupOnContext]
	  //
	  // On stack, before: ...
	  // On stack, after: currentContext[name], ...
	  //
	  // Looks up the value of `name` on the current context and pushes
	  // it onto the stack.
	  lookupOnContext: function(name) {
	    this.push(this.nameLookup('depth' + this.lastContext, name, 'context'));
	  },
	
	  // [pushContext]
	  //
	  // On stack, before: ...
	  // On stack, after: currentContext, ...
	  //
	  // Pushes the value of the current context onto the stack.
	  pushContext: function() {
	    this.pushStackLiteral('depth' + this.lastContext);
	  },
	
	  // [resolvePossibleLambda]
	  //
	  // On stack, before: value, ...
	  // On stack, after: resolved value, ...
	  //
	  // If the `value` is a lambda, replace it on the stack by
	  // the return value of the lambda
	  resolvePossibleLambda: function() {
	    this.context.aliases.functionType = '"function"';
	
	    this.replaceStack(function(current) {
	      return "typeof " + current + " === functionType ? " + current + ".apply(depth0) : " + current;
	    });
	  },
	
	  // [lookup]
	  //
	  // On stack, before: value, ...
	  // On stack, after: value[name], ...
	  //
	  // Replace the value on the stack with the result of looking
	  // up `name` on `value`
	  lookup: function(name) {
	    this.replaceStack(function(current) {
	      return current + " == null || " + current + " === false ? " + current + " : " + this.nameLookup(current, name, 'context');
	    });
	  },
	
	  // [lookupData]
	  //
	  // On stack, before: ...
	  // On stack, after: data[id], ...
	  //
	  // Push the result of looking up `id` on the current data
	  lookupData: function(id) {
	    this.push('data');
	  },
	
	  // [pushStringParam]
	  //
	  // On stack, before: ...
	  // On stack, after: string, currentContext, ...
	  //
	  // This opcode is designed for use in string mode, which
	  // provides the string value of a parameter along with its
	  // depth rather than resolving it immediately.
	  pushStringParam: function(string, type) {
	    this.pushStackLiteral('depth' + this.lastContext);
	
	    this.pushString(type);
	
	    if (typeof string === 'string') {
	      this.pushString(string);
	    } else {
	      this.pushStackLiteral(string);
	    }
	  },
	
	  emptyHash: function() {
	    this.pushStackLiteral('{}');
	
	    if (this.options.stringParams) {
	      this.register('hashTypes', '{}');
	      this.register('hashContexts', '{}');
	    }
	  },
	  pushHash: function() {
	    this.hash = {values: [], types: [], contexts: []};
	  },
	  popHash: function() {
	    var hash = this.hash;
	    this.hash = undefined;
	
	    if (this.options.stringParams) {
	      this.register('hashContexts', '{' + hash.contexts.join(',') + '}');
	      this.register('hashTypes', '{' + hash.types.join(',') + '}');
	    }
	    this.push('{\n    ' + hash.values.join(',\n    ') + '\n  }');
	  },
	
	  // [pushString]
	  //
	  // On stack, before: ...
	  // On stack, after: quotedString(string), ...
	  //
	  // Push a quoted version of `string` onto the stack
	  pushString: function(string) {
	    this.pushStackLiteral(this.quotedString(string));
	  },
	
	  // [push]
	  //
	  // On stack, before: ...
	  // On stack, after: expr, ...
	  //
	  // Push an expression onto the stack
	  push: function(expr) {
	    this.inlineStack.push(expr);
	    return expr;
	  },
	
	  // [pushLiteral]
	  //
	  // On stack, before: ...
	  // On stack, after: value, ...
	  //
	  // Pushes a value onto the stack. This operation prevents
	  // the compiler from creating a temporary variable to hold
	  // it.
	  pushLiteral: function(value) {
	    this.pushStackLiteral(value);
	  },
	
	  // [pushProgram]
	  //
	  // On stack, before: ...
	  // On stack, after: program(guid), ...
	  //
	  // Push a program expression onto the stack. This takes
	  // a compile-time guid and converts it into a runtime-accessible
	  // expression.
	  pushProgram: function(guid) {
	    if (guid != null) {
	      this.pushStackLiteral(this.programExpression(guid));
	    } else {
	      this.pushStackLiteral(null);
	    }
	  },
	
	  // [invokeHelper]
	  //
	  // On stack, before: hash, inverse, program, params..., ...
	  // On stack, after: result of helper invocation
	  //
	  // Pops off the helper's parameters, invokes the helper,
	  // and pushes the helper's return value onto the stack.
	  //
	  // If the helper is not found, `helperMissing` is called.
	  invokeHelper: function(paramSize, name) {
	    this.context.aliases.helperMissing = 'helpers.helperMissing';
	
	    var helper = this.lastHelper = this.setupHelper(paramSize, name, true);
	    var nonHelper = this.nameLookup('depth' + this.lastContext, name, 'context');
	
	    this.push(helper.name + ' || ' + nonHelper);
	    this.replaceStack(function(name) {
	      return name + ' ? ' + name + '.call(' +
	          helper.callParams + ") " + ": helperMissing.call(" +
	          helper.helperMissingParams + ")";
	    });
	  },
	
	  // [invokeKnownHelper]
	  //
	  // On stack, before: hash, inverse, program, params..., ...
	  // On stack, after: result of helper invocation
	  //
	  // This operation is used when the helper is known to exist,
	  // so a `helperMissing` fallback is not required.
	  invokeKnownHelper: function(paramSize, name) {
	    var helper = this.setupHelper(paramSize, name);
	    this.push(helper.name + ".call(" + helper.callParams + ")");
	  },
	
	  // [invokeAmbiguous]
	  //
	  // On stack, before: hash, inverse, program, params..., ...
	  // On stack, after: result of disambiguation
	  //
	  // This operation is used when an expression like `{{foo}}`
	  // is provided, but we don't know at compile-time whether it
	  // is a helper or a path.
	  //
	  // This operation emits more code than the other options,
	  // and can be avoided by passing the `knownHelpers` and
	  // `knownHelpersOnly` flags at compile-time.
	  invokeAmbiguous: function(name, helperCall) {
	    this.context.aliases.functionType = '"function"';
	
	    this.pushStackLiteral('{}');    // Hash value
	    var helper = this.setupHelper(0, name, helperCall);
	
	    var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');
	
	    var nonHelper = this.nameLookup('depth' + this.lastContext, name, 'context');
	    var nextStack = this.nextStack();
	
	    this.source.push('if (' + nextStack + ' = ' + helperName + ') { ' + nextStack + ' = ' + nextStack + '.call(' + helper.callParams + '); }');
	    this.source.push('else { ' + nextStack + ' = ' + nonHelper + '; ' + nextStack + ' = typeof ' + nextStack + ' === functionType ? ' + nextStack + '.apply(depth0) : ' + nextStack + '; }');
	  },
	
	  // [invokePartial]
	  //
	  // On stack, before: context, ...
	  // On stack after: result of partial invocation
	  //
	  // This operation pops off a context, invokes a partial with that context,
	  // and pushes the result of the invocation back.
	  invokePartial: function(name) {
	    var params = [this.nameLookup('partials', name, 'partial'), "'" + name + "'", this.popStack(), "helpers", "partials"];
	
	    if (this.options.data) {
	      params.push("data");
	    }
	
	    this.context.aliases.self = "this";
	    this.push("self.invokePartial(" + params.join(", ") + ")");
	  },
	
	  // [assignToHash]
	  //
	  // On stack, before: value, hash, ...
	  // On stack, after: hash, ...
	  //
	  // Pops a value and hash off the stack, assigns `hash[key] = value`
	  // and pushes the hash back onto the stack.
	  assignToHash: function(key) {
	    var value = this.popStack(),
	        context,
	        type;
	
	    if (this.options.stringParams) {
	      type = this.popStack();
	      context = this.popStack();
	    }
	
	    var hash = this.hash;
	    if (context) {
	      hash.contexts.push("'" + key + "': " + context);
	    }
	    if (type) {
	      hash.types.push("'" + key + "': " + type);
	    }
	    hash.values.push("'" + key + "': (" + value + ")");
	  },
	
	  // HELPERS
	
	  compiler: JavaScriptCompiler,
	
	  compileChildren: function(environment, options) {
	    var children = environment.children, child, compiler;
	
	    for(var i=0, l=children.length; i<l; i++) {
	      child = children[i];
	      compiler = new this.compiler();
	
	      var index = this.matchExistingProgram(child);
	
	      if (index == null) {
	        this.context.programs.push('');     // Placeholder to prevent name conflicts for nested children
	        index = this.context.programs.length;
	        child.index = index;
	        child.name = 'program' + index;
	        this.context.programs[index] = compiler.compile(child, options, this.context);
	        this.context.environments[index] = child;
	      } else {
	        child.index = index;
	        child.name = 'program' + index;
	      }
	    }
	  },
	  matchExistingProgram: function(child) {
	    for (var i = 0, len = this.context.environments.length; i < len; i++) {
	      var environment = this.context.environments[i];
	      if (environment && environment.equals(child)) {
	        return i;
	      }
	    }
	  },
	
	  programExpression: function(guid) {
	    this.context.aliases.self = "this";
	
	    if(guid == null) {
	      return "self.noop";
	    }
	
	    var child = this.environment.children[guid],
	        depths = child.depths.list, depth;
	
	    var programParams = [child.index, child.name, "data"];
	
	    for(var i=0, l = depths.length; i<l; i++) {
	      depth = depths[i];
	
	      if(depth === 1) { programParams.push("depth0"); }
	      else { programParams.push("depth" + (depth - 1)); }
	    }
	
	    return (depths.length === 0 ? "self.program(" : "self.programWithDepth(") + programParams.join(", ") + ")";
	  },
	
	  register: function(name, val) {
	    this.useRegister(name);
	    this.source.push(name + " = " + val + ";");
	  },
	
	  useRegister: function(name) {
	    if(!this.registers[name]) {
	      this.registers[name] = true;
	      this.registers.list.push(name);
	    }
	  },
	
	  pushStackLiteral: function(item) {
	    return this.push(new Literal(item));
	  },
	
	  pushStack: function(item) {
	    this.flushInline();
	
	    var stack = this.incrStack();
	    if (item) {
	      this.source.push(stack + " = " + item + ";");
	    }
	    this.compileStack.push(stack);
	    return stack;
	  },
	
	  replaceStack: function(callback) {
	    var prefix = '',
	        inline = this.isInline(),
	        stack;
	
	    // If we are currently inline then we want to merge the inline statement into the
	    // replacement statement via ','
	    if (inline) {
	      var top = this.popStack(true);
	
	      if (top instanceof Literal) {
	        // Literals do not need to be inlined
	        stack = top.value;
	      } else {
	        // Get or create the current stack name for use by the inline
	        var name = this.stackSlot ? this.topStackName() : this.incrStack();
	
	        prefix = '(' + this.push(name) + ' = ' + top + '),';
	        stack = this.topStack();
	      }
	    } else {
	      stack = this.topStack();
	    }
	
	    var item = callback.call(this, stack);
	
	    if (inline) {
	      if (this.inlineStack.length || this.compileStack.length) {
	        this.popStack();
	      }
	      this.push('(' + prefix + item + ')');
	    } else {
	      // Prevent modification of the context depth variable. Through replaceStack
	      if (!/^stack/.test(stack)) {
	        stack = this.nextStack();
	      }
	
	      this.source.push(stack + " = (" + prefix + item + ");");
	    }
	    return stack;
	  },
	
	  nextStack: function() {
	    return this.pushStack();
	  },
	
	  incrStack: function() {
	    this.stackSlot++;
	    if(this.stackSlot > this.stackVars.length) { this.stackVars.push("stack" + this.stackSlot); }
	    return this.topStackName();
	  },
	  topStackName: function() {
	    return "stack" + this.stackSlot;
	  },
	  flushInline: function() {
	    var inlineStack = this.inlineStack;
	    if (inlineStack.length) {
	      this.inlineStack = [];
	      for (var i = 0, len = inlineStack.length; i < len; i++) {
	        var entry = inlineStack[i];
	        if (entry instanceof Literal) {
	          this.compileStack.push(entry);
	        } else {
	          this.pushStack(entry);
	        }
	      }
	    }
	  },
	  isInline: function() {
	    return this.inlineStack.length;
	  },
	
	  popStack: function(wrapped) {
	    var inline = this.isInline(),
	        item = (inline ? this.inlineStack : this.compileStack).pop();
	
	    if (!wrapped && (item instanceof Literal)) {
	      return item.value;
	    } else {
	      if (!inline) {
	        this.stackSlot--;
	      }
	      return item;
	    }
	  },
	
	  topStack: function(wrapped) {
	    var stack = (this.isInline() ? this.inlineStack : this.compileStack),
	        item = stack[stack.length - 1];
	
	    if (!wrapped && (item instanceof Literal)) {
	      return item.value;
	    } else {
	      return item;
	    }
	  },
	
	  quotedString: function(str) {
	    return '"' + str
	      .replace(/\\/g, '\\\\')
	      .replace(/"/g, '\\"')
	      .replace(/\n/g, '\\n')
	      .replace(/\r/g, '\\r')
	      .replace(/\u2028/g, '\\u2028')   // Per Ecma-262 7.3 + 7.8.4
	      .replace(/\u2029/g, '\\u2029') + '"';
	  },
	
	  setupHelper: function(paramSize, name, missingParams) {
	    var params = [];
	    this.setupParams(paramSize, params, missingParams);
	    var foundHelper = this.nameLookup('helpers', name, 'helper');
	
	    return {
	      params: params,
	      name: foundHelper,
	      callParams: ["depth0"].concat(params).join(", "),
	      helperMissingParams: missingParams && ["depth0", this.quotedString(name)].concat(params).join(", ")
	    };
	  },
	
	  // the params and contexts arguments are passed in arrays
	  // to fill in
	  setupParams: function(paramSize, params, useRegister) {
	    var options = [], contexts = [], types = [], param, inverse, program;
	
	    options.push("hash:" + this.popStack());
	
	    inverse = this.popStack();
	    program = this.popStack();
	
	    // Avoid setting fn and inverse if neither are set. This allows
	    // helpers to do a check for `if (options.fn)`
	    if (program || inverse) {
	      if (!program) {
	        this.context.aliases.self = "this";
	        program = "self.noop";
	      }
	
	      if (!inverse) {
	       this.context.aliases.self = "this";
	        inverse = "self.noop";
	      }
	
	      options.push("inverse:" + inverse);
	      options.push("fn:" + program);
	    }
	
	    for(var i=0; i<paramSize; i++) {
	      param = this.popStack();
	      params.push(param);
	
	      if(this.options.stringParams) {
	        types.push(this.popStack());
	        contexts.push(this.popStack());
	      }
	    }
	
	    if (this.options.stringParams) {
	      options.push("contexts:[" + contexts.join(",") + "]");
	      options.push("types:[" + types.join(",") + "]");
	      options.push("hashContexts:hashContexts");
	      options.push("hashTypes:hashTypes");
	    }
	
	    if(this.options.data) {
	      options.push("data:data");
	    }
	
	    options = "{" + options.join(",") + "}";
	    if (useRegister) {
	      this.register('options', options);
	      params.push('options');
	    } else {
	      params.push(options);
	    }
	    return params.join(", ");
	  }
	};
	
	var reservedWords = (
	  "break else new var" +
	  " case finally return void" +
	  " catch for switch while" +
	  " continue function this with" +
	  " default if throw" +
	  " delete in try" +
	  " do instanceof typeof" +
	  " abstract enum int short" +
	  " boolean export interface static" +
	  " byte extends long super" +
	  " char final native synchronized" +
	  " class float package throws" +
	  " const goto private transient" +
	  " debugger implements protected volatile" +
	  " double import public let yield"
	).split(" ");
	
	var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};
	
	for(var i=0, l=reservedWords.length; i<l; i++) {
	  compilerWords[reservedWords[i]] = true;
	}
	
	JavaScriptCompiler.isValidJavaScriptVariableName = function(name) {
	  if(!JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]+$/.test(name)) {
	    return true;
	  }
	  return false;
	};
	
	Handlebars.precompile = function(input, options) {
	  if (input == null || (typeof input !== 'string' && input.constructor !== Handlebars.AST.ProgramNode)) {
	    throw new Handlebars.Exception("You must pass a string or Handlebars AST to Handlebars.precompile. You passed " + input);
	  }
	
	  options = options || {};
	  if (!('data' in options)) {
	    options.data = true;
	  }
	  var ast = Handlebars.parse(input);
	  var environment = new Compiler().compile(ast, options);
	  return new JavaScriptCompiler().compile(environment, options);
	};
	
	Handlebars.compile = function(input, options) {
	  if (input == null || (typeof input !== 'string' && input.constructor !== Handlebars.AST.ProgramNode)) {
	    throw new Handlebars.Exception("You must pass a string or Handlebars AST to Handlebars.compile. You passed " + input);
	  }
	
	  options = options || {};
	  if (!('data' in options)) {
	    options.data = true;
	  }
	  var compiled;
	  function compile() {
	    var ast = Handlebars.parse(input);
	    var environment = new Compiler().compile(ast, options);
	    var templateSpec = new JavaScriptCompiler().compile(environment, options, undefined, true);
	    return Handlebars.template(templateSpec);
	  }
	
	  // Template is only compiled on first use and cached after that point.
	  return function(context, options) {
	    if (!compiled) {
	      compiled = compile();
	    }
	    return compiled.call(this, context, options);
	  };
	};
	
	
	// END(BROWSER)
	
	return Handlebars;
	
	};
	
	


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname, module, process) {var dom      = exports.dom = __webpack_require__(39).dom,
	    features = __webpack_require__(40),
	    fs       = __webpack_require__(22),
	    pkg      = JSON.parse(fs.readFileSync(__dirname + "/../package.json")),
	    request  = __webpack_require__(62),
	    URL      = __webpack_require__(44);
	
	var style = __webpack_require__(42);
	exports.defaultLevel = dom.level3.html;
	exports.browserAugmentation = __webpack_require__(41).browserAugmentation;
	exports.windowAugmentation = __webpack_require__(41).windowAugmentation;
	
	// Proxy feature functions to features module.
	['availableDocumentFeatures',
	 'defaultDocumentFeatures',
	 'applyDocumentFeatures'].forEach(function (propName) {
	  exports.__defineGetter__(propName, function () {
	    return features[propName];
	  });
	  exports.__defineSetter__(propName, function (val) {
	    return features[propName] = val;
	  });
	});
	
	exports.debugMode = false;
	
	var createWindow = exports.createWindow = __webpack_require__(41).createWindow;
	
	exports.__defineGetter__('version', function() {
	  return pkg.version;
	});
	
	exports.level = function (level, feature) {
		if(!feature) feature = 'core'
		return __webpack_require__(38)('./jsdom/level' + level + '/' + feature).dom['level' + level][feature]
	}
	
	exports.jsdom = function (html, level, options) {
	
	  options = options || {};
	  if(typeof level == "string") {
	    level = exports.level(level, 'html')
	  } else {
	    level   = level || exports.defaultLevel;
	  }
	
	  if (!options.url) {
	    options.url = (module.parent.id === 'jsdom') ?
	                  module.parent.parent.filename  :
	                  module.parent.filename;
	    options.url = options.url.replace(/\\/g, '/');
	    if (options.url[0] !== '/') {
	      options.url = '/' + options.url;
	    }
	    options.url = 'file://' + options.url;
	  }
	
	  var browser = exports.browserAugmentation(level, options),
	      doc     = (browser.HTMLDocument)             ?
	                 new browser.HTMLDocument(options) :
	                 new browser.Document(options);
	
	  if (options.features && options.features.QuerySelector) {
	    __webpack_require__(43).applyQuerySelector(doc, level);
	  }
	
	  features.applyDocumentFeatures(doc, options.features);
	
	  if (typeof html === 'undefined' || html === null) {
	    doc.write('<html><head></head><body></body></html>');
	  } else {
	    doc.write(html + '');
	  }
	
	  if (doc.close && !options.deferClose) {
	    doc.close();
	  }
	
	  // Kept for backwards-compatibility. The window is lazily created when
	  // document.parentWindow or document.defaultView is accessed.
	  doc.createWindow = function() {
	    // Remove ourself
	    if (doc.createWindow) {
	      delete doc.createWindow;
	    }
	    return doc.parentWindow;
	  };
	
	  return doc;
	};
	
	exports.html = function(html, level, options) {
	  html += '';
	
	  // TODO: cache a regex and use it here instead
	  //       or make the parser handle it
	  var htmlLowered = html.toLowerCase();
	
	  // body
	  if (!~htmlLowered.indexOf('<body')) {
	    html = '<body>' + html + '</body>';
	  }
	
	  // html
	  if (!~htmlLowered.indexOf('<html')) {
	    html = '<html>' + html + '</html>';
	  }
	  return exports.jsdom(html, level, options);
	};
	
	exports.jQueryify = exports.jsdom.jQueryify = function (window /* path [optional], callback */) {
	
	  if (!window || !window.document) { return; }
	
	  var args = Array.prototype.slice.call(arguments),
	      callback = (typeof(args[args.length - 1]) === 'function') && args.pop(),
	      path,
	      jQueryTag = window.document.createElement("script");
	      jQueryTag.className = "jsdom";
	
	  if (args.length > 1 && typeof(args[1] === 'string')) {
	    path = args[1];
	  }
	
	  var features = window.document.implementation._features;
	
	  window.document.implementation.addFeature('FetchExternalResources', ['script']);
	  window.document.implementation.addFeature('ProcessExternalResources', ['script']);
	  window.document.implementation.addFeature('MutationEvents', ["1.0"]);
	  jQueryTag.src = path || 'http://code.jquery.com/jquery-latest.js';
	  window.document.body.appendChild(jQueryTag);
	
	  jQueryTag.onload = function() {
	    if (callback) {
	      callback(window, window.jQuery);
	    }
	
	    window.document.implementation._features = features;
	  };
	
	  return window;
	};
	
	
	exports.env = exports.jsdom.env = function() {
	  var
	  args        = Array.prototype.slice.call(arguments),
	  config      = exports.env.processArguments(args),
	  callback    = config.done,
	  processHTML = function(err, html) {
	
	    html += '';
	    if(err) {
	      return callback(err);
	    }
	
	    config.scripts = config.scripts || [];
	    if (typeof config.scripts === 'string') {
	      config.scripts = [config.scripts];
	    }
	
	    config.src = config.src || [];
	    if (typeof config.src === 'string') {
	      config.src = [config.src];
	    }
	
	    var
	    options    = {
	      features: config.features || {
	        'FetchExternalResources' : false,
	        'ProcessExternalResources' : false,
	        'SkipExternalResources' : false
	      },
	      url: config.url
	    },
	    window     = exports.html(html, null, options).createWindow(),
	    features   = JSON.parse(JSON.stringify(window.document.implementation._features)),
	    docsLoaded = 0,
	    totalDocs  = config.scripts.length + config.src.length,
	    readyState = null,
	    errors     = null;
	
	    if (!window || !window.document) {
	      return callback(new Error('JSDOM: a window object could not be created.'));
	    }
	
	    if( config.document ) {
	      window.document._referrer = config.document.referrer;
	      window.document._cookie = config.document.cookie;
	    }
	
	    window.document.implementation.addFeature('FetchExternalResources', ['script']);
	    window.document.implementation.addFeature('ProcessExternalResources', ['script']);
	    window.document.implementation.addFeature('MutationEvents', ['1.0']);
	
	    var scriptComplete = function() {
	      docsLoaded++;
	      if (docsLoaded >= totalDocs) {
	        window.document.implementation._features = features;
	
	        if (errors) {
	          errors = errors.concat(window.document.errors || []);
	        }
	
	        process.nextTick(function() { callback(errors, window); });
	      }
	    }
	
	    if (config.scripts.length > 0 || config.src.length > 0) {
	      config.scripts.forEach(function(src) {
	        var script = window.document.createElement('script');
	        script.className = "jsdom";
	        script.onload = function() {
	          scriptComplete()
	        };
	
	        script.onerror = function(e) {
	          if (!errors) {
	            errors = [];
	          }
	          errors.push(e.error);
	          scriptComplete();
	        };
	
	        script.src = src;
	        try {
	          // project against invalid dom
	          // ex: http://www.google.com/foo#bar
	          window.document.documentElement.appendChild(script);
	        } catch(e) {
	          if(!errors) {
	            errors=[];
	          }
	          errors.push(e.error || e.message);
	          scriptComplete();
	        }
	      });
	
	      config.src.forEach(function(src) {
	        var script = window.document.createElement('script');
	        script.onload = function() {
	          process.nextTick(scriptComplete);
	        };
	
	        script.onerror = function(e) {
	          if (!errors) {
	            errors = [];
	          }
	          errors.push(e.error || e.message);
	          // nextTick so that an exception within scriptComplete won't cause
	          // another script onerror (which would be an infinite loop)
	          process.nextTick(scriptComplete);
	        };
	
	        script.text = src;
	        window.document.documentElement.appendChild(script);
	        window.document.documentElement.removeChild(script);
	      });
	    } else {
	      scriptComplete();
	    }
	  };
	
	  config.html += '';
	
	  // Handle markup
	  if (config.html.indexOf("\n") > 0 || config.html.match(/^\W*</)) {
	    processHTML(null, config.html);
	
	  // Handle url/file
	  } else {
	    var url = URL.parse(config.html);
	    config.url = config.url || url.href;
	    if (url.hostname) {
	      request({
	        uri      : url,
	        encoding : config.encoding || 'utf8',
	        headers  : config.headers || {},
	        proxy    : config.proxy || null
	      },
	      function(err, request, body) {
	        processHTML(err, body);
	      });
	    } else {
	      fs.readFile(config.html, processHTML);
	    }
	  }
	};
	
	/*
	  Since jsdom.env() is a helper for quickly and easily setting up a
	  window with scripts and such already loaded into it, the arguments
	  should be fairly flexible.  Here are the requirements
	
	  1) collect `html` (url, string, or file on disk)  (STRING)
	  2) load `code` into the window (array of scripts) (ARRAY)
	  3) callback when resources are `done`             (FUNCTION)
	  4) configuration                                  (OBJECT)
	
	  Rules:
	  + if there is one argument it had better be an object with atleast
	    a `html` and `done` property (other properties are gravy)
	
	  + arguments above are pulled out of the arguments and put into the
	    config object that is returned
	*/
	exports.env.processArguments = function(args) {
	  if (!args || !args.length || args.length < 1) {
	    throw new Error('No arguments passed to jsdom.env().');
	  }
	
	  var
	  props = {
	    'html'    : true,
	    'done'    : true,
	    'scripts' : false,
	    'config'  : false,
	    'url'     : false,  // the URL for location.href if different from html
	    'document': false   // HTMLDocument properties
	  },
	  propKeys = Object.keys(props),
	  config = {
	    code : []
	  },
	  l    = args.length
	  ;
	  if (l === 1) {
	    config = args[0];
	  } else {
	    args.forEach(function(v) {
	      var type = typeof v;
	      if (!v) {
	        return;
	      }
	      if (type === 'string' || v + '' === v) {
	        config.html = v;
	      } else if (type === 'object') {
	        // Array
	        if (v.length && v[0]) {
	          config.scripts = v;
	        } else {
	          // apply missing required properties if appropriate
	          propKeys.forEach(function(req) {
	
	            if (typeof v[req] !== 'undefined' &&
	                typeof config[req] === 'undefined') {
	
	              config[req] = v[req];
	              delete v[req];
	            }
	          });
	          config.config = v;
	        }
	      } else if (type === 'function') {
	        config.done = v;
	      }
	    });
	  }
	
	  propKeys.forEach(function(req) {
	    var required = props[req];
	    if (required && typeof config[req] === 'undefined') {
	      throw new Error("jsdom.env requires a '" + req + "' argument");
	    }
	  });
	  return config;
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, "/", __webpack_require__(31)(module), __webpack_require__(14)))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {/**
	 * Wrapper for built-in http.js to emulate the browser XMLHttpRequest object.
	 *
	 * This can be used with JS designed for browsers to improve reuse of code and
	 * allow the use of existing libraries.
	 *
	 * Usage: include("XMLHttpRequest.js") and use XMLHttpRequest per W3C specs.
	 *
	 * @author Dan DeFelippi <dan@driverdan.com>
	 * @contributor David Ellis <d.f.ellis@ieee.org>
	 * @license MIT
	 */
	
	var Url = __webpack_require__(44)
	  , spawn = __webpack_require__(22).spawn
	  , fs = __webpack_require__(22);
	
	exports.XMLHttpRequest = function() {
	  /**
	   * Private variables
	   */
	  var self = this;
	  var http = __webpack_require__(46);
	  var https = __webpack_require__(47);
	
	  // Holds http.js objects
	  var client;
	  var request;
	  var response;
	
	  // Request settings
	  var settings = {};
	
	  // Set some default headers
	  var defaultHeaders = {
	    "User-Agent": "node-XMLHttpRequest",
	    "Accept": "*/*",
	  };
	
	  var headers = defaultHeaders;
	
	  // These headers are not user setable.
	  // The following are allowed but banned in the spec:
	  // * user-agent
	  var forbiddenRequestHeaders = [
	    "accept-charset",
	    "accept-encoding",
	    "access-control-request-headers",
	    "access-control-request-method",
	    "connection",
	    "content-length",
	    "content-transfer-encoding",
	    "cookie",
	    "cookie2",
	    "date",
	    "expect",
	    "host",
	    "keep-alive",
	    "origin",
	    "referer",
	    "te",
	    "trailer",
	    "transfer-encoding",
	    "upgrade",
	    "via"
	  ];
	
	  // These request methods are not allowed
	  var forbiddenRequestMethods = [
	    "TRACE",
	    "TRACK",
	    "CONNECT"
	  ];
	
	  // Send flag
	  var sendFlag = false;
	  // Error flag, used when errors occur or abort is called
	  var errorFlag = false;
	
	  // Event listeners
	  var listeners = {};
	
	  /**
	   * Constants
	   */
	
	  this.UNSENT = 0;
	  this.OPENED = 1;
	  this.HEADERS_RECEIVED = 2;
	  this.LOADING = 3;
	  this.DONE = 4;
	
	  /**
	   * Public vars
	   */
	
	  // Current state
	  this.readyState = this.UNSENT;
	
	  // default ready state change handler in case one is not set or is set late
	  this.onreadystatechange = null;
	
	  // Result & response
	  this.responseText = "";
	  this.responseXML = "";
	  this.status = null;
	  this.statusText = null;
	
	  /**
	   * Private methods
	   */
	
	  /**
	   * Check if the specified header is allowed.
	   *
	   * @param string header Header to validate
	   * @return boolean False if not allowed, otherwise true
	   */
	  var isAllowedHttpHeader = function(header) {
	    return (header && forbiddenRequestHeaders.indexOf(header.toLowerCase()) === -1);
	  };
	
	  /**
	   * Check if the specified method is allowed.
	   *
	   * @param string method Request method to validate
	   * @return boolean False if not allowed, otherwise true
	   */
	  var isAllowedHttpMethod = function(method) {
	    return (method && forbiddenRequestMethods.indexOf(method) === -1);
	  };
	
	  /**
	   * Public methods
	   */
	
	  /**
	   * Open the connection. Currently supports local server requests.
	   *
	   * @param string method Connection method (eg GET, POST)
	   * @param string url URL for the connection.
	   * @param boolean async Asynchronous connection. Default is true.
	   * @param string user Username for basic authentication (optional)
	   * @param string password Password for basic authentication (optional)
	   */
	  this.open = function(method, url, async, user, password) {
	    this.abort();
	    errorFlag = false;
	
	    // Check for valid request method
	    if (!isAllowedHttpMethod(method)) {
	      throw "SecurityError: Request method not allowed";
	      return;
	    }
	
	    settings = {
	      "method": method,
	      "url": url.toString(),
	      "async": (typeof async !== "boolean" ? true : async),
	      "user": user || null,
	      "password": password || null
	    };
	
	    setState(this.OPENED);
	  };
	
	  /**
	   * Sets a header for the request.
	   *
	   * @param string header Header name
	   * @param string value Header value
	   */
	  this.setRequestHeader = function(header, value) {
	    if (this.readyState != this.OPENED) {
	      throw "INVALID_STATE_ERR: setRequestHeader can only be called when state is OPEN";
	    }
	    if (!isAllowedHttpHeader(header)) {
	      console.warn('Refused to set unsafe header "' + header + '"');
	      return;
	    }
	    if (sendFlag) {
	      throw "INVALID_STATE_ERR: send flag is true";
	    }
	    headers[header] = value;
	  };
	
	  /**
	   * Gets a header from the server response.
	   *
	   * @param string header Name of header to get.
	   * @return string Text of the header or null if it doesn't exist.
	   */
	  this.getResponseHeader = function(header) {
	    if (typeof header === "string"
	      && this.readyState > this.OPENED
	      && response.headers[header.toLowerCase()]
	      && !errorFlag
	    ) {
	      return response.headers[header.toLowerCase()];
	    }
	
	    return null;
	  };
	
	  /**
	   * Gets all the response headers.
	   *
	   * @return string A string with all response headers separated by CR+LF
	   */
	  this.getAllResponseHeaders = function() {
	    if (this.readyState < this.HEADERS_RECEIVED || errorFlag) {
	      return "";
	    }
	    var result = "";
	
	    for (var i in response.headers) {
	      // Cookie headers are excluded
	      if (i !== "set-cookie" && i !== "set-cookie2") {
	        result += i + ": " + response.headers[i] + "\r\n";
	      }
	    }
	    return result.substr(0, result.length - 2);
	  };
	
	  /**
	   * Gets a request header
	   *
	   * @param string name Name of header to get
	   * @return string Returns the request header or empty string if not set
	   */
	  this.getRequestHeader = function(name) {
	    // @TODO Make this case insensitive
	    if (typeof name === "string" && headers[name]) {
	      return headers[name];
	    }
	
	    return "";
	  }
	
	  /**
	   * Sends the request to the server.
	   *
	   * @param string data Optional data to send as request body.
	   */
	  this.send = function(data) {
	    if (this.readyState != this.OPENED) {
	      throw "INVALID_STATE_ERR: connection must be opened before send() is called";
	    }
	
	    if (sendFlag) {
	      throw "INVALID_STATE_ERR: send has already been called";
	    }
	
	    var ssl = false, local = false;
	    var url = Url.parse(settings.url);
	
	    // Determine the server
	    switch (url.protocol) {
	      case 'https:':
	        ssl = true;
	        // SSL & non-SSL both need host, no break here.
	      case 'http:':
	        var host = url.hostname;
	        break;
	
	      case 'file:':
	        local = true;
	        break;
	
	      case undefined:
	      case '':
	        var host = "localhost";
	        break;
	
	      default:
	        throw "Protocol not supported.";
	    }
	
	    // Load files off the local filesystem (file://)
	    if (local) {
	      if (settings.method !== "GET") {
	        throw "XMLHttpRequest: Only GET method is supported";
	      }
	
	      if (settings.async) {
	        fs.readFile(url.pathname, 'utf8', function(error, data) {
	          if (error) {
	            self.handleError(error);
	          } else {
	            self.status = 200;
	            self.responseText = data;
	            setState(self.DONE);
	          }
	        });
	      } else {
	        try {
	          this.responseText = fs.readFileSync(url.pathname, 'utf8');
	          this.status = 200;
	          setState(self.DONE);
	        } catch(e) {
	          this.handleError(e);
	        }
	      }
	
	      return;
	    }
	
	    // Default to port 80. If accessing localhost on another port be sure
	    // to use http://localhost:port/path
	    var port = url.port || (ssl ? 443 : 80);
	    // Add query string if one is used
	    var uri = url.pathname + (url.search ? url.search : '');
	
	    // Set the Host header or the server may reject the request
	    headers["Host"] = host;
	    if (!((ssl && port === 443) || port === 80)) {
	      headers["Host"] += ':' + url.port;
	    }
	
	    // Set Basic Auth if necessary
	    if (settings.user) {
	      if (typeof settings.password == "undefined") {
	        settings.password = "";
	      }
	      var authBuf = new Buffer(settings.user + ":" + settings.password);
	      headers["Authorization"] = "Basic " + authBuf.toString("base64");
	    }
	
	    // Set content length header
	    if (settings.method === "GET" || settings.method === "HEAD") {
	      data = null;
	    } else if (data) {
	      headers["Content-Length"] = Buffer.byteLength(data);
	
	      if (!headers["Content-Type"]) {
	        headers["Content-Type"] = "text/plain;charset=UTF-8";
	      }
	    } else if (settings.method === "POST") {
	      // For a post with no data set Content-Length: 0.
	      // This is required by buggy servers that don't meet the specs.
	      headers["Content-Length"] = 0;
	    }
	
	    var options = {
	      host: host,
	      port: port,
	      path: uri,
	      method: settings.method,
	      headers: headers
	    };
	
	    // Reset error flag
	    errorFlag = false;
	
	    // Handle async requests
	    if (settings.async) {
	      // Use the proper protocol
	      var doRequest = ssl ? https.request : http.request;
	
	      // Request is being sent, set send flag
	      sendFlag = true;
	
	      // As per spec, this is called here for historical reasons.
	      self.dispatchEvent("readystatechange");
	
	      // Create the request
	      request = doRequest(options, function(resp) {
	        response = resp;
	        response.setEncoding("utf8");
	
	        setState(self.HEADERS_RECEIVED);
	        self.status = response.statusCode;
	
	        response.on('data', function(chunk) {
	          // Make sure there's some data
	          if (chunk) {
	            self.responseText += chunk;
	          }
	          // Don't emit state changes if the connection has been aborted.
	          if (sendFlag) {
	            setState(self.LOADING);
	          }
	        });
	
	        response.on('end', function() {
	          if (sendFlag) {
	            // Discard the 'end' event if the connection has been aborted
	            setState(self.DONE);
	            sendFlag = false;
	          }
	        });
	
	        response.on('error', function(error) {
	          self.handleError(error);
	        });
	      }).on('error', function(error) {
	        self.handleError(error);
	      });
	
	      // Node 0.4 and later won't accept empty data. Make sure it's needed.
	      if (data) {
	        request.write(data);
	      }
	
	      request.end();
	
	      self.dispatchEvent("loadstart");
	    } else { // Synchronous
	      // Create a temporary file for communication with the other Node process
	      var syncFile = ".node-xmlhttprequest-sync-" + process.pid;
	      fs.writeFileSync(syncFile, "", "utf8");
	      // The async request the other Node process executes
	      var execString = "var http = require('http'), https = require('https'), fs = require('fs');"
	        + "var doRequest = http" + (ssl ? "s" : "") + ".request;"
	        + "var options = " + JSON.stringify(options) + ";"
	        + "var responseText = '';"
	        + "var req = doRequest(options, function(response) {"
	        + "response.setEncoding('utf8');"
	        + "response.on('data', function(chunk) {"
	        + "responseText += chunk;"
	        + "});"
	        + "response.on('end', function() {"
	        + "fs.writeFileSync('" + syncFile + "', 'NODE-XMLHTTPREQUEST-STATUS:' + response.statusCode + ',' + responseText, 'utf8');"
	        + "});"
	        + "response.on('error', function(error) {"
	        + "fs.writeFileSync('" + syncFile + "', 'NODE-XMLHTTPREQUEST-ERROR:' + JSON.stringify(error), 'utf8');"
	        + "});"
	        + "}).on('error', function(error) {"
	        + "fs.writeFileSync('" + syncFile + "', 'NODE-XMLHTTPREQUEST-ERROR:' + JSON.stringify(error), 'utf8');"
	        + "});"
	        + (data ? "req.write('" + data.replace(/'/g, "\\'") + "');":"")
	        + "req.end();";
	      // Start the other Node Process, executing this string
	      syncProc = spawn(process.argv[0], ["-e", execString]);
	      while((self.responseText = fs.readFileSync(syncFile, 'utf8')) == "") {
	        // Wait while the file is empty
	      }
	      // Kill the child process once the file has data
	      syncProc.stdin.end();
	      // Remove the temporary file
	      fs.unlinkSync(syncFile);
	      if (self.responseText.match(/^NODE-XMLHTTPREQUEST-ERROR:/)) {
	        // If the file returned an error, handle it
	        var errorObj = self.responseText.replace(/^NODE-XMLHTTPREQUEST-ERROR:/, "");
	        self.handleError(errorObj);
	      } else {
	        // If the file returned okay, parse its data and move to the DONE state
	        self.status = self.responseText.replace(/^NODE-XMLHTTPREQUEST-STATUS:([0-9]*),.*/, "$1");
	        self.responseText = self.responseText.replace(/^NODE-XMLHTTPREQUEST-STATUS:[0-9]*,(.*)/, "$1");
	        setState(self.DONE);
	      }
	    }
	  };
	
	  /**
	   * Called when an error is encountered to deal with it.
	   */
	  this.handleError = function(error) {
	    this.status = 503;
	    this.statusText = error;
	    this.responseText = error.stack;
	    errorFlag = true;
	    setState(this.DONE);
	  };
	
	  /**
	   * Aborts a request.
	   */
	  this.abort = function() {
	    if (request) {
	      request.abort();
	      request = null;
	    }
	
	    headers = defaultHeaders;
	    this.responseText = "";
	    this.responseXML = "";
	
	    errorFlag = true;
	
	    if (this.readyState !== this.UNSENT
	        && (this.readyState !== this.OPENED || sendFlag)
	        && this.readyState !== this.DONE) {
	      sendFlag = false;
	      setState(this.DONE);
	    }
	    this.readyState = this.UNSENT;
	  };
	
	  /**
	   * Adds an event listener. Preferred method of binding to events.
	   */
	  this.addEventListener = function(event, callback) {
	    if (!(event in listeners)) {
	      listeners[event] = [];
	    }
	    // Currently allows duplicate callbacks. Should it?
	    listeners[event].push(callback);
	  };
	
	  /**
	   * Remove an event callback that has already been bound.
	   * Only works on the matching funciton, cannot be a copy.
	   */
	  this.removeEventListener = function(event, callback) {
	    if (event in listeners) {
	      // Filter will return a new array with the callback removed
	      listeners[event] = listeners[event].filter(function(ev) {
	        return ev !== callback;
	      });
	    }
	  };
	
	  /**
	   * Dispatch any events, including both "on" methods and events attached using addEventListener.
	   */
	  this.dispatchEvent = function(event) {
	    if (typeof self["on" + event] === "function") {
	      self["on" + event]();
	    }
	    if (event in listeners) {
	      for (var i = 0, len = listeners[event].length; i < len; i++) {
	        listeners[event][i].call(self);
	      }
	    }
	  };
	
	  /**
	   * Changes readyState and calls onreadystatechange.
	   *
	   * @param int state New state
	   */
	  var setState = function(state) {
	    if (self.readyState !== state) {
	      self.readyState = state;
	
	      if (settings.async || self.readyState < self.OPENED || self.readyState === self.DONE) {
	        self.dispatchEvent("readystatechange");
	      }
	
	      if (self.readyState === self.DONE && !errorFlag) {
	        self.dispatchEvent("load");
	        // @TODO figure out InspectorInstrumentation::didLoadXHR(cookie)
	        self.dispatchEvent("loadend");
	      }
	    }
	  };
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(48).Buffer, __webpack_require__(14)))

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./jsdom": 21,
		"./jsdom.js": 21,
		"./jsdom/browser/documentfeatures": 33,
		"./jsdom/browser/documentfeatures.js": 33,
		"./jsdom/browser/domtohtml": 55,
		"./jsdom/browser/domtohtml.js": 55,
		"./jsdom/browser/htmlencoding": 56,
		"./jsdom/browser/htmlencoding.js": 56,
		"./jsdom/browser/htmltodom": 54,
		"./jsdom/browser/htmltodom.js": 54,
		"./jsdom/browser/index": 34,
		"./jsdom/browser/index.js": 34,
		"./jsdom/level2/core": 57,
		"./jsdom/level2/core.js": 57,
		"./jsdom/level2/events": 63,
		"./jsdom/level2/events.js": 63,
		"./jsdom/level2/index": 64,
		"./jsdom/level2/index.js": 64,
		"./jsdom/level2/languages/javascript": 78,
		"./jsdom/level2/languages/javascript.js": 78,
		"./jsdom/level2/style": 35,
		"./jsdom/level2/style.js": 35,
		"./jsdom/level3/core": 49,
		"./jsdom/level3/core.js": 49,
		"./jsdom/level3/events": 51,
		"./jsdom/level3/events.js": 51,
		"./jsdom/level3/html": 52,
		"./jsdom/level3/html.js": 52,
		"./jsdom/level3/index": 32,
		"./jsdom/level3/index.js": 32,
		"./jsdom/level3/ls": 53,
		"./jsdom/level3/ls.js": 53,
		"./jsdom/level3/xpath": 50,
		"./jsdom/level3/xpath.js": 50,
		"./jsdom/selectors/index": 36,
		"./jsdom/selectors/index.js": 36,
		"./jsdom/selectors/sizzle": 60,
		"./jsdom/selectors/sizzle.js": 60,
		"./jsdom/utils": 59,
		"./jsdom/utils.js": 59
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	module.exports.dom = {
	  level3 : {
	    core   : __webpack_require__(49).dom.level3.core,
	    xpath  : __webpack_require__(50),
	    events : __webpack_require__(51).dom.level3.events,
	    html   : __webpack_require__(52).dom.level3.html,
	  }
	};
	
	module.exports.dom.ls = __webpack_require__(53).dom.level3.ls;


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	exports.availableDocumentFeatures = [
	  'FetchExternalResources',
	  'ProcessExternalResources',
	  'MutationEvents',
	  'QuerySelector',
	  'SkipExternalResources'
	];
	
	exports.defaultDocumentFeatures = {
	  "FetchExternalResources": ['script'/*, 'img', 'css', 'frame', 'link'*/],
	  "ProcessExternalResources": ['script'/*, 'frame', 'iframe'*/],
	  "MutationEvents": '2.0',
	  "QuerySelector": false,
	  "SkipExternalResources": false
	};
	
	exports.applyDocumentFeatures = function(doc, features) {
	  var i, maxFeatures = exports.availableDocumentFeatures.length,
	      defaultFeatures = exports.defaultDocumentFeatures,
	      j,
	      k,
	      featureName,
	      featureSource;
	
	  features = features || {};
	
	  for (i=0; i<maxFeatures; i++) {
	    featureName = exports.availableDocumentFeatures[i];
	    if (typeof features[featureName] !== 'undefined') {
	      featureSource = features[featureName];
	    // We have to check the lowercase version also because the Document feature
	    // methods convert everything to lowercase.
	    } else if (typeof features[featureName.toLowerCase()] !== 'undefined') {
	      featureSource = features[featureName.toLowerCase()];
	    } else if (defaultFeatures[featureName]) {
	      featureSource = defaultFeatures[featureName];
	    } else {
	      continue;
	    }
	
	    doc.implementation.removeFeature(featureName);
	
	    if (typeof featureSource !== 'undefined') {
	      if (featureSource instanceof Array) {
	        k = featureSource.length;
	        for (j=0; j<k; j++) {
	          doc.implementation.addFeature(featureName, featureSource[j]);
	        }
	      } else {
	        doc.implementation.addFeature(featureName, featureSource);
	      }
	    }
	  }
	};


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__filename, process) {var http          = __webpack_require__(46),
	    URL           = __webpack_require__(44),
	    HtmlToDom     = __webpack_require__(54).HtmlToDom,
	    domToHtml     = __webpack_require__(55).domToHtml,
	    htmlencoding  = __webpack_require__(56),
	    HTMLEncode    = htmlencoding.HTMLEncode,
	    HTMLDecode    = htmlencoding.HTMLDecode,
	    jsdom         = __webpack_require__(21),
	    Contextify    = null;
	
	try {
	  Contextify = __webpack_require__(89);
	} catch (e) {
	  // Shim for when the contextify compilation fails.
	  // This is not quite as correct, but it gets the job done.
	  Contextify = function(sandbox) {
	    var vm = __webpack_require__(83);
	    var context = vm.createContext(sandbox);
	    var global = null;
	
	    sandbox.run = function(code, filename) {
	      return vm.runInContext(code, context, filename);
	    };
	
	    sandbox.getGlobal = function() {
	      if (!global) {
	        global = vm.runInContext('this', context);
	      }
	      return global;
	    };
	
	    sandbox.dispose = function() {
	      global = null;
	      sandbox.run = function () {
	        throw new Error("Called run() after dispose().");
	      };
	      sandbox.getGlobal = function () {
	        throw new Error("Called getGlobal() after dispose().");
	      };
	      sandbox.dispose = function () {
	        throw new Error("Called dispose() after dispose().");
	      };
	    };
	
	    return sandbox;
	  };
	}
	
	function NOT_IMPLEMENTED(target) {
	  return function() {
	    if (!jsdom.debugMode) {
	      var raise = target ? target.raise : this.raise;
	      raise.call(this, 'error', 'NOT IMPLEMENTED');
	    }
	  };
	}
	
	/**
	 * Creates a window having a document. The document can be passed as option,
	 * if omitted, a new document will be created.
	 */
	exports.windowAugmentation = function(dom, options) {
	  options = options || {};
	  var window = exports.createWindow(dom, options);
	
	  if (!options.document) {
	    var browser = browserAugmentation(dom, options);
	
	    if (options.features && options.features.QuerySelector) {
	      __webpack_require__(36).applyQuerySelectorPrototype(browser);
	    }
	
	    options.document = (browser.HTMLDocument)             ?
	                        new browser.HTMLDocument(options) :
	                        new browser.Document(options);
	
	
	
	    options.document.write('<html><head></head><body></body></html>');
	  }
	
	  var doc = window.document = options.document;
	
	  if (doc.addEventListener) {
	    if (doc.readyState == 'complete') {
	      var ev = doc.createEvent('HTMLEvents');
	      ev.initEvent('load', false, false);
	      window.dispatchEvent(ev);
	    }
	    else {
	      doc.addEventListener('load', function(ev) {
	        window.dispatchEvent(ev);
	      });
	    }
	  }
	
	  return window;
	};
	
	/**
	 * Creates a document-less window.
	 */
	exports.createWindow = function(dom, options) {
	  var timers = [];
	
	  function startTimer(startFn, stopFn, callback, ms) {
		  var res = startFn(callback, ms);
		  timers.push( [ res, stopFn ] );
		  return res;
	  }
	
	  function stopTimer(id) {
		  if (typeof id === 'undefined') {
			  return;
		  }
		  for (var i in timers) {
			  if (timers[i][0] === id) {
				  timers[i][1].call(this, id);
				  timers.splice(i, 1);
				  break;
			  }
		  }
	  }
	
	  function stopAllTimers() {
		  timers.forEach(function (t) {
			  t[1].call(this, t[0]);
		  });
		  timers = [];
	  }
	
	  function DOMWindow(options) {
	    var href = (options || {}).url || 'file://' + __filename;
	    this.location = URL.parse(href);
	    this.location.reload = NOT_IMPLEMENTED(this);
	    this.location.replace = NOT_IMPLEMENTED(this);
	    this.location.toString = function() {
	      return href;
	    };
	
	    var window = this.console._window = this;
	
	    /* Location hash support */
	    this.location.__defineGetter__("hash", function() {
	      return (window.location.href.split("#").length > 1)
	        ? "#"+window.location.href.split("#")[1]
	        : "";
	    });
	
	    this.location.__defineSetter__("hash", function(val) {
	      /* TODO: Should fire a hashchange event, but tests aren't working */
	      window.location.href = window.location.href.split("#")[0] + val;
	    });
	
	    /* Location search support */
	    this.location.__defineGetter__("search", function() {
	      return (window.location.href.split("?").length > 1)
	        ? "?"+window.location.href.match(/\?([^#]+)/)[1]
	        : "";
	    });
	
	    this.location.__defineSetter__("search", function(val) {
	      window.location.href = (window.location.href.indexOf("?") > 0)
	        ? window.location.href.replace(/\?([^#]+)/, val)
	        : window.location.href.match(/^([^#?]+)/)[0] + val + window.location.hash;
	    });
	
	    if (options && options.document) {
	      options.document.location = this.location;
	    }
	    this.addEventListener = function() {
	      dom.Node.prototype.addEventListener.apply(window, arguments);
	    };
	    this.removeEventListener = function() {
	      dom.Node.prototype.removeEventListener.apply(window, arguments);
	    };
	    this.dispatchEvent = function() {
	      dom.Node.prototype.dispatchEvent.apply(window, arguments);
	    };
	    this.raise = function(){
	      dom.Node.prototype.raise.apply(window.document, arguments);
	    };
	
	    this.setTimeout = function (fn, ms) { return startTimer(setTimeout, clearTimeout, fn, ms); };
	    this.setInterval = function (fn, ms) { return startTimer(setInterval, clearInterval, fn, ms); };
	    this.clearInterval = stopTimer;
	    this.clearTimeout = stopTimer;
	    this.__stopAllTimers = stopAllTimers;
	  }
	
	  DOMWindow.prototype = {
	    __proto__: dom,
	    // This implements window.frames.length, since window.frames returns a
	    // self reference to the window object.  This value is incremented in the
	    // HTMLFrameElement init function (see: level2/html.js).
	    _length : 0,
	    get length () {
	      return this._length;
	    },
	    close : function() {
	      // Recursively close child frame windows, then ourselves.
	      var currentWindow = this;
	      (function windowCleaner (window) {
	        var i;
	        // We could call window.frames.length etc, but window.frames just points
	        // back to window.
	        if (window.length > 0) {
	          for (i = 0; i < window.length; i++) {
	            windowCleaner(window[i]);
	          }
	        }
	        // We're already in our own window.close().
	        if (window !== currentWindow) {
	          window.close();
	        }
	      })(this);
	
	      if (this.document) {
	        if (this.document.body) {
	          this.document.body.innerHTML = "";
	        }
	
	        if (this.document.close) {
	          // We need to empty out the event listener array because
	          // document.close() causes 'load' event to re-fire.
	          this.document._listeners = [];
	          this.document.close();
	        }
	        delete this.document;
	      }
	
	      stopAllTimers();
	      // Clean up the window's execution context.
	      // dispose() is added by Contextify.
	      this.dispose();
	    },
	    getComputedStyle: function(node) {
	      var s = node.style,
	          cs = {};
	
	      for (var n in s) {
	        cs[n] = s[n];
	      }
	      cs.__proto__ = {
	        getPropertyValue: function(name) {
	          return node.style[name];
	        }
	      };
	      return cs;
	    },
	    console: {
	      log:   function(message) { this._window.raise('log',   message) },
	      info:  function(message) { this._window.raise('info',  message) },
	      warn:  function(message) { this._window.raise('warn',  message) },
	      error: function(message) { this._window.raise('error', message) }
	    },
	    navigator: {
	      userAgent: 'Node.js (' + process.platform + '; U; rv:' + process.version + ')',
	      appName: 'Node.js jsDom',
	      platform: process.platform,
	      appVersion: process.version
	    },
	    XMLHttpRequest: function XMLHttpRequest() {},
	
	    name: 'nodejs',
	    innerWidth: 1024,
	    innerHeight: 768,
	    outerWidth: 1024,
	    outerHeight: 768,
	    pageXOffset: 0,
	    pageYOffset: 0,
	    screenX: 0,
	    screenY: 0,
	    screenLeft: 0,
	    screenTop: 0,
	    scrollX: 0,
	    scrollY: 0,
	    scrollTop: 0,
	    scrollLeft: 0,
	    alert: NOT_IMPLEMENTED(),
	    blur: NOT_IMPLEMENTED(),
	    confirm: NOT_IMPLEMENTED(),
	    createPopup: NOT_IMPLEMENTED(),
	    focus: NOT_IMPLEMENTED(),
	    moveBy: NOT_IMPLEMENTED(),
	    moveTo: NOT_IMPLEMENTED(),
	    open: NOT_IMPLEMENTED(),
	    print: NOT_IMPLEMENTED(),
	    prompt: NOT_IMPLEMENTED(),
	    resizeBy: NOT_IMPLEMENTED(),
	    resizeTo: NOT_IMPLEMENTED(),
	    scroll: NOT_IMPLEMENTED(),
	    scrollBy: NOT_IMPLEMENTED(),
	    scrollTo: NOT_IMPLEMENTED(),
	    screen : {
	      width : 0,
	      height : 0
	    },
	    Image : NOT_IMPLEMENTED()
	  };
	
	  var window = new DOMWindow(options);
	
	  Contextify(window);
	
	  // We need to set up self references using Contextify's getGlobal() so that
	  // the global object identity is correct (window === this).
	  // See Contextify README for more info.
	  var global = window.getGlobal();
	
	  // Set up the window as if it's a top level window.
	  // If it's not, then references will be corrected by frame/iframe code.
	  // Note: window.frames is maintained in the HTMLFrameElement init function.
	  window.window = window.frames
	                = window.self
	                = window.parent
	                = window.top = global;
	
	  return window;
	};
	
	//Caching for HTMLParser require. HUGE performace boost.
	/**
	* 5000 iterations
	* Without cache: ~1800+ms
	* With cache: ~80ms
	*/
	var defaultParser = null;
	function getDefaultParser() {
	  if (defaultParser === null) {
	    try {
	      defaultParser = __webpack_require__(90);
	    }
	    catch (e) {
	      try {
	        defaultParser = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"node-htmlparser/lib/node-htmlparser\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	      }
	      catch (e2) {
	        defaultParser = undefined;
	      }
	    }
	  }
	  return defaultParser;
	}
	
	/**
	 * Augments the given DOM by adding browser-specific properties and methods (BOM).
	 * Returns the augmented DOM.
	 */
	var browserAugmentation = exports.browserAugmentation = function(dom, options) {
	
	  if (dom._augmented) {
	    return dom;
	  }
	
	  if(!options) {
	    options = {};
	  }
	
	  // set up html parser - use a provided one or try and load from library
	  var htmltodom = new HtmlToDom(options.parser || getDefaultParser());
	
	  if (!dom.HTMLDocument) {
	    dom.HTMLDocument = dom.Document;
	  }
	  if (!dom.HTMLDocument.prototype.write) {
	    dom.HTMLDocument.prototype.write = function(html) {
	      this.innerHTML = html;
	    };
	  }
	
	  dom.Element.prototype.getElementsByClassName = function(className) {
	
	    function filterByClassName(child) {
	      if (!child) {
	        return false;
	      }
	
	      if (child.nodeType &&
	          child.nodeType === dom.Node.ENTITY_REFERENCE_NODE)
	      {
	        child = child._entity;
	      }
	
	      var classString = child.className;
	      if (classString) {
	        var s = classString.split(" ");
	        for (var i=0; i<s.length; i++) {
	          if (s[i] === className) {
	            return true;
	          }
	        }
	      }
	      return false;
	    }
	
	    return new dom.NodeList(this.ownerDocument || this, dom.mapper(this, filterByClassName));
	  };
	
	  dom.Element.prototype.__defineGetter__('sourceIndex', function() {
	    /*
	    * According to QuirksMode:
	    * Get the sourceIndex of element x. This is also the index number for
	    * the element in the document.getElementsByTagName('*') array.
	    * http://www.quirksmode.org/dom/w3c_core.html#t77
	    */
	    var items = this.ownerDocument.getElementsByTagName('*'),
	        len = items.length;
	
	    for (var i = 0; i < len; i++) {
	      if (items[i] === this) {
	        return i;
	      }
	    }
	  });
	
	  dom.Document.prototype.__defineGetter__('outerHTML', function() {
	    return domToHtml(this, true);
	  });
	
	  dom.Element.prototype.__defineGetter__('outerHTML', function() {
	    return domToHtml(this, true);
	  });
	
	  dom.Element.prototype.__defineGetter__('innerHTML', function() {
	    if (/^(?:script|style)$/.test(this._tagName)) {
	      var type = this.getAttribute('type');
	      if (!type || /^text\//i.test(type) || /\/javascript$/i.test(type)) {
	        return domToHtml(this._childNodes, true, true);
	      }
	    }
	
	    return domToHtml(this._childNodes, true);
	  });
	
	  dom.Element.prototype.__defineSetter__('doctype', function() {
	    throw new core.DOMException(NO_MODIFICATION_ALLOWED_ERR);
	  });
	  dom.Element.prototype.__defineGetter__('doctype', function() {
	    var r = null;
	    if (this.nodeName == '#document') {
	        if (this._doctype) {
	         r = this._doctype;
	        }
	    }
	    return r;
	  });
	
	  dom.Element.prototype.__defineSetter__('innerHTML', function(html) {
	    //Clear the children first:
	    var child;
	    while ((child = this._childNodes[0])) {
	      this.removeChild(child);
	    }
	
	    if (this.nodeName === '#document') {
	      parseDocType(this, html);
	    }
	    if (html !== "" && html != null) {
	      htmltodom.appendHtmlToElement(html, this);
	    }
	    return html;
	  });
	
	
	  dom.Document.prototype.__defineGetter__('innerHTML', function() {
	    return domToHtml(this._childNodes, true);
	  });
	
	  dom.Document.prototype.__defineSetter__('innerHTML', function(html) {
	    //Clear the children first:
	    var child;
	    while ((child = this._childNodes[0])) {
	      this.removeChild(child);
	    }
	
	    if (this.nodeName === '#document') {
	      parseDocType(this, html);
	    }
	    if (html !== "" && html != null) {
	      htmltodom.appendHtmlToElement(html, this);
	    }
	    return html;
	  });
	
	  var DOC_HTML5      = /<!doctype html>/i,
	      DOC_TYPE       = /<!DOCTYPE (\w(.|\n)*)">/i,
	      DOC_TYPE_START = '<!DOCTYPE ',
	      DOC_TYPE_END   = '">';
	
	  function parseDocType(doc, html) {
	    var publicID = '',
	        systemID = '',
	        fullDT = '',
	        name = 'HTML',
	        set = true,
	        doctype = html.match(DOC_HTML5);
	
	    //Default, No doctype === null
	    doc._doctype = null;
	
	    if (doctype && doctype[0]) { //Handle the HTML shorty doctype
	      fullDT = doctype[0];
	    } else { //Parse the doctype
	      // find the start
	      var start     = html.indexOf(DOC_TYPE_START),
	          end       = html.indexOf(DOC_TYPE_END),
	          docString;
	
	      if (start < 0 || end < 0) {
	        return;
	      }
	
	      docString = html.substr(start, (end-start)+DOC_TYPE_END.length);
	      doctype = docString.replace(/[\n\r]/g,'').match(DOC_TYPE);
	
	      if (!doctype) {
	        return;
	      }
	
	      fullDT = doctype[0];
	      doctype = doctype[1].split(' "');
	      var _id1 = doctype.length ? doctype.pop().replace(/"/g, '') : '',
	          _id2 = doctype.length ? doctype.pop().replace(/"/g, '') : '';
	
	      if (_id1.indexOf('-//') !== -1) {
	        publicID = _id1;
	      }
	      if (_id2.indexOf('-//') !== -1) {
	        publicID = _id2;
	      }
	      if (_id1.indexOf('://') !== -1) {
	        systemID = _id1;
	      }
	      if (_id2.indexOf('://') !== -1) {
	        systemID = _id2;
	      }
	      if (doctype.length) {
	        doctype = doctype[0].split(' ');
	        name = doctype[0].toUpperCase();
	      }
	    }
	    doc._doctype = new dom.DOMImplementation().createDocumentType(name, publicID, systemID);
	    doc._doctype._ownerDocument = doc;
	    doc._doctype._fullDT = fullDT;
	    doc._doctype.toString = function() {
	      return this._fullDT;
	    };
	  }
	
	  dom.Document.prototype.getElementsByClassName = function(className) {
	
	    function filterByClassName(child) {
	      if (!child) {
	        return false;
	      }
	
	      if (child.nodeType &&
	          child.nodeType === dom.Node.ENTITY_REFERENCE_NODE)
	      {
	        child = child._entity;
	      }
	
	      var classString = child.className;
	      if (classString) {
	        var s = classString.split(" ");
	        for (var i=0; i<s.length; i++) {
	          if (s[i] === className) {
	            return true;
	          }
	        }
	      }
	      return false;
	    }
	
	    return new dom.NodeList(this.ownerDocument || this, dom.mapper(this, filterByClassName));
	  };
	
	  dom.Element.prototype.__defineGetter__('nodeName', function(val) {
	    return this._nodeName.toUpperCase();
	  });
	
	  dom.Element.prototype.__defineGetter__('tagName', function(val) {
	    var t = this._tagName.toUpperCase();
	    //Document should not return a tagName
	    if (this.nodeName === '#document') {
	      t = null;
	    }
	    return t;
	  });
	
	  dom.Element.prototype.scrollTop = 0;
	  dom.Element.prototype.scrollLeft = 0;
	
	  dom.Document.prototype.__defineGetter__('parentWindow', function() {
	    if (!this._parentWindow) {
	      var window = exports.windowAugmentation(dom, {document: this, url: this.URL});
	      this._parentWindow = window.getGlobal();
	    }
	    return this._parentWindow;
	  });
	
	  dom.Document.prototype.__defineSetter__('parentWindow', function(window) {
	    this._parentWindow = window.getGlobal();
	  });
	
	  dom.Document.prototype.__defineGetter__('defaultView', function() {
	    return this.parentWindow;
	  });
	
	  dom._augmented = true;
	  return dom;
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, "/index.js", __webpack_require__(14)))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	var core = __webpack_require__(57).dom.level2.core,
	    html = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./html\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).dom.level2.html,
	    utils = __webpack_require__(59),
	    cssom = __webpack_require__(92),
	    cssstyle = __webpack_require__(93),
	    assert = __webpack_require__(84);
	
	// What works now:
	// - Accessing the rules defined in individual stylesheets
	// - Modifications to style content attribute are reflected in style property
	// - Modifications to style property are reflected in style content attribute
	// TODO
	// - Modifications to style element's textContent are reflected in sheet property.
	// - Modifications to style element's sheet property are reflected in textContent.
	// - Modifications to link.href property are reflected in sheet property.
	// - Less-used features of link: disabled
	// - Less-used features of style: disabled, scoped, title
	// - CSSOM-View
	//   - getComputedStyle(): requires default stylesheet, cascading, inheritance,
	//     filtering by @media (screen? print?), layout for widths/heights
	// - Load events are not in the specs, but apparently some browsers
	//   implement something. Should onload only fire after all @imports have been
	//   loaded, or only the primary sheet?
	
	core.StyleSheet = cssom.StyleSheet;
	core.MediaList = cssom.MediaList;
	core.CSSStyleSheet = cssom.CSSStyleSheet;
	core.CSSRule = cssom.CSSRule;
	core.CSSStyleRule = cssom.CSSStyleRule;
	core.CSSMediaRule = cssom.CSSMediaRule;
	core.CSSImportRule = cssom.CSSImportRule;
	core.CSSStyleDeclaration = cssstyle.CSSStyleDeclaration;
	
	// Relavant specs
	// http://www.w3.org/TR/DOM-Level-2-Style (2000)
	// http://www.w3.org/TR/cssom-view/ (2008)
	// http://dev.w3.org/csswg/cssom/ (2010) Meant to replace DOM Level 2 Style
	// http://www.whatwg.org/specs/web-apps/current-work/multipage/ HTML5, of course
	// http://dev.w3.org/csswg/css-style-attr/  not sure what's new here
	
	// Objects that aren't in cssom library but should be:
	//   CSSRuleList  (cssom just uses array)
	//   CSSFontFaceRule
	//   CSSPageRule
	
	// These rules don't really make sense to implement, so CSSOM draft makes them
	// obsolete.
	//   CSSCharsetRule
	//   CSSUnknownRule
	
	// These objects are considered obsolete by CSSOM draft, although modern
	// browsers implement them.
	//   CSSValue
	//   CSSPrimitiveValue
	//   CSSValueList
	//   RGBColor
	//   Rect
	//   Counter
	
	// StyleSheetList has the same interface as NodeList, so we'll use the same
	// object.
	core.StyleSheetList = core.NodeList;
	
	core.Document.prototype.__defineGetter__('styleSheets', function() {
	  if (!this._styleSheets) {
	    this._styleSheets = new core.StyleSheetList();
	  }
	  // TODO: each style and link element should register its sheet on creation
	  // nad remove it on removal.
	  return this._styleSheets;
	});
	
	
	/**
	 * @this {html.HTMLLinkElement|html.HTMLStyleElement}
	 * @param {string} url
	 * @param {cssom.CSSStyleSheet} sheet
	 * @see http://dev.w3.org/csswg/cssom/#requirements-on-user-agents-implementing0
	 */
	function fetchStylesheet(url, sheet) {
	  html.resourceLoader.load(this, url, function(data, filename) {
	    // TODO: abort if the content-type is not text/css, and the document is
	    // in strict mode
	    evaluateStylesheet.call(this, data, sheet, url);
	  });
	}
	/**
	 * @this {html.HTMLLinkElement|html.HTMLStyleElement}
	 * @param {string} data
	 * @param {cssom.CSSStyleSheet} sheet
	 * @param {string} baseUrl
	 */
	function evaluateStylesheet(data, sheet, baseUrl) {
	  // this is the element
	  var newStyleSheet = cssom.parse(data);
	  var spliceArgs = newStyleSheet.cssRules;
	  spliceArgs.unshift(0, sheet.cssRules.length);
	  Array.prototype.splice.apply(sheet.cssRules, spliceArgs);
	  scanForImportRules.call(this, sheet.cssRules, baseUrl);
	}
	/**
	 * @this {html.HTMLLinkElement|html.HTMLStyleElement}
	 * @param {cssom.CSSStyleSheet} sheet
	 * @param {string} baseUrl
	 */
	function scanForImportRules(cssRules, baseUrl) {
	  if (!cssRules) return;
	  for (var i = 0; i < cssRules.length; ++i) {
	    if (cssRules[i].cssRules) {
	      // @media rule: keep searching inside it.
	      scanForImportRules.call(this, cssRules[i].cssRules, baseUrl);
	    } else if (cssRules[i].href) {
	      // @import rule: fetch the resource and evaluate it.
	      // See http://dev.w3.org/csswg/cssom/#css-import-rule
	      //     If loading of the style sheet fails its cssRules list is simply
	      //     empty. I.e. an @import rule always has an associated style sheet.
	      fetchStylesheet.call(this, cssRules[i].href, this.sheet);
	    }
	  }
	}
	
	/**
	 * @param {string} data
	 * @param {cssstyle.CSSStyleDeclaration} style
	 */
	function evaluateStyleAttribute(data) {
	  // this is the element.
	
	  // currently, cssom's parse doesn't really work if you pass in
	  // {state: 'name'}, so instead we just build a dummy sheet.
	  var styleSheet = cssom.parse('dummy{' + data + '}');
	  var style = this.style;
	  while (style.length) {
	    style.removeProperty(style[0]);
	  }
	  if (styleSheet.cssRules.length > 0 && styleSheet.cssRules[0].style) {
	    var newStyle = styleSheet.cssRules[0].style;
	    for (var i = 0; i < newStyle.length; ++i) {
	      var prop = newStyle[i];
	      style.setProperty(
	          prop,
	          newStyle.getPropertyValue(prop),
	          newStyle.getPropertyPriority(prop));
	    }
	  }
	}
	
	/**
	 * Subclass of core.Attr that reflects the current cssText.
	 */
	function StyleAttr(node, value) {
	  this._node = node;
	  core.Attr.call(this, node.ownerDocument, 'style');
	  this.nodeValue = value;
	}
	StyleAttr.prototype = {
	  get nodeValue() {
	    return this._node.style.cssText;
	  },
	  set nodeValue(value) {
	    evaluateStyleAttribute.call(this._node, value);
	  }
	};
	StyleAttr.prototype.__proto__ = core.Attr.prototype;
	
	/**
	 * Overwrite core.AttrNodeMap#setNamedItem to create a StyleAttr instance
	 * instead of a core.Attr if the name equals 'style'.
	 */
	utils.intercept(core.AttrNodeMap, 'setNamedItem', function(_super, args, attr) {
	  if (attr.name == 'style') {
	    attr = new StyleAttr(this._parentNode, attr.nodeValue);
	  }
	  return _super.call(this, attr);
	});
	
	/**
	 * Lazily create a CSSStyleDeclaration.
	 */
	html.HTMLElement.prototype.__defineGetter__('style', function() {
	  var style = this._cssStyleDeclaration;
	  if (!style) {
	    style = this._cssStyleDeclaration = new cssstyle.CSSStyleDeclaration();
	    if (!this.getAttributeNode('style')) {
	      this.setAttribute('style', '');
	    }
	  }
	  return style;
	});
	
	assert.equal(undefined, html.HTMLLinkElement._init);
	html.HTMLLinkElement._init = function() {
	  this.addEventListener('DOMNodeInsertedIntoDocument', function() {
	    if (!/(?:[ \t\n\r\f]|^)stylesheet(?:[ \t\n\r\f]|$)/i.test(this.rel)) {
	      // rel is a space-separated list of tokens, and the original rel types
	      // are case-insensitive.
	      return;
	    }
	    if (this.href) {
	      fetchStylesheet.call(this, this.href, this.sheet);
	    }
	  });
	  this.addEventListener('DOMNodeRemovedFromDocument', function() {
	  });
	};
	/**
	 * @this {HTMLStyleElement|HTMLLinkElement}
	 */
	var getOrCreateSheet = function() {
	  if (!this._cssStyleSheet) {
	    this._cssStyleSheet = new cssom.CSSStyleSheet();
	  }
	  return this._cssStyleSheet;
	};
	html.HTMLLinkElement.prototype.__defineGetter__('sheet', getOrCreateSheet);
	
	assert.equal(undefined, html.HTMLStyleElement._init);
	html.HTMLStyleElement._init = function() {
	  //console.log('init style')
	  this.addEventListener('DOMNodeInsertedIntoDocument', function() {
	    //console.log('style inserted')
	    //console.log('sheet: ', this.sheet);
	    if (this.type && this.type !== 'text/css') {
	      //console.log('bad type: ' + this.type)
	      return;
	    }
	    evaluateStylesheet.call(this, this.textContent, this.sheet, this._ownerDocument.URL);
	  });
	};
	html.HTMLStyleElement.prototype.__defineGetter__('sheet', getOrCreateSheet);
	
	exports.dom = {
	  level2 : {
	    html : html,
	    core : core
	  }
	};


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	var createSizzle = __webpack_require__(60);
	exports.applyQuerySelector = function(doc, dom) {
	  var addSizzle = function(document) {
	
	    if (!document._sizzle) {
	      document._sizzle = createSizzle(document);
	    }
	    return document._sizzle;
	  };
	
	  doc.querySelector = function(selector) {
	    return addSizzle(this)(selector, this)[0];
	  };
	
	  doc.querySelectorAll = function(selector) {
	    return new dom.NodeList(addSizzle(this)(selector, this));
	  };
	
	  var _createElement = doc.createElement;
	  doc.createElement = function() {
	      var element = _createElement.apply(this, arguments);
	
	      element.querySelector = function(selector) {
	        return addSizzle(this.ownerDocument)(selector, this)[0];
	      };
	
	      element.querySelectorAll = function(selector) {
	        var el = this;
	        if (!this.parentNode) {
	          el = this.ownerDocument.createElement("div");
	          el.appendChild(this);
	        }
	        return new dom.NodeList(addSizzle(this.ownerDocument)(selector, el.parentNode || el));
	      };
	
	      return element;
	  };
	
	};


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	var handlebars = __webpack_require__(61);
	
	exports.attach = function(Handlebars) {
	
	// BEGIN(BROWSER)
	
	Handlebars.Parser = handlebars;
	
	Handlebars.parse = function(input) {
	
	  // Just return if an already-compile AST was passed in.
	  if(input.constructor === Handlebars.AST.ProgramNode) { return input; }
	
	  Handlebars.Parser.yy = Handlebars.AST;
	  return Handlebars.Parser.parse(input);
	};
	
	// END(BROWSER)
	
	return Handlebars;
	};


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./jsdom": 28,
		"./jsdom.js": 28,
		"./jsdom/browser/documentfeatures": 40,
		"./jsdom/browser/documentfeatures.js": 40,
		"./jsdom/browser/domtohtml": 71,
		"./jsdom/browser/domtohtml.js": 71,
		"./jsdom/browser/htmlencoding": 72,
		"./jsdom/browser/htmlencoding.js": 72,
		"./jsdom/browser/htmltodom": 70,
		"./jsdom/browser/htmltodom.js": 70,
		"./jsdom/browser/index": 41,
		"./jsdom/browser/index.js": 41,
		"./jsdom/level2/core": 73,
		"./jsdom/level2/core.js": 73,
		"./jsdom/level2/events": 79,
		"./jsdom/level2/events.js": 79,
		"./jsdom/level2/index": 80,
		"./jsdom/level2/index.js": 80,
		"./jsdom/level2/languages/javascript": 82,
		"./jsdom/level2/languages/javascript.js": 82,
		"./jsdom/level2/style": 42,
		"./jsdom/level2/style.js": 42,
		"./jsdom/level3/core": 65,
		"./jsdom/level3/core.js": 65,
		"./jsdom/level3/events": 67,
		"./jsdom/level3/events.js": 67,
		"./jsdom/level3/html": 68,
		"./jsdom/level3/html.js": 68,
		"./jsdom/level3/index": 39,
		"./jsdom/level3/index.js": 39,
		"./jsdom/level3/ls": 69,
		"./jsdom/level3/ls.js": 69,
		"./jsdom/level3/xpath": 66,
		"./jsdom/level3/xpath.js": 66,
		"./jsdom/selectors/index": 43,
		"./jsdom/selectors/index.js": 43,
		"./jsdom/selectors/sizzle": 76,
		"./jsdom/selectors/sizzle.js": 76,
		"./jsdom/utils": 75,
		"./jsdom/utils.js": 75
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	module.exports.dom = {
	  level3 : {
	    core   : __webpack_require__(65).dom.level3.core,
	    xpath  : __webpack_require__(66),
	    events : __webpack_require__(67).dom.level3.events,
	    html   : __webpack_require__(68).dom.level3.html,
	  }
	};
	
	module.exports.dom.ls = __webpack_require__(69).dom.level3.ls;


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	exports.availableDocumentFeatures = [
	  'FetchExternalResources',
	  'ProcessExternalResources',
	  'MutationEvents',
	  'QuerySelector',
	  'SkipExternalResources'
	];
	
	exports.defaultDocumentFeatures = {
	  "FetchExternalResources": ['script'/*, 'img', 'css', 'frame', 'link'*/],
	  "ProcessExternalResources": ['script'/*, 'frame', 'iframe'*/],
	  "MutationEvents": '2.0',
	  "QuerySelector": false,
	  "SkipExternalResources": false
	};
	
	exports.applyDocumentFeatures = function(doc, features) {
	  var i, maxFeatures = exports.availableDocumentFeatures.length,
	      defaultFeatures = exports.defaultDocumentFeatures,
	      j,
	      k,
	      featureName,
	      featureSource;
	
	  features = features || {};
	
	  for (i=0; i<maxFeatures; i++) {
	    featureName = exports.availableDocumentFeatures[i];
	    if (typeof features[featureName] !== 'undefined') {
	      featureSource = features[featureName];
	    // We have to check the lowercase version also because the Document feature
	    // methods convert everything to lowercase.
	    } else if (typeof features[featureName.toLowerCase()] !== 'undefined') {
	      featureSource = features[featureName.toLowerCase()];
	    } else if (defaultFeatures[featureName]) {
	      featureSource = defaultFeatures[featureName];
	    } else {
	      continue;
	    }
	
	    doc.implementation.removeFeature(featureName);
	
	    if (typeof featureSource !== 'undefined') {
	      if (featureSource instanceof Array) {
	        k = featureSource.length;
	        for (j=0; j<k; j++) {
	          doc.implementation.addFeature(featureName, featureSource[j]);
	        }
	      } else {
	        doc.implementation.addFeature(featureName, featureSource);
	      }
	    }
	  }
	};


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__filename, process) {var http          = __webpack_require__(46),
	    URL           = __webpack_require__(44),
	    HtmlToDom     = __webpack_require__(70).HtmlToDom,
	    domToHtml     = __webpack_require__(71).domToHtml,
	    htmlencoding  = __webpack_require__(72),
	    HTMLEncode    = htmlencoding.HTMLEncode,
	    HTMLDecode    = htmlencoding.HTMLDecode,
	    jsdom         = __webpack_require__(28),
	    Contextify    = null;
	
	try {
	  Contextify = __webpack_require__(98);
	} catch (e) {
	  // Shim for when the contextify compilation fails.
	  // This is not quite as correct, but it gets the job done.
	  Contextify = function(sandbox) {
	    var vm = __webpack_require__(83);
	    var context = vm.createContext(sandbox);
	    var global = null;
	
	    sandbox.run = function(code, filename) {
	      return vm.runInContext(code, context, filename);
	    };
	
	    sandbox.getGlobal = function() {
	      if (!global) {
	        global = vm.runInContext('this', context);
	      }
	      return global;
	    };
	
	    sandbox.dispose = function() {
	      global = null;
	      sandbox.run = function () {
	        throw new Error("Called run() after dispose().");
	      };
	      sandbox.getGlobal = function () {
	        throw new Error("Called getGlobal() after dispose().");
	      };
	      sandbox.dispose = function () {
	        throw new Error("Called dispose() after dispose().");
	      };
	    };
	
	    return sandbox;
	  };
	}
	
	function NOT_IMPLEMENTED(target) {
	  return function() {
	    if (!jsdom.debugMode) {
	      var raise = target ? target.raise : this.raise;
	      raise.call(this, 'error', 'NOT IMPLEMENTED');
	    }
	  };
	}
	
	/**
	 * Creates a window having a document. The document can be passed as option,
	 * if omitted, a new document will be created.
	 */
	exports.windowAugmentation = function(dom, options) {
	  options = options || {};
	  var window = exports.createWindow(dom, options);
	
	  if (!options.document) {
	    var browser = browserAugmentation(dom, options);
	
	    if (options.features && options.features.QuerySelector) {
	      __webpack_require__(43).applyQuerySelectorPrototype(browser);
	    }
	
	    options.document = (browser.HTMLDocument)             ?
	                        new browser.HTMLDocument(options) :
	                        new browser.Document(options);
	
	
	
	    options.document.write('<html><head></head><body></body></html>');
	  }
	
	  var doc = window.document = options.document;
	
	  if (doc.addEventListener) {
	    if (doc.readyState == 'complete') {
	      var ev = doc.createEvent('HTMLEvents');
	      ev.initEvent('load', false, false);
	      window.dispatchEvent(ev);
	    }
	    else {
	      doc.addEventListener('load', function(ev) {
	        window.dispatchEvent(ev);
	      });
	    }
	  }
	
	  return window;
	};
	
	/**
	 * Creates a document-less window.
	 */
	exports.createWindow = function(dom, options) {
	  var timers = [];
	
	  function startTimer(startFn, stopFn, callback, ms) {
		  var res = startFn(callback, ms);
		  timers.push( [ res, stopFn ] );
		  return res;
	  }
	
	  function stopTimer(id) {
		  if (typeof id === 'undefined') {
			  return;
		  }
		  for (var i in timers) {
			  if (timers[i][0] === id) {
				  timers[i][1].call(this, id);
				  timers.splice(i, 1);
				  break;
			  }
		  }
	  }
	
	  function stopAllTimers() {
		  timers.forEach(function (t) {
			  t[1].call(this, t[0]);
		  });
		  timers = [];
	  }
	
	  function DOMWindow(options) {
	    var href = (options || {}).url || 'file://' + __filename;
	    this.location = URL.parse(href);
	    this.location.reload = NOT_IMPLEMENTED(this);
	    this.location.replace = NOT_IMPLEMENTED(this);
	    this.location.toString = function() {
	      return href;
	    };
	
	    var window = this.console._window = this;
	
	    /* Location hash support */
	    this.location.__defineGetter__("hash", function() {
	      return (window.location.href.split("#").length > 1)
	        ? "#"+window.location.href.split("#")[1]
	        : "";
	    });
	
	    this.location.__defineSetter__("hash", function(val) {
	      /* TODO: Should fire a hashchange event, but tests aren't working */
	      window.location.href = window.location.href.split("#")[0] + val;
	    });
	
	    /* Location search support */
	    this.location.__defineGetter__("search", function() {
	      return (window.location.href.split("?").length > 1)
	        ? "?"+window.location.href.match(/\?([^#]+)/)[1]
	        : "";
	    });
	
	    this.location.__defineSetter__("search", function(val) {
	      window.location.href = (window.location.href.indexOf("?") > 0)
	        ? window.location.href.replace(/\?([^#]+)/, val)
	        : window.location.href.match(/^([^#?]+)/)[0] + val + window.location.hash;
	    });
	
	    if (options && options.document) {
	      options.document.location = this.location;
	    }
	    this.addEventListener = function() {
	      dom.Node.prototype.addEventListener.apply(window, arguments);
	    };
	    this.removeEventListener = function() {
	      dom.Node.prototype.removeEventListener.apply(window, arguments);
	    };
	    this.dispatchEvent = function() {
	      dom.Node.prototype.dispatchEvent.apply(window, arguments);
	    };
	    this.raise = function(){
	      dom.Node.prototype.raise.apply(window.document, arguments);
	    };
	
	    this.setTimeout = function (fn, ms) { return startTimer(setTimeout, clearTimeout, fn, ms); };
	    this.setInterval = function (fn, ms) { return startTimer(setInterval, clearInterval, fn, ms); };
	    this.clearInterval = stopTimer;
	    this.clearTimeout = stopTimer;
	    this.__stopAllTimers = stopAllTimers;
	  }
	
	  DOMWindow.prototype = {
	    __proto__: dom,
	    // This implements window.frames.length, since window.frames returns a
	    // self reference to the window object.  This value is incremented in the
	    // HTMLFrameElement init function (see: level2/html.js).
	    _length : 0,
	    get length () {
	      return this._length;
	    },
	    close : function() {
	      // Recursively close child frame windows, then ourselves.
	      var currentWindow = this;
	      (function windowCleaner (window) {
	        var i;
	        // We could call window.frames.length etc, but window.frames just points
	        // back to window.
	        if (window.length > 0) {
	          for (i = 0; i < window.length; i++) {
	            windowCleaner(window[i]);
	          }
	        }
	        // We're already in our own window.close().
	        if (window !== currentWindow) {
	          window.close();
	        }
	      })(this);
	
	      if (this.document) {
	        if (this.document.body) {
	          this.document.body.innerHTML = "";
	        }
	
	        if (this.document.close) {
	          // We need to empty out the event listener array because
	          // document.close() causes 'load' event to re-fire.
	          this.document._listeners = [];
	          this.document.close();
	        }
	        delete this.document;
	      }
	
	      stopAllTimers();
	      // Clean up the window's execution context.
	      // dispose() is added by Contextify.
	      this.dispose();
	    },
	    getComputedStyle: function(node) {
	      var s = node.style,
	          cs = {};
	
	      for (var n in s) {
	        cs[n] = s[n];
	      }
	      cs.__proto__ = {
	        getPropertyValue: function(name) {
	          return node.style[name];
	        }
	      };
	      return cs;
	    },
	    console: {
	      log:   function(message) { this._window.raise('log',   message) },
	      info:  function(message) { this._window.raise('info',  message) },
	      warn:  function(message) { this._window.raise('warn',  message) },
	      error: function(message) { this._window.raise('error', message) }
	    },
	    navigator: {
	      userAgent: 'Node.js (' + process.platform + '; U; rv:' + process.version + ')',
	      appName: 'Node.js jsDom',
	      platform: process.platform,
	      appVersion: process.version
	    },
	    XMLHttpRequest: function XMLHttpRequest() {},
	
	    name: 'nodejs',
	    innerWidth: 1024,
	    innerHeight: 768,
	    outerWidth: 1024,
	    outerHeight: 768,
	    pageXOffset: 0,
	    pageYOffset: 0,
	    screenX: 0,
	    screenY: 0,
	    screenLeft: 0,
	    screenTop: 0,
	    scrollX: 0,
	    scrollY: 0,
	    scrollTop: 0,
	    scrollLeft: 0,
	    alert: NOT_IMPLEMENTED(),
	    blur: NOT_IMPLEMENTED(),
	    confirm: NOT_IMPLEMENTED(),
	    createPopup: NOT_IMPLEMENTED(),
	    focus: NOT_IMPLEMENTED(),
	    moveBy: NOT_IMPLEMENTED(),
	    moveTo: NOT_IMPLEMENTED(),
	    open: NOT_IMPLEMENTED(),
	    print: NOT_IMPLEMENTED(),
	    prompt: NOT_IMPLEMENTED(),
	    resizeBy: NOT_IMPLEMENTED(),
	    resizeTo: NOT_IMPLEMENTED(),
	    scroll: NOT_IMPLEMENTED(),
	    scrollBy: NOT_IMPLEMENTED(),
	    scrollTo: NOT_IMPLEMENTED(),
	    screen : {
	      width : 0,
	      height : 0
	    },
	    Image : NOT_IMPLEMENTED()
	  };
	
	  var window = new DOMWindow(options);
	
	  Contextify(window);
	
	  // We need to set up self references using Contextify's getGlobal() so that
	  // the global object identity is correct (window === this).
	  // See Contextify README for more info.
	  var global = window.getGlobal();
	
	  // Set up the window as if it's a top level window.
	  // If it's not, then references will be corrected by frame/iframe code.
	  // Note: window.frames is maintained in the HTMLFrameElement init function.
	  window.window = window.frames
	                = window.self
	                = window.parent
	                = window.top = global;
	
	  return window;
	};
	
	//Caching for HTMLParser require. HUGE performace boost.
	/**
	* 5000 iterations
	* Without cache: ~1800+ms
	* With cache: ~80ms
	*/
	var defaultParser = null;
	function getDefaultParser() {
	  if (defaultParser === null) {
	    try {
	      defaultParser = __webpack_require__(99);
	    }
	    catch (e) {
	      try {
	        defaultParser = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"node-htmlparser/lib/node-htmlparser\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	      }
	      catch (e2) {
	        defaultParser = undefined;
	      }
	    }
	  }
	  return defaultParser;
	}
	
	/**
	 * Augments the given DOM by adding browser-specific properties and methods (BOM).
	 * Returns the augmented DOM.
	 */
	var browserAugmentation = exports.browserAugmentation = function(dom, options) {
	
	  if (dom._augmented) {
	    return dom;
	  }
	
	  if(!options) {
	    options = {};
	  }
	
	  // set up html parser - use a provided one or try and load from library
	  var htmltodom = new HtmlToDom(options.parser || getDefaultParser());
	
	  if (!dom.HTMLDocument) {
	    dom.HTMLDocument = dom.Document;
	  }
	  if (!dom.HTMLDocument.prototype.write) {
	    dom.HTMLDocument.prototype.write = function(html) {
	      this.innerHTML = html;
	    };
	  }
	
	  dom.Element.prototype.getElementsByClassName = function(className) {
	
	    function filterByClassName(child) {
	      if (!child) {
	        return false;
	      }
	
	      if (child.nodeType &&
	          child.nodeType === dom.Node.ENTITY_REFERENCE_NODE)
	      {
	        child = child._entity;
	      }
	
	      var classString = child.className;
	      if (classString) {
	        var s = classString.split(" ");
	        for (var i=0; i<s.length; i++) {
	          if (s[i] === className) {
	            return true;
	          }
	        }
	      }
	      return false;
	    }
	
	    return new dom.NodeList(this.ownerDocument || this, dom.mapper(this, filterByClassName));
	  };
	
	  dom.Element.prototype.__defineGetter__('sourceIndex', function() {
	    /*
	    * According to QuirksMode:
	    * Get the sourceIndex of element x. This is also the index number for
	    * the element in the document.getElementsByTagName('*') array.
	    * http://www.quirksmode.org/dom/w3c_core.html#t77
	    */
	    var items = this.ownerDocument.getElementsByTagName('*'),
	        len = items.length;
	
	    for (var i = 0; i < len; i++) {
	      if (items[i] === this) {
	        return i;
	      }
	    }
	  });
	
	  dom.Document.prototype.__defineGetter__('outerHTML', function() {
	    return domToHtml(this, true);
	  });
	
	  dom.Element.prototype.__defineGetter__('outerHTML', function() {
	    return domToHtml(this, true);
	  });
	
	  dom.Element.prototype.__defineGetter__('innerHTML', function() {
	    if (/^(?:script|style)$/.test(this._tagName)) {
	      var type = this.getAttribute('type');
	      if (!type || /^text\//i.test(type) || /\/javascript$/i.test(type)) {
	        return domToHtml(this._childNodes, true, true);
	      }
	    }
	
	    return domToHtml(this._childNodes, true);
	  });
	
	  dom.Element.prototype.__defineSetter__('doctype', function() {
	    throw new core.DOMException(NO_MODIFICATION_ALLOWED_ERR);
	  });
	  dom.Element.prototype.__defineGetter__('doctype', function() {
	    var r = null;
	    if (this.nodeName == '#document') {
	        if (this._doctype) {
	         r = this._doctype;
	        }
	    }
	    return r;
	  });
	
	  dom.Element.prototype.__defineSetter__('innerHTML', function(html) {
	    //Clear the children first:
	    var child;
	    while ((child = this._childNodes[0])) {
	      this.removeChild(child);
	    }
	
	    if (this.nodeName === '#document') {
	      parseDocType(this, html);
	    }
	    if (html !== "" && html != null) {
	      htmltodom.appendHtmlToElement(html, this);
	    }
	    return html;
	  });
	
	
	  dom.Document.prototype.__defineGetter__('innerHTML', function() {
	    return domToHtml(this._childNodes, true);
	  });
	
	  dom.Document.prototype.__defineSetter__('innerHTML', function(html) {
	    //Clear the children first:
	    var child;
	    while ((child = this._childNodes[0])) {
	      this.removeChild(child);
	    }
	
	    if (this.nodeName === '#document') {
	      parseDocType(this, html);
	    }
	    if (html !== "" && html != null) {
	      htmltodom.appendHtmlToElement(html, this);
	    }
	    return html;
	  });
	
	  var DOC_HTML5      = /<!doctype html>/i,
	      DOC_TYPE       = /<!DOCTYPE (\w(.|\n)*)">/i,
	      DOC_TYPE_START = '<!DOCTYPE ',
	      DOC_TYPE_END   = '">';
	
	  function parseDocType(doc, html) {
	    var publicID = '',
	        systemID = '',
	        fullDT = '',
	        name = 'HTML',
	        set = true,
	        doctype = html.match(DOC_HTML5);
	
	    //Default, No doctype === null
	    doc._doctype = null;
	
	    if (doctype && doctype[0]) { //Handle the HTML shorty doctype
	      fullDT = doctype[0];
	    } else { //Parse the doctype
	      // find the start
	      var start     = html.indexOf(DOC_TYPE_START),
	          end       = html.indexOf(DOC_TYPE_END),
	          docString;
	
	      if (start < 0 || end < 0) {
	        return;
	      }
	
	      docString = html.substr(start, (end-start)+DOC_TYPE_END.length);
	      doctype = docString.replace(/[\n\r]/g,'').match(DOC_TYPE);
	
	      if (!doctype) {
	        return;
	      }
	
	      fullDT = doctype[0];
	      doctype = doctype[1].split(' "');
	      var _id1 = doctype.length ? doctype.pop().replace(/"/g, '') : '',
	          _id2 = doctype.length ? doctype.pop().replace(/"/g, '') : '';
	
	      if (_id1.indexOf('-//') !== -1) {
	        publicID = _id1;
	      }
	      if (_id2.indexOf('-//') !== -1) {
	        publicID = _id2;
	      }
	      if (_id1.indexOf('://') !== -1) {
	        systemID = _id1;
	      }
	      if (_id2.indexOf('://') !== -1) {
	        systemID = _id2;
	      }
	      if (doctype.length) {
	        doctype = doctype[0].split(' ');
	        name = doctype[0].toUpperCase();
	      }
	    }
	    doc._doctype = new dom.DOMImplementation().createDocumentType(name, publicID, systemID);
	    doc._doctype._ownerDocument = doc;
	    doc._doctype._fullDT = fullDT;
	    doc._doctype.toString = function() {
	      return this._fullDT;
	    };
	  }
	
	  dom.Document.prototype.getElementsByClassName = function(className) {
	
	    function filterByClassName(child) {
	      if (!child) {
	        return false;
	      }
	
	      if (child.nodeType &&
	          child.nodeType === dom.Node.ENTITY_REFERENCE_NODE)
	      {
	        child = child._entity;
	      }
	
	      var classString = child.className;
	      if (classString) {
	        var s = classString.split(" ");
	        for (var i=0; i<s.length; i++) {
	          if (s[i] === className) {
	            return true;
	          }
	        }
	      }
	      return false;
	    }
	
	    return new dom.NodeList(this.ownerDocument || this, dom.mapper(this, filterByClassName));
	  };
	
	  dom.Element.prototype.__defineGetter__('nodeName', function(val) {
	    return this._nodeName.toUpperCase();
	  });
	
	  dom.Element.prototype.__defineGetter__('tagName', function(val) {
	    var t = this._tagName.toUpperCase();
	    //Document should not return a tagName
	    if (this.nodeName === '#document') {
	      t = null;
	    }
	    return t;
	  });
	
	  dom.Element.prototype.scrollTop = 0;
	  dom.Element.prototype.scrollLeft = 0;
	
	  dom.Document.prototype.__defineGetter__('parentWindow', function() {
	    if (!this._parentWindow) {
	      var window = exports.windowAugmentation(dom, {document: this, url: this.URL});
	      this._parentWindow = window.getGlobal();
	    }
	    return this._parentWindow;
	  });
	
	  dom.Document.prototype.__defineSetter__('parentWindow', function(window) {
	    this._parentWindow = window.getGlobal();
	  });
	
	  dom.Document.prototype.__defineGetter__('defaultView', function() {
	    return this.parentWindow;
	  });
	
	  dom._augmented = true;
	  return dom;
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, "/index.js", __webpack_require__(14)))

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	var core = __webpack_require__(73).dom.level2.core,
	    html = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./html\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).dom.level2.html,
	    utils = __webpack_require__(75),
	    cssom = __webpack_require__(100),
	    cssstyle = __webpack_require__(101),
	    assert = __webpack_require__(84);
	
	// What works now:
	// - Accessing the rules defined in individual stylesheets
	// - Modifications to style content attribute are reflected in style property
	// - Modifications to style property are reflected in style content attribute
	// TODO
	// - Modifications to style element's textContent are reflected in sheet property.
	// - Modifications to style element's sheet property are reflected in textContent.
	// - Modifications to link.href property are reflected in sheet property.
	// - Less-used features of link: disabled
	// - Less-used features of style: disabled, scoped, title
	// - CSSOM-View
	//   - getComputedStyle(): requires default stylesheet, cascading, inheritance,
	//     filtering by @media (screen? print?), layout for widths/heights
	// - Load events are not in the specs, but apparently some browsers
	//   implement something. Should onload only fire after all @imports have been
	//   loaded, or only the primary sheet?
	
	core.StyleSheet = cssom.StyleSheet;
	core.MediaList = cssom.MediaList;
	core.CSSStyleSheet = cssom.CSSStyleSheet;
	core.CSSRule = cssom.CSSRule;
	core.CSSStyleRule = cssom.CSSStyleRule;
	core.CSSMediaRule = cssom.CSSMediaRule;
	core.CSSImportRule = cssom.CSSImportRule;
	core.CSSStyleDeclaration = cssstyle.CSSStyleDeclaration;
	
	// Relavant specs
	// http://www.w3.org/TR/DOM-Level-2-Style (2000)
	// http://www.w3.org/TR/cssom-view/ (2008)
	// http://dev.w3.org/csswg/cssom/ (2010) Meant to replace DOM Level 2 Style
	// http://www.whatwg.org/specs/web-apps/current-work/multipage/ HTML5, of course
	// http://dev.w3.org/csswg/css-style-attr/  not sure what's new here
	
	// Objects that aren't in cssom library but should be:
	//   CSSRuleList  (cssom just uses array)
	//   CSSFontFaceRule
	//   CSSPageRule
	
	// These rules don't really make sense to implement, so CSSOM draft makes them
	// obsolete.
	//   CSSCharsetRule
	//   CSSUnknownRule
	
	// These objects are considered obsolete by CSSOM draft, although modern
	// browsers implement them.
	//   CSSValue
	//   CSSPrimitiveValue
	//   CSSValueList
	//   RGBColor
	//   Rect
	//   Counter
	
	// StyleSheetList has the same interface as NodeList, so we'll use the same
	// object.
	core.StyleSheetList = core.NodeList;
	
	core.Document.prototype.__defineGetter__('styleSheets', function() {
	  if (!this._styleSheets) {
	    this._styleSheets = new core.StyleSheetList();
	  }
	  // TODO: each style and link element should register its sheet on creation
	  // nad remove it on removal.
	  return this._styleSheets;
	});
	
	
	/**
	 * @this {html.HTMLLinkElement|html.HTMLStyleElement}
	 * @param {string} url
	 * @param {cssom.CSSStyleSheet} sheet
	 * @see http://dev.w3.org/csswg/cssom/#requirements-on-user-agents-implementing0
	 */
	function fetchStylesheet(url, sheet) {
	  html.resourceLoader.load(this, url, function(data, filename) {
	    // TODO: abort if the content-type is not text/css, and the document is
	    // in strict mode
	    evaluateStylesheet.call(this, data, sheet, url);
	  });
	}
	/**
	 * @this {html.HTMLLinkElement|html.HTMLStyleElement}
	 * @param {string} data
	 * @param {cssom.CSSStyleSheet} sheet
	 * @param {string} baseUrl
	 */
	function evaluateStylesheet(data, sheet, baseUrl) {
	  // this is the element
	  var newStyleSheet = cssom.parse(data);
	  var spliceArgs = newStyleSheet.cssRules;
	  spliceArgs.unshift(0, sheet.cssRules.length);
	  Array.prototype.splice.apply(sheet.cssRules, spliceArgs);
	  scanForImportRules.call(this, sheet.cssRules, baseUrl);
	}
	/**
	 * @this {html.HTMLLinkElement|html.HTMLStyleElement}
	 * @param {cssom.CSSStyleSheet} sheet
	 * @param {string} baseUrl
	 */
	function scanForImportRules(cssRules, baseUrl) {
	  if (!cssRules) return;
	  for (var i = 0; i < cssRules.length; ++i) {
	    if (cssRules[i].cssRules) {
	      // @media rule: keep searching inside it.
	      scanForImportRules.call(this, cssRules[i].cssRules, baseUrl);
	    } else if (cssRules[i].href) {
	      // @import rule: fetch the resource and evaluate it.
	      // See http://dev.w3.org/csswg/cssom/#css-import-rule
	      //     If loading of the style sheet fails its cssRules list is simply
	      //     empty. I.e. an @import rule always has an associated style sheet.
	      fetchStylesheet.call(this, cssRules[i].href, this.sheet);
	    }
	  }
	}
	
	/**
	 * @param {string} data
	 * @param {cssstyle.CSSStyleDeclaration} style
	 */
	function evaluateStyleAttribute(data) {
	  // this is the element.
	
	  // currently, cssom's parse doesn't really work if you pass in
	  // {state: 'name'}, so instead we just build a dummy sheet.
	  var styleSheet = cssom.parse('dummy{' + data + '}');
	  var style = this.style;
	  while (style.length) {
	    style.removeProperty(style[0]);
	  }
	  if (styleSheet.cssRules.length > 0 && styleSheet.cssRules[0].style) {
	    var newStyle = styleSheet.cssRules[0].style;
	    for (var i = 0; i < newStyle.length; ++i) {
	      var prop = newStyle[i];
	      style.setProperty(
	          prop,
	          newStyle.getPropertyValue(prop),
	          newStyle.getPropertyPriority(prop));
	    }
	  }
	}
	
	/**
	 * Subclass of core.Attr that reflects the current cssText.
	 */
	function StyleAttr(node, value) {
	  this._node = node;
	  core.Attr.call(this, node.ownerDocument, 'style');
	  this.nodeValue = value;
	}
	StyleAttr.prototype = {
	  get nodeValue() {
	    return this._node.style.cssText;
	  },
	  set nodeValue(value) {
	    evaluateStyleAttribute.call(this._node, value);
	  }
	};
	StyleAttr.prototype.__proto__ = core.Attr.prototype;
	
	/**
	 * Overwrite core.AttrNodeMap#setNamedItem to create a StyleAttr instance
	 * instead of a core.Attr if the name equals 'style'.
	 */
	utils.intercept(core.AttrNodeMap, 'setNamedItem', function(_super, args, attr) {
	  if (attr.name == 'style') {
	    attr = new StyleAttr(this._parentNode, attr.nodeValue);
	  }
	  return _super.call(this, attr);
	});
	
	/**
	 * Lazily create a CSSStyleDeclaration.
	 */
	html.HTMLElement.prototype.__defineGetter__('style', function() {
	  var style = this._cssStyleDeclaration;
	  if (!style) {
	    style = this._cssStyleDeclaration = new cssstyle.CSSStyleDeclaration();
	    if (!this.getAttributeNode('style')) {
	      this.setAttribute('style', '');
	    }
	  }
	  return style;
	});
	
	assert.equal(undefined, html.HTMLLinkElement._init);
	html.HTMLLinkElement._init = function() {
	  this.addEventListener('DOMNodeInsertedIntoDocument', function() {
	    if (!/(?:[ \t\n\r\f]|^)stylesheet(?:[ \t\n\r\f]|$)/i.test(this.rel)) {
	      // rel is a space-separated list of tokens, and the original rel types
	      // are case-insensitive.
	      return;
	    }
	    if (this.href) {
	      fetchStylesheet.call(this, this.href, this.sheet);
	    }
	  });
	  this.addEventListener('DOMNodeRemovedFromDocument', function() {
	  });
	};
	/**
	 * @this {HTMLStyleElement|HTMLLinkElement}
	 */
	var getOrCreateSheet = function() {
	  if (!this._cssStyleSheet) {
	    this._cssStyleSheet = new cssom.CSSStyleSheet();
	  }
	  return this._cssStyleSheet;
	};
	html.HTMLLinkElement.prototype.__defineGetter__('sheet', getOrCreateSheet);
	
	assert.equal(undefined, html.HTMLStyleElement._init);
	html.HTMLStyleElement._init = function() {
	  //console.log('init style')
	  this.addEventListener('DOMNodeInsertedIntoDocument', function() {
	    //console.log('style inserted')
	    //console.log('sheet: ', this.sheet);
	    if (this.type && this.type !== 'text/css') {
	      //console.log('bad type: ' + this.type)
	      return;
	    }
	    evaluateStylesheet.call(this, this.textContent, this.sheet, this._ownerDocument.URL);
	  });
	};
	html.HTMLStyleElement.prototype.__defineGetter__('sheet', getOrCreateSheet);
	
	exports.dom = {
	  level2 : {
	    html : html,
	    core : core
	  }
	};


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	var createSizzle = __webpack_require__(76);
	exports.applyQuerySelector = function(doc, dom) {
	  var addSizzle = function(document) {
	
	    if (!document._sizzle) {
	      document._sizzle = createSizzle(document);
	    }
	    return document._sizzle;
	  };
	
	  doc.querySelector = function(selector) {
	    return addSizzle(this)(selector, this)[0];
	  };
	
	  doc.querySelectorAll = function(selector) {
	    return new dom.NodeList(addSizzle(this)(selector, this));
	  };
	
	  var _createElement = doc.createElement;
	  doc.createElement = function() {
	      var element = _createElement.apply(this, arguments);
	
	      element.querySelector = function(selector) {
	        return addSizzle(this.ownerDocument)(selector, this)[0];
	      };
	
	      element.querySelectorAll = function(selector) {
	        var el = this;
	        if (!this.parentNode) {
	          el = this.ownerDocument.createElement("div");
	          el.appendChild(this);
	        }
	        return new dom.NodeList(addSizzle(this.ownerDocument)(selector, el.parentNode || el));
	      };
	
	      return element;
	  };
	
	};


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var punycode = __webpack_require__(97);
	
	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;
	
	exports.Url = Url;
	
	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}
	
	// Reference: RFC 3986, RFC 1808, RFC 2396
	
	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,
	
	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
	
	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
	
	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(96);
	
	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject(url) && url instanceof Url) return url;
	
	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}
	
	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }
	
	  var rest = url;
	
	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();
	
	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }
	
	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }
	
	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {
	
	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c
	
	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.
	
	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	
	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }
	
	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }
	
	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;
	
	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);
	
	    // pull out port.
	    this.parseHost();
	
	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';
	
	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';
	
	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }
	
	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }
	
	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a puny coded representation of "domain".
	      // It only converts the part of the domain name that
	      // has non ASCII characters. I.e. it dosent matter if
	      // you call it with a domain that already is in ASCII.
	      var domainArray = this.hostname.split('.');
	      var newOut = [];
	      for (var i = 0; i < domainArray.length; ++i) {
	        var s = domainArray[i];
	        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
	            'xn--' + punycode.encode(s) : s);
	      }
	      this.hostname = newOut.join('.');
	    }
	
	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;
	
	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }
	
	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {
	
	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }
	
	
	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }
	
	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }
	
	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};
	
	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}
	
	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }
	
	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';
	
	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }
	
	  if (this.query &&
	      isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }
	
	  var search = this.search || (query && ('?' + query)) || '';
	
	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';
	
	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }
	
	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;
	
	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');
	
	  return protocol + host + pathname + search + hash;
	};
	
	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}
	
	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};
	
	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}
	
	Url.prototype.resolveObject = function(relative) {
	  if (isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }
	
	  var result = new Url();
	  Object.keys(this).forEach(function(k) {
	    result[k] = this[k];
	  }, this);
	
	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;
	
	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }
	
	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    Object.keys(relative).forEach(function(k) {
	      if (k !== 'protocol')
	        result[k] = relative[k];
	    });
	
	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }
	
	    result.href = result.format();
	    return result;
	  }
	
	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      Object.keys(relative).forEach(function(k) {
	        result[k] = relative[k];
	      });
	      result.href = result.format();
	      return result;
	    }
	
	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }
	
	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];
	
	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }
	
	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especialy happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host) && (last === '.' || last === '..') ||
	      last === '');
	
	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last == '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }
	
	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }
	
	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }
	
	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }
	
	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');
	
	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especialy happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }
	
	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);
	
	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }
	
	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }
	
	  //to support request.http
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};
	
	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};
	
	function isString(arg) {
	  return typeof arg === "string";
	}
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	
	function isNull(arg) {
	  return arg === null;
	}
	function isNullOrUndefined(arg) {
	  return  arg == null;
	}


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright 2010-2012 Mikeal Rogers
	//
	//    Licensed under the Apache License, Version 2.0 (the "License");
	//    you may not use this file except in compliance with the License.
	//    You may obtain a copy of the License at
	//
	//        http://www.apache.org/licenses/LICENSE-2.0
	//
	//    Unless required by applicable law or agreed to in writing, software
	//    distributed under the License is distributed on an "AS IS" BASIS,
	//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	//    See the License for the specific language governing permissions and
	//    limitations under the License.
	
	var cookies = __webpack_require__(86)
	  , copy = __webpack_require__(87)
	  , Request = __webpack_require__(85)
	  , util = __webpack_require__(102)
	  ;
	
	
	
	// organize params for patch, post, put, head, del
	function initParams(uri, options, callback) {
	  var opts;
	  if ((typeof options === 'function') && !callback) callback = options
	  if (options && typeof options === 'object') {
	    opts = util._extend({}, options);
	    opts.uri = uri
	  } else if (typeof uri === 'string') {
	    opts = {uri:uri}
	  } else {
	    opts = util._extend({}, uri);
	    uri = opts.uri
	  }
	
	  return { uri: uri, options: opts, callback: callback }
	}
	
	function request (uri, options, callback) {
	  var opts;
	  if (typeof uri === 'undefined') throw new Error('undefined is not a valid uri or options object.')
	  if ((typeof options === 'function') && !callback) callback = options
	  if (options && typeof options === 'object') {
	    opts = util._extend({}, options);
	    opts.uri = uri
	  } else if (typeof uri === 'string') {
	    opts = {uri:uri}
	  } else {
	    opts = util._extend({}, uri);
	  }
	
	  if (callback) opts.callback = callback
	  var r = new Request(opts)
	  return r
	}
	
	module.exports = request
	
	request.Request = Request;
	
	request.debug = process.env.NODE_DEBUG && /request/.test(process.env.NODE_DEBUG)
	
	request.initParams = initParams
	
	request.defaults = function (options, requester) {
	  var def = function (method) {
	    var d = function (uri, opts, callback) {
	      var params = initParams(uri, opts, callback)
	      for (var i in options) {
	        if (params.options[i] === undefined) params.options[i] = options[i]
	      }
	      if(typeof requester === 'function') {
	        if(method === request) {
	          method = requester
	        } else {
	          params.options._requester = requester
	        }
	      }
	      return method(params.options, params.callback)
	    }
	    return d
	  }
	  var de = def(request)
	  de.get = def(request.get)
	  de.patch = def(request.patch)
	  de.post = def(request.post)
	  de.put = def(request.put)
	  de.head = def(request.head)
	  de.del = def(request.del)
	  de.cookie = def(request.cookie)
	  de.jar = request.jar
	  return de
	}
	
	function requester(params) {
	  if(typeof params.options._requester === 'function') {
	    return params.options._requester
	  } else {
	    return request
	  }
	}
	
	request.forever = function (agentOptions, optionsArg) {
	  var options = {}
	  if (optionsArg) {
	    for (var option in optionsArg) {
	      options[option] = optionsArg[option]
	    }
	  }
	  if (agentOptions) options.agentOptions = agentOptions
	  options.forever = true
	  return request.defaults(options)
	}
	
	request.get = function (uri, options, callback) {
	  var params = initParams(uri, options, callback)
	  params.options.method = 'GET'
	  return requester(params)(params.uri || null, params.options, params.callback)
	}
	request.post = function (uri, options, callback) {
	  var params = initParams(uri, options, callback)
	  params.options.method = 'POST'
	  return requester(params)(params.uri || null, params.options, params.callback)
	}
	request.put = function (uri, options, callback) {
	  var params = initParams(uri, options, callback)
	  params.options.method = 'PUT'
	  return requester(params)(params.uri || null, params.options, params.callback)
	}
	request.patch = function (uri, options, callback) {
	  var params = initParams(uri, options, callback)
	  params.options.method = 'PATCH'
	  return requester(params)(params.uri || null, params.options, params.callback)
	}
	request.head = function (uri, options, callback) {
	  var params = initParams(uri, options, callback)
	  params.options.method = 'HEAD'
	  if (params.options.body ||
	      params.options.requestBodyStream ||
	      (params.options.json && typeof params.options.json !== 'boolean') ||
	      params.options.multipart) {
	    throw new Error("HTTP HEAD requests MUST NOT include a request body.")
	  }
	
	  return requester(params)(params.uri || null, params.options, params.callback)
	}
	request.del = function (uri, options, callback) {
	  var params = initParams(uri, options, callback)
	  params.options.method = 'DELETE'
	  return requester(params)(params.uri || null, params.options, params.callback)
	}
	request.jar = function () {
	  return cookies.jar();
	}
	request.cookie = function (str) {
	  return cookies.parse(str);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	var http = module.exports;
	var EventEmitter = __webpack_require__(103).EventEmitter;
	var Request = __webpack_require__(91);
	var url = __webpack_require__(44)
	
	http.request = function (params, cb) {
	    if (typeof params === 'string') {
	        params = url.parse(params)
	    }
	    if (!params) params = {};
	    if (!params.host && !params.port) {
	        params.port = parseInt(window.location.port, 10);
	    }
	    if (!params.host && params.hostname) {
	        params.host = params.hostname;
	    }
	    
	    if (!params.scheme) params.scheme = window.location.protocol.split(':')[0];
	    if (!params.host) {
	        params.host = window.location.hostname || window.location.host;
	    }
	    if (/:/.test(params.host)) {
	        if (!params.port) {
	            params.port = params.host.split(':')[1];
	        }
	        params.host = params.host.split(':')[0];
	    }
	    if (!params.port) params.port = params.scheme == 'https' ? 443 : 80;
	    
	    var req = new Request(new xhrHttp, params);
	    if (cb) req.on('response', cb);
	    return req;
	};
	
	http.get = function (params, cb) {
	    params.method = 'GET';
	    var req = http.request(params, cb);
	    req.end();
	    return req;
	};
	
	http.Agent = function () {};
	http.Agent.defaultMaxSockets = 4;
	
	var xhrHttp = (function () {
	    if (typeof window === 'undefined') {
	        throw new Error('no window object present');
	    }
	    else if (window.XMLHttpRequest) {
	        return window.XMLHttpRequest;
	    }
	    else if (window.ActiveXObject) {
	        var axs = [
	            'Msxml2.XMLHTTP.6.0',
	            'Msxml2.XMLHTTP.3.0',
	            'Microsoft.XMLHTTP'
	        ];
	        for (var i = 0; i < axs.length; i++) {
	            try {
	                var ax = new(window.ActiveXObject)(axs[i]);
	                return function () {
	                    if (ax) {
	                        var ax_ = ax;
	                        ax = null;
	                        return ax_;
	                    }
	                    else {
	                        return new(window.ActiveXObject)(axs[i]);
	                    }
	                };
	            }
	            catch (e) {}
	        }
	        throw new Error('ajax not supported in this browser')
	    }
	    else {
	        throw new Error('ajax not supported in this browser');
	    }
	})();
	
	http.STATUS_CODES = {
	    100 : 'Continue',
	    101 : 'Switching Protocols',
	    102 : 'Processing',                 // RFC 2518, obsoleted by RFC 4918
	    200 : 'OK',
	    201 : 'Created',
	    202 : 'Accepted',
	    203 : 'Non-Authoritative Information',
	    204 : 'No Content',
	    205 : 'Reset Content',
	    206 : 'Partial Content',
	    207 : 'Multi-Status',               // RFC 4918
	    300 : 'Multiple Choices',
	    301 : 'Moved Permanently',
	    302 : 'Moved Temporarily',
	    303 : 'See Other',
	    304 : 'Not Modified',
	    305 : 'Use Proxy',
	    307 : 'Temporary Redirect',
	    400 : 'Bad Request',
	    401 : 'Unauthorized',
	    402 : 'Payment Required',
	    403 : 'Forbidden',
	    404 : 'Not Found',
	    405 : 'Method Not Allowed',
	    406 : 'Not Acceptable',
	    407 : 'Proxy Authentication Required',
	    408 : 'Request Time-out',
	    409 : 'Conflict',
	    410 : 'Gone',
	    411 : 'Length Required',
	    412 : 'Precondition Failed',
	    413 : 'Request Entity Too Large',
	    414 : 'Request-URI Too Large',
	    415 : 'Unsupported Media Type',
	    416 : 'Requested Range Not Satisfiable',
	    417 : 'Expectation Failed',
	    418 : 'I\'m a teapot',              // RFC 2324
	    422 : 'Unprocessable Entity',       // RFC 4918
	    423 : 'Locked',                     // RFC 4918
	    424 : 'Failed Dependency',          // RFC 4918
	    425 : 'Unordered Collection',       // RFC 4918
	    426 : 'Upgrade Required',           // RFC 2817
	    428 : 'Precondition Required',      // RFC 6585
	    429 : 'Too Many Requests',          // RFC 6585
	    431 : 'Request Header Fields Too Large',// RFC 6585
	    500 : 'Internal Server Error',
	    501 : 'Not Implemented',
	    502 : 'Bad Gateway',
	    503 : 'Service Unavailable',
	    504 : 'Gateway Time-out',
	    505 : 'HTTP Version Not Supported',
	    506 : 'Variant Also Negotiates',    // RFC 2295
	    507 : 'Insufficient Storage',       // RFC 4918
	    509 : 'Bandwidth Limit Exceeded',
	    510 : 'Not Extended',               // RFC 2774
	    511 : 'Network Authentication Required' // RFC 6585
	};

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	var http = __webpack_require__(46);
	
	var https = module.exports;
	
	for (var key in http) {
	    if (http.hasOwnProperty(key)) https[key] = http[key];
	};
	
	https.request = function (params, cb) {
	    if (!params) params = {};
	    params.scheme = 'https';
	    return http.request.call(this, params, cb);
	}


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	
	var base64 = __webpack_require__(127)
	var ieee754 = __webpack_require__(107)
	
	exports.Buffer = Buffer
	exports.SlowBuffer = Buffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192
	
	/**
	 * If `Buffer._useTypedArrays`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (compatible down to IE6)
	 */
	Buffer._useTypedArrays = (function () {
	  // Detect if browser supports Typed Arrays. Supported browsers are IE 10+, Firefox 4+,
	  // Chrome 7+, Safari 5.1+, Opera 11.6+, iOS 4.2+. If the browser does not support adding
	  // properties to `Uint8Array` instances, then that's the same as no `Uint8Array` support
	  // because we need to be able to add all the node Buffer API methods. This is an issue
	  // in Firefox 4-29. Now fixed: https://bugzilla.mozilla.org/show_bug.cgi?id=695438
	  try {
	    var buf = new ArrayBuffer(0)
	    var arr = new Uint8Array(buf)
	    arr.foo = function () { return 42 }
	    return 42 === arr.foo() &&
	        typeof arr.subarray === 'function' // Chrome 9-10 lack `subarray`
	  } catch (e) {
	    return false
	  }
	})()
	
	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (subject, encoding, noZero) {
	  if (!(this instanceof Buffer))
	    return new Buffer(subject, encoding, noZero)
	
	  var type = typeof subject
	
	  // Workaround: node's base64 implementation allows for non-padded strings
	  // while base64-js does not.
	  if (encoding === 'base64' && type === 'string') {
	    subject = stringtrim(subject)
	    while (subject.length % 4 !== 0) {
	      subject = subject + '='
	    }
	  }
	
	  // Find the length
	  var length
	  if (type === 'number')
	    length = coerce(subject)
	  else if (type === 'string')
	    length = Buffer.byteLength(subject, encoding)
	  else if (type === 'object')
	    length = coerce(subject.length) // assume that object is array-like
	  else
	    throw new Error('First argument needs to be a number, array or string.')
	
	  var buf
	  if (Buffer._useTypedArrays) {
	    // Preferred: Return an augmented `Uint8Array` instance for best performance
	    buf = Buffer._augment(new Uint8Array(length))
	  } else {
	    // Fallback: Return THIS instance of Buffer (created by `new`)
	    buf = this
	    buf.length = length
	    buf._isBuffer = true
	  }
	
	  var i
	  if (Buffer._useTypedArrays && typeof subject.byteLength === 'number') {
	    // Speed optimization -- use set if we're copying from a typed array
	    buf._set(subject)
	  } else if (isArrayish(subject)) {
	    // Treat array-ish objects as a byte array
	    if (Buffer.isBuffer(subject)) {
	      for (i = 0; i < length; i++)
	        buf[i] = subject.readUInt8(i)
	    } else {
	      for (i = 0; i < length; i++)
	        buf[i] = ((subject[i] % 256) + 256) % 256
	    }
	  } else if (type === 'string') {
	    buf.write(subject, 0, encoding)
	  } else if (type === 'number' && !Buffer._useTypedArrays && !noZero) {
	    for (i = 0; i < length; i++) {
	      buf[i] = 0
	    }
	  }
	
	  return buf
	}
	
	// STATIC METHODS
	// ==============
	
	Buffer.isEncoding = function (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}
	
	Buffer.isBuffer = function (b) {
	  return !!(b !== null && b !== undefined && b._isBuffer)
	}
	
	Buffer.byteLength = function (str, encoding) {
	  var ret
	  str = str.toString()
	  switch (encoding || 'utf8') {
	    case 'hex':
	      ret = str.length / 2
	      break
	    case 'utf8':
	    case 'utf-8':
	      ret = utf8ToBytes(str).length
	      break
	    case 'ascii':
	    case 'binary':
	    case 'raw':
	      ret = str.length
	      break
	    case 'base64':
	      ret = base64ToBytes(str).length
	      break
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      ret = str.length * 2
	      break
	    default:
	      throw new Error('Unknown encoding')
	  }
	  return ret
	}
	
	Buffer.concat = function (list, totalLength) {
	  assert(isArray(list), 'Usage: Buffer.concat(list[, length])')
	
	  if (list.length === 0) {
	    return new Buffer(0)
	  } else if (list.length === 1) {
	    return list[0]
	  }
	
	  var i
	  if (totalLength === undefined) {
	    totalLength = 0
	    for (i = 0; i < list.length; i++) {
	      totalLength += list[i].length
	    }
	  }
	
	  var buf = new Buffer(totalLength)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}
	
	Buffer.compare = function (a, b) {
	  assert(Buffer.isBuffer(a) && Buffer.isBuffer(b), 'Arguments must be Buffers')
	  var x = a.length
	  var y = b.length
	  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}
	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }
	  if (x < y) {
	    return -1
	  }
	  if (y < x) {
	    return 1
	  }
	  return 0
	}
	
	// BUFFER INSTANCE METHODS
	// =======================
	
	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }
	
	  // must be an even number of digits
	  var strLen = string.length
	  assert(strLen % 2 === 0, 'Invalid hex string')
	
	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var byte = parseInt(string.substr(i * 2, 2), 16)
	    assert(!isNaN(byte), 'Invalid hex string')
	    buf[offset + i] = byte
	  }
	  return i
	}
	
	function utf8Write (buf, string, offset, length) {
	  var charsWritten = blitBuffer(utf8ToBytes(string), buf, offset, length)
	  return charsWritten
	}
	
	function asciiWrite (buf, string, offset, length) {
	  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)
	  return charsWritten
	}
	
	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}
	
	function base64Write (buf, string, offset, length) {
	  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)
	  return charsWritten
	}
	
	function utf16leWrite (buf, string, offset, length) {
	  var charsWritten = blitBuffer(utf16leToBytes(string), buf, offset, length)
	  return charsWritten
	}
	
	Buffer.prototype.write = function (string, offset, length, encoding) {
	  // Support both (string, offset, length, encoding)
	  // and the legacy (string, encoding, offset, length)
	  if (isFinite(offset)) {
	    if (!isFinite(length)) {
	      encoding = length
	      length = undefined
	    }
	  } else {  // legacy
	    var swap = encoding
	    encoding = offset
	    offset = length
	    length = swap
	  }
	
	  offset = Number(offset) || 0
	  var remaining = this.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }
	  encoding = String(encoding || 'utf8').toLowerCase()
	
	  var ret
	  switch (encoding) {
	    case 'hex':
	      ret = hexWrite(this, string, offset, length)
	      break
	    case 'utf8':
	    case 'utf-8':
	      ret = utf8Write(this, string, offset, length)
	      break
	    case 'ascii':
	      ret = asciiWrite(this, string, offset, length)
	      break
	    case 'binary':
	      ret = binaryWrite(this, string, offset, length)
	      break
	    case 'base64':
	      ret = base64Write(this, string, offset, length)
	      break
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      ret = utf16leWrite(this, string, offset, length)
	      break
	    default:
	      throw new Error('Unknown encoding')
	  }
	  return ret
	}
	
	Buffer.prototype.toString = function (encoding, start, end) {
	  var self = this
	
	  encoding = String(encoding || 'utf8').toLowerCase()
	  start = Number(start) || 0
	  end = (end === undefined) ? self.length : Number(end)
	
	  // Fastpath empty strings
	  if (end === start)
	    return ''
	
	  var ret
	  switch (encoding) {
	    case 'hex':
	      ret = hexSlice(self, start, end)
	      break
	    case 'utf8':
	    case 'utf-8':
	      ret = utf8Slice(self, start, end)
	      break
	    case 'ascii':
	      ret = asciiSlice(self, start, end)
	      break
	    case 'binary':
	      ret = binarySlice(self, start, end)
	      break
	    case 'base64':
	      ret = base64Slice(self, start, end)
	      break
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      ret = utf16leSlice(self, start, end)
	      break
	    default:
	      throw new Error('Unknown encoding')
	  }
	  return ret
	}
	
	Buffer.prototype.toJSON = function () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}
	
	Buffer.prototype.equals = function (b) {
	  assert(Buffer.isBuffer(b), 'Argument must be a Buffer')
	  return Buffer.compare(this, b) === 0
	}
	
	Buffer.prototype.compare = function (b) {
	  assert(Buffer.isBuffer(b), 'Argument must be a Buffer')
	  return Buffer.compare(this, b)
	}
	
	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function (target, target_start, start, end) {
	  var source = this
	
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (!target_start) target_start = 0
	
	  // Copy 0 bytes; we're done
	  if (end === start) return
	  if (target.length === 0 || source.length === 0) return
	
	  // Fatal error conditions
	  assert(end >= start, 'sourceEnd < sourceStart')
	  assert(target_start >= 0 && target_start < target.length,
	      'targetStart out of bounds')
	  assert(start >= 0 && start < source.length, 'sourceStart out of bounds')
	  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')
	
	  // Are we oob?
	  if (end > this.length)
	    end = this.length
	  if (target.length - target_start < end - start)
	    end = target.length - target_start + start
	
	  var len = end - start
	
	  if (len < 100 || !Buffer._useTypedArrays) {
	    for (var i = 0; i < len; i++) {
	      target[i + target_start] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), target_start)
	  }
	}
	
	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}
	
	function utf8Slice (buf, start, end) {
	  var res = ''
	  var tmp = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; i++) {
	    if (buf[i] <= 0x7F) {
	      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
	      tmp = ''
	    } else {
	      tmp += '%' + buf[i].toString(16)
	    }
	  }
	
	  return res + decodeUtf8Char(tmp)
	}
	
	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}
	
	function binarySlice (buf, start, end) {
	  return asciiSlice(buf, start, end)
	}
	
	function hexSlice (buf, start, end) {
	  var len = buf.length
	
	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len
	
	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}
	
	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}
	
	Buffer.prototype.slice = function (start, end) {
	  var len = this.length
	  start = clamp(start, len, 0)
	  end = clamp(end, len, len)
	
	  if (Buffer._useTypedArrays) {
	    return Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    var newBuf = new Buffer(sliceLen, undefined, true)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	    return newBuf
	  }
	}
	
	// `get` will be removed in Node 0.13+
	Buffer.prototype.get = function (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}
	
	// `set` will be removed in Node 0.13+
	Buffer.prototype.set = function (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}
	
	Buffer.prototype.readUInt8 = function (offset, noAssert) {
	  if (!noAssert) {
	    assert(offset !== undefined && offset !== null, 'missing offset')
	    assert(offset < this.length, 'Trying to read beyond buffer length')
	  }
	
	  if (offset >= this.length)
	    return
	
	  return this[offset]
	}
	
	function readUInt16 (buf, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
	    assert(offset !== undefined && offset !== null, 'missing offset')
	    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
	  }
	
	  var len = buf.length
	  if (offset >= len)
	    return
	
	  var val
	  if (littleEndian) {
	    val = buf[offset]
	    if (offset + 1 < len)
	      val |= buf[offset + 1] << 8
	  } else {
	    val = buf[offset] << 8
	    if (offset + 1 < len)
	      val |= buf[offset + 1]
	  }
	  return val
	}
	
	Buffer.prototype.readUInt16LE = function (offset, noAssert) {
	  return readUInt16(this, offset, true, noAssert)
	}
	
	Buffer.prototype.readUInt16BE = function (offset, noAssert) {
	  return readUInt16(this, offset, false, noAssert)
	}
	
	function readUInt32 (buf, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
	    assert(offset !== undefined && offset !== null, 'missing offset')
	    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
	  }
	
	  var len = buf.length
	  if (offset >= len)
	    return
	
	  var val
	  if (littleEndian) {
	    if (offset + 2 < len)
	      val = buf[offset + 2] << 16
	    if (offset + 1 < len)
	      val |= buf[offset + 1] << 8
	    val |= buf[offset]
	    if (offset + 3 < len)
	      val = val + (buf[offset + 3] << 24 >>> 0)
	  } else {
	    if (offset + 1 < len)
	      val = buf[offset + 1] << 16
	    if (offset + 2 < len)
	      val |= buf[offset + 2] << 8
	    if (offset + 3 < len)
	      val |= buf[offset + 3]
	    val = val + (buf[offset] << 24 >>> 0)
	  }
	  return val
	}
	
	Buffer.prototype.readUInt32LE = function (offset, noAssert) {
	  return readUInt32(this, offset, true, noAssert)
	}
	
	Buffer.prototype.readUInt32BE = function (offset, noAssert) {
	  return readUInt32(this, offset, false, noAssert)
	}
	
	Buffer.prototype.readInt8 = function (offset, noAssert) {
	  if (!noAssert) {
	    assert(offset !== undefined && offset !== null,
	        'missing offset')
	    assert(offset < this.length, 'Trying to read beyond buffer length')
	  }
	
	  if (offset >= this.length)
	    return
	
	  var neg = this[offset] & 0x80
	  if (neg)
	    return (0xff - this[offset] + 1) * -1
	  else
	    return this[offset]
	}
	
	function readInt16 (buf, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
	    assert(offset !== undefined && offset !== null, 'missing offset')
	    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
	  }
	
	  var len = buf.length
	  if (offset >= len)
	    return
	
	  var val = readUInt16(buf, offset, littleEndian, true)
	  var neg = val & 0x8000
	  if (neg)
	    return (0xffff - val + 1) * -1
	  else
	    return val
	}
	
	Buffer.prototype.readInt16LE = function (offset, noAssert) {
	  return readInt16(this, offset, true, noAssert)
	}
	
	Buffer.prototype.readInt16BE = function (offset, noAssert) {
	  return readInt16(this, offset, false, noAssert)
	}
	
	function readInt32 (buf, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
	    assert(offset !== undefined && offset !== null, 'missing offset')
	    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
	  }
	
	  var len = buf.length
	  if (offset >= len)
	    return
	
	  var val = readUInt32(buf, offset, littleEndian, true)
	  var neg = val & 0x80000000
	  if (neg)
	    return (0xffffffff - val + 1) * -1
	  else
	    return val
	}
	
	Buffer.prototype.readInt32LE = function (offset, noAssert) {
	  return readInt32(this, offset, true, noAssert)
	}
	
	Buffer.prototype.readInt32BE = function (offset, noAssert) {
	  return readInt32(this, offset, false, noAssert)
	}
	
	function readFloat (buf, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
	    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
	  }
	
	  return ieee754.read(buf, offset, littleEndian, 23, 4)
	}
	
	Buffer.prototype.readFloatLE = function (offset, noAssert) {
	  return readFloat(this, offset, true, noAssert)
	}
	
	Buffer.prototype.readFloatBE = function (offset, noAssert) {
	  return readFloat(this, offset, false, noAssert)
	}
	
	function readDouble (buf, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
	    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')
	  }
	
	  return ieee754.read(buf, offset, littleEndian, 52, 8)
	}
	
	Buffer.prototype.readDoubleLE = function (offset, noAssert) {
	  return readDouble(this, offset, true, noAssert)
	}
	
	Buffer.prototype.readDoubleBE = function (offset, noAssert) {
	  return readDouble(this, offset, false, noAssert)
	}
	
	Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
	  if (!noAssert) {
	    assert(value !== undefined && value !== null, 'missing value')
	    assert(offset !== undefined && offset !== null, 'missing offset')
	    assert(offset < this.length, 'trying to write beyond buffer length')
	    verifuint(value, 0xff)
	  }
	
	  if (offset >= this.length) return
	
	  this[offset] = value
	  return offset + 1
	}
	
	function writeUInt16 (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    assert(value !== undefined && value !== null, 'missing value')
	    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
	    assert(offset !== undefined && offset !== null, 'missing offset')
	    assert(offset + 1 < buf.length, 'trying to write beyond buffer length')
	    verifuint(value, 0xffff)
	  }
	
	  var len = buf.length
	  if (offset >= len)
	    return
	
	  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {
	    buf[offset + i] =
	        (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	            (littleEndian ? i : 1 - i) * 8
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
	  return writeUInt16(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
	  return writeUInt16(this, value, offset, false, noAssert)
	}
	
	function writeUInt32 (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    assert(value !== undefined && value !== null, 'missing value')
	    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
	    assert(offset !== undefined && offset !== null, 'missing offset')
	    assert(offset + 3 < buf.length, 'trying to write beyond buffer length')
	    verifuint(value, 0xffffffff)
	  }
	
	  var len = buf.length
	  if (offset >= len)
	    return
	
	  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {
	    buf[offset + i] =
	        (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
	  return writeUInt32(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
	  return writeUInt32(this, value, offset, false, noAssert)
	}
	
	Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
	  if (!noAssert) {
	    assert(value !== undefined && value !== null, 'missing value')
	    assert(offset !== undefined && offset !== null, 'missing offset')
	    assert(offset < this.length, 'Trying to write beyond buffer length')
	    verifsint(value, 0x7f, -0x80)
	  }
	
	  if (offset >= this.length)
	    return
	
	  if (value >= 0)
	    this.writeUInt8(value, offset, noAssert)
	  else
	    this.writeUInt8(0xff + value + 1, offset, noAssert)
	  return offset + 1
	}
	
	function writeInt16 (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    assert(value !== undefined && value !== null, 'missing value')
	    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
	    assert(offset !== undefined && offset !== null, 'missing offset')
	    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')
	    verifsint(value, 0x7fff, -0x8000)
	  }
	
	  var len = buf.length
	  if (offset >= len)
	    return
	
	  if (value >= 0)
	    writeUInt16(buf, value, offset, littleEndian, noAssert)
	  else
	    writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)
	  return offset + 2
	}
	
	Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
	  return writeInt16(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
	  return writeInt16(this, value, offset, false, noAssert)
	}
	
	function writeInt32 (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    assert(value !== undefined && value !== null, 'missing value')
	    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
	    assert(offset !== undefined && offset !== null, 'missing offset')
	    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
	    verifsint(value, 0x7fffffff, -0x80000000)
	  }
	
	  var len = buf.length
	  if (offset >= len)
	    return
	
	  if (value >= 0)
	    writeUInt32(buf, value, offset, littleEndian, noAssert)
	  else
	    writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)
	  return offset + 4
	}
	
	Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
	  return writeInt32(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
	  return writeInt32(this, value, offset, false, noAssert)
	}
	
	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    assert(value !== undefined && value !== null, 'missing value')
	    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
	    assert(offset !== undefined && offset !== null, 'missing offset')
	    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
	    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	
	  var len = buf.length
	  if (offset >= len)
	    return
	
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}
	
	Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}
	
	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    assert(value !== undefined && value !== null, 'missing value')
	    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
	    assert(offset !== undefined && offset !== null, 'missing offset')
	    assert(offset + 7 < buf.length,
	        'Trying to write beyond buffer length')
	    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	
	  var len = buf.length
	  if (offset >= len)
	    return
	
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}
	
	Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}
	
	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length
	
	  assert(end >= start, 'end < start')
	
	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return
	
	  assert(start >= 0 && start < this.length, 'start out of bounds')
	  assert(end >= 0 && end <= this.length, 'end out of bounds')
	
	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }
	
	  return this
	}
	
	Buffer.prototype.inspect = function () {
	  var out = []
	  var len = this.length
	  for (var i = 0; i < len; i++) {
	    out[i] = toHex(this[i])
	    if (i === exports.INSPECT_MAX_BYTES) {
	      out[i + 1] = '...'
	      break
	    }
	  }
	  return '<Buffer ' + out.join(' ') + '>'
	}
	
	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer._useTypedArrays) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new Error('Buffer.toArrayBuffer not supported in this browser')
	  }
	}
	
	// HELPER FUNCTIONS
	// ================
	
	var BP = Buffer.prototype
	
	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function (arr) {
	  arr._isBuffer = true
	
	  // save reference to original Uint8Array get/set methods before overwriting
	  arr._get = arr.get
	  arr._set = arr.set
	
	  // deprecated, will be removed in node 0.13+
	  arr.get = BP.get
	  arr.set = BP.set
	
	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer
	
	  return arr
	}
	
	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}
	
	// slice(start, end)
	function clamp (index, len, defaultValue) {
	  if (typeof index !== 'number') return defaultValue
	  index = ~~index;  // Coerce to integer.
	  if (index >= len) return len
	  if (index >= 0) return index
	  index += len
	  if (index >= 0) return index
	  return 0
	}
	
	function coerce (length) {
	  // Coerce length to a number (possibly NaN), round up
	  // in case it's fractional (e.g. 123.456) then do a
	  // double negate to coerce a NaN to 0. Easy, right?
	  length = ~~Math.ceil(+length)
	  return length < 0 ? 0 : length
	}
	
	function isArray (subject) {
	  return (Array.isArray || function (subject) {
	    return Object.prototype.toString.call(subject) === '[object Array]'
	  })(subject)
	}
	
	function isArrayish (subject) {
	  return isArray(subject) || Buffer.isBuffer(subject) ||
	      subject && typeof subject === 'object' &&
	      typeof subject.length === 'number'
	}
	
	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}
	
	function utf8ToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    var b = str.charCodeAt(i)
	    if (b <= 0x7F) {
	      byteArray.push(b)
	    } else {
	      var start = i
	      if (b >= 0xD800 && b <= 0xDFFF) i++
	      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
	      for (var j = 0; j < h.length; j++) {
	        byteArray.push(parseInt(h[j], 16))
	      }
	    }
	  }
	  return byteArray
	}
	
	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}
	
	function utf16leToBytes (str) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }
	
	  return byteArray
	}
	
	function base64ToBytes (str) {
	  return base64.toByteArray(str)
	}
	
	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length))
	      break
	    dst[i + offset] = src[i]
	  }
	  return i
	}
	
	function decodeUtf8Char (str) {
	  try {
	    return decodeURIComponent(str)
	  } catch (err) {
	    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
	  }
	}
	
	/*
	 * We have to make sure that the value is a valid integer. This means that it
	 * is non-negative. It has no fractional component and that it does not
	 * exceed the maximum allowed value.
	 */
	function verifuint (value, max) {
	  assert(typeof value === 'number', 'cannot write a non-number as a number')
	  assert(value >= 0, 'specified a negative value for writing an unsigned value')
	  assert(value <= max, 'value is larger than maximum value for type')
	  assert(Math.floor(value) === value, 'value has a fractional component')
	}
	
	function verifsint (value, max, min) {
	  assert(typeof value === 'number', 'cannot write a non-number as a number')
	  assert(value <= max, 'value larger than maximum allowed value')
	  assert(value >= min, 'value smaller than minimum allowed value')
	  assert(Math.floor(value) === value, 'value has a fractional component')
	}
	
	function verifIEEE754 (value, max, min) {
	  assert(typeof value === 'number', 'cannot write a non-number as a number')
	  assert(value <= max, 'value larger than maximum allowed value')
	  assert(value >= min, 'value smaller than minimum allowed value')
	}
	
	function assert (test, message) {
	  if (!test) throw new Error(message || 'Failed assertion')
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(48).Buffer))

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	var core          = __webpack_require__(57).dom.level2.core,
	    HtmlToDom     = __webpack_require__(54).HtmlToDom,
	    domToHtml     = __webpack_require__(55).domToHtml,
	    htmlencoding  = __webpack_require__(56),
	    HTMLEncode    = htmlencoding.HTMLEncode,
	    HTMLDecode    = htmlencoding.HTMLDecode;
	
	// modify cloned instance for more info check: https://github.com/tmpvar/jsdom/issues/325
	core = Object.create(core);
	
	/*
	  valuetype DOMString sequence<unsigned short>;
	  typedef   unsigned long long DOMTimeStamp;
	  typedef   any DOMUserData;
	  typedef   Object DOMObject;
	
	*/
	// ExceptionCode
	core.VALIDATION_ERR                 = 16;
	core.TYPE_MISMATCH_ERR              = 17;
	
	/*
	  // Introduced in DOM Level 3:
	  interface NameList {
	    DOMString          getName(in unsigned long index);
	    DOMString          getNamespaceURI(in unsigned long index);
	    readonly attribute unsigned long   length;
	    boolean            contains(in DOMString str);
	    boolean            containsNS(in DOMString namespaceURI,
	                                  in DOMString name);
	  };
	
	  // Introduced in DOM Level 3:
	  interface DOMImplementationList {
	    DOMImplementation  item(in unsigned long index);
	    readonly attribute unsigned long   length;
	  };
	
	  // Introduced in DOM Level 3:
	  interface DOMImplementationSource {
	    DOMImplementation  getDOMImplementation(in DOMString features);
	    DOMImplementationList getDOMImplementationList(in DOMString features);
	  };
	*/
	
	
	core.DOMImplementation.prototype.getFeature = function(feature, version)  {
	
	};
	
	/*
	  interface Node {
	    // Modified in DOM Level 3:
	    Node               insertBefore(in Node newChild,
	                                    in Node refChild)
	                                        raises(DOMException);
	    // Modified in DOM Level 3:
	    Node               replaceChild(in Node newChild,
	                                    in Node oldChild)
	                                        raises(DOMException);
	    // Modified in DOM Level 3:
	    Node               removeChild(in Node oldChild)
	                                        raises(DOMException);
	    // Modified in DOM Level 3:
	    Node               appendChild(in Node newChild)
	                                        raises(DOMException);
	    boolean            hasChildNodes();
	    Node               cloneNode(in boolean deep);
	    // Modified in DOM Level 3:
	    void               normalize();
	    // Introduced in DOM Level 3:
	    readonly attribute DOMString       baseURI;
	*/
	
	// Compare Document Position
	var DOCUMENT_POSITION_DISCONNECTED = core.Node.prototype.DOCUMENT_POSITION_DISCONNECTED = 0x01;
	var DOCUMENT_POSITION_PRECEDING    = core.Node.prototype.DOCUMENT_POSITION_PRECEDING    = 0x02;
	var DOCUMENT_POSITION_FOLLOWING    = core.Node.prototype.DOCUMENT_POSITION_FOLLOWING    = 0x04;
	var DOCUMENT_POSITION_CONTAINS     = core.Node.prototype.DOCUMENT_POSITION_CONTAINS     = 0x08;
	var DOCUMENT_POSITION_CONTAINED_BY = core.Node.prototype.DOCUMENT_POSITION_CONTAINED_BY = 0x10;
	var DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = core.Node.prototype.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;
	var DOCUMENT_TYPE_NODE = core.Node.prototype.DOCUMENT_TYPE_NODE;
	
	core.Node.prototype.compareDocumentPosition = function compareDocumentPosition( otherNode ) {
	  if( !(otherNode instanceof core.Node) ) {
	    throw Error("Comparing position against non-Node values is not allowed")
	  }
	  var thisOwner, otherOwner;
	
	  if( this.nodeType === this.DOCUMENT_NODE)
	    thisOwner = this
	  else
	    thisOwner = this.ownerDocument
	
	  if( otherNode.nodeType === this.DOCUMENT_NODE)
	    otherOwner = otherNode
	  else
	    otherOwner = otherNode.ownerDocument
	
	  if( this === otherNode ) return 0
	  if( this === otherNode.ownerDocument ) return DOCUMENT_POSITION_FOLLOWING + DOCUMENT_POSITION_CONTAINED_BY
	  if( this.ownerDocument === otherNode ) return DOCUMENT_POSITION_PRECEDING + DOCUMENT_POSITION_CONTAINS
	  if( thisOwner !== otherOwner ) return DOCUMENT_POSITION_DISCONNECTED
	
	  // Text nodes for attributes does not have a _parentNode. So we need to find them as attribute child.
	  if( this.nodeType === this.ATTRIBUTE_NODE && this._childNodes && this._childNodes.indexOf(otherNode) !== -1)
	    return DOCUMENT_POSITION_FOLLOWING + DOCUMENT_POSITION_CONTAINED_BY
	
	  if( otherNode.nodeType === this.ATTRIBUTE_NODE && otherNode._childNodes && otherNode._childNodes.indexOf(this) !== -1)
	    return DOCUMENT_POSITION_PRECEDING + DOCUMENT_POSITION_CONTAINS
	
	  var point = this
	  var parents = [ ]
	  var previous = null
	  while( point ) {
	    if( point == otherNode ) return DOCUMENT_POSITION_PRECEDING + DOCUMENT_POSITION_CONTAINS
	    parents.push( point )
	    point = point._parentNode
	  }
	  point = otherNode
	  previous = null
	  while( point ) {
	    if( point == this ) return DOCUMENT_POSITION_FOLLOWING + DOCUMENT_POSITION_CONTAINED_BY
	    var location_index = parents.indexOf( point )
	    if( location_index !== -1) {
	     var smallest_common_ancestor = parents[ location_index ]
	     var this_index = smallest_common_ancestor._childNodes.indexOf( parents[location_index - 1] )
	     var other_index = smallest_common_ancestor._childNodes.indexOf( previous )
	     if( this_index > other_index ) {
	           return DOCUMENT_POSITION_PRECEDING
	     }
	     else {
	       return DOCUMENT_POSITION_FOLLOWING
	     }
	    }
	    previous = point
	    point = point._parentNode
	  }
	  return DOCUMENT_POSITION_DISCONNECTED
	};
	/*
	    // Introduced in DOM Level 3:
	             attribute DOMString       textContent;
	                                        // raises(DOMException) on setting
	                                        // raises(DOMException) on retrieval
	*/
	core.Node.prototype.isSameNode = function(other) {
	  return (other === this);
	};
	
	core.Node.prototype.__defineGetter__('textContent', function() {
	  if (this.nodeType === this.TEXT_NODE || this.nodeType === this.COMMENT_NODE || this.nodeType === this.ATTRIBUTE_NODE || this.nodeType === this.CDATA_SECTION_NODE) {
	    return this.nodeValue;
	  } else if (this.nodeType === this.ELEMENT_NODE || this.nodeType === this.DOCUMENT_FRAGMENT_NODE) {
	    var out = '';
	    for (var i = 0 ; i < this.childNodes.length ; i += 1) {
	      out += this.childNodes[i].textContent || '';
	    }
	    return out;
	  } else {
	    return null;
	  }
	});
	
	core.Node.prototype.__defineSetter__('textContent', function(txt) {
	  for (var i = this.childNodes.length; --i >=0;) {
	    this.removeChild(this.childNodes.item(i));
	  }
	  if (txt !== "" && txt != null) {
	    this.appendChild(this._ownerDocument.createTextNode(txt));
	  }
	  return txt;
	});
	
	/*
	    // Introduced in DOM Level 3:
	    DOMString          lookupPrefix(in DOMString namespaceURI);
	    // Introduced in DOM Level 3:
	    boolean            isDefaultNamespace(in DOMString namespaceURI);
	    // Introduced in DOM Level 3:
	    DOMString          lookupNamespaceURI(in DOMString prefix);
	*/
	// Introduced in DOM Level 3:
	core.Node.prototype.isEqualNode = function(other) {
	  var self = this;
	  var diffValues = function() {
	    for (var i=0;i<arguments.length;i++) {
	      var k = arguments[i];
	      if (self[k] != other[k]) return(true);
	    }
	    return(false);
	  };
	  var diffNamedNodeMaps = function(snnm, onnm) {
	    if ((snnm == null) && (onnm == null)) return(false);
	    if ((snnm == null) || (onnm == null)) return(true);
	    if (snnm.length != onnm.length) return(true);
	    var js = [];
	    for (var j=0;j<onnm.length;j++) { js[j] = j }
	    for (var i=0;i<snnm.length;i++) {
	      var found=false;
	      for (var j=0;j<js.length;j++) {
	        if (snnm.item(i).isEqualNode(onnm.item(js[j]))) {
	          found = true;
	          // in order to be 100% accurate, we remove index values from consideration once they've matched
	          js.splice(j,1);
	          break;
	        }
	      }
	      if (!found) return(true);
	    }
	    return(false);
	  };
	  var diffNodeLists = function(snl, onl) {
	    if ((snl == null) && (onl == null)) return(false);
	    if ((snl == null) || (onl == null)) return(true);
	    if (snl.length != onl.length) return(true);
	    for (var i=0;i<snl.length;i++) {
	      if (!snl.item(i).isEqualNode(onl.item(i))) return(true);
	    }
	    return(false);
	  };
	  if (!other) return(false);
	  if (this.isSameNode(other)) return(true);
	  if (this.nodeType != other.nodeType) return(false);
	  if (diffValues('nodeName', 'localName', 'namespaceURI', 'prefix', 'nodeValue')) return(false);
	  if (diffNamedNodeMaps(this.attributes, other.attributes)) return(false);
	  if (diffNodeLists(this.childNodes, other.childNodes)) return(false);
	  if (this.nodeType == DOCUMENT_TYPE_NODE) {
	    if (diffValues('publicId', 'systemId', 'internalSubset')) return(false);
	    if (diffNamedNodeMaps(this.entities, other.entities)) return(false);
	    if (diffNamedNodeMaps(this.notations, other.notations)) return(false);
	  }
	  return (true);
	};
	/*
	    // Introduced in DOM Level 3:
	    DOMObject          getFeature(in DOMString feature,
	                                  in DOMString version);
	*/
	// Introduced in DOM Level 3:
	core.Node.prototype.setUserData = function(key, data, handler) {
	  var r = this[key] || null;
	  this[key] = data;
	  return(r);
	};
	
	// Introduced in DOM Level 3:
	core.Node.prototype.getUserData = function(key) {
	  var r = this[key] || null;
	  return(r);
	};
	/*
	  interface NodeList {
	    Node               item(in unsigned long index);
	    readonly attribute unsigned long   length;
	  };
	
	  interface NamedNodeMap {
	    Node               getNamedItem(in DOMString name);
	    Node               setNamedItem(in Node arg)
	                                        raises(DOMException);
	    Node               removeNamedItem(in DOMString name)
	                                        raises(DOMException);
	    Node               item(in unsigned long index);
	    readonly attribute unsigned long   length;
	    // Introduced in DOM Level 2:
	    Node               getNamedItemNS(in DOMString namespaceURI,
	                                      in DOMString localName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    Node               setNamedItemNS(in Node arg)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    Node               removeNamedItemNS(in DOMString namespaceURI,
	                                         in DOMString localName)
	                                        raises(DOMException);
	  };
	
	  interface CharacterData : Node {
	             attribute DOMString       data;
	                                        // raises(DOMException) on setting
	                                        // raises(DOMException) on retrieval
	
	    readonly attribute unsigned long   length;
	    DOMString          substringData(in unsigned long offset,
	                                     in unsigned long count)
	                                        raises(DOMException);
	    void               appendData(in DOMString arg)
	                                        raises(DOMException);
	    void               insertData(in unsigned long offset,
	                                  in DOMString arg)
	                                        raises(DOMException);
	    void               deleteData(in unsigned long offset,
	                                  in unsigned long count)
	                                        raises(DOMException);
	    void               replaceData(in unsigned long offset,
	                                   in unsigned long count,
	                                   in DOMString arg)
	                                        raises(DOMException);
	  };
	
	  interface Attr : Node {
	    readonly attribute DOMString       name;
	    readonly attribute boolean         specified;
	             attribute DOMString       value;
	                                        // raises(DOMException) on setting
	
	    // Introduced in DOM Level 2:
	    readonly attribute Element         ownerElement;
	    // Introduced in DOM Level 3:
	    readonly attribute TypeInfo        schemaTypeInfo;
	
	*/
	    // Introduced in DOM Level 3:
	core.Attr.prototype.__defineGetter__('isId', function() {
	  return (this.name.toLowerCase() === 'id');
	});
	/*
	  };
	
	  interface Element : Node {
	    readonly attribute DOMString       tagName;
	    DOMString          getAttribute(in DOMString name);
	    void               setAttribute(in DOMString name,
	                                    in DOMString value)
	                                        raises(DOMException);
	    void               removeAttribute(in DOMString name)
	                                        raises(DOMException);
	    Attr               getAttributeNode(in DOMString name);
	    Attr               setAttributeNode(in Attr newAttr)
	                                        raises(DOMException);
	    Attr               removeAttributeNode(in Attr oldAttr)
	                                        raises(DOMException);
	    NodeList           getElementsByTagName(in DOMString name);
	    // Introduced in DOM Level 2:
	    DOMString          getAttributeNS(in DOMString namespaceURI,
	                                      in DOMString localName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    void               setAttributeNS(in DOMString namespaceURI,
	                                      in DOMString qualifiedName,
	                                      in DOMString value)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    void               removeAttributeNS(in DOMString namespaceURI,
	                                         in DOMString localName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    Attr               getAttributeNodeNS(in DOMString namespaceURI,
	                                          in DOMString localName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    Attr               setAttributeNodeNS(in Attr newAttr)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    NodeList           getElementsByTagNameNS(in DOMString namespaceURI,
	                                              in DOMString localName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    boolean            hasAttribute(in DOMString name);
	    // Introduced in DOM Level 2:
	    boolean            hasAttributeNS(in DOMString namespaceURI,
	                                      in DOMString localName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 3:
	    readonly attribute TypeInfo        schemaTypeInfo;
	    // Introduced in DOM Level 3:
	    void               setIdAttribute(in DOMString name,
	                                      in boolean isId)
	                                        raises(DOMException);
	    // Introduced in DOM Level 3:
	    void               setIdAttributeNS(in DOMString namespaceURI,
	                                        in DOMString localName,
	                                        in boolean isId)
	                                        raises(DOMException);
	    // Introduced in DOM Level 3:
	    void               setIdAttributeNode(in Attr idAttr,
	                                          in boolean isId)
	                                        raises(DOMException);
	  };
	
	  interface Text : CharacterData {
	    Text               splitText(in unsigned long offset)
	                                        raises(DOMException);
	    // Introduced in DOM Level 3:
	    readonly attribute boolean         isElementContentWhitespace;
	    // Introduced in DOM Level 3:
	    readonly attribute DOMString       wholeText;
	    // Introduced in DOM Level 3:
	    Text               replaceWholeText(in DOMString content)
	                                        raises(DOMException);
	  };
	
	  interface Comment : CharacterData {
	  };
	
	  // Introduced in DOM Level 3:
	  interface TypeInfo {
	    readonly attribute DOMString       typeName;
	    readonly attribute DOMString       typeNamespace;
	
	    // DerivationMethods
	    const unsigned long       DERIVATION_RESTRICTION         = 0x00000001;
	    const unsigned long       DERIVATION_EXTENSION           = 0x00000002;
	    const unsigned long       DERIVATION_UNION               = 0x00000004;
	    const unsigned long       DERIVATION_LIST                = 0x00000008;
	
	    boolean            isDerivedFrom(in DOMString typeNamespaceArg,
	                                     in DOMString typeNameArg,
	                                     in unsigned long derivationMethod);
	  };
	*/
	// Introduced in DOM Level 3:
	core.UserDataHandler = function() {};
	core.UserDataHandler.prototype.NODE_CLONED   = 1;
	core.UserDataHandler.prototype.NODE_IMPORTED = 2;
	core.UserDataHandler.prototype.NODE_DELETED  = 3;
	core.UserDataHandler.prototype.NODE_RENAMED  = 4;
	core.UserDataHandler.prototype.NODE_ADOPTED  = 5;
	core.UserDataHandler.prototype.handle = function(operation, key, data, src, dst) {};
	
	// Introduced in DOM Level 3:
	core.DOMError = function(severity, message, type, relatedException, relatedData, location) {
	  this._severity         = severity;
	  this._message          = message;
	  this._type             = type;
	  this._relatedException = relatedException;
	  this._relatedData      = relatedData;
	  this._location         = location;
	};
	core.DOMError.prototype = {};
	core.DOMError.prototype.SEVERITY_WARNING     = 1;
	core.DOMError.prototype.SEVERITY_ERROR       = 2;
	core.DOMError.prototype.SEVERITY_FATAL_ERROR = 3;
	core.DOMError.prototype.__defineGetter__('severity', function() {
	  return this._severity;
	});
	core.DOMError.prototype.__defineGetter__('message', function() {
	  return this._message;
	});
	core.DOMError.prototype.__defineGetter__('type', function() {
	  return this._type;
	});
	core.DOMError.prototype.__defineGetter__('relatedException', function() {
	  return this._relatedException;
	});
	core.DOMError.prototype.__defineGetter__('relatedData', function() {
	  return this._relatedData;
	});
	core.DOMError.prototype.__defineGetter__('location', function() {
	  return this._location;
	});
	
	/*
	  // Introduced in DOM Level 3:
	  interface DOMErrorHandler {
	    boolean            handleError(in DOMError error);
	  };
	
	  // Introduced in DOM Level 3:
	  interface DOMLocator {
	    readonly attribute long            lineNumber;
	    readonly attribute long            columnNumber;
	    readonly attribute long            byteOffset;
	    readonly attribute long            utf16Offset;
	    readonly attribute Node            relatedNode;
	    readonly attribute DOMString       uri;
	  };
	*/
	
	// Introduced in DOM Level 3:
	core.DOMConfiguration = function(){
	  var possibleParameterNames = {
	    'canonical-form': [false, true], // extra rules for true
	    'cdata-sections': [true, false],
	    'check-character-normalization': [false, true],
	    'comments': [true, false],
	    'datatype-normalization': [false, true],
	    'element-content-whitespace': [true, false],
	    'entities': [true, false],
	    // 'error-handler': [],
	    'infoset': [undefined, true, false], // extra rules for true
	    'namespaces': [true, false],
	    'namespace-declarations': [true, false], // only checked if namespaces is true
	    'normalize-characters': [false, true],
	    // 'schema-location': [],
	    // 'schema-type': [],
	    'split-cdata-sections': [true, false],
	    'validate': [false, true],
	    'validate-if-schema': [false, true],
	    'well-formed': [true, false]
	  }
	};
	
	core.DOMConfiguration.prototype = {
	  setParameter: function(name, value) {},
	  getParameter: function(name) {},
	  canSetParameter: function(name, value) {},
	  parameterNames: function() {}
	};
	
	//core.Document.prototype._domConfig = new core.DOMConfiguration();
	core.Document.prototype.__defineGetter__('domConfig', function() {
	  return this._domConfig || new core.DOMConfiguration();;
	});
	
	// Introduced in DOM Level 3:
	core.DOMStringList = function() {};
	
	core.DOMStringList.prototype = {
	  item: function() {},
	  length: function() {},
	  contains: function() {}
	};
	
	
	/*
	  interface CDATASection : Text {
	  };
	
	  interface DocumentType : Node {
	    readonly attribute DOMString       name;
	    readonly attribute NamedNodeMap    entities;
	    readonly attribute NamedNodeMap    notations;
	    // Introduced in DOM Level 2:
	    readonly attribute DOMString       publicId;
	    // Introduced in DOM Level 2:
	    readonly attribute DOMString       systemId;
	    // Introduced in DOM Level 2:
	    readonly attribute DOMString       internalSubset;
	  };
	
	  interface Notation : Node {
	    readonly attribute DOMString       publicId;
	    readonly attribute DOMString       systemId;
	  };
	
	  interface Entity : Node {
	    readonly attribute DOMString       publicId;
	    readonly attribute DOMString       systemId;
	    readonly attribute DOMString       notationName;
	    // Introduced in DOM Level 3:
	    readonly attribute DOMString       inputEncoding;
	    // Introduced in DOM Level 3:
	    readonly attribute DOMString       xmlEncoding;
	    // Introduced in DOM Level 3:
	    readonly attribute DOMString       xmlVersion;
	  };
	
	  interface EntityReference : Node {
	  };
	
	  interface ProcessingInstruction : Node {
	    readonly attribute DOMString       target;
	             attribute DOMString       data;
	                                        // raises(DOMException) on setting
	
	  };
	
	  interface DocumentFragment : Node {
	  };
	
	  interface Document : Node {
	    // Modified in DOM Level 3:
	    readonly attribute DocumentType    doctype;
	    readonly attribute DOMImplementation implementation;
	    readonly attribute Element         documentElement;
	    Element            createElement(in DOMString tagName)
	                                        raises(DOMException);
	    DocumentFragment   createDocumentFragment();
	    Text               createTextNode(in DOMString data);
	    Comment            createComment(in DOMString data);
	    CDATASection       createCDATASection(in DOMString data)
	                                        raises(DOMException);
	    ProcessingInstruction createProcessingInstruction(in DOMString target,
	                                                      in DOMString data)
	                                        raises(DOMException);
	    Attr               createAttribute(in DOMString name)
	                                        raises(DOMException);
	    EntityReference    createEntityReference(in DOMString name)
	                                        raises(DOMException);
	    NodeList           getElementsByTagName(in DOMString tagname);
	    // Introduced in DOM Level 2:
	    Node               importNode(in Node importedNode,
	                                  in boolean deep)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    Element            createElementNS(in DOMString namespaceURI,
	                                       in DOMString qualifiedName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    Attr               createAttributeNS(in DOMString namespaceURI,
	                                         in DOMString qualifiedName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    NodeList           getElementsByTagNameNS(in DOMString namespaceURI,
	                                              in DOMString localName);
	    // Introduced in DOM Level 2:
	    Element            getElementById(in DOMString elementId);
	*/
	
	// Introduced in DOM Level 3:
	core.Document.prototype._inputEncoding = null;
	core.Document.prototype.__defineGetter__('inputEncoding', function() {
	  return this._inputEncoding;
	});
	/*
	    // Introduced in DOM Level 3:
	    readonly attribute DOMString       xmlEncoding;
	    // Introduced in DOM Level 3:
	             attribute boolean         xmlStandalone;
	                                        // raises(DOMException) on setting
	
	    // Introduced in DOM Level 3:
	             attribute DOMString       xmlVersion;
	                                        // raises(DOMException) on setting
	
	    // Introduced in DOM Level 3:
	             attribute boolean         strictErrorChecking;
	    // Introduced in DOM Level 3:
	             attribute DOMString       documentURI;
	    // Introduced in DOM Level 3:
	    Node               adoptNode(in Node source)
	                                        raises(DOMException);
	    // Introduced in DOM Level 3:
	    readonly attribute DOMConfiguration domConfig;
	    // Introduced in DOM Level 3:
	    void               normalizeDocument();
	    // Introduced in DOM Level 3:
	    Node               renameNode(in Node n,
	                                  in DOMString namespaceURI,
	                                  in DOMString qualifiedName)
	                                        raises(DOMException);
	  };
	};
	
	#endif // _DOM_IDL_
	*/
	
	exports.dom = {
	  level3 : {
	    core: core
	  }
	};


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/** Here is yet another implementation of XPath 1.0 in Javascript.
	 *
	 * My goal was to make it relatively compact, but as I fixed all the axis bugs
	 * the axes became more and more complicated. :-(.
	 *
	 * I have not implemented namespaces or case-sensitive axes for XML yet.
	 *
	 * How to test it in Chrome: You can make a Chrome extension that replaces
	 * the WebKit XPath parser with this one. But it takes a bit of effort to
	 * get around isolated world and same-origin restrictions:
	 * manifest.json:
	    {
	      "name": "XPathTest",
	      "version": "0.1",
	      "content_scripts": [{
	        "matches": ["http://localhost/*"],  // or wildcard host
	        "js": ["xpath.js", "injection.js"],
	        "all_frames": true, "run_at": "document_start"
	      }]
	    }
	 * injection.js:
	    // goal: give my xpath object to the website's JS context.
	    var script = document.createElement('script');
	    script.textContent =
	        "document.addEventListener('xpathextend', function(e) {\n" +
	        "  console.log('extending document with xpath...');\n" +
	        "  e.detail(window);" +
	        "});";
	    document.documentElement.appendChild(script);
	    document.documentElement.removeChild(script);
	    var evt = document.createEvent('CustomEvent');
	    evt.initCustomEvent('xpathextend', true, true, this.xpath.extend);
	    document.dispatchEvent(evt);
	 */
	(function() {
	  var core;
	  var xpath;
	  if (true) {
	    core = __webpack_require__(49).dom.level3.core;
	    xpath = exports;
	  } else {
	    core = this;
	    xpath = {};
	  }
	
	
	  /***************************************************************************
	   *                            Tokenization                                 *
	   ***************************************************************************/
	  /**
	   * The XPath lexer is basically a single regular expression, along with
	   * some helper functions to pop different types.
	   */
	  var Stream = xpath.Stream = function Stream(str) {
	    this.original = this.str = str;
	    this.peeked = null;
	    // TODO: not really needed, but supposedly tokenizer also disambiguates
	    // a * b vs. node test *
	    this.prev = null;  // for debugging
	    this.prevprev = null;
	  }
	  Stream.prototype = {
	    peek: function() {
	      if (this.peeked) return this.peeked;
	      var m = this.re.exec(this.str);
	      if (!m) return null;
	      this.str = this.str.substr(m[0].length);
	      return this.peeked = m[1];
	    },
	    /** Peek 2 tokens ahead. */
	    peek2: function() {
	      this.peek();  // make sure this.peeked is set
	      var m = this.re.exec(this.str);
	      if (!m) return null;
	      return m[1];
	    },
	    pop: function() {
	      var r = this.peek();
	      this.peeked = null;
	      this.prevprev = this.prev;
	      this.prev = r;
	      return r;
	    },
	    trypop: function(tokens) {
	      var tok = this.peek();
	      if (tok === tokens) return this.pop();
	      if (Array.isArray(tokens)) {
	        for (var i = 0; i < tokens.length; ++i) {
	          var t = tokens[i];
	          if (t == tok) return this.pop();;
	        }
	      }
	    },
	    trypopfuncname: function() {
	      var tok = this.peek();
	      if (!this.isQnameRe.test(tok))
	        return null;
	      switch (tok) {
	        case 'comment': case 'text': case 'processing-instruction': case 'node':
	          return null;
	      }
	      if ('(' != this.peek2()) return null;
	      return this.pop();
	    },
	    trypopaxisname: function() {
	      var tok = this.peek();
	      switch (tok) {
	        case 'ancestor': case 'ancestor-or-self': case 'attribute':
	        case 'child': case 'descendant': case 'descendant-or-self':
	        case 'following': case 'following-sibling': case 'namespace':
	        case 'parent': case 'preceding': case 'preceding-sibling': case 'self':
	          if ('::' == this.peek2()) return this.pop();
	      }
	      return null;
	    },
	    trypopnametest: function() {
	      var tok = this.peek();
	      if ('*' === tok || this.startsWithNcNameRe.test(tok)) return this.pop();
	      return null;
	    },
	    trypopliteral: function() {
	      var tok = this.peek();
	      if (null == tok) return null;
	      var first = tok.charAt(0);
	      var last = tok.charAt(tok.length - 1);
	      if ('"' === first && '"' === last ||
	          "'" === first && "'" === last) {
	        this.pop();
	        return tok.substr(1, tok.length - 2);
	      }
	    },
	    trypopnumber: function() {
	      var tok = this.peek();
	      if (this.isNumberRe.test(tok)) return parseFloat(this.pop());
	      else return null;
	    },
	    trypopvarref: function() {
	      var tok = this.peek();
	      if (null == tok) return null;
	      if ('$' === tok.charAt(0)) return this.pop().substr(1);
	      else return null;
	    },
	    position: function() {
	      return this.original.length - this.str.length;
	    }
	  };
	  (function() {
	    // http://www.w3.org/TR/REC-xml-names/#NT-NCName
	    var nameStartCharsExceptColon =
	        'A-Z_a-z\xc0-\xd6\xd8-\xf6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF' +
	        '\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF' +
	        '\uFDF0-\uFFFD';  // JS doesn't support [#x10000-#xEFFFF]
	    var nameCharExceptColon = nameStartCharsExceptColon +
	        '\\-\\.0-9\xb7\u0300-\u036F\u203F-\u2040';
	    var ncNameChars = '[' + nameStartCharsExceptColon +
	        '][' + nameCharExceptColon + ']*'
	    // http://www.w3.org/TR/REC-xml-names/#NT-QName
	    var qNameChars = ncNameChars + '(?::' + ncNameChars + ')?';
	    var otherChars = '\\.\\.|[\\(\\)\\[\\].@,]|::';  // .. must come before [.]
	    var operatorChars =
	        'and|or|mod|div|' +
	        '//|!=|<=|>=|[*/|+\\-=<>]';  // //, !=, <=, >= before individual ones.
	    var literal = '"[^"]*"|' + "'[^']*'";
	    var numberChars = '[0-9]+(?:\\.[0-9]*)?|\\.[0-9]+';
	    var variableReference = '\\$' + qNameChars;
	    var nameTestChars = '\\*|' + ncNameChars + ':\\*|' + qNameChars;
	    var optionalSpace = '[ \t\r\n]*';  // stricter than regexp \s.
	    var nodeType = 'comment|text|processing-instruction|node';
	    var re = new RegExp(
	        // numberChars before otherChars so that leading-decimal doesn't become .
	        '^' + optionalSpace + '(' + numberChars + '|' + otherChars + '|' +
	        nameTestChars + '|' + operatorChars + '|' + literal + '|' +
	        variableReference + ')'
	        // operatorName | nodeType | functionName | axisName are lumped into
	        // qName for now; we'll check them on pop.
	    );
	    Stream.prototype.re = re;
	    Stream.prototype.startsWithNcNameRe = new RegExp('^' + ncNameChars);
	    Stream.prototype.isQnameRe = new RegExp('^' + qNameChars + '$');
	    Stream.prototype.isNumberRe = new RegExp('^' + numberChars + '$');
	  })();
	
	  /***************************************************************************
	   *                               Parsing                                   *
	   ***************************************************************************/
	  var parse = xpath.parse = function parse(stream, a) {
	    var r = orExpr(stream,a);
	    var x, unparsed = [];
	    while (x = stream.pop()) {
	      unparsed.push(x);
	    }
	    if (unparsed.length)
	      throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                               'Position ' + stream.position() +
	                               ': Unparsed tokens: ' + unparsed.join(' '));
	    return r;
	  }
	
	  /**
	   * binaryL  ::= subExpr
	   *            | binaryL op subExpr
	   * so a op b op c becomes ((a op b) op c)
	   */
	  function binaryL(subExpr, stream, a, ops) {
	    var lhs = subExpr(stream, a);
	    if (lhs == null) return null;
	    var op;
	    while (op = stream.trypop(ops)) {
	      var rhs = subExpr(stream, a);
	      if (rhs == null)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected something after ' + op);
	      lhs = a.node(op, lhs, rhs);
	    }
	    return lhs;
	  }
	  /**
	   * Too bad this is never used. If they made a ** operator (raise to power),
	   ( we would use it.
	   * binaryR  ::= subExpr
	   *            | subExpr op binaryR
	   * so a op b op c becomes (a op (b op c))
	   */
	  function binaryR(subExpr, stream, a, ops) {
	    var lhs = subExpr(stream, a);
	    if (lhs == null) return null;
	    var op = stream.trypop(ops);
	    if (op) {
	      var rhs = binaryR(stream, a);
	      if (rhs == null)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected something after ' + op);
	      return a.node(op, lhs, rhs);
	    } else {
	      return lhs;// TODO
	    }
	  }
	  /** [1] LocationPath::= RelativeLocationPath | AbsoluteLocationPath
	   * e.g. a, a/b, //a/b
	   */
	  function locationPath(stream, a) {
	    return absoluteLocationPath(stream, a) ||
	           relativeLocationPath(null, stream, a);
	  }
	  /** [2] AbsoluteLocationPath::= '/' RelativeLocationPath? | AbbreviatedAbsoluteLocationPath
	   *  [10] AbbreviatedAbsoluteLocationPath::= '//' RelativeLocationPath
	   */
	  function absoluteLocationPath(stream, a) {
	    var op = stream.peek();
	    if ('/' === op || '//' === op) {
	      var lhs = a.node('Root');
	      return relativeLocationPath(lhs, stream, a, true);
	    } else {
	      return null;
	    }
	  }
	  /** [3] RelativeLocationPath::= Step | RelativeLocationPath '/' Step |
	   *                            | AbbreviatedRelativeLocationPath
	   *  [11] AbbreviatedRelativeLocationPath::= RelativeLocationPath '//' Step
	   * e.g. p/a, etc.
	   */
	  function relativeLocationPath(lhs, stream, a, isOnlyRootOk) {
	    if (null == lhs) {
	      lhs = step(stream, a);
	      if (null == lhs) return lhs;
	    }
	    var op;
	    while (op = stream.trypop(['/', '//'])) {
	      if ('//' === op) {
	        lhs = a.node('/', lhs,
	                     a.node('Axis', 'descendant-or-self', 'node', undefined));
	      }
	      var rhs = step(stream, a);
	      if (null == rhs && '/' === op && isOnlyRootOk) return lhs;
	      else isOnlyRootOk = false;
	      if (null == rhs)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected step after ' + op);
	      lhs = a.node('/', lhs, rhs);
	    }
	    return lhs;
	  }
	  /** [4] Step::= AxisSpecifier NodeTest Predicate* | AbbreviatedStep
	   *  [12] AbbreviatedStep::= '.' | '..'
	   * e.g. @href, self::p, p, a[@href], ., ..
	   */
	  function step(stream, a) {
	    var abbrStep = stream.trypop(['.', '..']);
	    if ('.' === abbrStep)  // A location step of . is short for self::node().
	      return a.node('Axis', 'self', 'node');
	    if ('..' === abbrStep)  // A location step of .. is short for parent::node()
	      return a.node('Axis', 'parent', 'node');
	
	    var axis = axisSpecifier(stream, a);
	    var nodeType = nodeTypeTest(stream, a);
	    var nodeName;
	    if (null == nodeType) nodeName = nodeNameTest(stream, a);
	    if (null == axis && null == nodeType && null == nodeName) return null;
	    if (null == nodeType && null == nodeName)
	        throw new XPathException(
	            XPathException.INVALID_EXPRESSION_ERR,
	            'Position ' + stream.position() +
	            ': Expected nodeTest after axisSpecifier ' + axis);
	    if (null == axis) axis = 'child';
	    if (null == nodeType) {
	      // When there's only a node name, then the node type is forced to be the
	      // principal node type of the axis.
	      // see http://www.w3.org/TR/xpath/#dt-principal-node-type
	      if ('attribute' === axis) nodeType = 'attribute';
	      else if ('namespace' === axis) nodeType = 'namespace';
	      else nodeType = 'element';
	    }
	    var lhs = a.node('Axis', axis, nodeType, nodeName);
	    var pred;
	    while (null != (pred = predicate(lhs, stream, a))) {
	      lhs = pred;
	    }
	    return lhs;
	  }
	  /** [5] AxisSpecifier::= AxisName '::' | AbbreviatedAxisSpecifier
	   *  [6] AxisName::= 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child'
	   *                | 'descendant' | 'descendant-or-self' | 'following'
	   *                | 'following-sibling' | 'namespace' | 'parent' |
	   *                | 'preceding' | 'preceding-sibling' | 'self'
	   *  [13] AbbreviatedAxisSpecifier::= '@'?
	   */
	  function axisSpecifier(stream, a) {
	    var attr = stream.trypop('@');
	    if (null != attr) return 'attribute';
	    var axisName = stream.trypopaxisname();
	    if (null != axisName) {
	      var coloncolon = stream.trypop('::');
	      if (null == coloncolon)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Should not happen. Should be ::.');
	      return axisName;
	    }
	  }
	  /** [7] NodeTest::= NameTest | NodeType '(' ')' | 'processing-instruction' '(' Literal ')'
	   *  [38] NodeType::= 'comment' | 'text' | 'processing-instruction' | 'node'
	   * I've split nodeTypeTest from nodeNameTest for convenience.
	   */
	  function nodeTypeTest(stream, a) {
	    if ('(' !== stream.peek2()) {
	      return null;
	    }
	    var type = stream.trypop(['comment', 'text', 'processing-instruction', 'node']);
	    if (null != type) {
	      if (null == stream.trypop('('))
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Should not happen.');
	      var param = undefined;
	      if (type == 'processing-instruction') {
	        param = stream.trypopliteral();
	      }
	      if (null == stream.trypop(')'))
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected close parens.');
	      return type
	    }
	  }
	  function nodeNameTest(stream, a) {
	    var name = stream.trypopnametest();
	    if (name != null) return name;
	    else return null;
	  }
	  /** [8] Predicate::= '[' PredicateExpr ']'
	   *  [9] PredicateExpr::= Expr
	   */
	  function predicate(lhs, stream, a) {
	    if (null == stream.trypop('[')) return null;
	    var expr = orExpr(stream, a);
	    if (null == expr)
	      throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                               'Position ' + stream.position() +
	                               ': Expected expression after [');
	    if (null == stream.trypop(']'))
	      throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                               'Position ' + stream.position() +
	                               ': Expected ] after expression.');
	    return a.node('Predicate', lhs, expr);
	  }
	  /** [14] Expr::= OrExpr
	   */
	  /** [15] PrimaryExpr::= VariableReference | '(' Expr ')' | Literal | Number | FunctionCall
	   * e.g. $x,  (3+4),  "hi",  32,  f(x)
	   */
	  function primaryExpr(stream, a) {
	    var x = stream.trypopliteral();
	    if (null == x)
	      x = stream.trypopnumber();
	    if (null != x) {
	      return x;
	    }
	    var varRef = stream.trypopvarref();
	    if (null != varRef) return a.node('VariableReference', varRef);
	    var funCall = functionCall(stream, a);
	    if (null != funCall) {
	      return funCall;
	    }
	    if (stream.trypop('(')) {
	      var e = orExpr(stream, a);
	      if (null == e)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected expression after (.');
	      if (null == stream.trypop(')'))
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected ) after expression.');
	      return e;
	    }
	    return null;
	  }
	  /** [16] FunctionCall::= FunctionName '(' ( Argument ( ',' Argument )* )? ')'
	   *  [17] Argument::= Expr
	   */
	  function functionCall(stream, a) {
	    var name = stream.trypopfuncname(stream, a);
	    if (null == name) return null;
	    if (null == stream.trypop('('))
	      throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                               'Position ' + stream.position() +
	                               ': Expected ( ) after function name.');
	    var params = [];
	    var first = true;
	    while (null == stream.trypop(')')) {
	      if (!first && null == stream.trypop(','))
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected , between arguments of the function.');
	      first = false;
	      var param = orExpr(stream, a);
	      if (param == null)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected expression as argument of function.');
	      params.push(param);
	    }
	    return a.node('FunctionCall', name, params);
	  }
	
	  /** [18] UnionExpr::= PathExpr | UnionExpr '|' PathExpr
	   */
	  function unionExpr(stream, a) { return binaryL(pathExpr, stream, a, '|'); }
	  /** [19] PathExpr ::= LocationPath
	   *                  | FilterExpr
	   *                  | FilterExpr '/' RelativeLocationPath
	   *                  | FilterExpr '//' RelativeLocationPath
	   * Unlike most other nodes, this one always generates a node because
	   * at this point all reverse nodesets must turn into a forward nodeset
	   */
	  function pathExpr(stream, a) {
	    // We have to do FilterExpr before LocationPath because otherwise
	    // LocationPath will eat up the name from a function call.
	    var filter = filterExpr(stream, a);
	    if (null == filter) {
	      var loc = locationPath(stream, a);
	      if (null == loc) {
	        throw new Error
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': The expression shouldn\'t be empty...');
	      }
	      return a.node('PathExpr', loc);
	    }
	    var rel = relativeLocationPath(filter, stream, a, false);
	    if (filter === rel) return rel;
	    else return a.node('PathExpr', rel);
	  }
	  /** [20] FilterExpr::= PrimaryExpr | FilterExpr Predicate
	   * aka. FilterExpr ::= PrimaryExpr Predicate*
	   */
	  function filterExpr(stream, a) {
	    var primary = primaryExpr(stream, a);
	    if (primary == null) return null;
	    var pred, lhs = primary;
	    while (null != (pred = predicate(lhs, stream, a))) {
	      lhs = pred;
	    }
	    return lhs;
	  }
	
	  /** [21] OrExpr::= AndExpr | OrExpr 'or' AndExpr
	   */
	  function orExpr(stream, a) {
	    var orig = (stream.peeked || '') + stream.str
	    var r = binaryL(andExpr, stream, a, 'or');
	    var now = (stream.peeked || '') + stream.str;
	    return r;
	  }
	  /** [22] AndExpr::= EqualityExpr | AndExpr 'and' EqualityExpr
	   */
	  function andExpr(stream, a) { return binaryL(equalityExpr, stream, a, 'and'); }
	  /** [23] EqualityExpr::= RelationalExpr | EqualityExpr '=' RelationalExpr
	   *                     | EqualityExpr '!=' RelationalExpr
	   */
	  function equalityExpr(stream, a) { return binaryL(relationalExpr, stream, a, ['=','!=']); }
	  /** [24] RelationalExpr::= AdditiveExpr | RelationalExpr '<' AdditiveExpr
	   *                       | RelationalExpr '>' AdditiveExpr
	   *                       | RelationalExpr '<=' AdditiveExpr
	   *                       | RelationalExpr '>=' AdditiveExpr
	   */
	  function relationalExpr(stream, a) { return binaryL(additiveExpr, stream, a, ['<','>','<=','>=']); }
	  /** [25] AdditiveExpr::= MultiplicativeExpr
	   *                     | AdditiveExpr '+' MultiplicativeExpr
	   *                     | AdditiveExpr '-' MultiplicativeExpr
	   */
	  function additiveExpr(stream, a) { return binaryL(multiplicativeExpr, stream, a, ['+','-']); }
	  /** [26] MultiplicativeExpr::= UnaryExpr
	   *                           | MultiplicativeExpr MultiplyOperator UnaryExpr
	   *                           | MultiplicativeExpr 'div' UnaryExpr
	   *                           | MultiplicativeExpr 'mod' UnaryExpr
	   */
	  function multiplicativeExpr(stream, a) { return binaryL(unaryExpr, stream, a, ['*','div','mod']); }
	  /** [27] UnaryExpr::= UnionExpr | '-' UnaryExpr
	   */
	  function unaryExpr(stream, a) {
	    if (stream.trypop('-')) {
	      var e = unaryExpr(stream, a);
	      if (null == e)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected unary expression after -');
	      return a.node('UnaryMinus', e);
	    }
	    else return unionExpr(stream, a);
	  }
	  var astFactory = {
	    node: function() {return Array.prototype.slice.call(arguments);}
	  };
	
	
	  /***************************************************************************
	   *                            Optimizations (TODO)                         *
	   ***************************************************************************/
	  /**
	   * Some things I've been considering:
	   * 1) a//b becomes a/descendant::b if there's no predicate that uses
	   *    position() or last()
	   * 2) axis[pred]: when pred doesn't use position, evaluate it just once per
	   *    node in the node-set rather than once per (node, position, last).
	   * For more optimizations, look up Gecko's optimizer:
	   * http://mxr.mozilla.org/mozilla-central/source/content/xslt/src/xpath/txXPathOptimizer.cpp
	   */
	  // TODO
	  function optimize(ast) {
	  }
	
	  /***************************************************************************
	   *                           Evaluation: axes                              *
	   ***************************************************************************/
	
	  /**
	   * Data types: For string, number, boolean, we just use Javascript types.
	   * Node-sets have the form
	   *    {nodes: [node, ...]}
	   * or {nodes: [node, ...], pos: [[1], [2], ...], lasts: [[1], [2], ...]}
	   *
	   * Most of the time, only the node is used and the position information is
	   * discarded. But if you use a predicate, we need to try every value of
	   * position and last in case the predicate calls position() or last().
	   */
	
	  /**
	   * The NodeMultiSet is a helper class to help generate
	   * {nodes:[], pos:[], lasts:[]} structures. It is useful for the
	   * descendant, descendant-or-self, following-sibling, and
	   * preceding-sibling axes for which we can use a stack to organize things.
	   */
	  function NodeMultiSet(isReverseAxis) {
	    this.nodes = [];
	    this.pos = [];
	    this.lasts = [];
	    this.nextPos = [];
	    this.seriesIndexes = [];  // index within nodes that each series begins.
	    this.isReverseAxis = isReverseAxis;
	    this._pushToNodes = isReverseAxis ? Array.prototype.unshift : Array.prototype.push;
	  }
	  NodeMultiSet.prototype = {
	    pushSeries: function pushSeries() {
	      this.nextPos.push(1);
	      this.seriesIndexes.push(this.nodes.length);
	    },
	    popSeries: function popSeries() {
	      console.assert(0 < this.nextPos.length, this.nextPos);
	      var last = this.nextPos.pop() - 1,
	          indexInPos = this.nextPos.length,
	          seriesBeginIndex = this.seriesIndexes.pop(),
	          seriesEndIndex = this.nodes.length;
	      for (var i = seriesBeginIndex; i < seriesEndIndex; ++i) {
	        console.assert(indexInPos < this.lasts[i].length);
	        console.assert(undefined === this.lasts[i][indexInPos]);
	        this.lasts[i][indexInPos] = last;
	      }
	    },
	    finalize: function() {
	      if (null == this.nextPos) return this;
	      console.assert(0 === this.nextPos.length);
	      for (var i = 0; i < this.lasts.length; ++i) {
	        for (var j = 0; j < this.lasts[i].length; ++j) {
	          console.assert(null != this.lasts[i][j], i + ',' + j + ':' + JSON.stringify(this.lasts));
	        }
	      }
	      this.pushSeries = this.popSeries = this.addNode = function() {
	        throw new Error('Already finalized.');
	      };
	      return this;
	    },
	    addNode: function addNode(node) {
	      console.assert(node);
	      this._pushToNodes.call(this.nodes, node)
	      this._pushToNodes.call(this.pos, this.nextPos.slice());
	      this._pushToNodes.call(this.lasts, new Array(this.nextPos.length));
	      for (var i = 0; i < this.nextPos.length; ++i) this.nextPos[i]++;
	    },
	    simplify: function() {
	      this.finalize();
	      return {nodes:this.nodes, pos:this.pos, lasts:this.lasts};
	    }
	  };
	  function eachContext(nodeMultiSet) {
	    var r = [];
	    for (var i = 0; i < nodeMultiSet.nodes.length; i++) {
	      var node = nodeMultiSet.nodes[i];
	      if (!nodeMultiSet.pos) {
	        r.push({nodes:[node], pos: [[i + 1]], lasts: [[nodeMultiSet.nodes.length]]});
	      } else {
	        for (var j = 0; j < nodeMultiSet.pos[i].length; ++j) {
	          r.push({nodes:[node], pos: [[nodeMultiSet.pos[i][j]]], lasts: [[nodeMultiSet.lasts[i][j]]]});
	        }
	      }
	    }
	    return r;
	  }
	  /** Matcher used in the axes.
	   */
	  function NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase) {
	    this.nodeTypeNum = nodeTypeNum;
	    this.nodeName = nodeName;
	    this.shouldLowerCase = shouldLowerCase;
	    this.nodeNameTest =
	      null == nodeName ? this._alwaysTrue :
	      shouldLowerCase ? this._nodeNameLowerCaseEquals :
	      this._nodeNameEquals;
	  }
	  NodeMatcher.prototype = {
	    matches: function matches(node) {
	      return (0 === this.nodeTypeNum || node.nodeType === this.nodeTypeNum) &&
	          this.nodeNameTest(node.nodeName);
	    },
	    _alwaysTrue: function(name) {return true;},
	    _nodeNameEquals: function _nodeNameEquals(name) {
	      return this.nodeName === name;
	    },
	    _nodeNameLowerCaseEquals: function _nodeNameLowerCaseEquals(name) {
	      return this.nodeName === name.toLowerCase();
	    }
	  };
	
	  function followingSiblingHelper(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase, shift, peek, followingNode, andSelf, isReverseAxis) {
	    var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	    var nodeMultiSet = new NodeMultiSet(isReverseAxis);
	    while (0 < nodeList.length) {  // can be if for following, preceding
	      var node = shift.call(nodeList);
	      console.assert(node != null);
	      node = followingNode(node);
	      nodeMultiSet.pushSeries();
	      var numPushed = 1;
	      while (null != node) {
	        if (! andSelf && matcher.matches(node))
	          nodeMultiSet.addNode(node);
	        if (node === peek.call(nodeList)) {
	          shift.call(nodeList);
	          nodeMultiSet.pushSeries();
	          numPushed++;
	        }
	        if (andSelf && matcher.matches(node))
	          nodeMultiSet.addNode(node);
	        node = followingNode(node);
	      }
	      while (0 < numPushed--)
	        nodeMultiSet.popSeries();
	    }
	    return nodeMultiSet;
	  }
	
	  /** Returns the next non-descendant node in document order.
	   * This is the first node in following::node(), if node is the context.
	   */
	  function followingNonDescendantNode(node) {
	    if (node.ownerElement) {
	      if (node.ownerElement.firstChild)
	        return node.ownerElement.firstChild;
	      node = node.ownerElement;
	    }
	    do {
	      if (node.nextSibling) return node.nextSibling;
	    } while (node = node.parentNode);
	    return null;
	  }
	
	  /** Returns the next node in a document-order depth-first search.
	   * See the definition of document order[1]:
	   *   1) element
	   *   2) namespace nodes
	   *   3) attributes
	   *   4) children
	   *   [1]: http://www.w3.org/TR/xpath/#dt-document-order
	   */
	  function followingNode(node) {
	    if (node.ownerElement)  // attributes: following node of element.
	      node = node.ownerElement;
	    if (null != node.firstChild)
	      return node.firstChild;
	    do {
	      if (null != node.nextSibling) {
	        return node.nextSibling;
	      }
	      node = node.parentNode;
	    } while (node);
	    return null;
	  }
	  /** Returns the previous node in document order (excluding attributes
	   * and namespace nodes).
	   */
	  function precedingNode(node) {
	    if (node.ownerElement)
	      return node.ownerElement;
	    if (null != node.previousSibling) {
	      node = node.previousSibling;
	      while (null != node.lastChild) {
	        node = node.lastChild;
	      }
	      return node;
	    }
	    if (null != node.parentNode) {
	      return node.parentNode;
	    }
	    return null;
	  }
	  /** This axis is inefficient if there are many nodes in the nodeList.
	   * But I think it's a pretty useless axis so it's ok. */
	  function followingHelper(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	    var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	    var nodeMultiSet = new NodeMultiSet(false);
	    var cursor = nodeList[0];
	    var unorderedFollowingStarts = [];
	    for (var i = 0; i < nodeList.length; i++) {
	      var node = nodeList[i];
	      var start = followingNonDescendantNode(node);
	      if (start)
	        unorderedFollowingStarts.push(start);
	    }
	    if (0 === unorderedFollowingStarts.length)
	      return {nodes:[]};
	    var pos = [], nextPos = [];
	    var started = 0;
	    while (cursor = followingNode(cursor)) {
	      for (var i = unorderedFollowingStarts.length - 1; i >= 0; i--){
	        if (cursor === unorderedFollowingStarts[i]) {
	          nodeMultiSet.pushSeries();
	          unorderedFollowingStarts.splice(i,i+1);
	          started++;
	        }
	      }
	      if (started && matcher.matches(cursor)) {
	        nodeMultiSet.addNode(cursor);
	      }
	    }
	    console.assert(0 === unorderedFollowingStarts.length);
	    for (var i = 0; i < started; i++)
	      nodeMultiSet.popSeries();
	    return nodeMultiSet.finalize();
	  }
	  function precedingHelper(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	    var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	    var cursor = nodeList.pop();
	    if (null == cursor) return {nodes:{}};
	    var r = {nodes:[], pos:[], lasts:[]};
	    var nextParents = [cursor.parentNode || cursor.ownerElement], nextPos = [1];
	    while (cursor = precedingNode(cursor)) {
	      if (cursor === nodeList[nodeList.length - 1]) {
	        nextParents.push(nodeList.pop());
	        nextPos.push(1);
	      }
	      var matches = matcher.matches(cursor);
	      var pos, someoneUsed = false;
	      if (matches)
	        pos = nextPos.slice();
	
	      for (var i = 0; i < nextParents.length; ++i) {
	        if (cursor === nextParents[i]) {
	          nextParents[i] = cursor.parentNode || cursor.ownerElement;
	          if (matches) {
	            pos[i] = null;
	          }
	        } else {
	          if (matches) {
	            pos[i] = nextPos[i]++;
	            someoneUsed = true;
	          }
	        }
	      }
	      if (someoneUsed) {
	        r.nodes.unshift(cursor);
	        r.pos.unshift(pos);
	      }
	    }
	    for (var i = 0; i < r.pos.length; ++i) {
	      var lasts = [];
	      r.lasts.push(lasts);
	      for (var j = r.pos[i].length - 1; j >= 0; j--) {
	        if (null == r.pos[i][j]) {
	          r.pos[i].splice(j, j+1);
	        } else {
	          lasts.unshift(nextPos[j] - 1);
	        }
	      }
	    }
	    return r;
	  }
	
	  /** node-set, axis -> node-set */
	  function descendantDfs(nodeMultiSet, node, remaining, matcher, andSelf, attrIndices, attrNodes) {
	    while (0 < remaining.length && null != remaining[0].ownerElement) {
	      var attr = remaining.shift();
	      if (andSelf && matcher.matches(attr)) {
	        attrNodes.push(attr);
	        attrIndices.push(nodeMultiSet.nodes.length);
	      }
	    }
	    if (null != node && !andSelf) {
	      if (matcher.matches(node))
	        nodeMultiSet.addNode(node);
	    }
	    var pushed = false;
	    if (null == node) {
	      if (0 === remaining.length) return;
	      node = remaining.shift();
	      nodeMultiSet.pushSeries();
	      pushed = true;
	    } else if (0 < remaining.length && node === remaining[0]) {
	      nodeMultiSet.pushSeries();
	      pushed = true;
	      remaining.shift();
	    }
	    if (andSelf) {
	      if (matcher.matches(node))
	        nodeMultiSet.addNode(node);
	    }
	    // TODO: use optimization. Also try element.getElementsByTagName
	    // var nodeList = 1 === nodeTypeNum && null != node.children ? node.children : node.childNodes;
	    var nodeList = node.childNodes;
	    for (var j = 0; j < nodeList.length; ++j) {
	      var child = nodeList[j];
	      descendantDfs(nodeMultiSet, child, remaining, matcher, andSelf, attrIndices, attrNodes);
	    }
	    if (pushed) {
	      nodeMultiSet.popSeries();
	    }
	  }
	  function descenantHelper(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase, andSelf) {
	    var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	    var nodeMultiSet = new NodeMultiSet(false);
	    var attrIndices = [], attrNodes = [];
	    while (0 < nodeList.length) {
	      // var node = nodeList.shift();
	      descendantDfs(nodeMultiSet, null, nodeList, matcher, andSelf, attrIndices, attrNodes);
	    }
	    nodeMultiSet.finalize();
	    for (var i = attrNodes.length-1; i >= 0; --i) {
	      nodeMultiSet.nodes.splice(attrIndices[i], attrIndices[i], attrNodes[i]);
	      nodeMultiSet.pos.splice(attrIndices[i], attrIndices[i], [1]);
	      nodeMultiSet.lasts.splice(attrIndices[i], attrIndices[i], [1]);
	    }
	    return nodeMultiSet;
	  }
	  /**
	   */
	  function ancestorHelper(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase, andSelf) {
	    var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	    var ancestors = []; // array of non-empty arrays of matching ancestors
	    for (var i = 0; i < nodeList.length; ++i) {
	      var node = nodeList[i];
	      var isFirst = true;
	      var a = [];
	      while (null != node) {
	        if (!isFirst || andSelf) {
	          if (matcher.matches(node))
	            a.push(node);
	        }
	        isFirst = false;
	        node = node.parentNode || node.ownerElement;
	      }
	      if (0 < a.length)
	        ancestors.push(a);
	    }
	    var lasts = [];
	    for (var i = 0; i < ancestors.length; ++i) lasts.push(ancestors[i].length);
	    var nodeMultiSet = new NodeMultiSet(true);
	    var newCtx = {nodes:[], pos:[], lasts:[]};
	    while (0 < ancestors.length) {
	      var pos = [ancestors[0].length];
	      var last = [lasts[0]];
	      var node = ancestors[0].pop();
	      for (var i = ancestors.length - 1; i > 0; --i) {
	        if (node === ancestors[i][ancestors[i].length - 1]) {
	          pos.push(ancestors[i].length);
	          last.push(lasts[i]);
	          ancestors[i].pop();
	          if (0 === ancestors[i].length) {
	            ancestors.splice(i, i+1);
	            lasts.splice(i, i+1);
	          }
	        }
	      }
	      if (0 === ancestors[0].length) {
	        ancestors.shift();
	        lasts.shift();
	      }
	      newCtx.nodes.push(node);
	      newCtx.pos.push(pos);
	      newCtx.lasts.push(last);
	    }
	    return newCtx;
	  }
	  /** Helper function for sortDocumentOrder. Returns a list of indices, from the
	   * node to the root, of positions within parent.
	   * For convenience, the node is the first element of the array.
	   */
	  function addressVector(node) {
	    var r = [node];
	    if (null != node.ownerElement) {
	      node = node.ownerElement;
	      r.push(-1);
	    }
	    while (null != node) {
	      var i = 0;
	      while (null != node.previousSibling) {
	        node = node.previousSibling;
	        i++;
	      }
	      r.push(i);
	      node = node.parentNode
	    }
	    return r;
	  }
	  function addressComparator(a, b) {
	    var minlen = Math.min(a.length - 1, b.length - 1),  // not including [0]=node
	        alen = a.length,
	        blen = b.length;
	    if (a[0] === b[0]) return 0;
	    var c;
	    for (var i = 0; i < minlen; ++i) {
	      c = a[alen - i - 1] - b[blen - i - 1];
	      if (0 !== c)
	        break;
	    }
	    if (null == c || 0 === c) {
	      // All equal until one of the nodes. The longer one is the descendant.
	      c = alen - blen;
	    }
	    if (0 === c)
	      c = a.nodeName - b.nodeName;
	    if (0 === c)
	      c = 1;
	    return c;
	  }
	  var sortUniqDocumentOrder = xpath.sortUniqDocumentOrder = function(nodes) {
	    var a = [];
	    for (var i = 0; i < nodes.length; i++) {
	      var node = nodes[i];
	      var v = addressVector(node);
	      a.push(v);
	    }
	    a.sort(addressComparator);
	    var b = [];
	    for (var i = 0; i < a.length; i++) {
	      if (0 < i && a[i][0] === a[i - 1][0])
	        continue;
	      b.push(a[i][0]);
	    }
	    return b;
	  }
	  /** Sort node multiset. Does not do any de-duping. */
	  function sortNodeMultiSet(nodeMultiSet) {
	    var a = [];
	    for (var i = 0; i < nodeMultiSet.nodes.length; i++) {
	      var v = addressVector(nodeMultiSet.nodes[i]);
	      a.push({v:v, n:nodeMultiSet.nodes[i],
	              p:nodeMultiSet.pos[i], l:nodeMultiSet.lasts[i]});
	    }
	    a.sort(compare);
	    var r = {nodes:[], pos:[], lasts:[]};
	    for (var i = 0; i < a.length; ++i) {
	      r.nodes.push(a[i].n);
	      r.pos.push(a[i].p);
	      r.lasts.push(a[i].l);
	    }
	    function compare(x, y) {
	      return addressComparator(x.v, y.v);
	    }
	    return r;
	  }
	  /** Returns an array containing all the ancestors down to a node.
	   * The array starts with document.
	   */
	  function nodeAndAncestors(node) {
	    var ancestors = [node];
	    var p = node;
	    while (p = p.parentNode || p.ownerElement) {
	      ancestors.unshift(p);
	    }
	    return ancestors;
	  }
	  function compareSiblings(a, b) {
	    if (a === b) return 0;
	    var c = a;
	    while (c = c.previousSibling) {
	      if (c === b)
	        return 1;  // b < a
	    }
	    c = b;
	    while (c = c.previousSibling) {
	      if (c === a)
	        return -1;  // a < b
	    }
	    throw new Error('a and b are not siblings: ' + xpath.stringifyObject(a) + ' vs ' + xpath.stringifyObject(b));
	  }
	  /** The merge in merge-sort.*/
	  function mergeNodeLists(x, y) {
	    var a, b, aanc, banc, r = [];
	    if ('object' !== typeof x)
	      throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                               'Invalid LHS for | operator ' +
	                               '(expected node-set): ' + x);
	    if ('object' !== typeof y)
	      throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                               'Invalid LHS for | operator ' +
	                               '(expected node-set): ' + y);
	    while (true) {
	      if (null == a) {
	        a = x.shift();
	        if (null != a)
	          aanc = addressVector(a);
	      }
	      if (null == b) {
	        b = y.shift();
	        if (null != b)
	          banc = addressVector(b);
	      }
	      if (null == a || null == b) break;
	      var c = addressComparator(aanc, banc);
	      if (c < 0) {
	        r.push(a);
	        a = null;
	        aanc = null;
	      } else if (c > 0) {
	        r.push(b);
	        b = null;
	        banc = null;
	      } else if (a.nodeName < b.nodeName) {  // attributes
	        r.push(a);
	        a = null;
	        aanc = null;
	      } else if (a.nodeName > b.nodeName) {  // attributes
	        r.push(b);
	        b = null;
	        banc = null;
	      } else if (a !== b) {
	        // choose b arbitrarily
	        r.push(b);
	        b = null;
	        banc = null;
	      } else {
	        console.assert(a === b, c);
	        // just skip b without pushing it.
	        b = null;
	        banc = null;
	      }
	    }
	    while (a) {
	      r.push(a);
	      a = x.shift();
	    }
	    while (b) {
	      r.push(b);
	      b = y.shift();
	    }
	    return r;
	  }
	  function comparisonHelper(test, x, y, isNumericComparison) {
	    var coersion;
	    if (isNumericComparison)
	      coersion = fn.number;
	    else coersion =
	      'boolean' === typeof x || 'boolean' === typeof y ? fn['boolean'] :
	      'number' === typeof x || 'number' === typeof y ? fn.number :
	      fn.string;
	    if ('object' === typeof x && 'object' === typeof y) {
	      var aMap = {};
	      for (var i = 0; i < x.nodes.length; ++i) {
	        var xi = coersion({nodes:[x.nodes[i]]});
	        for (var j = 0; j < y.nodes.length; ++j) {
	          var yj = coersion({nodes:[y.nodes[j]]});
	          if (test(xi, yj)) return true;
	        }
	      }
	      return false;
	    } else if ('object' === typeof x && x.nodes && x.nodes.length) {
	      for (var i = 0; i < x.nodes.length; ++i) {
	        var xi = coersion({nodes:[x.nodes[i]]}), yc = coersion(y);
	        if (test(xi, yc))
	          return true;
	      }
	      return false;
	    } else if ('object' === typeof y && x.nodes && x.nodes.length) {
	      for (var i = 0; i < x.nodes.length; ++i) {
	        var yi = coersion({nodes:[y.nodes[i]]}), xc = coersion(x);
	        if (test(xc, yi))
	          return true;
	      }
	      return false;
	    } else {
	      var xc = coersion(x), yc = coersion(y);
	      return test(xc, yc);
	    }
	  }
	  var axes = xpath.axes = {
	    'ancestor':
	      function ancestor(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return ancestorHelper(
	          nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase, false);
	      },
	    'ancestor-or-self':
	      function ancestorOrSelf(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return ancestorHelper(
	          nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase, true);
	      },
	    'attribute':
	      function attribute(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        // TODO: figure out whether positions should be undefined here.
	        var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	        var nodeMultiSet = new NodeMultiSet(false);
	        if (null != nodeName) {
	          // TODO: with namespace
	          for (var i = 0; i < nodeList.length; ++i) {
	            var node = nodeList[i];
	            if (null == node.getAttributeNode)
	              continue;  // only Element has .getAttributeNode
	            var attr = node.getAttributeNode(nodeName);
	            if (null != attr && matcher.matches(attr)) {
	              nodeMultiSet.pushSeries();
	              nodeMultiSet.addNode(attr);
	              nodeMultiSet.popSeries();
	            }
	          }
	        } else {
	          for (var i = 0; i < nodeList.length; ++i) {
	            var node = nodeList[i];
	            if (null != node.attributes) {
	              nodeMultiSet.pushSeries();
	              for (var j = 0; j < node.attributes.length; j++) {  // all nodes have .attributes
	                var attr = node.attributes[j];
	                if (matcher.matches(attr))  // TODO: I think this check is unnecessary
	                  nodeMultiSet.addNode(attr);
	              }
	              nodeMultiSet.popSeries();
	            }
	          }
	        }
	        return nodeMultiSet.finalize();
	      },
	    'child':
	      function child(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	        var nodeMultiSet = new NodeMultiSet(false);
	        for (var i = 0; i < nodeList.length; ++i) {
	          var n = nodeList[i];
	          if (n.ownerElement)  // skip attribute nodes' text child.
	            continue;
	          if (n.childNodes) {
	            nodeMultiSet.pushSeries();
	            var childList = 1 === nodeTypeNum && null != n.children ?
	                n.children : n.childNodes;
	            for (var j = 0; j < childList.length; ++j) {
	              var child = childList[j];
	              if (matcher.matches(child)) {
	                nodeMultiSet.addNode(child);
	              }
	              // don't have to do de-duping because children have parent,
	              // which are current context.
	            }
	            nodeMultiSet.popSeries();
	          }
	        }
	        nodeMultiSet.finalize();
	        r = sortNodeMultiSet(nodeMultiSet);
	        return r;
	      },
	    'descendant':
	      function descenant(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return descenantHelper(
	          nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase, false);
	      },
	    'descendant-or-self':
	      function descenantOrSelf(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return descenantHelper(
	          nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase, true);
	      },
	    'following':
	      function following(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return followingHelper(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase);
	      },
	    'following-sibling':
	      function followingSibling(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return followingSiblingHelper(
	          nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase,
	          Array.prototype.shift, function() {return this[0];},
	          function(node) {return node.nextSibling;});
	      },
	    'namespace':
	      function namespace(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        // TODO
	      },
	    'parent':
	      function parent(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	        var nodes = [], pos = [];
	        for (var i = 0; i < nodeList.length; ++i) {
	          var parent = nodeList[i].parentNode || nodeList[i].ownerElement;
	          if (null == parent)
	            continue;
	          if (!matcher.matches(parent))
	            continue;
	          if (nodes.length > 0 && parent === nodes[nodes.length-1])
	            continue;
	          nodes.push(parent);
	          pos.push([1]);
	        }
	        return {nodes:nodes, pos:pos, lasts:pos};
	      },
	    'preceding':
	      function preceding(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return precedingHelper(
	          nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase);
	      },
	    'preceding-sibling':
	      function precedingSibling(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return followingSiblingHelper(
	          nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase,
	          Array.prototype.pop, function() {return this[this.length-1];},
	          function(node) {return node.previousSibling},
	          false, true);
	      },
	    'self':
	      function self(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        var nodes = [], pos = [];
	        var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	        for (var i = 0; i < nodeList.length; ++i) {
	          if (matcher.matches(nodeList[i])) {
	            nodes.push(nodeList[i]);
	            pos.push([1]);
	          }
	        }
	        return {nodes: nodes, pos: pos, lasts: pos}
	      }
	  };
	
	  /***************************************************************************
	   *                         Evaluation: functions                           *
	   ***************************************************************************/
	  var fn = {
	    'number': function number(optObject) {
	      if ('number' === typeof optObject)
	        return optObject;
	      if ('string' === typeof optObject)
	        return parseFloat(optObject);  // note: parseFloat(' ') -> NaN, unlike +' ' -> 0.
	      if ('boolean' === typeof optObject)
	        return +optObject;
	      return fn.number(fn.string.call(this, optObject));  // for node-sets
	    },
	    'string': function string(optObject) {
	      if (null == optObject)
	        return fn.string(this);
	      if ('string' === typeof optObject || 'boolean' === typeof optObject ||
	          'number' === typeof optObject)
	        return '' + optObject;
	      if (0 == optObject.nodes.length) return '';
	      if (null != optObject.nodes[0].textContent)
	        return optObject.nodes[0].textContent;
	      return optObject.nodes[0].nodeValue;
	    },
	    'boolean': function booleanVal(x) {
	      return 'object' === typeof x ? x.nodes.length > 0 : !!x;
	    },
	    'last': function last() {
	      console.assert(Array.isArray(this.pos));
	      console.assert(Array.isArray(this.lasts));
	      console.assert(1 === this.pos.length);
	      console.assert(1 === this.lasts.length);
	      console.assert(1 === this.lasts[0].length);
	      return this.lasts[0][0];
	    },
	    'position': function position() {
	      console.assert(Array.isArray(this.pos));
	      console.assert(Array.isArray(this.lasts));
	      console.assert(1 === this.pos.length);
	      console.assert(1 === this.lasts.length);
	      console.assert(1 === this.pos[0].length);
	      return this.pos[0][0];
	    },
	    'count': function count(nodeSet) {
	      if ('object' !== typeof nodeSet)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Function count(node-set) ' +
	                                 'got wrong argument type: ' + nodeSet);
	      return nodeSet.nodes.length;
	    },
	    'id': function id(object) {
	      var r = {nodes: []};
	      var doc = this.nodes[0].ownerDocument || this.nodes[0];
	      console.assert(doc);
	      var ids;
	      if ('object' === typeof object) {
	        // for node-sets, map id over each node value.
	        ids = [];
	        for (var i = 0; i < object.nodes.length; ++i) {
	          var idNode = object.nodes[i];
	          var idsString = fn.string({nodes:[idNode]});
	          var a = idsString.split(/[ \t\r\n]+/g);
	          Array.prototype.push.apply(ids, a);
	        }
	      } else {
	        var idsString = fn.string(object);
	        var a = idsString.split(/[ \t\r\n]+/g);
	        ids = a;
	      }
	      for (var i = 0; i < ids.length; ++i) {
	        var id = ids[i];
	        if (0 === id.length)
	          continue;
	        var node = doc.getElementById(id);
	        if (null != node)
	          r.nodes.push(node);
	      }
	      r.nodes = sortUniqDocumentOrder(r.nodes);
	      return r;
	    },
	    'local-name': function(nodeSet) {
	      if (null == nodeSet)
	        return fn.name(this);
	      if (null == nodeSet.nodes) {
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'argument to name() must be a node-set. got ' + nodeSet);
	      }
	      // TODO: namespaced version
	      return nodeSet.nodes[0].nodeName.toLowerCase();  // TODO: no toLowerCase for xml
	    },
	    'namespace-uri': function(nodeSet) {
	      // TODO
	      throw new Error('not implemented yet');
	    },
	    'name': function(nodeSet) {
	      if (null == nodeSet)
	        return fn.name(this);
	      if (null == nodeSet.nodes) {
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'argument to name() must be a node-set. got ' + nodeSet);
	      }
	      return nodeSet.nodes[0].nodeName.toLowerCase();  // TODO: no toLowerCase for xml
	    },
	    'concat': function concat(x) {
	      var l = [];
	      for (var i = 0; i < arguments.length; ++i) {
	        l.push(fn.string(arguments[i]));
	      }
	      return l.join('');
	    },
	    'starts-with': function startsWith(a, b) {
	      var as = fn.string(a), bs = fn.string(b);
	      return as.substr(0, bs.length) === bs;
	    },
	    'contains': function contains(a, b) {
	      var as = fn.string(a), bs = fn.string(b);
	      var i = as.indexOf(bs);
	      if (-1 === i) return false;
	      return true;
	    },
	    'substring-before': function substringBefore(a, b) {
	      var as = fn.string(a), bs = fn.string(b);
	      var i = as.indexOf(bs);
	      if (-1 === i) return '';
	      return as.substr(0, i);
	    },
	    'substring-after': function substringBefore(a, b) {
	      var as = fn.string(a), bs = fn.string(b);
	      var i = as.indexOf(bs);
	      if (-1 === i) return '';
	      return as.substr(i + bs.length);
	    },
	    'substring': function substring(string, start, optEnd) {
	      if (null == string || null == start) {
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Must be at least 2 arguments to string()');
	      }
	      var sString = fn.string(string),
	          iStart = fn.round(start),
	          iEnd = optEnd == null ? null : fn.round(optEnd);
	      // Note that xpath string positions user 1-based index
	      if (iEnd == null)
	        return sString.substr(iStart - 1);
	      else
	        return sString.substr(iStart - 1, iEnd);
	    },
	    'string-length': function stringLength(optString) {
	      return fn.string.call(this, optString).length;
	    },
	    'normalize-space': function normalizeSpace(optString) {
	      var s = fn.string.call(this, optString);
	      return s.replace(/[ \t\r\n]+/g, ' ').replace(/^ | $/g, '');
	    },
	    'translate': function translate(string, from, to) {
	      var sString = fn.string.call(this, string),
	          sFrom = fn.string(from),
	          sTo = fn.string(to);
	      var eachCharRe = [];
	      var map = {};
	      for (var i = 0; i < sFrom.length; ++i) {
	        var c = sFrom.charAt(i);
	        map[c] = sTo.charAt(i);  // returns '' if beyond length of sTo.
	        // copied from goog.string.regExpEscape in the Closure library.
	        eachCharRe.push(
	          c.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').
	            replace(/\x08/g, '\\x08'));
	      }
	      var re = new RegExp(eachCharRe.join('|'), 'g');
	      return sString.replace(re, function(c) {return map[c];});
	    },
	    /// Boolean functions
	    'not': function not(x) {
	      var bx = fn['boolean'](x);
	      return !bx;
	    },
	    'true': function trueVal() { return true; },
	    'false': function falseVal() { return false; },
	    // TODO
	    'lang': function lang(string) { throw new Error('Not implemented');},
	    'sum': function sum(optNodeSet) {
	      if (null == optNodeSet) return fn.sum(this);
	      // for node-sets, map id over each node value.
	      var sum = 0;
	      for (var i = 0; i < optNodeSet.nodes.length; ++i) {
	        var node = optNodeSet.nodes[i];
	        var x = fn.number({nodes:[node]});
	        sum += x;
	      }
	      return sum;
	    },
	    'floor': function floor(number) {
	      return Math.floor(fn.number(number));
	    },
	    'ceiling': function ceiling(number) {
	      return Math.ceil(fn.number(number));
	    },
	    'round': function round(number) {
	      return Math.round(fn.number(number));
	    }
	  };
	  /***************************************************************************
	   *                         Evaluation: operators                           *
	   ***************************************************************************/
	  var more = {
	    UnaryMinus: function(x) { return -fn.number(x); },
	    '+': function(x, y) { return fn.number(x) + fn.number(y); },
	    '-': function(x, y) { return fn.number(x) - fn.number(y); },
	    '*': function(x, y) { return fn.number(x) * fn.number(y); },
	    'div': function(x, y) { return fn.number(x) / fn.number(y); },
	    'mod': function(x, y) { return fn.number(x) % fn.number(y); },
	    '<': function(x, y) {
	      return comparisonHelper(function(x, y) { return fn.number(x) < fn.number(y);}, x, y, true);
	    },
	    '<=': function(x, y) {
	      return comparisonHelper(function(x, y) { return fn.number(x) <= fn.number(y);}, x, y, true);
	    },
	    '>':  function(x, y) {
	      return comparisonHelper(function(x, y) { return fn.number(x) > fn.number(y);}, x, y, true);
	    },
	    '>=': function(x, y) {
	      return comparisonHelper(function(x, y) { return fn.number(x) >= fn.number(y);}, x, y, true);
	    },
	    'and': function(x, y) { return fn['boolean'](x) && fn['boolean'](y); },
	    'or': function(x, y) { return fn['boolean'](x) || fn['boolean'](y); },
	    '|': function(x, y) { return {nodes: mergeNodeLists(x.nodes, y.nodes)}; },
	    '=': function(x, y) {
	      // optimization for two node-sets case: avoid n^2 comparisons.
	      if ('object' === typeof x && 'object' === typeof y) {
	        var aMap = {};
	        for (var i = 0; i < x.nodes.length; ++i) {
	          var s = fn.string({nodes:[x.nodes[i]]});
	          aMap[s] = true;
	        }
	        for (var i = 0; i < y.nodes.length; ++i) {
	          var s = fn.string({nodes:[y.nodes[i]]});
	          if (aMap[s]) return true;
	        }
	        return false;
	      } else {
	        return comparisonHelper(function(x, y) {return x === y;}, x, y);
	      }
	    },
	    '!=': function(x, y) {
	      // optimization for two node-sets case: avoid n^2 comparisons.
	      if ('object' === typeof x && 'object' === typeof y) {
	        if (0 === x.nodes.length || 0 === y.nodes.length) return false;
	        var aMap = {};
	        for (var i = 0; i < x.nodes.length; ++i) {
	          var s = fn.string({nodes:[x.nodes[i]]});
	          aMap[s] = true;
	        }
	        for (var i = 0; i < y.nodes.length; ++i) {
	          var s = fn.string({nodes:[y.nodes[i]]});
	          if (!aMap[s]) return true;
	        }
	        return false;
	      } else {
	        return comparisonHelper(function(x, y) {return x !== y;}, x, y);
	      }
	    }
	  };
	  var nodeTypes = xpath.nodeTypes = {
	    'node': 0,
	    'attribute': 2,
	    'comment': 8, // this.doc.COMMENT_NODE,
	    'text': 3, // this.doc.TEXT_NODE,
	    'processing-instruction': 7, // this.doc.PROCESSING_INSTRUCTION_NODE,
	    'element': 1  //this.doc.ELEMENT_NODE
	  };
	  /** For debugging and unit tests: returnjs a stringified version of the
	   * argument. */
	  var stringifyObject = xpath.stringifyObject = function stringifyObject(ctx) {
	    var seenKey = 'seen' + Math.floor(Math.random()*1000000000);
	    return JSON.stringify(helper(ctx));
	
	    function helper(ctx) {
	      if (Array.isArray(ctx)) {
	        return ctx.map(function(x) {return helper(x);});
	      }
	      if ('object' !== typeof ctx) return ctx;
	      if (null == ctx) return ctx;
	    //  if (ctx.toString) return ctx.toString();
	      if (null != ctx.outerHTML) return ctx.outerHTML;
	      if (null != ctx.nodeValue) return ctx.nodeName + '=' + ctx.nodeValue;
	      if (ctx[seenKey]) return '[circular]';
	      ctx[seenKey] = true;
	      var nicer = {};
	      for (var key in ctx) {
	        if (seenKey === key)
	          continue;
	        try {
	          nicer[key] = helper(ctx[key]);
	        } catch (e) {
	          nicer[key] = '[exception: ' + e.message + ']';
	        }
	      }
	      delete ctx[seenKey];
	      return nicer;
	    }
	  }
	  var Evaluator = xpath.Evaluator = function Evaluator(doc) {
	    this.doc = doc;
	  }
	  Evaluator.prototype = {
	    val: function val(ast, ctx) {
	      console.assert(ctx.nodes);
	
	      if ('number' === typeof ast || 'string' === typeof ast) return ast;
	      if (more[ast[0]]) {
	        var evaluatedParams = [];
	        for (var i = 1; i < ast.length; ++i) {
	          evaluatedParams.push(this.val(ast[i], ctx));
	        }
	        var r = more[ast[0]].apply(ctx, evaluatedParams);
	        return r;
	      }
	      switch (ast[0]) {
	        case 'Root': return {nodes: [this.doc]};
	        case 'FunctionCall':
	          var functionName = ast[1], functionParams = ast[2];
	          if (null == fn[functionName])
	            throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                     'Unknown function: ' + functionName);
	          var evaluatedParams = [];
	          for (var i = 0; i < functionParams.length; ++i) {
	            evaluatedParams.push(this.val(functionParams[i], ctx));
	          }
	          var r = fn[functionName].apply(ctx, evaluatedParams);
	          return r;
	        case 'Predicate':
	          var lhs = this.val(ast[1], ctx);
	          var ret = {nodes: []};
	          var contexts = eachContext(lhs);
	          for (var i = 0; i < contexts.length; ++i) {
	            var singleNodeSet = contexts[i];
	            var rhs = this.val(ast[2], singleNodeSet);
	            var success;
	            if ('number' === typeof rhs) {
	              success = rhs === singleNodeSet.pos[0][0];
	            } else {
	              success = fn['boolean'](rhs);
	            }
	            if (success) {
	              var node = singleNodeSet.nodes[0];
	              ret.nodes.push(node);
	              // skip over all the rest of the same node.
	              while (i+1 < contexts.length && node === contexts[i+1].nodes[0]) {
	                i++;
	              }
	            }
	          }
	          return ret;
	        case 'PathExpr':
	          // turn the path into an expressoin; i.e., remove the position
	          // information of the last axis.
	          var x = this.val(ast[1], ctx);
	          // Make the nodeset a forward-direction-only one.
	          if (x.finalize) {  // it is a NodeMultiSet
	            for (var i = 0; i < x.nodes.length; ++i) {
	              console.assert(null != x.nodes[i].nodeType);
	            }
	            return {nodes: x.nodes};
	          } else {
	            return x;
	          }
	        case '/':
	          // TODO: don't generate '/' nodes, just Axis nodes.
	          var lhs = this.val(ast[1], ctx);
	          console.assert(null != lhs);
	          var r = this.val(ast[2], lhs);
	          console.assert(null != r);
	          return r;
	        case 'Axis':
	          // All the axis tests from Step. We only get AxisSpecifier NodeTest,
	          // not the predicate (which is applied later)
	          var axis = ast[1],
	              nodeType = ast[2],
	              nodeTypeNum = nodeTypes[nodeType],
	              shouldLowerCase = true,  // TODO: give option
	              nodeName = ast[3] && shouldLowerCase ? ast[3].toLowerCase() : ast[3];
	          nodeName = nodeName === '*' ? null : nodeName;
	          if ('object' !== typeof ctx) return {nodes:[], pos:[]};
	          var nodeList = ctx.nodes.slice();  // TODO: is copy needed?
	          var r = axes[axis](nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase);
	          return r;
	      }
	    }
	  };
	  var evaluate = xpath.evaluate = function evaluate(expr, doc, context) {
	    //var astFactory = new AstEvaluatorFactory(doc, context);
	    var stream = new Stream(expr);
	    var ast = parse(stream, astFactory);
	    var val = new Evaluator(doc).val(ast, {nodes: [context]});
	    return val;
	  }
	
	  /***************************************************************************
	   *                           DOM interface                                 *
	   ***************************************************************************/
	  var XPathException = xpath.XPathException = function XPathException(code, message) {
	    var e = new Error(message);
	    this.__proto__ = e;
	    this.name = 'XPathException';
	    this.code = code;
	  }
	  XPathException.prototype = Error.prototype;
	  XPathException.prototype.__proto__ = XPathException;
	  XPathException.INVALID_EXPRESSION_ERR = 51;
	  XPathException.TYPE_ERR = 52;
	
	
	  var XPathEvaluator = xpath.XPathEvaluator = function XPathEvaluator() {}
	  XPathEvaluator.prototype = {
	    createExpression: function(expression, resolver) {
	      return new XPathExpression(expression, resolver);
	    },
	    createNSResolver: function(nodeResolver) {
	      // TODO
	    },
	    evaluate: function evaluate(expression, contextNode, resolver, type, result) {
	      var expr = new XPathExpression(expression, resolver);
	      return expr.evaluate(contextNode, type, result);
	    }
	  };
	
	
	  var XPathExpression = xpath.XPathExpression = function XPathExpression(expression, resolver, optDoc) {
	    var stream = new Stream(expression);
	    this._ast = parse(stream, astFactory);
	    this._doc = optDoc;
	  }
	  XPathExpression.prototype = {
	    evaluate: function evaluate(contextNode, type, result) {
	      if (null == contextNode.nodeType)
	        throw new Error('bad argument (expected context node): ' + contextNode);
	      var doc = contextNode.ownerDocument || contextNode;
	      if (null != this._doc && this._doc !== doc) {
	        throw new core.DOMException(
	            core.WRONG_DOCUMENT_ERR,
	            'The document must be the same as the context node\'s document.');
	      }
	      var evaluator = new Evaluator(doc);
	      var value = evaluator.val(this._ast, {nodes: [contextNode]});
	      if (XPathResult.NUMBER_TYPE === type)
	        value = fn.number(value);
	      else if (XPathResult.STRING_TYPE === type)
	        value = fn.string(value);
	      else if (XPathResult.BOOLEAN_TYPE === type)
	        value = fn['boolean'](value);
	      else if (XPathResult.ANY_TYPE !== type &&
	               XPathResult.UNORDERED_NODE_ITERATOR_TYPE !== type &&
	               XPathResult.ORDERED_NODE_ITERATOR_TYPE !== type &&
	               XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE !== type &&
	               XPathResult.ORDERED_NODE_SNAPSHOT_TYPE !== type &&
	               XPathResult.ANY_UNORDERED_NODE_TYPE !== type &&
	               XPathResult.FIRST_ORDERED_NODE_TYPE !== type)
	        throw new core.DOMException(
	            core.NOT_SUPPORTED_ERR,
	            'You must provide an XPath result type (0=any).');
	      else if (XPathResult.ANY_TYPE !== type &&
	               'object' !== typeof value)
	        throw new XPathException(
	            XPathException.TYPE_ERR,
	            'Value should be a node-set: ' + value);
	      return new XPathResult(doc, value, type);
	    }
	  }
	
	  var XPathResult = xpath.XPathResult = function XPathResult(doc, value, resultType) {
	    this._value = value;
	    this._resultType = resultType;
	    this._i = 0;
	    this._invalidated = false;
	    if (this.resultType === XPathResult.UNORDERED_NODE_ITERATOR_TYPE ||
	        this.resultType === XPathResult.ORDERED_NODE_ITERATOR_TYPE) {
	      doc.addEventListener('DOMSubtreeModified', invalidate, true);
	      var self = this;
	      function invalidate() {
	        self._invalidated = true;
	        doc.removeEventListener('DOMSubtreeModified', invalidate, true);
	      }
	    }
	  }
	  XPathResult.ANY_TYPE = 0;
	  XPathResult.NUMBER_TYPE = 1;
	  XPathResult.STRING_TYPE = 2;
	  XPathResult.BOOLEAN_TYPE = 3;
	  XPathResult.UNORDERED_NODE_ITERATOR_TYPE = 4;
	  XPathResult.ORDERED_NODE_ITERATOR_TYPE = 5;
	  XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE = 6;
	  XPathResult.ORDERED_NODE_SNAPSHOT_TYPE = 7;
	  XPathResult.ANY_UNORDERED_NODE_TYPE = 8;
	  XPathResult.FIRST_ORDERED_NODE_TYPE = 9;
	  XPathResult.prototype = {
	    // XPathResultType
	    get resultType() {
	      if (this._resultType) return this._resultType;
	      switch (typeof this._value) {
	        case 'number': return XPathResult.NUMBER_TYPE;
	        case 'string': return XPathResult.STRING_TYPE;
	        case 'boolean': return XPathResult.BOOLEAN_TYPE;
	        default: return XPathResult.UNORDERED_NODE_ITERATOR_TYPE;
	      }
	    },
	    get numberValue() {
	      if (XPathResult.NUMBER_TYPE !== this.resultType)
	        throw new XPathException(XPathException.TYPE_ERR,
	                                 'You should have asked for a NUMBER_TYPE.');
	      return this._value;
	    },
	    get stringValue() {
	      if (XPathResult.STRING_TYPE !== this.resultType)
	        throw new XPathException(XPathException.TYPE_ERR,
	                                 'You should have asked for a STRING_TYPE.');
	      return this._value;
	    },
	    get booleanValue() {
	      if (XPathResult.BOOLEAN_TYPE !== this.resultType)
	        throw new XPathException(XPathException.TYPE_ERR,
	                                 'You should have asked for a BOOLEAN_TYPE.');
	      return this._value;
	    },
	    get singleNodeValue() {
	      if (XPathResult.ANY_UNORDERED_NODE_TYPE !== this.resultType &&
	          XPathResult.FIRST_ORDERED_NODE_TYPE !== this.resultType)
	        throw new XPathException(
	            XPathException.TYPE_ERR,
	            'You should have asked for a FIRST_ORDERED_NODE_TYPE.');
	      return this._value.nodes[0] || null;
	    },
	    get invalidIteratorState() {
	      if (XPathResult.UNORDERED_NODE_ITERATOR_TYPE !== this.resultType &&
	          XPathResult.ORDERED_NODE_ITERATOR_TYPE !== this.resultType)
	        return false;
	      return !!this._invalidated;
	    },
	    get snapshotLength() {
	      if (XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE !== this.resultType &&
	          XPathResult.ORDERED_NODE_SNAPSHOT_TYPE !== this.resultType)
	        throw new XPathException(
	            XPathException.TYPE_ERR,
	            'You should have asked for a ORDERED_NODE_SNAPSHOT_TYPE.');
	      return this._value.nodes.length;
	    },
	    iterateNext: function iterateNext() {
	      if (XPathResult.UNORDERED_NODE_ITERATOR_TYPE !== this.resultType &&
	          XPathResult.ORDERED_NODE_ITERATOR_TYPE !== this.resultType)
	        throw new XPathException(
	            XPathException.TYPE_ERR,
	            'You should have asked for a ORDERED_NODE_ITERATOR_TYPE.');
	      if (this.invalidIteratorState)
	        throw new core.DOMException(
	            core.INVALID_STATE_ERR,
	            'The document has been mutated since the result was returned');
	      return this._value.nodes[this._i++] || null;
	    },
	    snapshotItem: function snapshotItem(index) {
	      if (XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE !== this.resultType &&
	          XPathResult.ORDERED_NODE_SNAPSHOT_TYPE !== this.resultType)
	        throw new XPathException(
	            XPathException.TYPE_ERR,
	            'You should have asked for a ORDERED_NODE_SNAPSHOT_TYPE.');
	      return this._value.nodes[index] || null;
	    }
	  };
	  // so you can access ANY_TYPE etc. from the instances:
	  XPathResult.prototype.__proto__ = XPathResult;
	
	  core.XPathException = XPathException;
	  core.XPathExpression = XPathExpression;
	  core.XPathResult = XPathResult;
	  core.XPathEvaluator = XPathEvaluator;
	
	  core.Document.prototype.createExpression =
	    XPathEvaluator.prototype.createExpression;
	
	  core.Document.prototype.createNSResolver =
	      XPathEvaluator.prototype.createNSResolver;
	
	  core.Document.prototype.evaluate = XPathEvaluator.prototype.evaluate;
	
	})();


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	var events = __webpack_require__(63).dom.level2.events;
	
	// modify cloned instance for more info check: https://github.com/tmpvar/jsdom/issues/325
	events = Object.create(events);
	
	/*
	
	// File: events.idl
	
	#ifndef _EVENTS_IDL_
	#define _EVENTS_IDL_
	
	#include "dom.idl"
	#include "views.idl"
	
	#pragma prefix "dom.w3c.org"
	module events
	{
	
	  typedef dom::DOMString DOMString;
	  typedef dom::DOMTimeStamp DOMTimeStamp;
	  typedef dom::DOMObject DOMObject;
	  typedef dom::Node Node;
	
	  interface EventTarget;
	  interface EventListener;
	
	  // Introduced in DOM Level 2:
	  exception EventException {
	    unsigned short   code;
	  };
	  // EventExceptionCode
	  const unsigned short      UNSPECIFIED_EVENT_TYPE_ERR     = 0;
	  // Introduced in DOM Level 3:
	  const unsigned short      DISPATCH_REQUEST_ERR           = 1;
	
	
	  // Introduced in DOM Level 2:
	  interface Event {
	
	    // PhaseType
	    const unsigned short      CAPTURING_PHASE                = 1;
	    const unsigned short      AT_TARGET                      = 2;
	    const unsigned short      BUBBLING_PHASE                 = 3;
	
	    readonly attribute DOMString       type;
	    readonly attribute EventTarget     target;
	    readonly attribute EventTarget     currentTarget;
	    readonly attribute unsigned short  eventPhase;
	    readonly attribute boolean         bubbles;
	    readonly attribute boolean         cancelable;
	    readonly attribute DOMTimeStamp    timeStamp;
	    void               stopPropagation();
	    void               preventDefault();
	    void               initEvent(in DOMString eventTypeArg,
	                                 in boolean canBubbleArg,
	                                 in boolean cancelableArg);
	    // Introduced in DOM Level 3:
	    readonly attribute DOMString       namespaceURI;
	    // Introduced in DOM Level 3:
	    boolean            isCustom();
	    // Introduced in DOM Level 3:
	    void               stopImmediatePropagation();
	    // Introduced in DOM Level 3:
	    boolean            isDefaultPrevented();
	    // Introduced in DOM Level 3:
	    void               initEventNS(in DOMString namespaceURIArg,
	                                   in DOMString eventTypeArg,
	                                   in boolean canBubbleArg,
	                                   in boolean cancelableArg);
	  };
	
	  // Introduced in DOM Level 2:
	  interface EventTarget {
	    void               addEventListener(in DOMString type,
	                                        in EventListener listener,
	                                        in boolean useCapture);
	    void               removeEventListener(in DOMString type,
	                                           in EventListener listener,
	                                           in boolean useCapture);
	    // Modified in DOM Level 3:
	    boolean            dispatchEvent(in Event evt)
	                                        raises(EventException);
	    // Introduced in DOM Level 3:
	    void               addEventListenerNS(in DOMString namespaceURI,
	                                          in DOMString type,
	                                          in EventListener listener,
	                                          in boolean useCapture,
	                                          in DOMObject evtGroup);
	    // Introduced in DOM Level 3:
	    void               removeEventListenerNS(in DOMString namespaceURI,
	                                             in DOMString type,
	                                             in EventListener listener,
	                                             in boolean useCapture);
	    // Introduced in DOM Level 3:
	    boolean            willTriggerNS(in DOMString namespaceURI,
	                                     in DOMString type);
	    // Introduced in DOM Level 3:
	    boolean            hasEventListenerNS(in DOMString namespaceURI,
	                                          in DOMString type);
	  };
	
	  // Introduced in DOM Level 2:
	  interface EventListener {
	    void               handleEvent(in Event evt);
	  };
	
	  // Introduced in DOM Level 2:
	  interface DocumentEvent {
	    Event              createEvent(in DOMString eventType)
	                                        raises(dom::DOMException);
	    // Introduced in DOM Level 3:
	    boolean            canDispatch(in DOMString namespaceURI,
	                                   in DOMString type);
	  };
	
	  // Introduced in DOM Level 3:
	  interface CustomEvent : Event {
	    void               setDispatchState(in EventTarget target,
	                                        in unsigned short phase);
	    boolean            isPropagationStopped();
	    boolean            isImmediatePropagationStopped();
	  };
	
	  // Introduced in DOM Level 2:
	  interface UIEvent : Event {
	    readonly attribute views::AbstractView view;
	    readonly attribute long            detail;
	    void               initUIEvent(in DOMString typeArg,
	                                   in boolean canBubbleArg,
	                                   in boolean cancelableArg,
	                                   in views::AbstractView viewArg,
	                                   in long detailArg);
	    // Introduced in DOM Level 3:
	    void               initUIEventNS(in DOMString namespaceURI,
	                                     in DOMString typeArg,
	                                     in boolean canBubbleArg,
	                                     in boolean cancelableArg,
	                                     in views::AbstractView viewArg,
	                                     in long detailArg);
	  };
	
	  // Introduced in DOM Level 3:
	  interface TextEvent : UIEvent {
	    readonly attribute DOMString       data;
	    void               initTextEvent(in DOMString typeArg,
	                                     in boolean canBubbleArg,
	                                     in boolean cancelableArg,
	                                     in views::AbstractView viewArg,
	                                     in DOMString dataArg);
	    void               initTextEventNS(in DOMString namespaceURI,
	                                       in DOMString type,
	                                       in boolean canBubbleArg,
	                                       in boolean cancelableArg,
	                                       in views::AbstractView viewArg,
	                                       in DOMString dataArg);
	  };
	
	  // Introduced in DOM Level 2:
	  interface MouseEvent : UIEvent {
	    readonly attribute long            screenX;
	    readonly attribute long            screenY;
	    readonly attribute long            clientX;
	    readonly attribute long            clientY;
	    readonly attribute boolean         ctrlKey;
	    readonly attribute boolean         shiftKey;
	    readonly attribute boolean         altKey;
	    readonly attribute boolean         metaKey;
	    readonly attribute unsigned short  button;
	    readonly attribute EventTarget     relatedTarget;
	    void               initMouseEvent(in DOMString typeArg,
	                                      in boolean canBubbleArg,
	                                      in boolean cancelableArg,
	                                      in views::AbstractView viewArg,
	                                      in long detailArg,
	                                      in long screenXArg,
	                                      in long screenYArg,
	                                      in long clientXArg,
	                                      in long clientYArg,
	                                      in boolean ctrlKeyArg,
	                                      in boolean altKeyArg,
	                                      in boolean shiftKeyArg,
	                                      in boolean metaKeyArg,
	                                      in unsigned short buttonArg,
	                                      in EventTarget relatedTargetArg);
	    // Introduced in DOM Level 3:
	    boolean            getModifierState(in DOMString keyIdentifierArg);
	    // Introduced in DOM Level 3:
	    void               initMouseEventNS(in DOMString namespaceURI,
	                                        in DOMString typeArg,
	                                        in boolean canBubbleArg,
	                                        in boolean cancelableArg,
	                                        in views::AbstractView viewArg,
	                                        in long detailArg,
	                                        in long screenXArg,
	                                        in long screenYArg,
	                                        in long clientXArg,
	                                        in long clientYArg,
	                                        in unsigned short buttonArg,
	                                        in EventTarget relatedTargetArg,
	                                        in DOMString modifiersList);
	  };
	
	  // Introduced in DOM Level 3:
	  interface KeyboardEvent : UIEvent {
	
	    // KeyLocationCode
	    const unsigned long       DOM_KEY_LOCATION_STANDARD      = 0x00;
	    const unsigned long       DOM_KEY_LOCATION_LEFT          = 0x01;
	    const unsigned long       DOM_KEY_LOCATION_RIGHT         = 0x02;
	    const unsigned long       DOM_KEY_LOCATION_NUMPAD        = 0x03;
	
	    readonly attribute DOMString       keyIdentifier;
	    readonly attribute unsigned long   keyLocation;
	    readonly attribute boolean         ctrlKey;
	    readonly attribute boolean         shiftKey;
	    readonly attribute boolean         altKey;
	    readonly attribute boolean         metaKey;
	    boolean            getModifierState(in DOMString keyIdentifierArg);
	    void               initKeyboardEvent(in DOMString typeArg,
	                                         in boolean canBubbleArg,
	                                         in boolean cancelableArg,
	                                         in views::AbstractView viewArg,
	                                         in DOMString keyIdentifierArg,
	                                         in unsigned long keyLocationArg,
	                                         in DOMString modifiersList);
	    void               initKeyboardEventNS(in DOMString namespaceURI,
	                                           in DOMString typeArg,
	                                           in boolean canBubbleArg,
	                                           in boolean cancelableArg,
	                                           in views::AbstractView viewArg,
	                                           in DOMString keyIdentifierArg,
	                                           in unsigned long keyLocationArg,
	                                           in DOMString modifiersList);
	  };
	
	  // Introduced in DOM Level 2:
	  interface MutationEvent : Event {
	
	    // attrChangeType
	    const unsigned short      MODIFICATION                   = 1;
	    const unsigned short      ADDITION                       = 2;
	    const unsigned short      REMOVAL                        = 3;
	
	    readonly attribute Node            relatedNode;
	    readonly attribute DOMString       prevValue;
	    readonly attribute DOMString       newValue;
	    readonly attribute DOMString       attrName;
	    readonly attribute unsigned short  attrChange;
	    void               initMutationEvent(in DOMString typeArg,
	                                         in boolean canBubbleArg,
	                                         in boolean cancelableArg,
	                                         in Node relatedNodeArg,
	                                         in DOMString prevValueArg,
	                                         in DOMString newValueArg,
	                                         in DOMString attrNameArg,
	                                         in unsigned short attrChangeArg);
	    // Introduced in DOM Level 3:
	    void               initMutationEventNS(in DOMString namespaceURI,
	                                           in DOMString typeArg,
	                                           in boolean canBubbleArg,
	                                           in boolean cancelableArg,
	                                           in Node relatedNodeArg,
	                                           in DOMString prevValueArg,
	                                           in DOMString newValueArg,
	                                           in DOMString attrNameArg,
	                                           in unsigned short attrChangeArg);
	  };
	
	  // Introduced in DOM Level 3:
	  interface MutationNameEvent : MutationEvent {
	    readonly attribute DOMString       prevNamespaceURI;
	    readonly attribute DOMString       prevNodeName;
	    // Introduced in DOM Level 3:
	    void               initMutationNameEvent(in DOMString typeArg,
	                                             in boolean canBubbleArg,
	                                             in boolean cancelableArg,
	                                             in Node relatedNodeArg,
	                                             in DOMString prevNamespaceURIArg,
	                                             in DOMString prevNodeNameArg);
	    // Introduced in DOM Level 3:
	    void               initMutationNameEventNS(in DOMString namespaceURI,
	                                               in DOMString typeArg,
	                                               in boolean canBubbleArg,
	                                               in boolean cancelableArg,
	                                               in Node relatedNodeArg,
	                                               in DOMString prevNamespaceURIArg,
	                                               in DOMString prevNodeNameArg);
	  };
	};
	
	#endif // _EVENTS_IDL_
	*/
	
	exports.dom = {
	  level3 : {
	    events:  events
	  }
	}


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	var core = __webpack_require__(49).dom.level3.core,
	    html = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../level2/html\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).dom.level2.html
	
	exports.dom = {
	  level3 : {
	    html : html,
	    core : core
	  }
	};


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	// w3c Load/Save functionality: http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407/
	
	var core = __webpack_require__(49).dom.level3.core;
	var events = __webpack_require__(51).dom.level3.events;;
	
	var ls = {};
	
	// TODO: what is this?
	//typedef dom::DOMConfiguration DOMConfiguration;
	
	ls.LSException = function LSException(code) {
	  this.code = code;
	};
	
	ls.LSException.prototype = {
	  // LSExceptionCode
	  PARSE_ERR                       : 81,
	  SERIALIZE_ERR                   : 82
	};
	
	ls.DOMImplementationLS = function DOMImplementationLS() {
	
	};
	
	var DOMImplementationExtension = {
	
	  // DOMImplementationLSMode
	  MODE_SYNCHRONOUS  : 1,
	  MODE_ASYNCHRONOUS : 2,
	
	  // raises(dom::DOMException);
	  createLSParser : function(/* int */ mode, /* string */ schemaType) {
	    return new ls.LSParser(mode, schemaType);
	  },
	
	  createLSSerializer : function() {
	    return new ls.LSSerializer();
	  },
	
	  createLSInput : function() {
	    return new ls.LSInput();
	  },
	
	  createLSOutput : function() {
	    return new ls.LSOutput();
	  }
	};
	
	Object.keys(DOMImplementationExtension).forEach(function(k, v) {
	  core.DOMImplementation.prototype[k] = DOMImplementationExtension[k];
	});
	
	ls.DOMImplementationLS.prototype = DOMImplementationExtension; 
	
	core.Document.getFeature = function() {
	  return DOMImplementationExtension;
	};
	
	ls.LSParser = function LSParser() {
	  this._domConfig = new core.DOMConfiguration();
	};
	ls.LSParser.prototype = {
	  get domConfig() { return this._domConfig; },
	  get filter() { return this._filter || null; },
	  set filter(value) { this._filter = value; },
	  get async() { return this._async; },
	  get busy() { return this._busy; },
	
	  // raises(dom::DOMException, LSException);
	  parse : function (/* LSInput */ input) {
	    var doc = new core.Document();
	    doc._inputEncoding = 'UTF-16';
	    return doc;
	  },
	
	  // raises(dom::DOMException, LSException);
	  parseURI : function(/* string */ uri) {
	    return new core.Document();
	  },
	
	  // ACTION_TYPES
	  ACTION_APPEND_AS_CHILDREN       : 1,
	  ACTION_REPLACE_CHILDREN         : 2,
	  ACTION_INSERT_BEFORE            : 3,
	  ACTION_INSERT_AFTER             : 4,
	  ACTION_REPLACE                  : 5,
	
	  // @returns Node
	  // @raises DOMException, LSException
	  parseWithContext                : function(/* LSInput */ input, /* Node */ contextArg, /* int */ action) {
	    return new core.Node();
	  },
	
	  abort                           : function() {
	    // TODO: implement
	  }
	};
	
	ls.LSInput = function LSInput() {};
	ls.LSInput.prototype = {
	  get characterStream() { return this._characterStream || null; },
	  set characterStream(value) { this._characterStream = value; },
	  get byteStream() { return this._byteStream || null; },
	  set byteStream(value) { this._byteStream = value; },
	  get stringData() { return this._stringData || null; },
	  set stringData(value) { this._stringData = value; },
	  get systemId() { return this._systemId || null; },
	  set systemId(value) { this._systemId = value; },
	  get publicId() { return this._publicId || null; },
	  set publicId(value) { this._publicId = value; },
	  get baseURI() { return this._baseURI || null; },
	  set baseURI(value) { this._baseURI = value; },
	  get encoding() { return this._encoding || null; },
	  set encoding(value) { this._encoding = value; },
	  get certifiedText() { return this._certifiedText || null; },
	  set certifiedText(value) { this._certifiedText = value; },
	};
	
	ls.LSResourceResolver = function LSResourceResolver() {};
	
	// @returns LSInput
	ls.LSResourceResolver.prototype.resolveResource = function(type, namespaceURI, publicId, systemId, baseURI) {
	  return new ls.LSInput();
	};
	
	ls.LSParserFilter = function LSParserFilter() {};
	ls.LSParserFilter.prototype = {
	
	  // Constants returned by startElement and acceptNode
	  FILTER_ACCEPT                   : 1,
	  FILTER_REJECT                   : 2,
	  FILTER_SKIP                     : 3,
	  FILTER_INTERRUPT                : 4,
	
	  get whatToShow() { return this._whatToShow; },
	
	  // @returns int
	  startElement : function(/* Element */ elementArg) {
	    return 0;
	  },
	
	  // @returns int
	  acceptNode : function(/* Node */ nodeArg) {
	    return nodeArg;
	  }
	};
	
	ls.LSSerializer = function LSSerializer() {
	  this._domConfig = new core.DOMConfiguration();
	};
	ls.LSSerializer.prototype = {
	  get domConfig() { return this._domConfig; },
	  get newLine() { return this._newLine || null; },
	  set newLine(value) { this._newLine = value; },
	  get filter() { return this._filter || null; },
	  set filter(value) { this._filter = value; },
	
	  // @returns boolean
	  // @raises LSException
	  write : function(/* Node */ nodeArg, /* LSOutput */ destination) {
	   return true;
	  },
	
	  // @returns boolean
	  // @raises LSException
	  writeToURI : function(/* Node */ nodeArg, /* string */ uri) {
	   return true;
	  },
	
	  // @returns string
	  // @raises DOMException, LSException
	  writeToString : function(/* Node */ nodeArg) {
	    return "";
	  }
	};
	
	ls.LSOutput = function LSOutput() {};
	ls.LSOutput.prototype = {
	  get characterStream() { return this._characterStream || null; },
	  set characterStream(value) { this._characterStream = value; },
	  get byteStream() { return this._byteStream || null; },
	  set byteStream(value) { this._byteStream = value; },
	  get systemId() { return this._systemId || null; },
	  set systemId(value) { this._systemId = value; },
	  get encoding() { return this._encoding || null; },
	  set encoding(value) { this._encoding = value; },
	};
	
	ls.LSProgressEvent = function LSProgressEvent() {};
	ls.LSProgressEvent.prototype = {
	  get input() { return this._input; },
	  get position() { return this._position; },
	  get totalSize() { return this._totalSize; },
	};
	
	ls.LSProgressEvent.prototype.__proto__ = events.Event;
	
	ls.LSLoadEvent = function LSLoadEvent() {};
	ls.LSLoadEvent.prototype = {
	  get newDocument() { return this._newDocument; },
	  get input() { return this._input; },
	};
	
	ls.LSLoadEvent.prototype.__proto__ = events.Event;
	
	
	// TODO: do traversal
	ls.LSSerializerFilter = function LSSerializerFilter() {};
	ls.LSSerializerFilter.prototype = {
	  get whatToShow() { return this._whatToShow; },
	};
	
	// ls.LSSerializerFilter.prototype.__proto__ = level2.traversal.NodeFiler;
	
	// Export
	module.exports.dom = {
	  level3 : {
	    ls : ls 
	  }
	};
	


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	var HTMLDecode = __webpack_require__(56).HTMLDecode;
	
	function HtmlToDom(parser) {
	
	  if(parser && parser.write) {
	    // sax parser
	    this.appendHtmlToElement = function(html, element){
	
	      var currentElement = element, currentLevel = 0;
	
	      parser.onerror = function (e) {};
	
	      parser.ontext = function (t) {
	        var ownerDocument = currentElement.ownerDocument || currentElement;
	        var newText = ownerDocument.createTextNode(t);
	        currentElement.appendChild(newText);
	      };
	
	      parser.onopentag = function (node) {
	        var nodeName  = node.name.toLowerCase(),
	            document   = currentElement.ownerDocument || currentElement,
	            newElement = document.createElement(nodeName),
	            i          = 0,
	            length     = (node.attributes && node.attributes.length) ?
	                          node.attributes.length                     :
	                          0;
	
	        for (i in node.attributes) {
	          if (node.attributes.hasOwnProperty(i)) {
	            newElement.setAttribute(i, node.attributes[i]);
	          }
	        }
	
	        for (i=0; i<node.attributes.length; i++) {
	            newElement.setAttribute(i, node.attributes.item(i));
	        }
	        currentElement.appendChild(newElement);
	        currentElement = newElement;
	      };
	
	      parser.onclosetag = function(node) {
	        currentElement = currentElement.parentNode;
	      };
	
	      parser.write(html).close();
	
	      return element;
	    };
	
	  } else if (parser && (parser.ParseHtml || parser.DefaultHandler)) {
	
	    // Forgiving HTML parser
	
	    if (parser.ParseHtml) {
	      // davglass/node-htmlparser
	    } else if (parser.DefaultHandler){
	      // tautologistics/node-htmlparser
	
	      var handler        = new parser.DefaultHandler(),
	          parserInstance = new parser.Parser(handler);
	      parser.ParseHtml = function(rawHtml){
	        parserInstance.includeLocation = false;
	        parserInstance.parseComplete(rawHtml);
	        return handler.dom;
	      };
	    }
	
	    this.appendHtmlToElement = function(html, element) {
	
	      if (typeof html !== 'string') {
	        html +='';
	      }
	
	      var parsed = parser.ParseHtml(html);
	
	      for (var i = 0; i < parsed.length; i++) {
	        setChild(element, parsed[i]);
	      }
	
	      return element;
	    };
	
	  } else if (parser && parser.moduleName == 'HTML5') { /* HTML5 parser */
	    this.appendHtmlToElement = function(html, element) {
	
	      if (typeof html !== 'string') {
	        html += '';
	      }
	      if (html.length > 0) {
	        if (element.nodeType == 9) {
	          new parser.Parser({document: element}).parse(html);
	        }
	        else {
	          var p = new parser.Parser({document: element.ownerDocument});
	          p.parse_fragment(html, element);
	        }
	      }
	    };
	  } else {
	
	    this.appendHtmlToElement = function(){
	      console.log('');
	      console.log('###########################################################');
	      console.log('#  WARNING: No HTML parser could be found.');
	      console.log('#  Element.innerHTML setter support has been disabled');
	      console.log('#  Element.innerHTML getter support will still function');
	      console.log('#  Download: http://github.com/tautologistics/node-htmlparser');
	      console.log('###########################################################');
	      console.log('');
	    };
	
	  }
	};
	
	// utility function for forgiving parser
	function setChild(parent, node) {
	
	  var c, newNode, currentDocument = parent._ownerDocument || parent;
	
	  switch (node.type)
	  {
	    case 'tag':
	    case 'script':
	    case 'style':
	      try {
	        newNode = currentDocument.createElement(node.name);
	        if (node.location) {
	          newNode.sourceLocation = node.location;
	          newNode.sourceLocation.file = parent.sourceLocation.file;
	        }
	      } catch (err) {
	        currentDocument.raise('error', 'invalid markup', {
	          exception: err,
	          node : node
	        });
	
	        return null;
	      }
	    break;
	
	    case 'text':
	      // Decode HTML entities if we're not inside a <script> or <style> tag:
	      newNode = currentDocument.createTextNode(/^(?:script|style)$/i.test(parent.nodeName) ?
	                                                   node.data :
	                                                   HTMLDecode(node.data));
	    break;
	
	    case 'comment':
	      newNode = currentDocument.createComment(node.data);
	    break;
	
	    default:
	      return null;
	    break;
	  }
	
	  if (!newNode)
	    return null;
	
	  if (node.attribs) {
	    for (c in node.attribs) {
	      // catchin errors here helps with improperly escaped attributes
	      // but properly fixing parent should (can only?) be done in the htmlparser itself
	      try {
	        newNode.setAttribute(c.toLowerCase(), HTMLDecode(node.attribs[c]));
	      } catch(e2) { /* noop */ }
	    }
	  }
	
	  if (node.children) {
	    for (c = 0; c < node.children.length; c++) {
	      setChild(newNode, node.children[c]);
	    }
	  }
	
	  try{
	    return parent.appendChild(newNode);
	  }catch(err){
	    currentDocument.raise('error', err.message, {
	          exception: err,
	          node : node
	        });
	    return null;
	  }
	}
	
	exports.HtmlToDom = HtmlToDom;


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	//List from node-htmlparser
	var singleTags = {
	  area: 1,
	  base: 1,
	  basefont: 1,
	  br: 1,
	  col: 1,
	  frame: 1,
	  hr: 1,
	  img: 1,
	  input: 1,
	  isindex: 1,
	  link: 1,
	  meta: 1,
	  param: 1,
	  embed: 1
	};
	
	var expr = {
	  upperCaseChars: /([A-Z])/g,
	  breakBetweenTags: /(<(\/?\w+).*?>)(?=<(?!\/\2))/gi,
	  singleTag: (function() {
	    var tags = [];
	    for (var i in singleTags) {
	      tags.push(i);
	    }
	    return new RegExp('<' + tags.join('|<'), 'i');
	  })()
	};
	
	var uncanon = function(str, letter) {
	  return '-' + letter.toLowerCase();
	};
	
	var HTMLEncode = __webpack_require__(56).HTMLEncode;
	
	exports.stringifyElement = function stringifyElement(element) {
	  var tagName = element.tagName.toLowerCase(),
	      ret = {
	        start: "<" + tagName,
	        end:''
	      },
	      attributes = [],
	      i,
	      attribute = null;
	
	  if (element.attributes.length) {
	    ret.start += " ";
	    for (i = 0; i<element.attributes.length; i++) {
	      attribute = element.attributes.item(i);
	      attributes.push(attribute.name + '="' +
	                      HTMLEncode(attribute.nodeValue, true) + '"');
	    }
	  }
	  ret.start += attributes.join(" ");
	
	  if (singleTags[tagName]) {
	    ret.start += " />";
	    ret.end = '';
	  } else {
	    ret.start += ">";
	    ret.end = "</" + tagName + ">";
	  }
	
	  return ret;
	};
	
	var rawTextElements = /SCRIPT|STYLE/i;
	
	function stringifyDoctype (doctype) {
	  if (doctype.ownerDocument && doctype.ownerDocument._fullDT) {
	    return doctype.ownerDocument._fullDT;
	  }
	
	  var dt = '<!DOCTYPE ' + doctype.name;
	  if (doctype.publicId) {
	    // Public ID may never contain double quotes, so this is always safe.
	    dt += ' PUBLIC "' + doctype.publicId + '" ';
	  }
	  if (!doctype.publicId && doctype.systemId) {
	    dt += ' SYSTEM ';
	  }
	  if (doctype.systemId) {
	    // System ID may contain double quotes OR single quotes, not never both.
	    if (doctype.systemId.indexOf('"') > -1) {
	      dt += "'" + doctype.systemId + "'";
	    } else {
	      dt += '"' + doctype.systemId + '"';
	    }
	  }
	  dt += '>';
	  return dt;
	}
	
	exports.makeHtmlGenerator = function makeHtmlGenerator(indentUnit, eol) {
	  indentUnit = indentUnit || "";
	  eol = eol || "";
	
	  return function generateHtmlRecursive(node, rawText, curIndent) {
	    var ret = "", parent, current, i;
	    curIndent = curIndent || "";
	    if (node) {
	      if (node.nodeType &&
	          node.nodeType === node.ENTITY_REFERENCE_NODE) {
	        node = node._entity;
	      }
	
	      var childNodesRawText = rawText || rawTextElements.test(node.nodeName);
	
	      switch (node.nodeType) {
	        case node.ELEMENT_NODE:
	          current = exports.stringifyElement(node);
	          if (childNodesRawText) {
	            ret += curIndent + current.start;
	          } else {
	            ret += curIndent + current.start;
	          }
	          if (node._childNodes.length > 0) {
	            if (node._childNodes[0].nodeType !== node.TEXT_NODE) {
	              ret += eol;
	            }
	            for (i=0; i<node._childNodes.length; i++) {
	              ret += generateHtmlRecursive(node._childNodes[i], childNodesRawText, curIndent + indentUnit);
	            }
	            if (node._childNodes[node._childNodes.length - 1].nodeType !== node.TEXT_NODE) {
	              ret += curIndent;
	            }
	            ret += current.end + eol;
	          } else {
	            ret += ((rawText ? node.nodeValue : HTMLEncode(node.nodeValue, false)) || '') + current.end + eol;
	          }
	          break;
	        case node.TEXT_NODE:
	          // Skip pure whitespace nodes if we're indenting
	          if (!indentUnit || !/^[\s\n]*$/.test(node.nodeValue)) {
	            ret += (rawText ? node.nodeValue : HTMLEncode(node.nodeValue, false)) || '';
	          }
	          break;
	        case node.COMMENT_NODE:
	          ret += curIndent + '<!--' + node.nodeValue + '-->' + eol;
	          break;
	        case node.DOCUMENT_NODE:
	          for (i=0; i<node._childNodes.length; i++) {
	            ret += generateHtmlRecursive(node._childNodes[i], childNodesRawText, curIndent);
	          }
	          break;
	        case node.DOCUMENT_TYPE_NODE:
	          ret += stringifyDoctype(node);
	        break;
	      }
	    }
	    return ret;
	  };
	};
	
	exports.domToHtml = function(dom, noformat, raw) {
	  var htmlGenerator = exports.makeHtmlGenerator(noformat ? "" : "  ",
	                                                noformat ? "" : "\n");
	  if (dom.toArray) {
	    // node list
	    dom = dom.toArray();
	  }
	  if (typeof dom.length !== 'undefined') {
	    var ret = "";
	    for (var i=0,len=dom.length; i<len; i++) {
	      ret += htmlGenerator(dom[i], raw);
	    }
	    return ret;
	  } else {
	    // single node
	    return htmlGenerator(dom, raw);
	  }
	};


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	var charByEntityName = {
	  'quot': '"',
	  'amp': '&',
	  'apos': '\'',
	  'lt': '<',
	  'gt': '>',
	  'nbsp': 'Â ',
	  'iexcl': 'Â¡',
	  'cent': 'Â¢',
	  'pound': 'Â£',
	  'curren': 'Â¤',
	  'yen': 'Â¥',
	  'brvbar': 'Â¦',
	  'sect': 'Â§',
	  'uml': 'Â¨',
	  'copy': 'Â©',
	  'ordf': 'Âª',
	  'laquo': 'Â«',
	  'not': 'Â¬',
	  'shy': 'Â­',
	  'reg': 'Â®',
	  'macr': 'Â¯', // http://www.w3.org/TR/html4/sgml/entities.html
	  'strns': 'Â¯', // http://www.w3.org/TR/html5/named-character-references.html
	  'deg': 'Â°',
	  'plusmn': 'Â±', // http://www.w3.org/TR/html4/sgml/entities.html
	  'pm': 'Â±', // http://www.w3.org/TR/html5/named-character-references.html
	  'sup2': 'Â²',
	  'sup3': 'Â³',
	  'acute': 'Â´',
	  'micro': 'Âµ',
	  'para': 'Â¶',
	  'middot': 'Â·',
	  'cedil': 'Â¸',
	  'sup1': 'Â¹',
	  'ordm': 'Âº',
	  'raquo': 'Â»',
	  'frac14': 'Â¼',
	  'half': 'Â½', // http://www.w3.org/TR/html4/sgml/entities.html
	  'frac12': 'Â½', // http://www.w3.org/TR/html5/named-character-references.html
	  'frac34': 'Â¾',
	  'iquest': 'Â¿',
	  'Agrave': 'Ã',
	  'Aacute': 'Ã',
	  'Acirc': 'Ã',
	  'Atilde': 'Ã',
	  'Auml': 'Ã',
	  'Aring': 'Ã', // http://www.w3.org/TR/html4/sgml/entities.html
	  'angst': 'Ã', // http://www.w3.org/TR/html5/named-character-references.html
	  'AElig': 'Ã',
	  'Ccedil': 'Ã',
	  'Egrave': 'Ã',
	  'Eacute': 'Ã',
	  'Ecirc': 'Ã',
	  'Euml': 'Ã',
	  'Igrave': 'Ã',
	  'Iacute': 'Ã',
	  'Icirc': 'Ã',
	  'Iuml': 'Ã',
	  'ETH': 'Ã',
	  'Ntilde': 'Ã',
	  'Ograve': 'Ã',
	  'Oacute': 'Ã',
	  'Ocirc': 'Ã',
	  'Otilde': 'Ã',
	  'Ouml': 'Ã',
	  'times': 'Ã',
	  'Oslash': 'Ã',
	  'Ugrave': 'Ã',
	  'Uacute': 'Ã',
	  'Ucirc': 'Ã',
	  'Uuml': 'Ã',
	  'Yacute': 'Ã',
	  'THORN': 'Ã',
	  'szlig': 'Ã',
	  'agrave': 'Ã ',
	  'aacute': 'Ã¡',
	  'acirc': 'Ã¢',
	  'atilde': 'Ã£',
	  'auml': 'Ã¤',
	  'aring': 'Ã¥',
	  'aelig': 'Ã¦',
	  'ccedil': 'Ã§',
	  'egrave': 'Ã¨',
	  'eacute': 'Ã©',
	  'ecirc': 'Ãª',
	  'euml': 'Ã«',
	  'igrave': 'Ã¬',
	  'iacute': 'Ã­',
	  'icirc': 'Ã®',
	  'iuml': 'Ã¯',
	  'eth': 'Ã°',
	  'ntilde': 'Ã±',
	  'ograve': 'Ã²',
	  'oacute': 'Ã³',
	  'ocirc': 'Ã´',
	  'otilde': 'Ãµ',
	  'ouml': 'Ã¶',
	  'divide': 'Ã·',
	  'oslash': 'Ã¸',
	  'ugrave': 'Ã¹',
	  'uacute': 'Ãº',
	  'ucirc': 'Ã»',
	  'uuml': 'Ã¼',
	  'yacute': 'Ã½',
	  'thorn': 'Ã¾',
	  'yuml': 'Ã¿',
	  'Amacr': 'Ä',
	  'amacr': 'Ä',
	  'Abreve': 'Ä',
	  'abreve': 'Ä',
	  'Aogon': 'Ä',
	  'aogon': 'Ä',
	  'Cacute': 'Ä',
	  'cacute': 'Ä',
	  'Ccirc': 'Ä',
	  'ccirc': 'Ä',
	  'Cdot': 'Ä',
	  'cdot': 'Ä',
	  'Ccaron': 'Ä',
	  'ccaron': 'Ä',
	  'Dcaron': 'Ä',
	  'dcaron': 'Ä',
	  'Dstrok': 'Ä',
	  'dstrok': 'Ä',
	  'Emacr': 'Ä',
	  'emacr': 'Ä',
	  'Edot': 'Ä',
	  'edot': 'Ä',
	  'Eogon': 'Ä',
	  'eogon': 'Ä',
	  'Ecaron': 'Ä',
	  'ecaron': 'Ä',
	  'Gcirc': 'Ä',
	  'gcirc': 'Ä',
	  'Gbreve': 'Ä',
	  'gbreve': 'Ä',
	  'Gdot': 'Ä ',
	  'gdot': 'Ä¡',
	  'Gcedil': 'Ä¢',
	  'Hcirc': 'Ä¤',
	  'hcirc': 'Ä¥',
	  'Hstrok': 'Ä¦',
	  'hstrok': 'Ä§',
	  'Itilde': 'Ä¨',
	  'itilde': 'Ä©',
	  'Imacr': 'Äª',
	  'imacr': 'Ä«',
	  'Iogon': 'Ä®',
	  'iogon': 'Ä¯',
	  'Idot': 'Ä°',
	  'inodot': 'Ä±',
	  'IJlig': 'Ä²',
	  'ijlig': 'Ä³',
	  'Jcirc': 'Ä´',
	  'jcirc': 'Äµ',
	  'Kcedil': 'Ä¶',
	  'kcedil': 'Ä·',
	  'kgreen': 'Ä¸',
	  'Lacute': 'Ä¹',
	  'lacute': 'Äº',
	  'Lcedil': 'Ä»',
	  'lcedil': 'Ä¼',
	  'Lcaron': 'Ä½',
	  'lcaron': 'Ä¾',
	  'Lmidot': 'Ä¿',
	  'lmidot': 'Å',
	  'Lstrok': 'Å',
	  'lstrok': 'Å',
	  'Nacute': 'Å',
	  'nacute': 'Å',
	  'Ncedil': 'Å',
	  'ncedil': 'Å',
	  'Ncaron': 'Å',
	  'ncaron': 'Å',
	  'napos': 'Å',
	  'ENG': 'Å',
	  'eng': 'Å',
	  'Omacr': 'Å',
	  'omacr': 'Å',
	  'Odblac': 'Å',
	  'odblac': 'Å',
	  'OElig': 'Å',
	  'oelig': 'Å',
	  'Racute': 'Å',
	  'racute': 'Å',
	  'Rcedil': 'Å',
	  'rcedil': 'Å',
	  'Rcaron': 'Å',
	  'rcaron': 'Å',
	  'Sacute': 'Å',
	  'sacute': 'Å',
	  'Scirc': 'Å',
	  'scirc': 'Å',
	  'Scedil': 'Å',
	  'scedil': 'Å',
	  'Scaron': 'Å ',
	  'scaron': 'Å¡',
	  'Tcedil': 'Å¢',
	  'tcedil': 'Å£',
	  'Tcaron': 'Å¤',
	  'tcaron': 'Å¥',
	  'Tstrok': 'Å¦',
	  'tstrok': 'Å§',
	  'Utilde': 'Å¨',
	  'utilde': 'Å©',
	  'Umacr': 'Åª',
	  'umacr': 'Å«',
	  'Ubreve': 'Å¬',
	  'ubreve': 'Å­',
	  'Uring': 'Å®',
	  'uring': 'Å¯',
	  'Udblac': 'Å°',
	  'udblac': 'Å±',
	  'Uogon': 'Å²',
	  'uogon': 'Å³',
	  'Wcirc': 'Å´',
	  'wcirc': 'Åµ',
	  'Ycirc': 'Å¶',
	  'ycirc': 'Å·',
	  'Yuml': 'Å¸',
	  'Zacute': 'Å¹',
	  'zacute': 'Åº',
	  'Zdot': 'Å»',
	  'zdot': 'Å¼',
	  'Zcaron': 'Å½',
	  'zcaron': 'Å¾',
	  'fnof': 'Æ',
	  'imped': 'Æµ',
	  'gacute': 'Çµ',
	  'jmath': 'È·',
	  'circ': 'Ë',
	  'caron': 'Ë',
	  'breve': 'Ë',
	  'dot': 'Ë',
	  'ring': 'Ë',
	  'ogon': 'Ë',
	  'tilde': 'Ë',
	  'dblac': 'Ë',
	  'Alpha': 'Î',
	  'Beta': 'Î',
	  'Gamma': 'Î',
	  'Delta': 'Î',
	  'Epsilon': 'Î',
	  'Zeta': 'Î',
	  'Eta': 'Î',
	  'Theta': 'Î',
	  'Iota': 'Î',
	  'Kappa': 'Î',
	  'Lambda': 'Î',
	  'Mu': 'Î',
	  'Nu': 'Î',
	  'Xi': 'Î',
	  'Omicron': 'Î',
	  'Pi': 'Î ',
	  'Rho': 'Î¡',
	  'Sigma': 'Î£',
	  'Tau': 'Î¤',
	  'Upsilon': 'Î¥',
	  'Phi': 'Î¦',
	  'Chi': 'Î§',
	  'Psi': 'Î¨',
	  'Omega': 'Î©', // http://www.w3.org/TR/html4/sgml/entities.html
	  'ohm': 'Î©', // http://www.w3.org/TR/html5/named-character-references.html
	  'alpha': 'Î±',
	  'beta': 'Î²',
	  'gamma': 'Î³',
	  'delta': 'Î´',
	  'epsilon': 'Îµ',
	  'zeta': 'Î¶',
	  'eta': 'Î·',
	  'theta': 'Î¸',
	  'iota': 'Î¹',
	  'kappa': 'Îº',
	  'lambda': 'Î»',
	  'mu': 'Î¼',
	  'nu': 'Î½',
	  'xi': 'Î¾',
	  'omicron': 'Î¿',
	  'pi': 'Ï',
	  'rho': 'Ï',
	  'sigmaf': 'Ï', // http://www.w3.org/TR/html4/sgml/entities.html
	  'varsigma': 'Ï', // http://www.w3.org/TR/html5/named-character-references.html
	  'sigma': 'Ï',
	  'tau': 'Ï',
	  'upsilon': 'Ï',
	  'phi': 'Ï',
	  'chi': 'Ï',
	  'psi': 'Ï',
	  'omega': 'Ï',
	  'thetasym': 'Ï', // http://www.w3.org/TR/html4/sgml/entities.html
	  'vartheta': 'Ï', // http://www.w3.org/TR/html5/named-character-references.html
	  'upsih': 'Ï',
	  'varphi': 'Ï',
	  'piv': 'Ï', // http://www.w3.org/TR/html4/sgml/entities.html
	  'varpi': 'Ï', // http://www.w3.org/TR/html5/named-character-references.html
	  'Gammad': 'Ï',
	  'gammad': 'Ï',
	  'varkappa': 'Ï°',
	  'varrho': 'Ï±',
	  'varepsilon': 'Ïµ',
	  'bepsi': 'Ï¶',
	  'IOcy': 'Ð',
	  'DJcy': 'Ð',
	  'GJcy': 'Ð',
	  'Jukcy': 'Ð',
	  'DScy': 'Ð',
	  'Iukcy': 'Ð',
	  'YIcy': 'Ð',
	  'Jsercy': 'Ð',
	  'LJcy': 'Ð',
	  'NJcy': 'Ð',
	  'TSHcy': 'Ð',
	  'KJcy': 'Ð',
	  'Ubrcy': 'Ð',
	  'DZcy': 'Ð',
	  'Acy': 'Ð',
	  'Bcy': 'Ð',
	  'Vcy': 'Ð',
	  'Gcy': 'Ð',
	  'Dcy': 'Ð',
	  'IEcy': 'Ð',
	  'ZHcy': 'Ð',
	  'Zcy': 'Ð',
	  'Icy': 'Ð',
	  'Jcy': 'Ð',
	  'Kcy': 'Ð',
	  'Lcy': 'Ð',
	  'Mcy': 'Ð',
	  'Ncy': 'Ð',
	  'Ocy': 'Ð',
	  'Pcy': 'Ð',
	  'Rcy': 'Ð ',
	  'Scy': 'Ð¡',
	  'Tcy': 'Ð¢',
	  'Ucy': 'Ð£',
	  'Fcy': 'Ð¤',
	  'KHcy': 'Ð¥',
	  'TScy': 'Ð¦',
	  'CHcy': 'Ð§',
	  'SHcy': 'Ð¨',
	  'SHCHcy': 'Ð©',
	  'HARDcy': 'Ðª',
	  'Ycy': 'Ð«',
	  'SOFTcy': 'Ð¬',
	  'Ecy': 'Ð­',
	  'YUcy': 'Ð®',
	  'YAcy': 'Ð¯',
	  'acy': 'Ð°',
	  'bcy': 'Ð±',
	  'vcy': 'Ð²',
	  'gcy': 'Ð³',
	  'dcy': 'Ð´',
	  'iecy': 'Ðµ',
	  'zhcy': 'Ð¶',
	  'zcy': 'Ð·',
	  'icy': 'Ð¸',
	  'jcy': 'Ð¹',
	  'kcy': 'Ðº',
	  'lcy': 'Ð»',
	  'mcy': 'Ð¼',
	  'ncy': 'Ð½',
	  'ocy': 'Ð¾',
	  'pcy': 'Ð¿',
	  'rcy': 'Ñ',
	  'scy': 'Ñ',
	  'tcy': 'Ñ',
	  'ucy': 'Ñ',
	  'fcy': 'Ñ',
	  'khcy': 'Ñ',
	  'tscy': 'Ñ',
	  'chcy': 'Ñ',
	  'shcy': 'Ñ',
	  'shchcy': 'Ñ',
	  'hardcy': 'Ñ',
	  'ycy': 'Ñ',
	  'softcy': 'Ñ',
	  'ecy': 'Ñ',
	  'yucy': 'Ñ',
	  'yacy': 'Ñ',
	  'iocy': 'Ñ',
	  'djcy': 'Ñ',
	  'gjcy': 'Ñ',
	  'jukcy': 'Ñ',
	  'dscy': 'Ñ',
	  'iukcy': 'Ñ',
	  'yicy': 'Ñ',
	  'jsercy': 'Ñ',
	  'ljcy': 'Ñ',
	  'njcy': 'Ñ',
	  'tshcy': 'Ñ',
	  'kjcy': 'Ñ',
	  'ubrcy': 'Ñ',
	  'dzcy': 'Ñ',
	  'ensp': 'â',
	  'emsp': 'â',
	  'emsp13': 'â',
	  'emsp14': 'â',
	  'numsp': 'â',
	  'puncsp': 'â',
	  'thinsp': 'â',
	  'hairsp': 'â',
	  'ZeroWidthSpace': 'â',
	  'zwnj': 'â',
	  'zwj': 'â',
	  'lrm': 'â',
	  'rlm': 'â',
	  'hyphen': 'â',
	  'ndash': 'â',
	  'mdash': 'â',
	  'horbar': 'â',
	  'Vert': 'â',
	  'lsquo': 'â',
	  'rsquo': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'rsquor': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'sbquo': 'â',
	  'ldquo': 'â',
	  'rdquo': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'rdquor': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'ldquo': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'ldquor': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'dagger': 'â ',
	  'Dagger': 'â¡', // http://www.w3.org/TR/html4/sgml/entities.html
	  'ddagger': 'â¡', // http://www.w3.org/TR/html5/named-character-references.html
	  'bull': 'â¢', // http://www.w3.org/TR/html4/sgml/entities.html
	  'bullet': 'â¢', // http://www.w3.org/TR/html5/named-character-references.html
	  'nldr': 'â¥',
	  'hellip': 'â¦', // http://www.w3.org/TR/html4/sgml/entities.html
	  'mldr': 'â¦', // http://www.w3.org/TR/html5/named-character-references.html
	  'permil': 'â°',
	  'pertenk': 'â±',
	  'prime': 'â²',
	  'Prime': 'â³',
	  'tprime': 'â´',
	  'bprime': 'âµ',
	  'lsaquo': 'â¹',
	  'rsaquo': 'âº',
	  'oline': 'â¾',
	  'caret': 'â',
	  'hybull': 'â',
	  'frasl': 'â',
	  'bsemi': 'â',
	  'qprime': 'â',
	  'MediumSpace': 'â',
	  'NoBreak': 'â ',
	  'af': 'â¡',
	  'it': 'â¢',
	  'ic': 'â£',
	  'euro': 'â¬',
	  'complexes': 'â',
	  'incare': 'â',
	  'gscr': 'â',
	  'hamilt': 'â',
	  'Poincareplane': 'â',
	  'quaternions': 'â',
	  'planckh': 'â',
	  'plankv': 'â',
	  'imagline': 'â',
	  'image': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'imagpart': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'lagran': 'â',
	  'ell': 'â',
	  'naturals': 'â',
	  'numero': 'â',
	  'copysr': 'â',
	  'weierp': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'wp': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'primes': 'â',
	  'rationals': 'â',
	  'realine': 'â',
	  'real': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'realpart': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'reals': 'â',
	  'rx': 'â',
	  'trade': 'â¢',
	  'integers': 'â¤',
	  'mho': 'â§',
	  'zeetrf': 'â¨',
	  'iiota': 'â©',
	  'bernou': 'â¬',
	  'Cfr': 'â­',
	  'escr': 'â¯',
	  'expectation': 'â°',
	  'Fscr': 'â±',
	  'phmmat': 'â³',
	  'oscr': 'â´',
	  'alefsym': 'âµ', // http://www.w3.org/TR/html4/sgml/entities.html
	  'aleph': 'âµ', // http://www.w3.org/TR/html5/named-character-references.html
	  'beth': 'â¶',
	  'gimel': 'â·',
	  'daleth': 'â¸',
	  'DD': 'â',
	  'dd': 'â',
	  'exponentiale': 'â',
	  'ii': 'â',
	  'frac13': 'â',
	  'frac23': 'â',
	  'frac15': 'â',
	  'frac25': 'â',
	  'frac35': 'â',
	  'frac45': 'â',
	  'frac16': 'â',
	  'frac56': 'â',
	  'frac18': 'â',
	  'frac38': 'â',
	  'frac58': 'â',
	  'frac78': 'â',
	  'larr': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'slarr': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'uarr': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'uparrow': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'rarr': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'srarr': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'darr': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'downarrow': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'harr': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'leftrightarrow': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'varr': 'â',
	  'nwarrow': 'â',
	  'nearrow': 'â',
	  'searrow': 'â',
	  'swarrow': 'â',
	  'nleftarrow': 'â',
	  'nrightarrow': 'â',
	  'rightsquigarrow': 'â',
	  'twoheadleftarrow': 'â',
	  'Uarr': 'â',
	  'twoheadrightarrow': 'â ',
	  'Darr': 'â¡',
	  'leftarrowtail': 'â¢',
	  'rightarrowtail': 'â£',
	  'mapstoleft': 'â¤',
	  'mapstoup': 'â¥',
	  'mapsto': 'â¦',
	  'mapstodown': 'â§',
	  'larrhk': 'â©',
	  'rarrhk': 'âª',
	  'looparrowleft': 'â«',
	  'rarrlp': 'â¬',
	  'leftrightsquigarrow': 'â­',
	  'nleftrightarrow': 'â®',
	  'lsh': 'â°',
	  'rsh': 'â±',
	  'ldsh': 'â²',
	  'rdsh': 'â³',
	  'crarr': 'âµ',
	  'curvearrowleft': 'â¶',
	  'curvearrowright': 'â·',
	  'olarr': 'âº',
	  'orarr': 'â»',
	  'lharu': 'â¼',
	  'lhard': 'â½',
	  'upharpoonright': 'â¾',
	  'upharpoonleft': 'â¿',
	  'rightharpoonup': 'â',
	  'rightharpoondown': 'â',
	  'downharpoonright': 'â',
	  'downharpoonleft': 'â',
	  'rlarr': 'â',
	  'udarr': 'â',
	  'lrarr': 'â',
	  'llarr': 'â',
	  'uuarr': 'â',
	  'rrarr': 'â',
	  'downdownarrows': 'â',
	  'lrhar': 'â',
	  'rlhar': 'â',
	  'nlArr': 'â',
	  'nhArr': 'â',
	  'nrArr': 'â',
	  'lArr': 'â',
	  'uArr': 'â',
	  'rArr': 'â',
	  'dArr': 'â',
	  'hArr': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'iff': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'vArr': 'â',
	  'nwArr': 'â',
	  'neArr': 'â',
	  'seArr': 'â',
	  'swArr': 'â',
	  'lAarr': 'â',
	  'rAarr': 'â',
	  'zigrarr': 'â',
	  'larrb': 'â¤',
	  'rarrb': 'â¥',
	  'duarr': 'âµ',
	  'loarr': 'â½',
	  'roarr': 'â¾',
	  'hoarr': 'â¿',
	  'forall': 'â',
	  'complement': 'â',
	  'part': 'â',
	  'exist': 'â',
	  'nexists': 'â',
	  'empty': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'varnothing': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'nabla': 'â',
	  'isin': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'isinv': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'notin': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'notinva': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'ni': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'niv': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'notniva': 'â',
	  'prod': 'â',
	  'coprod': 'â',
	  'sum': 'â',
	  'minus': 'â',
	  'mp': 'â',
	  'plusdo': 'â',
	  'ssetmn': 'â',
	  'lowast': 'â',
	  'compfn': 'â',
	  'radic': 'â',
	  'prop': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'vprop': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'infin': 'â',
	  'angrt': 'â',
	  'ang': 'â ', // http://www.w3.org/TR/html4/sgml/entities.html
	  'angle': 'â ', // http://www.w3.org/TR/html5/named-character-references.html
	  'measuredangle': 'â¡',
	  'angsph': 'â¢',
	  'smid': 'â£',
	  'nsmid': 'â¤',
	  'spar': 'â¥',
	  'nspar': 'â¦',
	  'and': 'â§', // http://www.w3.org/TR/html4/sgml/entities.html
	  'wedge': 'â§', // http://www.w3.org/TR/html5/named-character-references.html
	  'or': 'â¨', // http://www.w3.org/TR/html4/sgml/entities.html
	  'vee': 'â¨', // http://www.w3.org/TR/html5/named-character-references.html
	  'cap': 'â©',
	  'cup': 'âª',
	  'int': 'â«',
	  'Int': 'â¬',
	  'tint': 'â­',
	  'oint': 'â®',
	  'DoubleContourIntegral': 'â¯',
	  'Cconint': 'â°',
	  'cwint': 'â±',
	  'cwconint': 'â²',
	  'awconint': 'â³',
	  'there4': 'â´', // http://www.w3.org/TR/html4/sgml/entities.html
	  'therefore': 'â´', // http://www.w3.org/TR/html5/named-character-references.html
	  'because': 'âµ',
	  'ratio': 'â¶',
	  'Proportion': 'â·',
	  'minusd': 'â¸',
	  'mDDot': 'âº',
	  'homtht': 'â»',
	  'sim': 'â¼', // http://www.w3.org/TR/html4/sgml/entities.html
	  'thksim': 'â¼', // http://www.w3.org/TR/html5/named-character-references.html
	  'bsim': 'â½',
	  'mstpos': 'â¾',
	  'acd': 'â¿',
	  'wreath': 'â',
	  'nsim': 'â',
	  'esim': 'â',
	  'simeq': 'â',
	  'nsimeq': 'â',
	  'cong': 'â',
	  'simne': 'â',
	  'ncong': 'â',
	  'asymp': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'thkap': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'napprox': 'â',
	  'approxeq': 'â',
	  'apid': 'â',
	  'bcong': 'â',
	  'asympeq': 'â',
	  'bump': 'â',
	  'bumpeq': 'â',
	  'esdot': 'â',
	  'eDot': 'â',
	  'fallingdotseq': 'â',
	  'risingdotseq': 'â',
	  'coloneq': 'â',
	  'eqcolon': 'â',
	  'eqcirc': 'â',
	  'cire': 'â',
	  'wedgeq': 'â',
	  'veeeq': 'â',
	  'trie': 'â',
	  'questeq': 'â',
	  'ne': 'â ',
	  'equiv': 'â¡',
	  'nequiv': 'â¢',
	  'le': 'â¤', // http://www.w3.org/TR/html4/sgml/entities.html
	  'leq': 'â¤', // http://www.w3.org/TR/html5/named-character-references.html
	  'ge': 'â¥', // http://www.w3.org/TR/html4/sgml/entities.html
	  'geq': 'â¥', // http://www.w3.org/TR/html5/named-character-references.html
	  'leqq': 'â¦',
	  'geqq': 'â§',
	  'lneqq': 'â¨',
	  'gneqq': 'â©',
	  'll': 'âª',
	  'gg': 'â«',
	  'twixt': 'â¬',
	  'NotCupCap': 'â­',
	  'nlt': 'â®',
	  'ngtr': 'â¯',
	  'nleq': 'â°',
	  'ngeq': 'â±',
	  'lsim': 'â²',
	  'gtrsim': 'â³',
	  'nlsim': 'â´',
	  'ngsim': 'âµ',
	  'lg': 'â¶',
	  'gtrless': 'â·',
	  'ntlg': 'â¸',
	  'ntgl': 'â¹',
	  'prec': 'âº',
	  'succ': 'â»',
	  'preccurlyeq': 'â¼',
	  'succcurlyeq': 'â½',
	  'prsim': 'â¾',
	  'succsim': 'â¿',
	  'nprec': 'â',
	  'nsucc': 'â',
	  'sub': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'subset': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'sup': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'supset': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'nsub': 'â',
	  'nsup': 'â',
	  'sube': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'subseteq': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'supe': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'supseteq': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'nsubseteq': 'â',
	  'nsupseteq': 'â',
	  'subsetneq': 'â',
	  'supsetneq': 'â',
	  'cupdot': 'â',
	  'uplus': 'â',
	  'sqsubset': 'â',
	  'sqsupset': 'â',
	  'sqsubseteq': 'â',
	  'sqsupseteq': 'â',
	  'sqcap': 'â',
	  'sqcup': 'â',
	  'oplus': 'â',
	  'ominus': 'â',
	  'otimes': 'â',
	  'osol': 'â',
	  'odot': 'â',
	  'ocir': 'â',
	  'oast': 'â',
	  'odash': 'â',
	  'plusb': 'â',
	  'minusb': 'â',
	  'timesb': 'â ',
	  'sdotb': 'â¡',
	  'vdash': 'â¢',
	  'dashv': 'â£',
	  'top': 'â¤',
	  'perp': 'â¥',
	  'models': 'â§',
	  'vDash': 'â¨',
	  'Vdash': 'â©',
	  'Vvdash': 'âª',
	  'VDash': 'â«',
	  'nvdash': 'â¬',
	  'nvDash': 'â­',
	  'nVdash': 'â®',
	  'nVDash': 'â¯',
	  'prurel': 'â°',
	  'vltri': 'â²',
	  'vrtri': 'â³',
	  'trianglelefteq': 'â´',
	  'trianglerighteq': 'âµ',
	  'origof': 'â¶',
	  'imof': 'â·',
	  'mumap': 'â¸',
	  'hercon': 'â¹',
	  'intercal': 'âº',
	  'veebar': 'â»',
	  'barvee': 'â½',
	  'angrtvb': 'â¾',
	  'lrtri': 'â¿',
	  'xwedge': 'â',
	  'xvee': 'â',
	  'xcap': 'â',
	  'xcup': 'â',
	  'diamond': 'â',
	  'sdot': 'â',
	  'sstarf': 'â',
	  'divonx': 'â',
	  'bowtie': 'â',
	  'ltimes': 'â',
	  'rtimes': 'â',
	  'lthree': 'â',
	  'rthree': 'â',
	  'bsime': 'â',
	  'cuvee': 'â',
	  'cuwed': 'â',
	  'Subset': 'â',
	  'Supset': 'â',
	  'Cap': 'â',
	  'Cup': 'â',
	  'pitchfork': 'â',
	  'epar': 'â',
	  'ltdot': 'â',
	  'gtrdot': 'â',
	  'Ll': 'â',
	  'ggg': 'â',
	  'lesseqgtr': 'â',
	  'gtreqless': 'â',
	  'curlyeqprec': 'â',
	  'curlyeqsucc': 'â',
	  'nprcue': 'â ',
	  'nsccue': 'â¡',
	  'nsqsube': 'â¢',
	  'nsqsupe': 'â£',
	  'lnsim': 'â¦',
	  'gnsim': 'â§',
	  'prnsim': 'â¨',
	  'succnsim': 'â©',
	  'ntriangleleft': 'âª',
	  'ntriangleright': 'â«',
	  'ntrianglelefteq': 'â¬',
	  'ntrianglerighteq': 'â­',
	  'vellip': 'â®',
	  'ctdot': 'â¯',
	  'utdot': 'â°',
	  'dtdot': 'â±',
	  'disin': 'â²',
	  'isinsv': 'â³',
	  'isins': 'â´',
	  'isindot': 'âµ',
	  'notinvc': 'â¶',
	  'notinvb': 'â·',
	  'isinE': 'â¹',
	  'nisd': 'âº',
	  'xnis': 'â»',
	  'nis': 'â¼',
	  'notnivc': 'â½',
	  'notnivb': 'â¾',
	  'barwedge': 'â',
	  'doublebarwedge': 'â',
	  'lceil': 'â',
	  'rceil': 'â',
	  'lfloor': 'â',
	  'rfloor': 'â',
	  'drcrop': 'â',
	  'dlcrop': 'â',
	  'urcrop': 'â',
	  'ulcrop': 'â',
	  'bnot': 'â',
	  'profline': 'â',
	  'profsurf': 'â',
	  'telrec': 'â',
	  'target': 'â',
	  'ulcorner': 'â',
	  'urcorner': 'â',
	  'llcorner': 'â',
	  'lrcorner': 'â',
	  'sfrown': 'â¢',
	  'ssmile': 'â£',
	  'lang': 'â©', // http://www.w3.org/TR/html4/sgml/entities.html
	  'rang': 'âª', // http://www.w3.org/TR/html4/sgml/entities.html
	  'cylcty': 'â­',
	  'profalar': 'â®',
	  'topbot': 'â¶',
	  'ovbar': 'â½',
	  'solbar': 'â¿',
	  'angzarr': 'â¼',
	  'lmoustache': 'â°',
	  'rmoustache': 'â±',
	  'tbrk': 'â´',
	  'bbrk': 'âµ',
	  'bbrktbrk': 'â¶',
	  'OverParenthesis': 'â',
	  'UnderParenthesis': 'â',
	  'OverBrace': 'â',
	  'UnderBrace': 'â',
	  'trpezium': 'â¢',
	  'elinters': 'â§',
	  'blank': 'â£',
	  'oS': 'â',
	  'boxh': 'â',
	  'boxv': 'â',
	  'boxdr': 'â',
	  'boxdl': 'â',
	  'boxur': 'â',
	  'boxul': 'â',
	  'boxvr': 'â',
	  'boxvl': 'â¤',
	  'boxhd': 'â¬',
	  'boxhu': 'â´',
	  'boxvh': 'â¼',
	  'boxH': 'â',
	  'boxV': 'â',
	  'boxdR': 'â',
	  'boxDr': 'â',
	  'boxDR': 'â',
	  'boxdL': 'â',
	  'boxDl': 'â',
	  'boxDL': 'â',
	  'boxuR': 'â',
	  'boxUr': 'â',
	  'boxUR': 'â',
	  'boxuL': 'â',
	  'boxUl': 'â',
	  'boxUL': 'â',
	  'boxvR': 'â',
	  'boxVr': 'â',
	  'boxVR': 'â ',
	  'boxvL': 'â¡',
	  'boxVl': 'â¢',
	  'boxVL': 'â£',
	  'boxHd': 'â¤',
	  'boxhD': 'â¥',
	  'boxHD': 'â¦',
	  'boxHu': 'â§',
	  'boxhU': 'â¨',
	  'boxHU': 'â©',
	  'boxvH': 'âª',
	  'boxVh': 'â«',
	  'boxVH': 'â¬',
	  'uhblk': 'â',
	  'lhblk': 'â',
	  'block': 'â',
	  'blk14': 'â',
	  'blk12': 'â',
	  'blk34': 'â',
	  'square': 'â¡',
	  'squf': 'âª',
	  'EmptyVerySmallSquare': 'â«',
	  'rect': 'â­',
	  'marker': 'â®',
	  'fltns': 'â±',
	  'xutri': 'â³',
	  'utrif': 'â´',
	  'utri': 'âµ',
	  'rtrif': 'â¸',
	  'triangleright': 'â¹',
	  'xdtri': 'â½',
	  'dtrif': 'â¾',
	  'triangledown': 'â¿',
	  'ltrif': 'â',
	  'triangleleft': 'â',
	  'loz': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'lozenge': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'cir': 'â',
	  'tridot': 'â¬',
	  'xcirc': 'â¯',
	  'ultri': 'â¸',
	  'urtri': 'â¹',
	  'lltri': 'âº',
	  'EmptySmallSquare': 'â»',
	  'FilledSmallSquare': 'â¼',
	  'starf': 'â',
	  'star': 'â',
	  'phone': 'â',
	  'female': 'â',
	  'male': 'â',
	  'spades': 'â ', // http://www.w3.org/TR/html4/sgml/entities.html
	  'spadesuit': 'â ', // http://www.w3.org/TR/html5/named-character-references.html
	  'clubs': 'â£', // http://www.w3.org/TR/html4/sgml/entities.html
	  'clubsuit': 'â£', // http://www.w3.org/TR/html5/named-character-references.html
	  'hearts': 'â¥', // http://www.w3.org/TR/html4/sgml/entities.html
	  'heartsuit': 'â¥', // http://www.w3.org/TR/html5/named-character-references.html
	  'diams': 'â¦',
	  'sung': 'âª',
	  'flat': 'â­',
	  'natural': 'â®',
	  'sharp': 'â¯',
	  'checkmark': 'â',
	  'cross': 'â',
	  'maltese': 'â ',
	  'sext': 'â¶',
	  'VerticalSeparator': 'â',
	  'lbbrk': 'â²',
	  'rbbrk': 'â³',
	  'bsolhsub': 'â',
	  'suphsol': 'â',
	  'lobrk': 'â¦',
	  'robrk': 'â§',
	  'langle': 'â¨',
	  'rangle': 'â©',
	  'Lang': 'âª',
	  'Rang': 'â«',
	  'loang': 'â¬',
	  'roang': 'â­',
	  'xlarr': 'âµ',
	  'xrarr': 'â¶',
	  'xharr': 'â·',
	  'xlArr': 'â¸',
	  'xrArr': 'â¹',
	  'xhArr': 'âº',
	  'xmap': 'â¼',
	  'dzigrarr': 'â¿',
	  'nvlArr': 'â¤',
	  'nvrArr': 'â¤',
	  'nvHarr': 'â¤',
	  'Map': 'â¤',
	  'lbarr': 'â¤',
	  'rbarr': 'â¤',
	  'lBarr': 'â¤',
	  'rBarr': 'â¤',
	  'drbkarow': 'â¤',
	  'DDotrahd': 'â¤',
	  'UpArrowBar': 'â¤',
	  'DownArrowBar': 'â¤',
	  'Rarrtl': 'â¤',
	  'latail': 'â¤',
	  'ratail': 'â¤',
	  'lAtail': 'â¤',
	  'rAtail': 'â¤',
	  'larrfs': 'â¤',
	  'rarrfs': 'â¤',
	  'larrbfs': 'â¤',
	  'rarrbfs': 'â¤ ',
	  'nwarhk': 'â¤£',
	  'nearhk': 'â¤¤',
	  'searhk': 'â¤¥',
	  'swarhk': 'â¤¦',
	  'nwnear': 'â¤§',
	  'toea': 'â¤¨',
	  'tosa': 'â¤©',
	  'swnwar': 'â¤ª',
	  'rarrc': 'â¤³',
	  'cudarrr': 'â¤µ',
	  'ldca': 'â¤¶',
	  'rdca': 'â¤·',
	  'cudarrl': 'â¤¸',
	  'larrpl': 'â¤¹',
	  'curarrm': 'â¤¼',
	  'cularrp': 'â¤½',
	  'rarrpl': 'â¥',
	  'harrcir': 'â¥',
	  'Uarrocir': 'â¥',
	  'lurdshar': 'â¥',
	  'ldrushar': 'â¥',
	  'LeftRightVector': 'â¥',
	  'RightUpDownVector': 'â¥',
	  'DownLeftRightVector': 'â¥',
	  'LeftUpDownVector': 'â¥',
	  'LeftVectorBar': 'â¥',
	  'RightVectorBar': 'â¥',
	  'RightUpVectorBar': 'â¥',
	  'RightDownVectorBar': 'â¥',
	  'DownLeftVectorBar': 'â¥',
	  'DownRightVectorBar': 'â¥',
	  'LeftUpVectorBar': 'â¥',
	  'LeftDownVectorBar': 'â¥',
	  'LeftTeeVector': 'â¥',
	  'RightTeeVector': 'â¥',
	  'RightUpTeeVector': 'â¥',
	  'RightDownTeeVector': 'â¥',
	  'DownLeftTeeVector': 'â¥',
	  'DownRightTeeVector': 'â¥',
	  'LeftUpTeeVector': 'â¥ ',
	  'LeftDownTeeVector': 'â¥¡',
	  'lHar': 'â¥¢',
	  'uHar': 'â¥£',
	  'rHar': 'â¥¤',
	  'dHar': 'â¥¥',
	  'luruhar': 'â¥¦',
	  'ldrdhar': 'â¥§',
	  'ruluhar': 'â¥¨',
	  'rdldhar': 'â¥©',
	  'lharul': 'â¥ª',
	  'llhard': 'â¥«',
	  'rharul': 'â¥¬',
	  'lrhard': 'â¥­',
	  'udhar': 'â¥®',
	  'duhar': 'â¥¯',
	  'RoundImplies': 'â¥°',
	  'erarr': 'â¥±',
	  'simrarr': 'â¥²',
	  'larrsim': 'â¥³',
	  'rarrsim': 'â¥´',
	  'rarrap': 'â¥µ',
	  'ltlarr': 'â¥¶',
	  'gtrarr': 'â¥¸',
	  'subrarr': 'â¥¹',
	  'suplarr': 'â¥»',
	  'lfisht': 'â¥¼',
	  'rfisht': 'â¥½',
	  'ufisht': 'â¥¾',
	  'dfisht': 'â¥¿',
	  'lopar': 'â¦',
	  'ropar': 'â¦',
	  'lbrke': 'â¦',
	  'rbrke': 'â¦',
	  'lbrkslu': 'â¦',
	  'rbrksld': 'â¦',
	  'lbrksld': 'â¦',
	  'rbrkslu': 'â¦',
	  'langd': 'â¦',
	  'rangd': 'â¦',
	  'lparlt': 'â¦',
	  'rpargt': 'â¦',
	  'gtlPar': 'â¦',
	  'ltrPar': 'â¦',
	  'vzigzag': 'â¦',
	  'vangrt': 'â¦',
	  'angrtvbd': 'â¦',
	  'ange': 'â¦¤',
	  'range': 'â¦¥',
	  'dwangle': 'â¦¦',
	  'uwangle': 'â¦§',
	  'angmsdaa': 'â¦¨',
	  'angmsdab': 'â¦©',
	  'angmsdac': 'â¦ª',
	  'angmsdad': 'â¦«',
	  'angmsdae': 'â¦¬',
	  'angmsdaf': 'â¦­',
	  'angmsdag': 'â¦®',
	  'angmsdah': 'â¦¯',
	  'bemptyv': 'â¦°',
	  'demptyv': 'â¦±',
	  'cemptyv': 'â¦²',
	  'raemptyv': 'â¦³',
	  'laemptyv': 'â¦´',
	  'ohbar': 'â¦µ',
	  'omid': 'â¦¶',
	  'opar': 'â¦·',
	  'operp': 'â¦¹',
	  'olcross': 'â¦»',
	  'odsold': 'â¦¼',
	  'olcir': 'â¦¾',
	  'ofcir': 'â¦¿',
	  'olt': 'â§',
	  'ogt': 'â§',
	  'cirscir': 'â§',
	  'cirE': 'â§',
	  'solb': 'â§',
	  'bsolb': 'â§',
	  'boxbox': 'â§',
	  'trisb': 'â§',
	  'rtriltri': 'â§',
	  'LeftTriangleBar': 'â§',
	  'RightTriangleBar': 'â§',
	  'iinfin': 'â§',
	  'infintie': 'â§',
	  'nvinfin': 'â§',
	  'eparsl': 'â§£',
	  'smeparsl': 'â§¤',
	  'eqvparsl': 'â§¥',
	  'lozf': 'â§«',
	  'RuleDelayed': 'â§´',
	  'dsol': 'â§¶',
	  'xodot': 'â¨',
	  'xoplus': 'â¨',
	  'xotime': 'â¨',
	  'xuplus': 'â¨',
	  'xsqcup': 'â¨',
	  'qint': 'â¨',
	  'fpartint': 'â¨',
	  'cirfnint': 'â¨',
	  'awint': 'â¨',
	  'rppolint': 'â¨',
	  'scpolint': 'â¨',
	  'npolint': 'â¨',
	  'pointint': 'â¨',
	  'quatint': 'â¨',
	  'intlarhk': 'â¨',
	  'pluscir': 'â¨¢',
	  'plusacir': 'â¨£',
	  'simplus': 'â¨¤',
	  'plusdu': 'â¨¥',
	  'plussim': 'â¨¦',
	  'plustwo': 'â¨§',
	  'mcomma': 'â¨©',
	  'minusdu': 'â¨ª',
	  'loplus': 'â¨­',
	  'roplus': 'â¨®',
	  'Cross': 'â¨¯',
	  'timesd': 'â¨°',
	  'timesbar': 'â¨±',
	  'smashp': 'â¨³',
	  'lotimes': 'â¨´',
	  'rotimes': 'â¨µ',
	  'otimesas': 'â¨¶',
	  'Otimes': 'â¨·',
	  'odiv': 'â¨¸',
	  'triplus': 'â¨¹',
	  'triminus': 'â¨º',
	  'tritime': 'â¨»',
	  'iprod': 'â¨¼',
	  'amalg': 'â¨¿',
	  'capdot': 'â©',
	  'ncup': 'â©',
	  'ncap': 'â©',
	  'capand': 'â©',
	  'cupor': 'â©',
	  'cupcap': 'â©',
	  'capcup': 'â©',
	  'cupbrcap': 'â©',
	  'capbrcup': 'â©',
	  'cupcup': 'â©',
	  'capcap': 'â©',
	  'ccups': 'â©',
	  'ccaps': 'â©',
	  'ccupssm': 'â©',
	  'And': 'â©',
	  'Or': 'â©',
	  'andand': 'â©',
	  'oror': 'â©',
	  'orslope': 'â©',
	  'andslope': 'â©',
	  'andv': 'â©',
	  'orv': 'â©',
	  'andd': 'â©',
	  'ord': 'â©',
	  'wedbar': 'â©',
	  'sdote': 'â©¦',
	  'simdot': 'â©ª',
	  'congdot': 'â©­',
	  'easter': 'â©®',
	  'apacir': 'â©¯',
	  'apE': 'â©°',
	  'eplus': 'â©±',
	  'pluse': 'â©²',
	  'Esim': 'â©³',
	  'Colone': 'â©´',
	  'Equal': 'â©µ',
	  'eDDot': 'â©·',
	  'equivDD': 'â©¸',
	  'ltcir': 'â©¹',
	  'gtcir': 'â©º',
	  'ltquest': 'â©»',
	  'gtquest': 'â©¼',
	  'les': 'â©½',
	  'ges': 'â©¾',
	  'lesdot': 'â©¿',
	  'gesdot': 'âª',
	  'lesdoto': 'âª',
	  'gesdoto': 'âª',
	  'lesdotor': 'âª',
	  'gesdotol': 'âª',
	  'lessapprox': 'âª',
	  'gtrapprox': 'âª',
	  'lneq': 'âª',
	  'gneq': 'âª',
	  'lnapprox': 'âª',
	  'gnapprox': 'âª',
	  'lesseqqgtr': 'âª',
	  'gtreqqless': 'âª',
	  'lsime': 'âª',
	  'gsime': 'âª',
	  'lsimg': 'âª',
	  'gsiml': 'âª',
	  'lgE': 'âª',
	  'glE': 'âª',
	  'lesges': 'âª',
	  'gesles': 'âª',
	  'eqslantless': 'âª',
	  'eqslantgtr': 'âª',
	  'elsdot': 'âª',
	  'egsdot': 'âª',
	  'el': 'âª',
	  'eg': 'âª',
	  'siml': 'âª',
	  'simg': 'âª',
	  'simlE': 'âª',
	  'simgE': 'âª ',
	  'LessLess': 'âª¡',
	  'GreaterGreater': 'âª¢',
	  'glj': 'âª¤',
	  'gla': 'âª¥',
	  'ltcc': 'âª¦',
	  'gtcc': 'âª§',
	  'lescc': 'âª¨',
	  'gescc': 'âª©',
	  'smt': 'âªª',
	  'lat': 'âª«',
	  'smte': 'âª¬',
	  'late': 'âª­',
	  'bumpE': 'âª®',
	  'preceq': 'âª¯',
	  'succeq': 'âª°',
	  'prE': 'âª³',
	  'scE': 'âª´',
	  'prnE': 'âªµ',
	  'succneqq': 'âª¶',
	  'precapprox': 'âª·',
	  'succapprox': 'âª¸',
	  'prnap': 'âª¹',
	  'succnapprox': 'âªº',
	  'Pr': 'âª»',
	  'Sc': 'âª¼',
	  'subdot': 'âª½',
	  'supdot': 'âª¾',
	  'subplus': 'âª¿',
	  'supplus': 'â«',
	  'submult': 'â«',
	  'supmult': 'â«',
	  'subedot': 'â«',
	  'supedot': 'â«',
	  'subseteqq': 'â«',
	  'supseteqq': 'â«',
	  'subsim': 'â«',
	  'supsim': 'â«',
	  'subsetneqq': 'â«',
	  'supsetneqq': 'â«',
	  'csub': 'â«',
	  'csup': 'â«',
	  'csube': 'â«',
	  'csupe': 'â«',
	  'subsup': 'â«',
	  'supsub': 'â«',
	  'subsub': 'â«',
	  'supsup': 'â«',
	  'suphsub': 'â«',
	  'supdsub': 'â«',
	  'forkv': 'â«',
	  'topfork': 'â«',
	  'mlcp': 'â«',
	  'DoubleLeftTee': 'â«¤',
	  'Vdashl': 'â«¦',
	  'Barv': 'â«§',
	  'vBar': 'â«¨',
	  'vBarv': 'â«©',
	  'Vbar': 'â««',
	  'Not': 'â«¬',
	  'bNot': 'â«­',
	  'rnmid': 'â«®',
	  'cirmid': 'â«¯',
	  'midcir': 'â«°',
	  'topcir': 'â«±',
	  'nhpar': 'â«²',
	  'parsim': 'â«³',
	  'parsl': 'â«½',
	  'fflig': 'ï¬',
	  'filig': 'ï¬',
	  'fllig': 'ï¬',
	  'ffilig': 'ï¬',
	  'ffllig': 'ï¬',
	  'Ascr': 'í',
	  'Cscr': 'í',
	  'Dscr': 'í',
	  'Gscr': 'í¢',
	  'Jscr': 'í¥',
	  'Kscr': 'í¦',
	  'Nscr': 'í©',
	  'Oscr': 'íª',
	  'Pscr': 'í«',
	  'Qscr': 'í¬',
	  'Sscr': 'í®',
	  'Tscr': 'í¯',
	  'Uscr': 'í°',
	  'Vscr': 'í±',
	  'Wscr': 'í²',
	  'Xscr': 'í³',
	  'Yscr': 'í´',
	  'Zscr': 'íµ',
	  'ascr': 'í¶',
	  'bscr': 'í·',
	  'cscr': 'í¸',
	  'dscr': 'í¹',
	  'fscr': 'í»',
	  'hscr': 'í½',
	  'iscr': 'í¾',
	  'jscr': 'í¿',
	  'kscr': 'í',
	  'lscr': 'í',
	  'mscr': 'í',
	  'nscr': 'í',
	  'pscr': 'í',
	  'qscr': 'í',
	  'rscr': 'í',
	  'sscr': 'í',
	  'tscr': 'í',
	  'uscr': 'í',
	  'vscr': 'í',
	  'wscr': 'í',
	  'xscr': 'í',
	  'yscr': 'í',
	  'zscr': 'í',
	  'Afr': 'í',
	  'Bfr': 'í',
	  'Dfr': 'í',
	  'Efr': 'í',
	  'Ffr': 'í',
	  'Gfr': 'í',
	  'Jfr': 'í',
	  'Kfr': 'í',
	  'Lfr': 'í',
	  'Mfr': 'í',
	  'Nfr': 'í',
	  'Ofr': 'í',
	  'Pfr': 'í',
	  'Qfr': 'í',
	  'Sfr': 'í',
	  'Tfr': 'í',
	  'Ufr': 'í',
	  'Vfr': 'í',
	  'Wfr': 'í',
	  'Xfr': 'í',
	  'Yfr': 'í',
	  'afr': 'í',
	  'bfr': 'í',
	  'cfr': 'í ',
	  'dfr': 'í¡',
	  'efr': 'í¢',
	  'ffr': 'í£',
	  'gfr': 'í¤',
	  'hfr': 'í¥',
	  'ifr': 'í¦',
	  'jfr': 'í§',
	  'kfr': 'í¨',
	  'lfr': 'í©',
	  'mfr': 'íª',
	  'nfr': 'í«',
	  'ofr': 'í¬',
	  'pfr': 'í­',
	  'qfr': 'í®',
	  'rfr': 'í¯',
	  'sfr': 'í°',
	  'tfr': 'í±',
	  'ufr': 'í²',
	  'vfr': 'í³',
	  'wfr': 'í´',
	  'xfr': 'íµ',
	  'yfr': 'í¶',
	  'zfr': 'í·',
	  'Aopf': 'í¸',
	  'Bopf': 'í¹',
	  'Dopf': 'í»',
	  'Eopf': 'í¼',
	  'Fopf': 'í½',
	  'Gopf': 'í¾',
	  'Iopf': 'í',
	  'Jopf': 'í',
	  'Kopf': 'í',
	  'Lopf': 'í',
	  'Mopf': 'í',
	  'Oopf': 'í',
	  'Sopf': 'í',
	  'Topf': 'í',
	  'Uopf': 'í',
	  'Vopf': 'í',
	  'Wopf': 'í',
	  'Xopf': 'í',
	  'Yopf': 'í',
	  'aopf': 'í',
	  'bopf': 'í',
	  'copf': 'í',
	  'dopf': 'í',
	  'eopf': 'í',
	  'fopf': 'í',
	  'gopf': 'í',
	  'hopf': 'í',
	  'iopf': 'í',
	  'jopf': 'í',
	  'kopf': 'í',
	  'lopf': 'í',
	  'mopf': 'í',
	  'nopf': 'í',
	  'oopf': 'í ',
	  'popf': 'í¡',
	  'qopf': 'í¢',
	  'ropf': 'í£',
	  'sopf': 'í¤',
	  'topf': 'í¥',
	  'uopf': 'í¦',
	  'vopf': 'í§',
	  'wopf': 'í¨',
	  'xopf': 'í©',
	  'yopf': 'íª',
	  'zopf': 'í«'
	};
	
	var specialCharEntities = {
	  '&': '&amp;',
	  '"': '&quot;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '\xA0': '&nbsp;'
	};
	
	var entityRegExp = /&(?:#([0-9]+)|#x([0-9a-f]+)|([a-z0-9]+));/gi;
	var attributeModeSpecialCharRegExp = /["&<>\xA0]/g;
	var nonAttributeModeSpecialCharRegExp = /[&<>\xA0]/g;
	
	exports.HTMLDecode = function decode(s) {
	  if (!s) return '';
	  return s.replace(entityRegExp, function ($0, decimalStr, hexStr, entityName) {
	    if (decimalStr) {
	      return String.fromCharCode(parseInt(decimalStr, 10));
	    } else if (hexStr) {
	      return String.fromCharCode(parseInt(hexStr, 16));
	    } else {
	      // Fall back to the original string if we don't know the entity, as per browser behavior:
	      return charByEntityName[entityName] || $0;
	    }
	  });
	};
	
	function specialCharToEntity(s) {
	  var entity = specialCharEntities[s];
	  return entity ? entity : s;
	}
	
	exports.HTMLEncode = function encode(s, attributeMode) {
	  if (!s) return '';
	  if (!s.replace) return s;
	  if(attributeMode) {
		  return s.replace(attributeModeSpecialCharRegExp, specialCharToEntity);
	  } else {
		  return s.replace(nonAttributeModeSpecialCharRegExp, specialCharToEntity);
	  }
	};


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	var core                     = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../level1/core\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).dom.level1.core;
	
	// modify cloned instance for more info check: https://github.com/tmpvar/jsdom/issues/325
	core = Object.create(core);
	
	var INVALID_STATE_ERR        = core.INVALID_STATE_ERR        = 11,
	    SYNTAX_ERR               = core.SYNTAX_ERR               = 12,
	    INVALID_MODIFICATION_ERR = core.INVALID_MODIFICATION_ERR = 13,
	    NAMESPACE_ERR            = core.NAMESPACE_ERR            = 14,
	    INVALID_ACCESS_ERR       = core.INVALID_ACCESS_ERR       = 15,
	    ns = {
	      validate : function(ns, URI) {
	        if (!ns) {
	          throw new core.DOMException(core.INVALID_CHARACTER_ERR, "namespace is undefined");
	        }
	
	        if(ns.match(/[^0-9a-z\.:\-_]/i) !== null) {
	          throw new core.DOMException(core.INVALID_CHARACTER_ERR, ns);
	        }
	
	        var msg = false, parts = ns.split(':');
	        if (ns === 'xmlns'                          &&
	            URI !== "http://www.w3.org/2000/xmlns/")
	        {
	          msg = "localName is 'xmlns' but the namespaceURI is invalid";
	
	        } else if (ns === "xml"                                   &&
	                   URI !== "http://www.w3.org/XML/1998/namespace")
	        {
	          msg = "localName is 'xml' but the namespaceURI is invalid";
	
	        } else if (ns[ns.length-1] === ':') {
	          msg = "Namespace seperator found with no localName";
	
	        } else if (ns[0] === ':') {
	          msg = "Namespace seperator found, without a prefix";
	
	        } else if (parts.length > 2) {
	          msg = "Too many namespace seperators";
	
	        }
	
	        if (msg) {
	          throw new core.DOMException(NAMESPACE_ERR, msg + " (" + ns + "@" + URI + ")");
	        }
	      }
	    };
	
	core.exceptionMessages['NAMESPACE_ERR'] = "Invalid namespace";
	
	core.DOMImplementation.prototype.createDocumentType = function(/* String */ qualifiedName,
	                                                               /* String */ publicId,
	                                                               /* String */ systemId)
	{
	  ns.validate(qualifiedName);
	  var doctype = new core.DocumentType(null, qualifiedName);
	  doctype._publicId = publicId ? publicId : '';
	  doctype._systemId = systemId ? systemId : '';
	  return doctype;
	};
	
	/**
	  Creates an XML Document object of the specified type with its document element.
	  HTML-only DOM implementations do not need to implement this method.
	*/
	core.DOMImplementation.prototype.createDocument = function(/* String */       namespaceURI,
	                                                           /* String */       qualifiedName,
	                                                           /* DocumentType */ doctype)
	{
	  if (qualifiedName || namespaceURI) {
	    ns.validate(qualifiedName, namespaceURI);
	  }
	
	  if (doctype && doctype._ownerDocument !== null) {
	    throw new core.DOMException(core.WRONG_DOCUMENT_ERR);
	  }
	
	  if (qualifiedName && qualifiedName.indexOf(':') > -1 && !namespaceURI) {
	    throw new core.DOMException(NAMESPACE_ERR);
	  }
	
	  var document = new core.Document();
	  
	  if (doctype) {
	    document.doctype = doctype;
	    doctype._ownerDocument = document;
	    document.appendChild(doctype);
	  } else {
	    document.doctype = null;
	  }
	
	  if (doctype && !doctype.entities) {
	    doctype.entities = new dom.EntityNodeMap();
	  }
	
	  document._ownerDocument = document;
	
	  if (qualifiedName) {
	    var docElement = document.createElementNS(namespaceURI, qualifiedName);
	    document.appendChild(docElement);
	  }
	
	  return document;
	};
	
	core.Node.prototype.__defineGetter__("ownerDocument", function() {
	  return this._ownerDocument || null;
	});
	
	core.Node.prototype.isSupported = function(/* string */ feature,
	                                           /* string */ version)
	{
	  return this._ownerDocument.implementation.hasFeature(feature, version);
	};
	
	core.Node.prototype._namespaceURI = null;
	core.Node.prototype.__defineGetter__("namespaceURI", function() {
	  return this._namespaceURI || null;
	});
	
	core.Node.prototype.__defineSetter__("namespaceURI", function(value) {
	  this._namespaceURI = value;
	});
	
	core.Node.prototype.__defineGetter__("prefix", function() {
	  return this._prefix || null;
	});
	
	core.Node.prototype.__defineSetter__("prefix", function(value) {
	
	  if (this.readonly) {
	    throw new core.DOMException(core.NO_MODIFICATION_ALLOWED_ERR);
	  }
	
	  ns.validate(value, this._namespaceURI);
	
	  if ((this._created && !this._namespaceURI)  ||
	      this._prefix === "xmlns"                ||
	      (!this._prefix && this._created))
	  {
	    throw new core.DOMException(core.NAMESPACE_ERR);
	  }
	
	  if (this._localName) {
	    this._nodeName = value + ':' + this._localName;
	  }
	
	  this._prefix = value;
	});
	
	core.Node.prototype.__defineGetter__("localName", function() {
	  return this._localName || null;
	});
	
	/* return boolean */
	core.Node.prototype.hasAttributes = function() {
	  return (this.nodeType === this.ELEMENT_NODE &&
	          this._attributes                    &&
	          this._attributes.length > 0);
	};
	
	core.NamedNodeMap.prototype.getNamedItemNS = function(/* string */ namespaceURI,
	                                                      /* string */ localName)
	{
	  if (this._nsStore[namespaceURI] && this._nsStore[namespaceURI][localName]) {
	    return this._nsStore[namespaceURI][localName];
	  }
	  return null;
	};
	
	core.AttrNodeMap.prototype.setNamedItemNS = function(/* Node */ arg) {
	  if (arg.nodeType !== this._ownerDocument.ATTRIBUTE_NODE) {
	    throw new core.DOMException(core.HIERARCHY_REQUEST_ERR);
	  }
	
	  return core.NamedNodeMap.prototype.setNamedItemNS.call(this, arg);
	};
	
	var prevSetNamedItem = core.AttrNodeMap.prototype.setNamedItem;
	
	core.AttrNodeMap.prototype.setNamedItem = function(/* Node */ arg) {
	  if (arg.nodeType !== this._ownerDocument.ATTRIBUTE_NODE) {
	    throw new core.DOMException(core.HIERARCHY_REQUEST_ERR);
	  }
	
	  return prevSetNamedItem.call(this, arg);
	};
	
	
	core.NamedNodeMap.prototype.setNamedItemNS = function(/* Node */ arg)
	{
	  if (this._readonly) {
	    throw new core.DOMException(core.NO_MODIFICATION_ALLOWED_ERR);
	  }
	
	  var owner = this._ownerDocument;
	  if (this._parentNode &&
	      this._parentNode._parentNode &&
	      this._parentNode._parentNode.nodeType === owner.ENTITY_NODE)
	  {
	    throw new core.DOMException(core.NO_MODIFICATION_ALLOWED_ERR);
	  }
	
	  if (this._ownerDocument !== arg.ownerDocument) {
	    throw new core.DOMException(core.WRONG_DOCUMENT_ERR);
	  }
	
	  if (arg._ownerElement) {
	    throw new core.DOMException(core.INUSE_ATTRIBUTE_ERR);
	  }
	
	  // readonly
	  if (this._readonly === true) {
	    throw new core.DOMException(NO_MODIFICATION_ALLOWED_ERR);
	  }
	
	
	  if (!this._nsStore[arg.namespaceURI]) {
	    this._nsStore[arg.namespaceURI] = {};
	  }
	  var existing = null;
	  if (this._nsStore[arg.namespaceURI][arg.localName]) {
	    var existing = this._nsStore[arg.namespaceURI][arg.localName];
	  }
	
	  this._nsStore[arg.namespaceURI][arg.localName] = arg;
	
	  arg._specified = true;
	  arg._ownerDocument = this._ownerDocument;
	
	  return this.setNamedItem(arg);
	};
	
	core.NamedNodeMap.prototype.removeNamedItemNS = function(/*string */ namespaceURI,
	                                                         /* string */ localName)
	{
	
	  if (this.readonly) {
	    throw new core.DOMException(core.NO_MODIFICATION_ALLOWED_ERR);
	  }
	
	
	  var parent = this._parentNode,
	      found = null,
	      defaults,
	      clone,
	      defaultEl,
	      defaultAttr;
	
	  if (this._parentNode &&
	      this._parentNode._parentNode &&
	      this._parentNode._parentNode.nodeType === this._ownerDocument.ENTITY_NODE)
	  {
	    throw new core.DOMException(core.NO_MODIFICATION_ALLOWED_ERR);
	  }
	
	  if (this._nsStore[namespaceURI] &&
	      this._nsStore[namespaceURI][localName])
	  {
	    found = this._nsStore[namespaceURI][localName];
	    this.removeNamedItem(found.qualifiedName);
	    delete this._nsStore[namespaceURI][localName];
	  }
	
	  if (!found) {
	    throw new core.DOMException(core.NOT_FOUND_ERR);
	  }
	
	  if (parent.ownerDocument.doctype && parent.ownerDocument.doctype._attributes) {
	    defaults = parent.ownerDocument.doctype._attributes;
	    defaultEl = defaults.getNamedItemNS(parent._namespaceURI, parent._localName);
	  }
	
	  if (defaultEl) {
	    defaultAttr = defaultEl._attributes.getNamedItemNS(namespaceURI, localName);
	
	    if (defaultAttr) {
	      clone = defaultAttr.cloneNode(true);
	      clone._created               = false;
	      clone._namespaceURI          = found._namespaceURI;
	      clone._nodeName              = found.name;
	      clone._localName             = found._localName;
	      clone._prefix                = found._prefix
	      this.setNamedItemNS(clone);
	      clone._created               = true;
	      clone._specified             = false;
	    }
	  }
	
	  return found;
	};
	
	core.Attr.prototype.__defineGetter__("ownerElement", function() {
	  return this._ownerElement || null;
	});
	
	
	core.Node.prototype._prefix = false;
	
	core.Node.prototype.__defineSetter__("qualifiedName", function(qualifiedName) {
	  ns.validate(qualifiedName, this._namespaceURI);
	  qualifiedName       = qualifiedName || "";
	  this._localName     = qualifiedName.split(":")[1] || null;
	  this.prefix         = qualifiedName.split(":")[0] || null;
	  this._nodeName = qualifiedName;
	});
	
	core.Node.prototype.__defineGetter__("qualifiedName", function() {
	  return this._nodeName;
	});
	
	core.NamedNodeMap.prototype._map = function(fn) {
	  var ret = [], l = this.length, i = 0, node;
	  for(i; i<l; i++) {
	    node = this.item(i);
	    if (fn && fn(node)) {
	      ret.push(node);
	    }
	  }
	  return ret;
	};
	
	core.Element.prototype.getAttributeNS = function(/* string */ namespaceURI,
	                                                 /* string */ localName)
	{
	  var attr =  this._attributes.getNamedItemNS(namespaceURI, localName);
	  return (attr) ? attr.nodeValue : '';
	};
	
	core.Element.prototype.setAttributeNS = function(/* string */ namespaceURI,
	                                                 /* string */ qualifiedName,
	                                                 /* string */ value)
	{
	  var s       = qualifiedName.split(':'),
	      local   = s.pop(),
	      prefix  = s.pop() || null,
	      attr;
	
	  ns.validate(qualifiedName, namespaceURI);
	
	  if (qualifiedName.split(':').shift() === "xml" &&
	      namespaceURI !== "http://www.w3.org/XML/1998/namespace")
	  {
	    throw new core.DOMException(core.NAMESPACE_ERR);
	  }
	
	  if (prefix === "xmlns" && namespaceURI !== "http://www.w3.org/2000/xmlns/") {
	    throw new core.DOMException(core.NAMESPACE_ERR);
	  }
	
	  if (qualifiedName.split(':').length > 1 && !namespaceURI) {
	    throw new core.DOMException(core.NAMESPACE_ERR);
	  }
	
	  attr = this._attributes.getNamedItemNS(namespaceURI, local);
	
	  if (!attr) {
	    attr = this.ownerDocument.createAttributeNS(namespaceURI,
	                                                qualifiedName,
	                                                value);
	    this._attributes.setNamedItemNS(attr);
	  }
	
	  attr._namespaceURI = namespaceURI;
	  attr._prefix    = prefix;
	  attr._created = true;
	  attr.value = value;
	  attr._localName = local;
	};
	
	core.Element.prototype.removeAttributeNS = function(/* string */ namespaceURI,
	                                                    /* string */ localName)
	{
	
	  if (this.readonly) {
	    throw new core.DOMException(core.NO_MODIFICATION_ALLOWED_ERR);
	  }
	
	  var ownerDoc = this.ownerDocument,
	      defaults,
	      clone,
	      defaultEl,
	      defaultAttr,
	      clone,
	      localName;
	
	  if (ownerDoc.doctype && ownerDoc.doctype._attributes) {
	    defaults = ownerDoc.doctype._attributes;
	    defaultEl = defaults.getNamedItemNS(namespaceURI, this.localName);
	  }
	
	  if (defaultEl) {
	    defaultAttr = defaultEl.getAttributeNodeNS(namespaceURI, localName);
	  }
	
	  this._attributes.removeNamedItemNS(namespaceURI, localName);
	
	  if (defaultAttr) {
	    this.setAttributeNS(defaultAttr.namespaceURI,
	                                defaultAttr.name,
	                                defaultAttr.value);
	    localName = defaultAttr.name.split(':').pop();
	    clone = this.getAttributeNS(defaultAttr.namespaceURI, localName);
	    clone._specified = false;
	  }
	};
	
	core.Element.prototype.getAttributeNodeNS = function(/* string */ namespaceURI,
	                                                     /* string */ localName)
	{
	  return this._attributes.getNamedItemNS(namespaceURI, localName);
	};
	core.Element.prototype._created = false;
	
	core.Element.prototype.setAttributeNodeNS = function(/* Attr */ newAttr)
	{
	  if (newAttr.ownerElement) {
	    throw new core.DOMException(core.INUSE_ATTRIBUTE_ERR);
	  }
	
	  var existing = null;
	  try {
	    existing = this._attributes.removeNamedItemNS(newAttr.namespaceURI,
	                                                  newAttr.localName);
	  } catch (e) { /* noop */}
	
	  return this._attributes.setNamedItemNS(newAttr) || existing;
	};
	
	core.Element.prototype.getElementsByTagNameNS = function(/* String */ namespaceURI,
	                                                         /* String */ localName)
	{
	  var nsPrefixCache = {};
	
	  function filterByTagName(child) {
	    if (child.nodeType && child.nodeType === this.ENTITY_REFERENCE_NODE) {
	      child = child._entity;
	    }
	
	    var localMatch = child.localName === localName,
	        nsMatch    = child.namespaceURI === namespaceURI;
	
	    if ((localMatch || localName === "*") &&
	        (nsMatch || namespaceURI === "*"))
	    {
	      if (child.nodeType === child.ELEMENT_NODE) {
	        return true;
	      }
	    }
	    return false;
	  }
	
	  return new core.NodeList(this.ownerDocument || this,
	                           core.mapper(this, filterByTagName));
	};
	
	core.Element.prototype.hasAttribute = function(/* string */name)
	{
	  if (!this._attributes) {
	    return false;
	  }
	  return this._attributes.exists(name);
	};
	
	core.Element.prototype.hasAttributeNS = function(/* string */namespaceURI,
	                                                 /* string */localName)
	{
	  if (this._attributes.getNamedItemNS(namespaceURI, localName)) {
	    return true;
	  } else if (this.hasAttribute(localName)) {
	    return true;
	  }
	  return false;
	};
	
	core.DocumentType.prototype.__defineGetter__("publicId", function() {
	  return this._publicId || "";
	});
	
	core.DocumentType.prototype.__defineGetter__("systemId", function() {
	  return this._systemId || "";
	});
	
	core.DocumentType.prototype.__defineGetter__("internalSubset", function() {
	  return this._internalSubset || null;
	});
	
	core.Document.prototype.importNode = function(/* Node */ importedNode,
	                                              /* bool */ deep)
	{
	  if (importedNode && importedNode.nodeType) {
	    if (importedNode.nodeType === this.DOCUMENT_NODE ||
	        importedNode.nodeType === this.DOCUMENT_TYPE_NODE) {
	      throw new core.DOMException(core.NOT_SUPPORTED_ERR);
	    }
	  }
	
	  var self = this,
	      newNode = importedNode.cloneNode(deep, function(a, b) {
	        b._namespaceURI  = a._namespaceURI;
	        b._nodeName      = a._nodeName;
	        b._localName     = a._localName;
	      }),
	      defaults = false,
	      defaultEl;
	
	  if (this.doctype && this.doctype._attributes) {
	    defaults = this.doctype._attributes;
	  }
	
	  function lastChance(el) {
	    var attr, defaultEl;
	
	    el._ownerDocument = self;
	    if (el.id) {
	      if (!self._ids) {self._ids = {};}
	      if (!self._ids[el.id]) {self._ids[el.id] = [];}
	      self._ids[el.id].push(el);
	    }
	    if (el._attributes) {
	      el._attributes._ownerDocument = self;
	      for (var i=0,len=el._attributes.length; i < len; i++) {
	        attr = el._attributes.item(i);
	        attr._ownerDocument = self;
	        attr._specified = true;
	      }
	    }
	    if (defaults) {
	
	      defaultEl = defaults.getNamedItemNS(el._namespaceURI,
	                                          el._localName);
	
	      // TODO: This could use some love
	      if (defaultEl) {
	        defaultEl._attributes._map(function(defaultAttr) {
	          if (!el.hasAttributeNS(defaultAttr.namespaceURL,
	                                 defaultAttr.localName))
	          {
	            var clone = defaultAttr.cloneNode(true);
	            clone._namespaceURI = defaultAttr._namespaceURI;
	            clone._prefix       = defaultAttr._prefix;
	            clone._localName    = defaultAttr._localName;
	            el.setAttributeNodeNS(clone);
	            clone._specified = false;
	          }
	        });
	      }
	    }
	
	  }
	
	  if (deep) {
	    core.visitTree(newNode, lastChance);
	  }
	  else {
	    lastChance(newNode);
	  }
	
	  if (newNode.nodeType == newNode.ATTRIBUTE_NODE) {
	    newNode._specified = true;
	  }
	
	  return newNode;
	};
	
	core.Document.prototype.createElementNS = function(/* string */ namespaceURI,
	                                                   /* string */ qualifiedName)
	{
	  var parts   = qualifiedName.split(':'),
	      element, prefix;
	
	  if (parts.length > 1 && !namespaceURI) {
	    throw new core.DOMException(core.NAMESPACE_ERR);
	  }
	
	  ns.validate(qualifiedName, namespaceURI);
	  element = this.createElement(qualifiedName),
	
	  element._created = false;
	
	  element._namespaceURI = namespaceURI;
	  element._nodeName = qualifiedName;
	  element._localName = parts.pop();
	
	  if (parts.length > 0) {
	    prefix = parts.pop();
	    element.prefix = prefix;
	  }
	
	  element._created = true;
	  return element;
	};
	
	core.Document.prototype.createAttributeNS = function(/* string */ namespaceURI,
	                                                     /* string */ qualifiedName)
	{
	  var attribute, parts = qualifiedName.split(':');
	
	  if (parts.length > 1 && !namespaceURI) {
	    throw new core.DOMException(core.NAMESPACE_ERR,
	                                "Prefix specified without namespaceURI (" + qualifiedName + ")");
	  }
	
	
	  ns.validate(qualifiedName, namespaceURI);
	
	  attribute = this.createAttribute(qualifiedName);
	  attribute.namespaceURI = namespaceURI;
	  attribute.qualifiedName = qualifiedName;
	
	  attribute._localName = parts.pop();
	  attribute._prefix = (parts.length > 0) ? parts.pop() : null;
	  return attribute;
	};
	
	core.Document.prototype.getElementsByTagNameNS = function(/* String */ namespaceURI,
	                                                          /* String */ localName)
	{
	  return core.Element.prototype.getElementsByTagNameNS.call(this,
	                                                            namespaceURI,
	                                                            localName);
	};
	
	core.Element.prototype.__defineSetter__("id", function(id) {
	  this.setAttribute("id", id);
	});
	
	core.Element.prototype.__defineGetter__("id",function() {
	  return this.getAttribute("id");
	});
	
	core.Document.prototype.getElementById = function(id) {
	  // return the first element
	  return (this._ids && this._ids[id] && this._ids[id].length > 0 ? this._ids[id][0] : null);
	};
	
	
	exports.dom =
	{
	  level2 : {
	    core : core
	  }
	};


/***/ },
/* 58 */,
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Intercepts a method by replacing the prototype's implementation
	 * with a wrapper that invokes the given interceptor instead.
	 * 
	 *     utils.intercept(core.Element, 'inserBefore',
	 *       function(_super, args, newChild, refChild) {
	 *         console.log('insertBefore', newChild, refChild);
	 *         return _super.apply(this, args);
	 *       }
	 *     );
	 */
	exports.intercept = function(clazz, method, interceptor) {
	  var proto = clazz.prototype,
	      _super = proto[method],
	      unwrapArgs = interceptor.length > 2;
	
	  proto[method] = function() {
	    if (unwrapArgs) {
	      var args = Array.prototype.slice.call(arguments);
	      args.unshift(_super, arguments);
	      return interceptor.apply(this, args);
	    }
	    else {
	      return interceptor.call(this, _super, arguments);
	    }
	  };
	};


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Sizzle CSS Selector Engine
	 *  Copyright 2012 jQuery Foundation and other contributors
	 *  Released under the MIT license
	 *  http://sizzlejs.com/
	 */
	// Patch for jsdom
	module.exports = function( document ) {
	
	var dirruns,
		cachedruns,
		assertGetIdNotName,
		Expr,
		getText,
		isXML,
		contains,
		compile,
		sortOrder,
		hasDuplicate,
	
		baseHasDuplicate = true,
		strundefined = "undefined",
	
		expando = ( "sizcache" + Math.random() ).replace( ".", "" ),
	
		// jsdom document = window.document,
		docElem = document.documentElement,
		done = 0,
		slice = [].slice,
		push = [].push,
	
		// Augment a function for special use by Sizzle
		markFunction = function( fn, value ) {
			fn[ expando ] = value || true;
			return fn;
		},
	
		createCache = function() {
			var cache = {},
				keys = [];
	
			return markFunction(function( key, value ) {
				// Only keep the most recent entries
				if ( keys.push( key ) > Expr.cacheLength ) {
					delete cache[ keys.shift() ];
				}
	
				return (cache[ key ] = value);
			}, cache );
		},
	
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
	
		// Regex
	
		// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
		// http://www.w3.org/TR/css3-syntax/#characters
		characterEncoding = "(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",
	
		// Loosely modeled on CSS identifier characters
		// An unquoted value should be a CSS identifier (http://www.w3.org/TR/css3-selectors/#attribute-selectors)
		// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = characterEncoding.replace( "w", "w#" ),
	
		// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
		operators = "([*^$|!~]?=)",
		attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
			"*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",
	
		// Prefer arguments not in parens/brackets,
		//   then attribute selectors and non-pseudos (denoted by :),
		//   then anything else
		// These preferences are here to reduce the number of selectors
		//   needing tokenize in the PSEUDO preFilter
		pseudos = ":(" + characterEncoding + ")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:" + attributes + ")|[^:]|\\\\.)*|.*))\\)|)",
	
		// For matchExpr.POS and matchExpr.needsContext
		pos = ":(nth|eq|gt|lt|first|last|even|odd)(?:\\(((?:-\\d)?\\d*)\\)|)(?=[^-]|$)",
	
		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
	
		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*" ),
		rpseudo = new RegExp( pseudos ),
	
		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,
	
		rnot = /^:not/,
		rsibling = /[\x20\t\r\n\f]*[+~]/,
		rendsWithNot = /:not\($/,
	
		rheader = /h\d/i,
		rinputs = /input|select|textarea|button/i,
	
		rbackslash = /\\(?!\\)/g,
	
		matchExpr = {
			"ID": new RegExp( "^#(" + characterEncoding + ")" ),
			"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
			"NAME": new RegExp( "^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]" ),
			"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|nth|last|first)-child(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"POS": new RegExp( pos, "ig" ),
			// For use in libraries implementing .is()
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|" + pos, "i" )
		},
	
		// Support
	
		// Used for testing something on an element
		assert = function( fn ) {
			var div = document.createElement("div");
	
			try {
				return fn( div );
			} catch (e) {
				return false;
			} finally {
				// release memory in IE
				div = null;
			}
		},
	
		// Check if getElementsByTagName("*") returns only elements
		assertTagNameNoComments = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		}),
	
		// Check if getAttribute returns normalized href attributes
		assertHrefNotNormalized = assert(function( div ) {
			div.innerHTML = "<a href='#'></a>";
			return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
				div.firstChild.getAttribute("href") === "#";
		}),
	
		// Check if attributes should be retrieved by attribute nodes
		assertAttributes = assert(function( div ) {
			div.innerHTML = "<select></select>";
			var type = typeof div.lastChild.getAttribute("multiple");
			// IE8 returns a string for some attributes even when not present
			return type !== "boolean" && type !== "string";
		}),
	
		// Check if getElementsByClassName can be trusted
		assertUsableClassName = assert(function( div ) {
			// Opera can't find a second classname (in 9.6)
			div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
			if ( !div.getElementsByClassName || !div.getElementsByClassName("e").length ) {
				return false;
			}
	
			// Safari 3.2 caches class attributes and doesn't catch changes
			div.lastChild.className = "e";
			return div.getElementsByClassName("e").length === 2;
		}),
	
		// Check if getElementById returns elements by name
		// Check if getElementsByName privileges form controls or returns elements by ID
		assertUsableName = assert(function( div ) {
			// Inject content
			div.id = expando + 0;
			div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
			docElem.insertBefore( div, docElem.firstChild );
	
			// Test
			var pass = document.getElementsByName &&
				// buggy browsers will return fewer than the correct 2
				document.getElementsByName( expando ).length === 2 +
				// buggy browsers will return more than the correct 0
				document.getElementsByName( expando + 0 ).length;
			assertGetIdNotName = !document.getElementById( expando );
	
			// Cleanup
			docElem.removeChild( div );
	
			return pass;
		});
	
	// If slice is not available, provide a backup
	try {
		slice.call( docElem.childNodes, 0 )[0].nodeType;
	} catch ( e ) {
		slice = function( i ) {
			var elem, results = [];
			for ( ; (elem = this[i]); i++ ) {
				results.push( elem );
			}
			return results;
		};
	}
	
	function Sizzle( selector, context, results, seed ) {
		results = results || [];
		// PATCH for jsdom
		// context = context || document;
		// See: https://github.com/tmpvar/jsdom/issues/375
		context = context || seed[0].ownerDocument;
		var match, elem, xml, m,
			nodeType = context.nodeType;
	
		if ( nodeType !== 1 && nodeType !== 9 ) {
			return [];
		}
	
		if ( !selector || typeof selector !== "string" ) {
			return results;
		}
	
		xml = isXML( context );
	
		if ( !xml && !seed ) {
			if ( (match = rquickExpr.exec( selector )) ) {
				// Speed-up: Sizzle("#ID")
				if ( (m = match[1]) ) {
					if ( nodeType === 9 ) {
						elem = context.getElementById( m );
						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						if ( elem && elem.parentNode ) {
							// Handle the case where IE, Opera, and Webkit return items
							// by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}
					} else {
						// Context is not a document
						if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
							contains( context, elem ) && elem.id === m ) {
							results.push( elem );
							return results;
						}
					}
	
				// Speed-up: Sizzle("TAG")
				} else if ( match[2] ) {
					push.apply( results, slice.call(context.getElementsByTagName( selector ), 0) );
					return results;
	
				// Speed-up: Sizzle(".CLASS")
				} else if ( (m = match[3]) && assertUsableClassName && context.getElementsByClassName ) {
					push.apply( results, slice.call(context.getElementsByClassName( m ), 0) );
					return results;
				}
			}
		}
	
		// All others
		return select( selector, context, results, seed, xml );
	}
	
	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};
	
	Sizzle.matchesSelector = function( elem, expr ) {
		return Sizzle( expr, null, null, [ elem ] ).length > 0;
	};
	
	// Returns a function to use in pseudos for input types
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}
	
	// Returns a function to use in pseudos for buttons
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}
	
	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;
	
		if ( nodeType ) {
			if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
				// Use textContent for elements
				// innerText usage removed for consistency of new lines (see #11153)
				if ( typeof elem.textContent === "string" ) {
					return elem.textContent;
				} else {
					// Traverse its children
					for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
						ret += getText( elem );
					}
				}
			} else if ( nodeType === 3 || nodeType === 4 ) {
				return elem.nodeValue;
			}
			// Do not include comment or processing instruction nodes
		} else {
	
			// If no nodeType, this is expected to be an array
			for ( ; (node = elem[i]); i++ ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		}
		return ret;
	};
	
	isXML = Sizzle.isXML = function isXML( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};
	
	// Element contains another
	contains = Sizzle.contains = docElem.contains ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && adown.contains && adown.contains(bup) );
		} :
		docElem.compareDocumentPosition ?
		function( a, b ) {
			return b && !!( a.compareDocumentPosition( b ) & 16 );
		} :
		function( a, b ) {
			while ( (b = b.parentNode) ) {
				if ( b === a ) {
					return true;
				}
			}
			return false;
		};
	
	Sizzle.attr = function( elem, name ) {
		var attr,
			xml = isXML( elem );
	
		if ( !xml ) {
			name = name.toLowerCase();
		}
		if ( Expr.attrHandle[ name ] ) {
			return Expr.attrHandle[ name ]( elem );
		}
		if ( assertAttributes || xml ) {
			return elem.getAttribute( name );
		}
		attr = elem.getAttributeNode( name );
		return attr ?
			typeof elem[ name ] === "boolean" ?
				elem[ name ] ? name : null :
				attr.specified ? attr.value : null :
			null;
	};
	
	Expr = Sizzle.selectors = {
	
		// Can be adjusted by the user
		cacheLength: 50,
	
		createPseudo: markFunction,
	
		match: matchExpr,
	
		order: new RegExp( "ID|TAG" +
			(assertUsableName ? "|NAME" : "") +
			(assertUsableClassName ? "|CLASS" : "")
		),
	
		// IE6/7 return a modified href
		attrHandle: assertHrefNotNormalized ?
			{} :
			{
				"href": function( elem ) {
					return elem.getAttribute( "href", 2 );
				},
				"type": function( elem ) {
					return elem.getAttribute("type");
				}
			},
	
		find: {
			"ID": assertGetIdNotName ?
				function( id, context, xml ) {
					if ( typeof context.getElementById !== strundefined && !xml ) {
						var m = context.getElementById( id );
						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						return m && m.parentNode ? [m] : [];
					}
				} :
				function( id, context, xml ) {
					if ( typeof context.getElementById !== strundefined && !xml ) {
						var m = context.getElementById( id );
	
						return m ?
							m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
								[m] :
								undefined :
							[];
					}
				},
	
			"TAG": assertTagNameNoComments ?
				function( tag, context ) {
					if ( typeof context.getElementsByTagName !== strundefined ) {
						return context.getElementsByTagName( tag );
					}
				} :
				function( tag, context ) {
					var results = context.getElementsByTagName( tag );
	
					// Filter out possible comments
					if ( tag === "*" ) {
						var elem,
							tmp = [],
							i = 0;
	
						for ( ; (elem = results[i]); i++ ) {
							if ( elem.nodeType === 1 ) {
								tmp.push( elem );
							}
						}
	
						return tmp;
					}
					return results;
				},
	
			"NAME": function( tag, context ) {
				if ( typeof context.getElementsByName !== strundefined ) {
					return context.getElementsByName( name );
				}
			},
	
			"CLASS": function( className, context, xml ) {
				if ( typeof context.getElementsByClassName !== strundefined && !xml ) {
					return context.getElementsByClassName( className );
				}
			}
		},
	
		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},
	
		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( rbackslash, "" );
	
				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[4] || match[5] || "" ).replace( rbackslash, "" );
	
				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}
	
				return match.slice( 0, 4 );
			},
	
			"CHILD": function( match ) {
				/* matches from matchExpr.CHILD
					1 type (only|nth|...)
					2 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					3 xn-component of xn+y argument ([+-]?\d*n|)
					4 sign of xn-component
					5 x of xn-component
					6 sign of y-component
					7 y of y-component
				*/
				match[1] = match[1].toLowerCase();
	
				if ( match[1] === "nth" ) {
					// nth-child requires argument
					if ( !match[2] ) {
						Sizzle.error( match[0] );
					}
	
					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[3] = +( match[3] ? match[4] + (match[5] || 1) : 2 * ( match[2] === "even" || match[2] === "odd" ) );
					match[4] = +( ( match[6] + match[7] ) || match[2] === "odd" );
	
				// other types prohibit arguments
				} else if ( match[2] ) {
					Sizzle.error( match[0] );
				}
	
				return match;
			},
	
			"PSEUDO": function( match, context, xml ) {
				var unquoted, excess;
				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}
	
				if ( match[3] ) {
					match[2] = match[3];
				} else if ( (unquoted = match[4]) ) {
					// Only check arguments that contain a pseudo
					if ( rpseudo.test(unquoted) &&
						// Get excess from tokenize (recursively)
						(excess = tokenize( unquoted, context, xml, true )) &&
						// advance to the next closing parenthesis
						(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
	
						// excess is a negative index
						unquoted = unquoted.slice( 0, excess );
						match[0] = match[0].slice( 0, excess );
					}
					match[2] = unquoted;
				}
	
				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},
	
		filter: {
			"ID": assertGetIdNotName ?
				function( id ) {
					id = id.replace( rbackslash, "" );
					return function( elem ) {
						return elem.getAttribute("id") === id;
					};
				} :
				function( id ) {
					id = id.replace( rbackslash, "" );
					return function( elem ) {
						var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
						return node && node.value === id;
					};
				},
	
			"TAG": function( nodeName ) {
				if ( nodeName === "*" ) {
					return function() { return true; };
				}
				nodeName = nodeName.replace( rbackslash, "" ).toLowerCase();
	
				return function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
			},
	
			"CLASS": function( className ) {
				var pattern = classCache[ expando ][ className ];
				if ( !pattern ) {
					pattern = classCache( className, new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)") );
				}
				return function( elem ) {
					return pattern.test( elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "" );
				};
			},
	
			"ATTR": function( name, operator, check ) {
				if ( !operator ) {
					return function( elem ) {
						return Sizzle.attr( elem, name ) != null;
					};
				}
	
				return function( elem ) {
					var result = Sizzle.attr( elem, name ),
						value = result + "";
	
					if ( result == null ) {
						return operator === "!=";
					}
	
					switch ( operator ) {
						case "=":
							return value === check;
						case "!=":
							return value !== check;
						case "^=":
							return check && value.indexOf( check ) === 0;
						case "*=":
							return check && value.indexOf( check ) > -1;
						case "$=":
							return check && value.substr( value.length - check.length ) === check;
						case "~=":
							return ( " " + value + " " ).indexOf( check ) > -1;
						case "|=":
							return value === check || value.substr( 0, check.length + 1 ) === check + "-";
					}
				};
			},
	
			"CHILD": function( type, argument, first, last ) {
	
				if ( type === "nth" ) {
					var doneName = done++;
	
					return function( elem ) {
						var parent, diff,
							count = 0,
							node = elem;
	
						if ( first === 1 && last === 0 ) {
							return true;
						}
	
						parent = elem.parentNode;
	
						if ( parent && (parent[ expando ] !== doneName || !elem.sizset) ) {
							for ( node = parent.firstChild; node; node = node.nextSibling ) {
								if ( node.nodeType === 1 ) {
									node.sizset = ++count;
									if ( node === elem ) {
										break;
									}
								}
							}
	
							parent[ expando ] = doneName;
						}
	
						diff = elem.sizset - last;
	
						if ( first === 0 ) {
							return diff === 0;
	
						} else {
							return ( diff % first === 0 && diff / first >= 0 );
						}
					};
				}
	
				return function( elem ) {
					var node = elem;
	
					switch ( type ) {
						case "only":
						case "first":
							while ( (node = node.previousSibling) ) {
								if ( node.nodeType === 1 ) {
									return false;
								}
							}
	
							if ( type === "first" ) {
								return true;
							}
	
							node = elem;
	
							/* falls through */
						case "last":
							while ( (node = node.nextSibling) ) {
								if ( node.nodeType === 1 ) {
									return false;
								}
							}
	
							return true;
					}
				};
			},
	
			"PSEUDO": function( pseudo, argument, context, xml ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.pseudos[ pseudo.toLowerCase() ];
	
				if ( !fn ) {
					Sizzle.error( "unsupported pseudo: " + pseudo );
				}
	
				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( !fn[ expando ] ) {
					if ( fn.length > 1 ) {
						args = [ pseudo, pseudo, "", argument ];
						return function( elem ) {
							return fn( elem, 0, args );
						};
					}
					return fn;
				}
	
				return fn( argument, context, xml );
			}
		},
	
		pseudos: {
			"not": markFunction(function( selector, context, xml ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var matcher = compile( selector.replace( rtrim, "$1" ), context, xml );
				return function( elem ) {
					return !matcher( elem );
				};
			}),
	
			"enabled": function( elem ) {
				return elem.disabled === false;
			},
	
			"disabled": function( elem ) {
				return elem.disabled === true;
			},
	
			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},
	
			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}
	
				return elem.selected === true;
			},
	
			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},
	
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
				//   not comment, processing instructions, or others
				// Thanks to Diego Perini for the nodeName shortcut
				//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
				var nodeType;
				elem = elem.firstChild;
				while ( elem ) {
					if ( elem.nodeName > "@" || (nodeType = elem.nodeType) === 3 || nodeType === 4 ) {
						return false;
					}
					elem = elem.nextSibling;
				}
				return true;
			},
	
			"contains": markFunction(function( text ) {
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),
	
			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),
	
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},
	
			"text": function( elem ) {
				var type, attr;
				// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
				// use getAttribute instead to test this case
				return elem.nodeName.toLowerCase() === "input" &&
					(type = elem.type) === "text" &&
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === type );
			},
	
			// Input types
			"radio": createInputPseudo("radio"),
			"checkbox": createInputPseudo("checkbox"),
			"file": createInputPseudo("file"),
			"password": createInputPseudo("password"),
			"image": createInputPseudo("image"),
	
			"submit": createButtonPseudo("submit"),
			"reset": createButtonPseudo("reset"),
	
			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},
	
			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},
	
			"focus": function( elem ) {
				var doc = elem.ownerDocument;
				return elem === doc.activeElement && (!doc.hasFocus || doc.hasFocus()) && !!(elem.type || elem.href);
			},
	
			"active": function( elem ) {
				return elem === elem.ownerDocument.activeElement;
			}
		},
	
		setFilters: {
			"first": function( elements, argument, not ) {
				return not ? elements.slice( 1 ) : [ elements[0] ];
			},
	
			"last": function( elements, argument, not ) {
				var elem = elements.pop();
				return not ? elements : [ elem ];
			},
	
			"even": function( elements, argument, not ) {
				var results = [],
					i = not ? 1 : 0,
					len = elements.length;
				for ( ; i < len; i = i + 2 ) {
					results.push( elements[i] );
				}
				return results;
			},
	
			"odd": function( elements, argument, not ) {
				var results = [],
					i = not ? 0 : 1,
					len = elements.length;
				for ( ; i < len; i = i + 2 ) {
					results.push( elements[i] );
				}
				return results;
			},
	
			"lt": function( elements, argument, not ) {
				return not ? elements.slice( +argument ) : elements.slice( 0, +argument );
			},
	
			"gt": function( elements, argument, not ) {
				return not ? elements.slice( 0, +argument + 1 ) : elements.slice( +argument + 1 );
			},
	
			"eq": function( elements, argument, not ) {
				var elem = elements.splice( +argument, 1 );
				return not ? elements : elem;
			}
		}
	};
	
	function siblingCheck( a, b, ret ) {
		if ( a === b ) {
			return ret;
		}
	
		var cur = a.nextSibling;
	
		while ( cur ) {
			if ( cur === b ) {
				return -1;
			}
	
			cur = cur.nextSibling;
		}
	
		return 1;
	}
	
	sortOrder = docElem.compareDocumentPosition ?
		function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			return ( !a.compareDocumentPosition || !b.compareDocumentPosition ?
				a.compareDocumentPosition :
				a.compareDocumentPosition(b) & 4
			) ? -1 : 1;
		} :
		function( a, b ) {
			// The nodes are identical, we can exit early
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
	
			// Fallback to using sourceIndex (in IE) if it's available on both nodes
			} else if ( a.sourceIndex && b.sourceIndex ) {
				return a.sourceIndex - b.sourceIndex;
			}
	
			var al, bl,
				ap = [],
				bp = [],
				aup = a.parentNode,
				bup = b.parentNode,
				cur = aup;
	
			// If the nodes are siblings (or identical) we can do a quick check
			if ( aup === bup ) {
				return siblingCheck( a, b );
	
			// If no parents were found then the nodes are disconnected
			} else if ( !aup ) {
				return -1;
	
			} else if ( !bup ) {
				return 1;
			}
	
			// Otherwise they're somewhere else in the tree so we need
			// to build up a full list of the parentNodes for comparison
			while ( cur ) {
				ap.unshift( cur );
				cur = cur.parentNode;
			}
	
			cur = bup;
	
			while ( cur ) {
				bp.unshift( cur );
				cur = cur.parentNode;
			}
	
			al = ap.length;
			bl = bp.length;
	
			// Start walking down the tree looking for a discrepancy
			for ( var i = 0; i < al && i < bl; i++ ) {
				if ( ap[i] !== bp[i] ) {
					return siblingCheck( ap[i], bp[i] );
				}
			}
	
			// We ended someplace up the tree so do a sibling check
			return i === al ?
				siblingCheck( a, bp[i], -1 ) :
				siblingCheck( ap[i], b, 1 );
		};
	
	// Always assume the presence of duplicates if sort doesn't
	// pass them to our comparison function (as in Google Chrome).
	[0, 0].sort( sortOrder );
	baseHasDuplicate = !hasDuplicate;
	
	// Document sorting and removing duplicates
	Sizzle.uniqueSort = function( results ) {
		var elem,
			i = 1;
	
		hasDuplicate = baseHasDuplicate;
		results.sort( sortOrder );
	
		if ( hasDuplicate ) {
			for ( ; (elem = results[i]); i++ ) {
				if ( elem === results[ i - 1 ] ) {
					results.splice( i--, 1 );
				}
			}
		}
	
		return results;
	};
	
	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};
	
	function tokenize( selector, context, xml, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, group, i,
			preFilters, filters,
			checkContext = !xml && context !== document,
			// Token cache should maintain spaces
			key = ( checkContext ? "<s>" : "" ) + selector.replace( rtrim, "$1<s>" ),
			cached = tokenCache[ expando ][ key ];
	
		if ( cached ) {
			return parseOnly ? 0 : slice.call( cached, 0 );
		}
	
		soFar = selector;
		groups = [];
		i = 0;
		preFilters = Expr.preFilter;
		filters = Expr.filter;
	
		while ( soFar ) {
	
			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					soFar = soFar.slice( match[0].length );
					tokens.selector = group;
				}
				groups.push( tokens = [] );
				group = "";
	
				// Need to make sure we're within a narrower context if necessary
				// Adding a descendant combinator will generate what is needed
				if ( checkContext ) {
					soFar = " " + soFar;
				}
			}
	
			matched = false;
	
			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				group += match[0];
				soFar = soFar.slice( match[0].length );
	
				// Cast descendant combinators to space
				matched = tokens.push({
					part: match.pop().replace( rtrim, " " ),
					string: match[0],
					captures: match
				});
			}
	
			// Filters
			for ( type in filters ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					( match = preFilters[ type ](match, context, xml) )) ) {
	
					group += match[0];
					soFar = soFar.slice( match[0].length );
					matched = tokens.push({
						part: type,
						string: match.shift(),
						captures: match
					});
				}
			}
	
			if ( !matched ) {
				break;
			}
		}
	
		// Attach the full group as a selector
		if ( group ) {
			tokens.selector = group;
		}
	
		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				slice.call( tokenCache(key, groups), 0 );
	}
	
	function addCombinator( matcher, combinator, context, xml ) {
		var dir = combinator.dir,
			doneName = done++;
	
		if ( !matcher ) {
			// If there is no matcher to check, check against the context
			matcher = function( elem ) {
				return elem === context;
			};
		}
		return combinator.first ?
			function( elem ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 ) {
						return matcher( elem ) && elem;
					}
				}
			} :
			xml ?
				function( elem ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 ) {
							if ( matcher( elem ) ) {
								return elem;
							}
						}
					}
				} :
				function( elem ) {
					var cache,
						dirkey = doneName + "." + dirruns,
						cachedkey = dirkey + "." + cachedruns;
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 ) {
							if ( (cache = elem[ expando ]) === cachedkey ) {
								return elem.sizset;
							} else if ( typeof cache === "string" && cache.indexOf(dirkey) === 0 ) {
								if ( elem.sizset ) {
									return elem;
								}
							} else {
								elem[ expando ] = cachedkey;
								if ( matcher( elem ) ) {
									elem.sizset = true;
									return elem;
								}
								elem.sizset = false;
							}
						}
					}
				};
	}
	
	function addMatcher( higher, deeper ) {
		return higher ?
			function( elem ) {
				var result = deeper( elem );
				return result && higher( result === true ? elem : result );
			} :
			deeper;
	}
	
	// ["TAG", ">", "ID", " ", "CLASS"]
	function matcherFromTokens( tokens, context, xml ) {
		var token, matcher,
			i = 0;
	
		for ( ; (token = tokens[i]); i++ ) {
			if ( Expr.relative[ token.part ] ) {
				matcher = addCombinator( matcher, Expr.relative[ token.part ], context, xml );
			} else {
				matcher = addMatcher( matcher, Expr.filter[ token.part ].apply(null, token.captures.concat( context, xml )) );
			}
		}
	
		return matcher;
	}
	
	function matcherFromGroupMatchers( matchers ) {
		return function( elem ) {
			var matcher,
				j = 0;
			for ( ; (matcher = matchers[j]); j++ ) {
				if ( matcher(elem) ) {
					return true;
				}
			}
			return false;
		};
	}
	
	compile = Sizzle.compile = function( selector, context, xml ) {
		var group, i, len,
			cached = compilerCache[ expando ][ selector ];
	
		// Return a cached group function if already generated (context dependent)
		if ( cached && cached.context === context ) {
			return cached;
		}
	
		// Generate a function of recursive functions that can be used to check each element
		group = tokenize( selector, context, xml );
		for ( i = 0, len = group.length; i < len; i++ ) {
			group[i] = matcherFromTokens(group[i], context, xml);
		}
	
		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers(group) );
		cached.context = context;
		cached.runs = cached.dirruns = 0;
		return cached;
	};
	
	function multipleContexts( selector, contexts, results, seed ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results, seed );
		}
	}
	
	function handlePOSGroup( selector, posfilter, argument, contexts, seed, not ) {
		var results,
			fn = Expr.setFilters[ posfilter.toLowerCase() ];
	
		if ( !fn ) {
			Sizzle.error( posfilter );
		}
	
		if ( selector || !(results = seed) ) {
			multipleContexts( selector || "*", contexts, (results = []), seed );
		}
	
		return results.length > 0 ? fn( results, argument, not ) : [];
	}
	
	function handlePOS( groups, context, results, seed ) {
		var group, part, j, groupLen, token, selector,
			anchor, elements, match, matched,
			lastIndex, currentContexts, not,
			i = 0,
			len = groups.length,
			rpos = matchExpr["POS"],
			// This is generated here in case matchExpr["POS"] is extended
			rposgroups = new RegExp( "^" + rpos.source + "(?!" + whitespace + ")", "i" ),
			// This is for making sure non-participating
			// matching groups are represented cross-browser (IE6-8)
			setUndefined = function() {
				var i = 1,
					len = arguments.length - 2;
				for ( ; i < len; i++ ) {
					if ( arguments[i] === undefined ) {
						match[i] = undefined;
					}
				}
			};
	
		for ( ; i < len; i++ ) {
			group = groups[i];
			part = "";
			elements = seed;
			for ( j = 0, groupLen = group.length; j < groupLen; j++ ) {
				token = group[j];
				selector = token.string;
				if ( token.part === "PSEUDO" ) {
					// Reset regex index to 0
					rpos.exec("");
					anchor = 0;
					while ( (match = rpos.exec( selector )) ) {
						matched = true;
						lastIndex = rpos.lastIndex = match.index + match[0].length;
						if ( lastIndex > anchor ) {
							part += selector.slice( anchor, match.index );
							anchor = lastIndex;
							currentContexts = [ context ];
	
							if ( rcombinators.test(part) ) {
								if ( elements ) {
									currentContexts = elements;
								}
								elements = seed;
							}
	
							if ( (not = rendsWithNot.test( part )) ) {
								part = part.slice( 0, -5 ).replace( rcombinators, "$&*" );
								anchor++;
							}
	
							if ( match.length > 1 ) {
								match[0].replace( rposgroups, setUndefined );
							}
							elements = handlePOSGroup( part, match[1], match[2], currentContexts, elements, not );
						}
						part = "";
					}
	
				}
	
				if ( !matched ) {
					part += selector;
				}
				matched = false;
			}
	
			if ( part ) {
				if ( rcombinators.test(part) ) {
					multipleContexts( part, elements || [ context ], results, seed );
				} else {
					Sizzle( part, context, results, seed ? seed.concat(elements) : elements );
				}
			} else {
				push.apply( results, elements );
			}
		}
	
		// Do not sort if this is a single filter
		return len === 1 ? results : Sizzle.uniqueSort( results );
	}
	
	function select( selector, context, results, seed, xml ) {
		// Remove excessive whitespace
		selector = selector.replace( rtrim, "$1" );
		var elements, matcher, cached, elem,
			i, tokens, token, lastToken, findContext, type,
			match = tokenize( selector, context, xml ),
			contextNodeType = context.nodeType;
	
		// POS handling
		if ( matchExpr["POS"].test(selector) ) {
			return handlePOS( match, context, results, seed );
		}
	
		if ( seed ) {
			elements = slice.call( seed, 0 );
	
		// To maintain document order, only narrow the
		// set if there is one group
		} else if ( match.length === 1 ) {
	
			// Take a shortcut and set the context if the root selector is an ID
			if ( (tokens = slice.call( match[0], 0 )).length > 2 &&
					(token = tokens[0]).part === "ID" &&
					contextNodeType === 9 && !xml &&
					Expr.relative[ tokens[1].part ] ) {
	
				context = Expr.find["ID"]( token.captures[0].replace( rbackslash, "" ), context, xml )[0];
				if ( !context ) {
					return results;
				}
	
				selector = selector.slice( tokens.shift().string.length );
			}
	
			findContext = ( (match = rsibling.exec( tokens[0].string )) && !match.index && context.parentNode ) || context;
	
			// Reduce the set if possible
			lastToken = "";
			for ( i = tokens.length - 1; i >= 0; i-- ) {
				token = tokens[i];
				type = token.part;
				lastToken = token.string + lastToken;
				if ( Expr.relative[ type ] ) {
					break;
				}
				if ( Expr.order.test(type) ) {
					elements = Expr.find[ type ]( token.captures[0].replace( rbackslash, "" ), findContext, xml );
					if ( elements == null ) {
						continue;
					} else {
						selector = selector.slice( 0, selector.length - lastToken.length ) +
							lastToken.replace( matchExpr[ type ], "" );
	
						if ( !selector ) {
							push.apply( results, slice.call(elements, 0) );
						}
	
						break;
					}
				}
			}
		}
	
		// Only loop over the given elements once
		if ( selector ) {
			matcher = compile( selector, context, xml );
			dirruns = matcher.dirruns++;
			if ( elements == null ) {
				elements = Expr.find["TAG"]( "*", (rsibling.test( selector ) && context.parentNode) || context );
			}
	
			for ( i = 0; (elem = elements[i]); i++ ) {
				cachedruns = matcher.runs++;
				if ( matcher(elem) ) {
					results.push( elem );
				}
			}
		}
	
		return results;
	}
	
	// Patch for jsdom
	// we use sizzle to implement querySelectorAll, so sizzle cannot use it 
	if ( document.querySelectorAll && false ) {
		(function() {
			var disconnectedMatch,
				oldSelect = select,
				rescape = /'|\\/g,
				rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,
				rbuggyQSA = [],
				// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
				// A support test would require too much code (would include document ready)
				// just skip matchesSelector for :active
				rbuggyMatches = [":active"],
				matches = docElem.matchesSelector ||
					docElem.mozMatchesSelector ||
					docElem.webkitMatchesSelector ||
					docElem.oMatchesSelector ||
					docElem.msMatchesSelector;
	
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explictly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				div.innerHTML = "<select><option selected=''></option></select>";
	
				// IE8 - Some boolean attributes are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)" );
				}
	
				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here (do not put tests after this one)
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}
			});
	
			assert(function( div ) {
	
				// Opera 10-12/IE9 - ^= $= *= and empty values
				// Should not select anything
				div.innerHTML = "<p test=''></p>";
				if ( div.querySelectorAll("[test^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\"\"|'')" );
				}
	
				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here (do not put tests after this one)
				div.innerHTML = "<input type='hidden'/>";
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push(":enabled", ":disabled");
				}
			});
	
			rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	
			select = function( selector, context, results, seed, xml ) {
				// Only use querySelectorAll when not filtering,
				// when this is not xml,
				// and when no QSA bugs apply
				if ( !seed && !xml && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
					if ( context.nodeType === 9 ) {
						try {
							push.apply( results, slice.call(context.querySelectorAll( selector ), 0) );
							return results;
						} catch(qsaError) {}
					// qSA works strangely on Element-rooted queries
					// We can work around this by specifying an extra ID on the root
					// and working up from there (Thanks to Andrew Dupont for the technique)
					// IE 8 doesn't work on object elements
					} else if ( context.nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
						var groups, i, len,
							old = context.getAttribute("id"),
							nid = old || expando,
							newContext = rsibling.test( selector ) && context.parentNode || context;
	
						if ( old ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", nid );
						}
	
						groups = tokenize(selector, context, xml);
						// Trailing space is unnecessary
						// There is always a context check
						nid = "[id='" + nid + "']";
						for ( i = 0, len = groups.length; i < len; i++ ) {
							groups[i] = nid + groups[i].selector;
						}
						try {
							push.apply( results, slice.call( newContext.querySelectorAll(
								groups.join(",")
							), 0 ) );
							return results;
						} catch(qsaError) {
						} finally {
							if ( !old ) {
								context.removeAttribute("id");
							}
						}
					}
				}
	
				return oldSelect( selector, context, results, seed, xml );
			};
	
			if ( matches ) {
				assert(function( div ) {
					// Check to see if it's possible to do matchesSelector
					// on a disconnected node (IE 9)
					disconnectedMatch = matches.call( div, "div" );
	
					// This should fail with an exception
					// Gecko does not error, returns false instead
					try {
						matches.call( div, "[test!='']:sizzle" );
						rbuggyMatches.push( matchExpr["PSEUDO"].source, matchExpr["POS"].source, "!=" );
					} catch ( e ) {}
				});
	
				// rbuggyMatches always contains :active, so no need for a length check
				rbuggyMatches = /* rbuggyMatches.length && */ new RegExp( rbuggyMatches.join("|") );
	
				Sizzle.matchesSelector = function( elem, expr ) {
					// Make sure that attribute selectors are quoted
					expr = expr.replace( rattributeQuotes, "='$1']" );
	
					// rbuggyMatches always contains :active, so no need for an existence check
					if ( !isXML( elem ) && !rbuggyMatches.test( expr ) && (!rbuggyQSA || !rbuggyQSA.test( expr )) ) {
						try {
							var ret = matches.call( elem, expr );
	
							// IE 9's matchesSelector returns false on disconnected nodes
							if ( ret || disconnectedMatch ||
									// As well, disconnected nodes are said to be in a document
									// fragment in IE 9
									elem.document && elem.document.nodeType !== 11 ) {
								return ret;
							}
						} catch(e) {}
					}
	
					return Sizzle( expr, null, null, [ elem ] ).length > 0;
				};
			}
		})();
	}
	
	// Deprecated
	Expr.setFilters["nth"] = Expr.setFilters["eq"];
	
	// Back-compat
	Expr.filters = Expr.pseudos;
	
	// EXPOSE
	/* patch for jsdom */
	return Sizzle;
	/*
	if ( typeof define === "function" && define.amd ) {
		define(function() { return Sizzle; });
	} else {
		window.Sizzle = Sizzle;
	}
	*/
	// EXPOSE
	
	};


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	// BEGIN(BROWSER)
	/* Jison generated parser */
	var handlebars = (function(){
	var parser = {trace: function trace() { },
	yy: {},
	symbols_: {"error":2,"root":3,"program":4,"EOF":5,"simpleInverse":6,"statements":7,"statement":8,"openInverse":9,"closeBlock":10,"openBlock":11,"mustache":12,"partial":13,"CONTENT":14,"COMMENT":15,"OPEN_BLOCK":16,"inMustache":17,"CLOSE":18,"OPEN_INVERSE":19,"OPEN_ENDBLOCK":20,"path":21,"OPEN":22,"OPEN_UNESCAPED":23,"CLOSE_UNESCAPED":24,"OPEN_PARTIAL":25,"partialName":26,"params":27,"hash":28,"dataName":29,"param":30,"STRING":31,"INTEGER":32,"BOOLEAN":33,"hashSegments":34,"hashSegment":35,"ID":36,"EQUALS":37,"DATA":38,"pathSegments":39,"SEP":40,"$accept":0,"$end":1},
	terminals_: {2:"error",5:"EOF",14:"CONTENT",15:"COMMENT",16:"OPEN_BLOCK",18:"CLOSE",19:"OPEN_INVERSE",20:"OPEN_ENDBLOCK",22:"OPEN",23:"OPEN_UNESCAPED",24:"CLOSE_UNESCAPED",25:"OPEN_PARTIAL",31:"STRING",32:"INTEGER",33:"BOOLEAN",36:"ID",37:"EQUALS",38:"DATA",40:"SEP"},
	productions_: [0,[3,2],[4,2],[4,3],[4,2],[4,1],[4,1],[4,0],[7,1],[7,2],[8,3],[8,3],[8,1],[8,1],[8,1],[8,1],[11,3],[9,3],[10,3],[12,3],[12,3],[13,3],[13,4],[6,2],[17,3],[17,2],[17,2],[17,1],[17,1],[27,2],[27,1],[30,1],[30,1],[30,1],[30,1],[30,1],[28,1],[34,2],[34,1],[35,3],[35,3],[35,3],[35,3],[35,3],[26,1],[26,1],[26,1],[29,2],[21,1],[39,3],[39,1]],
	performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {
	
	var $0 = $$.length - 1;
	switch (yystate) {
	case 1: return $$[$0-1]; 
	break;
	case 2: this.$ = new yy.ProgramNode([], $$[$0]); 
	break;
	case 3: this.$ = new yy.ProgramNode($$[$0-2], $$[$0]); 
	break;
	case 4: this.$ = new yy.ProgramNode($$[$0-1], []); 
	break;
	case 5: this.$ = new yy.ProgramNode($$[$0]); 
	break;
	case 6: this.$ = new yy.ProgramNode([], []); 
	break;
	case 7: this.$ = new yy.ProgramNode([]); 
	break;
	case 8: this.$ = [$$[$0]]; 
	break;
	case 9: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
	break;
	case 10: this.$ = new yy.BlockNode($$[$0-2], $$[$0-1].inverse, $$[$0-1], $$[$0]); 
	break;
	case 11: this.$ = new yy.BlockNode($$[$0-2], $$[$0-1], $$[$0-1].inverse, $$[$0]); 
	break;
	case 12: this.$ = $$[$0]; 
	break;
	case 13: this.$ = $$[$0]; 
	break;
	case 14: this.$ = new yy.ContentNode($$[$0]); 
	break;
	case 15: this.$ = new yy.CommentNode($$[$0]); 
	break;
	case 16: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]); 
	break;
	case 17: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]); 
	break;
	case 18: this.$ = $$[$0-1]; 
	break;
	case 19:
	    // Parsing out the '&' escape token at this level saves ~500 bytes after min due to the removal of one parser node.
	    this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1], $$[$0-2][2] === '&');
	  
	break;
	case 20: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1], true); 
	break;
	case 21: this.$ = new yy.PartialNode($$[$0-1]); 
	break;
	case 22: this.$ = new yy.PartialNode($$[$0-2], $$[$0-1]); 
	break;
	case 23: 
	break;
	case 24: this.$ = [[$$[$0-2]].concat($$[$0-1]), $$[$0]]; 
	break;
	case 25: this.$ = [[$$[$0-1]].concat($$[$0]), null]; 
	break;
	case 26: this.$ = [[$$[$0-1]], $$[$0]]; 
	break;
	case 27: this.$ = [[$$[$0]], null]; 
	break;
	case 28: this.$ = [[$$[$0]], null]; 
	break;
	case 29: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
	break;
	case 30: this.$ = [$$[$0]]; 
	break;
	case 31: this.$ = $$[$0]; 
	break;
	case 32: this.$ = new yy.StringNode($$[$0]); 
	break;
	case 33: this.$ = new yy.IntegerNode($$[$0]); 
	break;
	case 34: this.$ = new yy.BooleanNode($$[$0]); 
	break;
	case 35: this.$ = $$[$0]; 
	break;
	case 36: this.$ = new yy.HashNode($$[$0]); 
	break;
	case 37: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
	break;
	case 38: this.$ = [$$[$0]]; 
	break;
	case 39: this.$ = [$$[$0-2], $$[$0]]; 
	break;
	case 40: this.$ = [$$[$0-2], new yy.StringNode($$[$0])]; 
	break;
	case 41: this.$ = [$$[$0-2], new yy.IntegerNode($$[$0])]; 
	break;
	case 42: this.$ = [$$[$0-2], new yy.BooleanNode($$[$0])]; 
	break;
	case 43: this.$ = [$$[$0-2], $$[$0]]; 
	break;
	case 44: this.$ = new yy.PartialNameNode($$[$0]); 
	break;
	case 45: this.$ = new yy.PartialNameNode(new yy.StringNode($$[$0])); 
	break;
	case 46: this.$ = new yy.PartialNameNode(new yy.IntegerNode($$[$0])); 
	break;
	case 47: this.$ = new yy.DataNode($$[$0]); 
	break;
	case 48: this.$ = new yy.IdNode($$[$0]); 
	break;
	case 49: $$[$0-2].push({part: $$[$0], separator: $$[$0-1]}); this.$ = $$[$0-2]; 
	break;
	case 50: this.$ = [{part: $$[$0]}]; 
	break;
	}
	},
	table: [{3:1,4:2,5:[2,7],6:3,7:4,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],22:[1,14],23:[1,15],25:[1,16]},{1:[3]},{5:[1,17]},{5:[2,6],7:18,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,6],22:[1,14],23:[1,15],25:[1,16]},{5:[2,5],6:20,8:21,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],20:[2,5],22:[1,14],23:[1,15],25:[1,16]},{17:23,18:[1,22],21:24,29:25,36:[1,28],38:[1,27],39:26},{5:[2,8],14:[2,8],15:[2,8],16:[2,8],19:[2,8],20:[2,8],22:[2,8],23:[2,8],25:[2,8]},{4:29,6:3,7:4,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],20:[2,7],22:[1,14],23:[1,15],25:[1,16]},{4:30,6:3,7:4,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],20:[2,7],22:[1,14],23:[1,15],25:[1,16]},{5:[2,12],14:[2,12],15:[2,12],16:[2,12],19:[2,12],20:[2,12],22:[2,12],23:[2,12],25:[2,12]},{5:[2,13],14:[2,13],15:[2,13],16:[2,13],19:[2,13],20:[2,13],22:[2,13],23:[2,13],25:[2,13]},{5:[2,14],14:[2,14],15:[2,14],16:[2,14],19:[2,14],20:[2,14],22:[2,14],23:[2,14],25:[2,14]},{5:[2,15],14:[2,15],15:[2,15],16:[2,15],19:[2,15],20:[2,15],22:[2,15],23:[2,15],25:[2,15]},{17:31,21:24,29:25,36:[1,28],38:[1,27],39:26},{17:32,21:24,29:25,36:[1,28],38:[1,27],39:26},{17:33,21:24,29:25,36:[1,28],38:[1,27],39:26},{21:35,26:34,31:[1,36],32:[1,37],36:[1,28],39:26},{1:[2,1]},{5:[2,2],8:21,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,2],22:[1,14],23:[1,15],25:[1,16]},{17:23,21:24,29:25,36:[1,28],38:[1,27],39:26},{5:[2,4],7:38,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,4],22:[1,14],23:[1,15],25:[1,16]},{5:[2,9],14:[2,9],15:[2,9],16:[2,9],19:[2,9],20:[2,9],22:[2,9],23:[2,9],25:[2,9]},{5:[2,23],14:[2,23],15:[2,23],16:[2,23],19:[2,23],20:[2,23],22:[2,23],23:[2,23],25:[2,23]},{18:[1,39]},{18:[2,27],21:44,24:[2,27],27:40,28:41,29:48,30:42,31:[1,45],32:[1,46],33:[1,47],34:43,35:49,36:[1,50],38:[1,27],39:26},{18:[2,28],24:[2,28]},{18:[2,48],24:[2,48],31:[2,48],32:[2,48],33:[2,48],36:[2,48],38:[2,48],40:[1,51]},{21:52,36:[1,28],39:26},{18:[2,50],24:[2,50],31:[2,50],32:[2,50],33:[2,50],36:[2,50],38:[2,50],40:[2,50]},{10:53,20:[1,54]},{10:55,20:[1,54]},{18:[1,56]},{18:[1,57]},{24:[1,58]},{18:[1,59],21:60,36:[1,28],39:26},{18:[2,44],36:[2,44]},{18:[2,45],36:[2,45]},{18:[2,46],36:[2,46]},{5:[2,3],8:21,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,3],22:[1,14],23:[1,15],25:[1,16]},{14:[2,17],15:[2,17],16:[2,17],19:[2,17],20:[2,17],22:[2,17],23:[2,17],25:[2,17]},{18:[2,25],21:44,24:[2,25],28:61,29:48,30:62,31:[1,45],32:[1,46],33:[1,47],34:43,35:49,36:[1,50],38:[1,27],39:26},{18:[2,26],24:[2,26]},{18:[2,30],24:[2,30],31:[2,30],32:[2,30],33:[2,30],36:[2,30],38:[2,30]},{18:[2,36],24:[2,36],35:63,36:[1,64]},{18:[2,31],24:[2,31],31:[2,31],32:[2,31],33:[2,31],36:[2,31],38:[2,31]},{18:[2,32],24:[2,32],31:[2,32],32:[2,32],33:[2,32],36:[2,32],38:[2,32]},{18:[2,33],24:[2,33],31:[2,33],32:[2,33],33:[2,33],36:[2,33],38:[2,33]},{18:[2,34],24:[2,34],31:[2,34],32:[2,34],33:[2,34],36:[2,34],38:[2,34]},{18:[2,35],24:[2,35],31:[2,35],32:[2,35],33:[2,35],36:[2,35],38:[2,35]},{18:[2,38],24:[2,38],36:[2,38]},{18:[2,50],24:[2,50],31:[2,50],32:[2,50],33:[2,50],36:[2,50],37:[1,65],38:[2,50],40:[2,50]},{36:[1,66]},{18:[2,47],24:[2,47],31:[2,47],32:[2,47],33:[2,47],36:[2,47],38:[2,47]},{5:[2,10],14:[2,10],15:[2,10],16:[2,10],19:[2,10],20:[2,10],22:[2,10],23:[2,10],25:[2,10]},{21:67,36:[1,28],39:26},{5:[2,11],14:[2,11],15:[2,11],16:[2,11],19:[2,11],20:[2,11],22:[2,11],23:[2,11],25:[2,11]},{14:[2,16],15:[2,16],16:[2,16],19:[2,16],20:[2,16],22:[2,16],23:[2,16],25:[2,16]},{5:[2,19],14:[2,19],15:[2,19],16:[2,19],19:[2,19],20:[2,19],22:[2,19],23:[2,19],25:[2,19]},{5:[2,20],14:[2,20],15:[2,20],16:[2,20],19:[2,20],20:[2,20],22:[2,20],23:[2,20],25:[2,20]},{5:[2,21],14:[2,21],15:[2,21],16:[2,21],19:[2,21],20:[2,21],22:[2,21],23:[2,21],25:[2,21]},{18:[1,68]},{18:[2,24],24:[2,24]},{18:[2,29],24:[2,29],31:[2,29],32:[2,29],33:[2,29],36:[2,29],38:[2,29]},{18:[2,37],24:[2,37],36:[2,37]},{37:[1,65]},{21:69,29:73,31:[1,70],32:[1,71],33:[1,72],36:[1,28],38:[1,27],39:26},{18:[2,49],24:[2,49],31:[2,49],32:[2,49],33:[2,49],36:[2,49],38:[2,49],40:[2,49]},{18:[1,74]},{5:[2,22],14:[2,22],15:[2,22],16:[2,22],19:[2,22],20:[2,22],22:[2,22],23:[2,22],25:[2,22]},{18:[2,39],24:[2,39],36:[2,39]},{18:[2,40],24:[2,40],36:[2,40]},{18:[2,41],24:[2,41],36:[2,41]},{18:[2,42],24:[2,42],36:[2,42]},{18:[2,43],24:[2,43],36:[2,43]},{5:[2,18],14:[2,18],15:[2,18],16:[2,18],19:[2,18],20:[2,18],22:[2,18],23:[2,18],25:[2,18]}],
	defaultActions: {17:[2,1]},
	parseError: function parseError(str, hash) {
	    throw new Error(str);
	},
	parse: function parse(input) {
	    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
	    this.lexer.setInput(input);
	    this.lexer.yy = this.yy;
	    this.yy.lexer = this.lexer;
	    this.yy.parser = this;
	    if (typeof this.lexer.yylloc == "undefined")
	        this.lexer.yylloc = {};
	    var yyloc = this.lexer.yylloc;
	    lstack.push(yyloc);
	    var ranges = this.lexer.options && this.lexer.options.ranges;
	    if (typeof this.yy.parseError === "function")
	        this.parseError = this.yy.parseError;
	    function popStack(n) {
	        stack.length = stack.length - 2 * n;
	        vstack.length = vstack.length - n;
	        lstack.length = lstack.length - n;
	    }
	    function lex() {
	        var token;
	        token = self.lexer.lex() || 1;
	        if (typeof token !== "number") {
	            token = self.symbols_[token] || token;
	        }
	        return token;
	    }
	    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
	    while (true) {
	        state = stack[stack.length - 1];
	        if (this.defaultActions[state]) {
	            action = this.defaultActions[state];
	        } else {
	            if (symbol === null || typeof symbol == "undefined") {
	                symbol = lex();
	            }
	            action = table[state] && table[state][symbol];
	        }
	        if (typeof action === "undefined" || !action.length || !action[0]) {
	            var errStr = "";
	            if (!recovering) {
	                expected = [];
	                for (p in table[state])
	                    if (this.terminals_[p] && p > 2) {
	                        expected.push("'" + this.terminals_[p] + "'");
	                    }
	                if (this.lexer.showPosition) {
	                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
	                } else {
	                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
	                }
	                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
	            }
	        }
	        if (action[0] instanceof Array && action.length > 1) {
	            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
	        }
	        switch (action[0]) {
	        case 1:
	            stack.push(symbol);
	            vstack.push(this.lexer.yytext);
	            lstack.push(this.lexer.yylloc);
	            stack.push(action[1]);
	            symbol = null;
	            if (!preErrorSymbol) {
	                yyleng = this.lexer.yyleng;
	                yytext = this.lexer.yytext;
	                yylineno = this.lexer.yylineno;
	                yyloc = this.lexer.yylloc;
	                if (recovering > 0)
	                    recovering--;
	            } else {
	                symbol = preErrorSymbol;
	                preErrorSymbol = null;
	            }
	            break;
	        case 2:
	            len = this.productions_[action[1]][1];
	            yyval.$ = vstack[vstack.length - len];
	            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
	            if (ranges) {
	                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
	            }
	            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
	            if (typeof r !== "undefined") {
	                return r;
	            }
	            if (len) {
	                stack = stack.slice(0, -1 * len * 2);
	                vstack = vstack.slice(0, -1 * len);
	                lstack = lstack.slice(0, -1 * len);
	            }
	            stack.push(this.productions_[action[1]][0]);
	            vstack.push(yyval.$);
	            lstack.push(yyval._$);
	            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
	            stack.push(newState);
	            break;
	        case 3:
	            return true;
	        }
	    }
	    return true;
	}
	};
	/* Jison generated lexer */
	var lexer = (function(){
	var lexer = ({EOF:1,
	parseError:function parseError(str, hash) {
	        if (this.yy.parser) {
	            this.yy.parser.parseError(str, hash);
	        } else {
	            throw new Error(str);
	        }
	    },
	setInput:function (input) {
	        this._input = input;
	        this._more = this._less = this.done = false;
	        this.yylineno = this.yyleng = 0;
	        this.yytext = this.matched = this.match = '';
	        this.conditionStack = ['INITIAL'];
	        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
	        if (this.options.ranges) this.yylloc.range = [0,0];
	        this.offset = 0;
	        return this;
	    },
	input:function () {
	        var ch = this._input[0];
	        this.yytext += ch;
	        this.yyleng++;
	        this.offset++;
	        this.match += ch;
	        this.matched += ch;
	        var lines = ch.match(/(?:\r\n?|\n).*/g);
	        if (lines) {
	            this.yylineno++;
	            this.yylloc.last_line++;
	        } else {
	            this.yylloc.last_column++;
	        }
	        if (this.options.ranges) this.yylloc.range[1]++;
	
	        this._input = this._input.slice(1);
	        return ch;
	    },
	unput:function (ch) {
	        var len = ch.length;
	        var lines = ch.split(/(?:\r\n?|\n)/g);
	
	        this._input = ch + this._input;
	        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
	        //this.yyleng -= len;
	        this.offset -= len;
	        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
	        this.match = this.match.substr(0, this.match.length-1);
	        this.matched = this.matched.substr(0, this.matched.length-1);
	
	        if (lines.length-1) this.yylineno -= lines.length-1;
	        var r = this.yylloc.range;
	
	        this.yylloc = {first_line: this.yylloc.first_line,
	          last_line: this.yylineno+1,
	          first_column: this.yylloc.first_column,
	          last_column: lines ?
	              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
	              this.yylloc.first_column - len
	          };
	
	        if (this.options.ranges) {
	            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
	        }
	        return this;
	    },
	more:function () {
	        this._more = true;
	        return this;
	    },
	less:function (n) {
	        this.unput(this.match.slice(n));
	    },
	pastInput:function () {
	        var past = this.matched.substr(0, this.matched.length - this.match.length);
	        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
	    },
	upcomingInput:function () {
	        var next = this.match;
	        if (next.length < 20) {
	            next += this._input.substr(0, 20-next.length);
	        }
	        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
	    },
	showPosition:function () {
	        var pre = this.pastInput();
	        var c = new Array(pre.length + 1).join("-");
	        return pre + this.upcomingInput() + "\n" + c+"^";
	    },
	next:function () {
	        if (this.done) {
	            return this.EOF;
	        }
	        if (!this._input) this.done = true;
	
	        var token,
	            match,
	            tempMatch,
	            index,
	            col,
	            lines;
	        if (!this._more) {
	            this.yytext = '';
	            this.match = '';
	        }
	        var rules = this._currentRules();
	        for (var i=0;i < rules.length; i++) {
	            tempMatch = this._input.match(this.rules[rules[i]]);
	            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
	                match = tempMatch;
	                index = i;
	                if (!this.options.flex) break;
	            }
	        }
	        if (match) {
	            lines = match[0].match(/(?:\r\n?|\n).*/g);
	            if (lines) this.yylineno += lines.length;
	            this.yylloc = {first_line: this.yylloc.last_line,
	                           last_line: this.yylineno+1,
	                           first_column: this.yylloc.last_column,
	                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
	            this.yytext += match[0];
	            this.match += match[0];
	            this.matches = match;
	            this.yyleng = this.yytext.length;
	            if (this.options.ranges) {
	                this.yylloc.range = [this.offset, this.offset += this.yyleng];
	            }
	            this._more = false;
	            this._input = this._input.slice(match[0].length);
	            this.matched += match[0];
	            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
	            if (this.done && this._input) this.done = false;
	            if (token) return token;
	            else return;
	        }
	        if (this._input === "") {
	            return this.EOF;
	        } else {
	            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
	                    {text: "", token: null, line: this.yylineno});
	        }
	    },
	lex:function lex() {
	        var r = this.next();
	        if (typeof r !== 'undefined') {
	            return r;
	        } else {
	            return this.lex();
	        }
	    },
	begin:function begin(condition) {
	        this.conditionStack.push(condition);
	    },
	popState:function popState() {
	        return this.conditionStack.pop();
	    },
	_currentRules:function _currentRules() {
	        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
	    },
	topState:function () {
	        return this.conditionStack[this.conditionStack.length-2];
	    },
	pushState:function begin(condition) {
	        this.begin(condition);
	    }});
	lexer.options = {};
	lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
	
	var YYSTATE=YY_START
	switch($avoiding_name_collisions) {
	case 0: yy_.yytext = "\\"; return 14; 
	break;
	case 1:
	                                   if(yy_.yytext.slice(-1) !== "\\") this.begin("mu");
	                                   if(yy_.yytext.slice(-1) === "\\") yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-1), this.begin("emu");
	                                   if(yy_.yytext) return 14;
	                                 
	break;
	case 2: return 14; 
	break;
	case 3:
	                                   if(yy_.yytext.slice(-1) !== "\\") this.popState();
	                                   if(yy_.yytext.slice(-1) === "\\") yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-1);
	                                   return 14;
	                                 
	break;
	case 4: yy_.yytext = yy_.yytext.substr(0, yy_.yyleng-4); this.popState(); return 15; 
	break;
	case 5: return 25; 
	break;
	case 6: return 16; 
	break;
	case 7: return 20; 
	break;
	case 8: return 19; 
	break;
	case 9: return 19; 
	break;
	case 10: return 23; 
	break;
	case 11: return 22; 
	break;
	case 12: this.popState(); this.begin('com'); 
	break;
	case 13: yy_.yytext = yy_.yytext.substr(3,yy_.yyleng-5); this.popState(); return 15; 
	break;
	case 14: return 22; 
	break;
	case 15: return 37; 
	break;
	case 16: return 36; 
	break;
	case 17: return 36; 
	break;
	case 18: return 40; 
	break;
	case 19: /*ignore whitespace*/ 
	break;
	case 20: this.popState(); return 24; 
	break;
	case 21: this.popState(); return 18; 
	break;
	case 22: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2).replace(/\\"/g,'"'); return 31; 
	break;
	case 23: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2).replace(/\\'/g,"'"); return 31; 
	break;
	case 24: return 38; 
	break;
	case 25: return 33; 
	break;
	case 26: return 33; 
	break;
	case 27: return 32; 
	break;
	case 28: return 36; 
	break;
	case 29: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 36; 
	break;
	case 30: return 'INVALID'; 
	break;
	case 31: return 5; 
	break;
	}
	};
	lexer.rules = [/^(?:\\\\(?=(\{\{)))/,/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|$)))/,/^(?:[\s\S]*?--\}\})/,/^(?:\{\{>)/,/^(?:\{\{#)/,/^(?:\{\{\/)/,/^(?:\{\{\^)/,/^(?:\{\{\s*else\b)/,/^(?:\{\{\{)/,/^(?:\{\{&)/,/^(?:\{\{!--)/,/^(?:\{\{![\s\S]*?\}\})/,/^(?:\{\{)/,/^(?:=)/,/^(?:\.(?=[}\/ ]))/,/^(?:\.\.)/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}\}\})/,/^(?:\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=[}\s]))/,/^(?:false(?=[}\s]))/,/^(?:-?[0-9]+(?=[}\s]))/,/^(?:[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.]))/,/^(?:\[[^\]]*\])/,/^(?:.)/,/^(?:$)/];
	lexer.conditions = {"mu":{"rules":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"inclusive":false},"emu":{"rules":[3],"inclusive":false},"com":{"rules":[4],"inclusive":false},"INITIAL":{"rules":[0,1,2,31],"inclusive":true}};
	return lexer;})()
	parser.lexer = lexer;
	function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
	return new Parser;
	})();
	// END(BROWSER)
	
	module.exports = handlebars;


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright 2010-2012 Mikeal Rogers
	//
	//    Licensed under the Apache License, Version 2.0 (the "License");
	//    you may not use this file except in compliance with the License.
	//    You may obtain a copy of the License at
	//
	//        http://www.apache.org/licenses/LICENSE-2.0
	//
	//    Unless required by applicable law or agreed to in writing, software
	//    distributed under the License is distributed on an "AS IS" BASIS,
	//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	//    See the License for the specific language governing permissions and
	//    limitations under the License.
	
	var cookies = __webpack_require__(94)
	  , copy = __webpack_require__(95)
	  , Request = __webpack_require__(88)
	  , util = __webpack_require__(102)
	  ;
	
	
	
	// organize params for patch, post, put, head, del
	function initParams(uri, options, callback) {
	  var opts;
	  if ((typeof options === 'function') && !callback) callback = options
	  if (options && typeof options === 'object') {
	    opts = util._extend({}, options);
	    opts.uri = uri
	  } else if (typeof uri === 'string') {
	    opts = {uri:uri}
	  } else {
	    opts = util._extend({}, uri);
	    uri = opts.uri
	  }
	
	  return { uri: uri, options: opts, callback: callback }
	}
	
	function request (uri, options, callback) {
	  var opts;
	  if (typeof uri === 'undefined') throw new Error('undefined is not a valid uri or options object.')
	  if ((typeof options === 'function') && !callback) callback = options
	  if (options && typeof options === 'object') {
	    opts = util._extend({}, options);
	    opts.uri = uri
	  } else if (typeof uri === 'string') {
	    opts = {uri:uri}
	  } else {
	    opts = util._extend({}, uri);
	  }
	
	  if (callback) opts.callback = callback
	  var r = new Request(opts)
	  return r
	}
	
	module.exports = request
	
	request.Request = Request;
	
	request.debug = process.env.NODE_DEBUG && /request/.test(process.env.NODE_DEBUG)
	
	request.initParams = initParams
	
	request.defaults = function (options, requester) {
	  var def = function (method) {
	    var d = function (uri, opts, callback) {
	      var params = initParams(uri, opts, callback)
	      for (var i in options) {
	        if (params.options[i] === undefined) params.options[i] = options[i]
	      }
	      if(typeof requester === 'function') {
	        if(method === request) {
	          method = requester
	        } else {
	          params.options._requester = requester
	        }
	      }
	      return method(params.options, params.callback)
	    }
	    return d
	  }
	  var de = def(request)
	  de.get = def(request.get)
	  de.patch = def(request.patch)
	  de.post = def(request.post)
	  de.put = def(request.put)
	  de.head = def(request.head)
	  de.del = def(request.del)
	  de.cookie = def(request.cookie)
	  de.jar = request.jar
	  return de
	}
	
	function requester(params) {
	  if(typeof params.options._requester === 'function') {
	    return params.options._requester
	  } else {
	    return request
	  }
	}
	
	request.forever = function (agentOptions, optionsArg) {
	  var options = {}
	  if (optionsArg) {
	    for (var option in optionsArg) {
	      options[option] = optionsArg[option]
	    }
	  }
	  if (agentOptions) options.agentOptions = agentOptions
	  options.forever = true
	  return request.defaults(options)
	}
	
	request.get = function (uri, options, callback) {
	  var params = initParams(uri, options, callback)
	  params.options.method = 'GET'
	  return requester(params)(params.uri || null, params.options, params.callback)
	}
	request.post = function (uri, options, callback) {
	  var params = initParams(uri, options, callback)
	  params.options.method = 'POST'
	  return requester(params)(params.uri || null, params.options, params.callback)
	}
	request.put = function (uri, options, callback) {
	  var params = initParams(uri, options, callback)
	  params.options.method = 'PUT'
	  return requester(params)(params.uri || null, params.options, params.callback)
	}
	request.patch = function (uri, options, callback) {
	  var params = initParams(uri, options, callback)
	  params.options.method = 'PATCH'
	  return requester(params)(params.uri || null, params.options, params.callback)
	}
	request.head = function (uri, options, callback) {
	  var params = initParams(uri, options, callback)
	  params.options.method = 'HEAD'
	  if (params.options.body ||
	      params.options.requestBodyStream ||
	      (params.options.json && typeof params.options.json !== 'boolean') ||
	      params.options.multipart) {
	    throw new Error("HTTP HEAD requests MUST NOT include a request body.")
	  }
	
	  return requester(params)(params.uri || null, params.options, params.callback)
	}
	request.del = function (uri, options, callback) {
	  var params = initParams(uri, options, callback)
	  params.options.method = 'DELETE'
	  return requester(params)(params.uri || null, params.options, params.callback)
	}
	request.jar = function () {
	  return cookies.jar();
	}
	request.cookie = function (str) {
	  return cookies.parse(str);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* DOM Level2 Events implemented as described here:
	 *
	 * http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html
	 *
	 */
	var core = __webpack_require__(57).dom.level2.core,
	    utils = __webpack_require__(59);
	
	// modify cloned instance for more info check: https://github.com/tmpvar/jsdom/issues/325
	core = Object.create(core);
	
	var events = {};
	
	events.EventException = function() {
	    if (arguments.length > 0) {
	        this._code = arguments[0];
	    } else {
	        this._code = 0;
	    }
	    if (arguments.length > 1) {
	        this._message = arguments[1];
	    } else {
	        this._message = "Unspecified event type";
	    }
	    Error.call(this, this._message);
	    if (Error.captureStackTrace) {
	        Error.captureStackTrace(this, events.EventException);
	    }
	};
	events.EventException.prototype = {
	  UNSPECIFIED_EVENT_TYPE_ERR : 0,
	  get code() { return this._code;}
	};
	events.EventException.prototype.__proto__ = Error.prototype;
	
	events.Event = function(eventType) {
	    this._eventType = eventType;
	    this._type = null;
	    this._bubbles = null;
	    this._cancelable = null;
	    this._target = null;
	    this._currentTarget = null;
	    this._eventPhase = null;
	    this._timeStamp = null;
	    this._preventDefault = false;
	    this._stopPropagation = false;
	};
	events.Event.prototype = {
	    initEvent: function(type, bubbles, cancelable) {
	        this._type = type;
	        this._bubbles = bubbles;
	        this._cancelable = cancelable;
	    },
	    preventDefault: function() {
	        if (this._cancelable) {
	            this._preventDefault = true;
	        }
	    },
	    stopPropagation: function() {
	        this._stopPropagation = true;
	    },
	    CAPTURING_PHASE : 1,
	    AT_TARGET       : 2,
	    BUBBLING_PHASE  : 3,
	    get eventType() { return this._eventType; },
	    get type() { return this._type; },
	    get bubbles() { return this._bubbles; },
	    get cancelable() { return this._cancelable; },
	    get target() { return this._target; },
	    get currentTarget() { return this._currentTarget; },
	    get eventPhase() { return this._eventPhase; },
	    get timeStamp() { return this._timeStamp; }
	};
	
	
	events.UIEvent = function(eventType) {
	    events.Event.call(this, eventType);
	    this.view = null;
	    this.detail = null;
	};
	events.UIEvent.prototype = {
	    initUIEvent: function(type, bubbles, cancelable, view, detail) {
	        this.initEvent(type, bubbles, cancelable);
	        this.view = view;
	        this.detail = detail;
	    },
	};
	events.UIEvent.prototype.__proto__ = events.Event.prototype;
	
	
	events.MouseEvent = function(eventType) {
	    events.UIEvent.call(this, eventType);
	    this.screenX = null;
	    this.screenY = null;
	    this.clientX = null;
	    this.clientY = null;
	    this.ctrlKey = null;
	    this.shiftKey = null;
	    this.altKey = null;
	    this.metaKey = null;
	    this.button = null;
	    this.relatedTarget = null;
	};
	events.MouseEvent.prototype = {
	    initMouseEvent:   function(type,
	                               bubbles,
	                               cancelable,
	                               view,
	                               detail,
	                               screenX,
	                               screenY,
	                               clientX,
	                               clientY,
	                               ctrlKey,
	                               altKey,
	                               shiftKey,
	                               metaKey,
	                               button,
	                               relatedTarget) {
	        this.initUIEvent(type, bubbles, cancelable, view, detail);
	        this.screenX  = screenX
	        this.screenY  = screenY
	        this.clientX  = clientX
	        this.clientY  = clientY
	        this.ctrlKey  = ctrlKey
	        this.shiftKey  = shiftKey
	        this.altKey  = altKey
	        this.metaKey  = metaKey
	        this.button  = button
	        this.relatedTarget  = relatedTarget
	    }
	};
	events.MouseEvent.prototype.__proto__ = events.UIEvent.prototype;
	
	
	events.MutationEvent = function(eventType) {
	    events.Event.call(this, eventType);
	    this.relatedNode = null;
	    this.prevValue = null;
	    this.newValue = null;
	    this.attrName = null;
	    this.attrChange = null;
	};
	events.MutationEvent.prototype = {
	    initMutationEvent:   function(type,
	                                  bubbles,
	                                  cancelable,
	                                  relatedNode,
	                                  prevValue,
	                                  newValue,
	                                  attrName,
	                                  attrChange) {
	        this.initEvent(type, bubbles, cancelable);
	        this.relatedNode = relatedNode;
	        this.prevValue = prevValue;
	        this.newValue = newValue;
	        this.attrName = attrName;
	        this.attrChange = attrChange;
	    },
	    MODIFICATION : 1,
	    ADDITION     : 2,
	    REMOVAL      : 3
	};
	events.MutationEvent.prototype.__proto__ = events.Event.prototype;
	
	events.EventTarget = function() {};
	
	events.EventTarget.getListeners = function getListeners(target, type, capturing) {
	    var listeners = target._listeners
	            && target._listeners[type]
	            && target._listeners[type][capturing] || [];
	    if (!capturing) {
	        var traditionalHandler = target['on' + type];
	        if (traditionalHandler) {
	            var implementation = (target._ownerDocument ? target._ownerDocument.implementation
	                                                        : target.document.implementation);
	
	            if (implementation.hasFeature('ProcessExternalResources', 'script')) {
	                listeners.push(traditionalHandler);
	            }
	        }
	    }
	    return listeners;
	};
	
	events.EventTarget.dispatch = function dispatch(event, iterator, capturing) {
	    var listeners,
	        currentListener,
	        target = iterator();
	
	    while (target && !event._stopPropagation) {
	        listeners = events.EventTarget.getListeners(target, event._type, capturing);
	        currentListener = listeners.length;
	        while (currentListener--) {
	            event._currentTarget = target;
	            try {
	              listeners[currentListener].call(target, event);
	            } catch (e) {
	              target.raise(
	                'error', "Dispatching event '" + event._type + "' failed",
	                {error: e, event: event}
	              );
	            }
	        }
	        target = iterator();
	    }
	    return !event._stopPropagation;
	};
	
	events.EventTarget.forwardIterator = function forwardIterator(list) {
	  var i = 0, len = list.length;
	  return function iterator() { return i < len ? list[i++] : null };
	};
	
	events.EventTarget.backwardIterator = function backwardIterator(list) {
	  var i = list.length;
	  return function iterator() { return i >=0 ? list[--i] : null };
	};
	
	events.EventTarget.singleIterator = function singleIterator(obj) {
	  var i = 1;
	  return function iterator() { return i-- ? obj : null };
	};
	
	events.EventTarget.prototype = {
	    addEventListener: function(type, listener, capturing) {
	        this._listeners = this._listeners || {};
	        var listeners = this._listeners[type] || {};
	        capturing = (capturing === true);
	        var capturingListeners = listeners[capturing] || [];
	        for (var i=0; i < capturingListeners.length; i++) {
	            if (capturingListeners[i] === listener) {
	                return;
	            }
	        }
	        capturingListeners.push(listener);
	        listeners[capturing] = capturingListeners;
	        this._listeners[type] = listeners;
	    },
	
	    removeEventListener: function(type, listener, capturing) {
	        var listeners  = this._listeners && this._listeners[type];
	        if (!listeners) return;
	        var capturingListeners = listeners[(capturing === true)];
	        if (!capturingListeners) return;
	        for (var i=0; i < capturingListeners.length; i++) {
	            if (capturingListeners[i] === listener) {
	                capturingListeners.splice(i, 1);
	                return;
	            }
	        }
	    },
	
	    dispatchEvent: function(event) {
	        if (event == null) {
	            throw new events.EventException(0, "Null event");
	        }
	        if (event._type == null || event._type == "") {
	            throw new events.EventException(0, "Uninitialized event");
	        }
	
	        var targetList = [];
	
	        event._target = this;
	
	        //per the spec we gather the list of targets first to ensure
	        //against dom modifications during actual event dispatch
	        var target = this,
	            targetParent = target._parentNode;
	        while (targetParent) {
	            targetList.push(targetParent);
	            target = targetParent;
	            targetParent = target._parentNode;
	        }
	        targetParent = target._parentWindow;
	        if (targetParent) {
	            targetList.push(targetParent);
	        }
	
	        var iterator = events.EventTarget.backwardIterator(targetList);
	
	        event._eventPhase = event.CAPTURING_PHASE;
	        if (!events.EventTarget.dispatch(event, iterator, true)) return event._preventDefault;
	
	        iterator = events.EventTarget.singleIterator(event._target);
	        event._eventPhase = event.AT_TARGET;
	        if (!events.EventTarget.dispatch(event, iterator, false)) return event._preventDefault;
	
	        if (event._bubbles && !event._stopPropagation) {
	            var i = 0;
	            iterator = events.EventTarget.forwardIterator(targetList);
	            event._eventPhase = event.BUBBLING_PHASE;
	            events.EventTarget.dispatch(event, iterator, false);
	        }
	
	        return event._preventDefault;
	    }
	
	};
	
	
	core.Node.prototype.__proto__ = events.EventTarget.prototype;
	
	function getDocument(el) {
	  return el.nodeType == core.Node.DOCUMENT_NODE ? el : el._ownerDocument;
	}
	
	function mutationEventsEnabled(el) {
	  return el.nodeType != core.Node.ATTRIBUTE_NODE &&
	         getDocument(el).implementation.hasFeature('MutationEvents');
	}
	
	utils.intercept(core.Node, 'insertBefore', function(_super, args, newChild, refChild) {
	  var ret = _super.apply(this, args);
	  if (mutationEventsEnabled(this)) {
	    var doc = getDocument(this),
	        ev = doc.createEvent("MutationEvents");
	
	    ev.initMutationEvent("DOMNodeInserted", true, false, this, null, null, null, null);
	    newChild.dispatchEvent(ev);
	    if (this.nodeType == core.Node.DOCUMENT_NODE || this._attachedToDocument) {
	      ev = doc.createEvent("MutationEvents");
	      ev.initMutationEvent("DOMNodeInsertedIntoDocument", false, false, null, null, null, null, null);
	      core.visitTree(newChild, function(el) {
	        if (el.nodeType == core.Node.ELEMENT_NODE) {
	          el.dispatchEvent(ev);
	          el._attachedToDocument = true;
	        }
	      });
	    }
	  }
	  return ret;
	});
	
	utils.intercept(core.Node, 'removeChild', function (_super, args, oldChild) {
	  if (mutationEventsEnabled(this)) {
	    var doc = getDocument(this),
	        ev = doc.createEvent("MutationEvents");
	
	    ev.initMutationEvent("DOMNodeRemoved", true, false, this, null, null, null, null);
	    oldChild.dispatchEvent(ev);
	
	    ev = doc.createEvent("MutationEvents");
	    ev.initMutationEvent("DOMNodeRemovedFromDocument", false, false, null, null, null, null, null);
	    core.visitTree(oldChild, function(el) {
	      if (el.nodeType == core.Node.ELEMENT_NODE) {
	        el.dispatchEvent(ev);
	        el._attachedToDocument = false;
	      }
	    });
	  }
	  return _super.apply(this, args);
	});
	
	function dispatchAttrEvent(change) {
	  return function(_super, args, node) {
	    var target = this._parentNode,
	        prev = _super.apply(this, args);
	
	    if (mutationEventsEnabled(target)) {
	      var doc = target._ownerDocument,
	          attrChange = events.MutationEvent.prototype[change],
	          attrName = prev && prev.name || node.name,
	          prevVal = prev && prev.value || null,
	          newVal = change == 'ADDITION' ? node.value : null,
	          ev;
	
	      if (!newVal || newVal != prevVal) {
	        ev = doc.createEvent("MutationEvents");
	        ev.initMutationEvent("DOMAttrModified", true, false, target, prevVal, newVal, attrName, attrChange);
	        target.dispatchEvent(ev);
	      }
	    }
	    return prev;
	  }
	}
	
	utils.intercept(core.AttrNodeMap, 'removeNamedItem', dispatchAttrEvent('REMOVAL'));
	utils.intercept(core.AttrNodeMap, 'setNamedItem', dispatchAttrEvent('ADDITION'));
	
	core.CharacterData.prototype.__defineGetter__("_nodeValue", function() {
	  return this.__nodeValue;
	});
	core.CharacterData.prototype.__defineSetter__("_nodeValue", function(value) {
	  var oldValue = this.__nodeValue;
	  this.__nodeValue = value;
	  if (this._ownerDocument && this._parentNode && mutationEventsEnabled(this)) {
	    var ev = this._ownerDocument.createEvent("MutationEvents")
	    ev.initMutationEvent("DOMCharacterDataModified", true, false, this, oldValue, value, null, null);
	    this.dispatchEvent(ev);
	  }
	});
	
	core.Document.prototype.createEvent = function(eventType) {
	    switch (eventType) {
	        case "MutationEvents": return new events.MutationEvent(eventType);
	        case "UIEvents": return new events.UIEvent(eventType);
	        case "MouseEvents": return new events.MouseEvent(eventType);
	        case "HTMLEvents": return new events.Event(eventType);
	    }
	    return new events.Event(eventType);
	};
	
	exports.dom =
	{
	  level2 : {
	    core   : core,
	    events : events
	  }
	};
	


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	exports.dom = {
	  level2 : {
	    core   : __webpack_require__(57).dom.level2.core,
	    events : __webpack_require__(63).dom.level2.events,
	    html   : __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./html\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).dom.level2.html
	  }
	};

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	var core          = __webpack_require__(73).dom.level2.core,
	    HtmlToDom     = __webpack_require__(70).HtmlToDom,
	    domToHtml     = __webpack_require__(71).domToHtml,
	    htmlencoding  = __webpack_require__(72),
	    HTMLEncode    = htmlencoding.HTMLEncode,
	    HTMLDecode    = htmlencoding.HTMLDecode;
	
	// modify cloned instance for more info check: https://github.com/tmpvar/jsdom/issues/325
	core = Object.create(core);
	
	/*
	  valuetype DOMString sequence<unsigned short>;
	  typedef   unsigned long long DOMTimeStamp;
	  typedef   any DOMUserData;
	  typedef   Object DOMObject;
	
	*/
	// ExceptionCode
	core.VALIDATION_ERR                 = 16;
	core.TYPE_MISMATCH_ERR              = 17;
	
	/*
	  // Introduced in DOM Level 3:
	  interface NameList {
	    DOMString          getName(in unsigned long index);
	    DOMString          getNamespaceURI(in unsigned long index);
	    readonly attribute unsigned long   length;
	    boolean            contains(in DOMString str);
	    boolean            containsNS(in DOMString namespaceURI,
	                                  in DOMString name);
	  };
	
	  // Introduced in DOM Level 3:
	  interface DOMImplementationList {
	    DOMImplementation  item(in unsigned long index);
	    readonly attribute unsigned long   length;
	  };
	
	  // Introduced in DOM Level 3:
	  interface DOMImplementationSource {
	    DOMImplementation  getDOMImplementation(in DOMString features);
	    DOMImplementationList getDOMImplementationList(in DOMString features);
	  };
	*/
	
	
	core.DOMImplementation.prototype.getFeature = function(feature, version)  {
	
	};
	
	/*
	  interface Node {
	    // Modified in DOM Level 3:
	    Node               insertBefore(in Node newChild,
	                                    in Node refChild)
	                                        raises(DOMException);
	    // Modified in DOM Level 3:
	    Node               replaceChild(in Node newChild,
	                                    in Node oldChild)
	                                        raises(DOMException);
	    // Modified in DOM Level 3:
	    Node               removeChild(in Node oldChild)
	                                        raises(DOMException);
	    // Modified in DOM Level 3:
	    Node               appendChild(in Node newChild)
	                                        raises(DOMException);
	    boolean            hasChildNodes();
	    Node               cloneNode(in boolean deep);
	    // Modified in DOM Level 3:
	    void               normalize();
	    // Introduced in DOM Level 3:
	    readonly attribute DOMString       baseURI;
	*/
	
	// Compare Document Position
	var DOCUMENT_POSITION_DISCONNECTED = core.Node.prototype.DOCUMENT_POSITION_DISCONNECTED = 0x01;
	var DOCUMENT_POSITION_PRECEDING    = core.Node.prototype.DOCUMENT_POSITION_PRECEDING    = 0x02;
	var DOCUMENT_POSITION_FOLLOWING    = core.Node.prototype.DOCUMENT_POSITION_FOLLOWING    = 0x04;
	var DOCUMENT_POSITION_CONTAINS     = core.Node.prototype.DOCUMENT_POSITION_CONTAINS     = 0x08;
	var DOCUMENT_POSITION_CONTAINED_BY = core.Node.prototype.DOCUMENT_POSITION_CONTAINED_BY = 0x10;
	var DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = core.Node.prototype.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;
	var DOCUMENT_TYPE_NODE = core.Node.prototype.DOCUMENT_TYPE_NODE;
	
	core.Node.prototype.compareDocumentPosition = function compareDocumentPosition( otherNode ) {
	  if( !(otherNode instanceof core.Node) ) {
	    throw Error("Comparing position against non-Node values is not allowed")
	  }
	  var thisOwner, otherOwner;
	
	  if( this.nodeType === this.DOCUMENT_NODE)
	    thisOwner = this
	  else
	    thisOwner = this.ownerDocument
	
	  if( otherNode.nodeType === this.DOCUMENT_NODE)
	    otherOwner = otherNode
	  else
	    otherOwner = otherNode.ownerDocument
	
	  if( this === otherNode ) return 0
	  if( this === otherNode.ownerDocument ) return DOCUMENT_POSITION_FOLLOWING + DOCUMENT_POSITION_CONTAINED_BY
	  if( this.ownerDocument === otherNode ) return DOCUMENT_POSITION_PRECEDING + DOCUMENT_POSITION_CONTAINS
	  if( thisOwner !== otherOwner ) return DOCUMENT_POSITION_DISCONNECTED
	
	  // Text nodes for attributes does not have a _parentNode. So we need to find them as attribute child.
	  if( this.nodeType === this.ATTRIBUTE_NODE && this._childNodes && this._childNodes.indexOf(otherNode) !== -1)
	    return DOCUMENT_POSITION_FOLLOWING + DOCUMENT_POSITION_CONTAINED_BY
	
	  if( otherNode.nodeType === this.ATTRIBUTE_NODE && otherNode._childNodes && otherNode._childNodes.indexOf(this) !== -1)
	    return DOCUMENT_POSITION_PRECEDING + DOCUMENT_POSITION_CONTAINS
	
	  var point = this
	  var parents = [ ]
	  var previous = null
	  while( point ) {
	    if( point == otherNode ) return DOCUMENT_POSITION_PRECEDING + DOCUMENT_POSITION_CONTAINS
	    parents.push( point )
	    point = point._parentNode
	  }
	  point = otherNode
	  previous = null
	  while( point ) {
	    if( point == this ) return DOCUMENT_POSITION_FOLLOWING + DOCUMENT_POSITION_CONTAINED_BY
	    var location_index = parents.indexOf( point )
	    if( location_index !== -1) {
	     var smallest_common_ancestor = parents[ location_index ]
	     var this_index = smallest_common_ancestor._childNodes.indexOf( parents[location_index - 1] )
	     var other_index = smallest_common_ancestor._childNodes.indexOf( previous )
	     if( this_index > other_index ) {
	           return DOCUMENT_POSITION_PRECEDING
	     }
	     else {
	       return DOCUMENT_POSITION_FOLLOWING
	     }
	    }
	    previous = point
	    point = point._parentNode
	  }
	  return DOCUMENT_POSITION_DISCONNECTED
	};
	/*
	    // Introduced in DOM Level 3:
	             attribute DOMString       textContent;
	                                        // raises(DOMException) on setting
	                                        // raises(DOMException) on retrieval
	*/
	core.Node.prototype.isSameNode = function(other) {
	  return (other === this);
	};
	
	core.Node.prototype.__defineGetter__('textContent', function() {
	  if (this.nodeType === this.TEXT_NODE || this.nodeType === this.COMMENT_NODE || this.nodeType === this.ATTRIBUTE_NODE || this.nodeType === this.CDATA_SECTION_NODE) {
	    return this.nodeValue;
	  } else if (this.nodeType === this.ELEMENT_NODE || this.nodeType === this.DOCUMENT_FRAGMENT_NODE) {
	    var out = '';
	    for (var i = 0 ; i < this.childNodes.length ; i += 1) {
	      out += this.childNodes[i].textContent || '';
	    }
	    return out;
	  } else {
	    return null;
	  }
	});
	
	core.Node.prototype.__defineSetter__('textContent', function(txt) {
	  for (var i = this.childNodes.length; --i >=0;) {
	    this.removeChild(this.childNodes.item(i));
	  }
	  if (txt !== "" && txt != null) {
	    this.appendChild(this._ownerDocument.createTextNode(txt));
	  }
	  return txt;
	});
	
	/*
	    // Introduced in DOM Level 3:
	    DOMString          lookupPrefix(in DOMString namespaceURI);
	    // Introduced in DOM Level 3:
	    boolean            isDefaultNamespace(in DOMString namespaceURI);
	    // Introduced in DOM Level 3:
	    DOMString          lookupNamespaceURI(in DOMString prefix);
	*/
	// Introduced in DOM Level 3:
	core.Node.prototype.isEqualNode = function(other) {
	  var self = this;
	  var diffValues = function() {
	    for (var i=0;i<arguments.length;i++) {
	      var k = arguments[i];
	      if (self[k] != other[k]) return(true);
	    }
	    return(false);
	  };
	  var diffNamedNodeMaps = function(snnm, onnm) {
	    if ((snnm == null) && (onnm == null)) return(false);
	    if ((snnm == null) || (onnm == null)) return(true);
	    if (snnm.length != onnm.length) return(true);
	    var js = [];
	    for (var j=0;j<onnm.length;j++) { js[j] = j }
	    for (var i=0;i<snnm.length;i++) {
	      var found=false;
	      for (var j=0;j<js.length;j++) {
	        if (snnm.item(i).isEqualNode(onnm.item(js[j]))) {
	          found = true;
	          // in order to be 100% accurate, we remove index values from consideration once they've matched
	          js.splice(j,1);
	          break;
	        }
	      }
	      if (!found) return(true);
	    }
	    return(false);
	  };
	  var diffNodeLists = function(snl, onl) {
	    if ((snl == null) && (onl == null)) return(false);
	    if ((snl == null) || (onl == null)) return(true);
	    if (snl.length != onl.length) return(true);
	    for (var i=0;i<snl.length;i++) {
	      if (!snl.item(i).isEqualNode(onl.item(i))) return(true);
	    }
	    return(false);
	  };
	  if (!other) return(false);
	  if (this.isSameNode(other)) return(true);
	  if (this.nodeType != other.nodeType) return(false);
	  if (diffValues('nodeName', 'localName', 'namespaceURI', 'prefix', 'nodeValue')) return(false);
	  if (diffNamedNodeMaps(this.attributes, other.attributes)) return(false);
	  if (diffNodeLists(this.childNodes, other.childNodes)) return(false);
	  if (this.nodeType == DOCUMENT_TYPE_NODE) {
	    if (diffValues('publicId', 'systemId', 'internalSubset')) return(false);
	    if (diffNamedNodeMaps(this.entities, other.entities)) return(false);
	    if (diffNamedNodeMaps(this.notations, other.notations)) return(false);
	  }
	  return (true);
	};
	/*
	    // Introduced in DOM Level 3:
	    DOMObject          getFeature(in DOMString feature,
	                                  in DOMString version);
	*/
	// Introduced in DOM Level 3:
	core.Node.prototype.setUserData = function(key, data, handler) {
	  var r = this[key] || null;
	  this[key] = data;
	  return(r);
	};
	
	// Introduced in DOM Level 3:
	core.Node.prototype.getUserData = function(key) {
	  var r = this[key] || null;
	  return(r);
	};
	/*
	  interface NodeList {
	    Node               item(in unsigned long index);
	    readonly attribute unsigned long   length;
	  };
	
	  interface NamedNodeMap {
	    Node               getNamedItem(in DOMString name);
	    Node               setNamedItem(in Node arg)
	                                        raises(DOMException);
	    Node               removeNamedItem(in DOMString name)
	                                        raises(DOMException);
	    Node               item(in unsigned long index);
	    readonly attribute unsigned long   length;
	    // Introduced in DOM Level 2:
	    Node               getNamedItemNS(in DOMString namespaceURI,
	                                      in DOMString localName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    Node               setNamedItemNS(in Node arg)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    Node               removeNamedItemNS(in DOMString namespaceURI,
	                                         in DOMString localName)
	                                        raises(DOMException);
	  };
	
	  interface CharacterData : Node {
	             attribute DOMString       data;
	                                        // raises(DOMException) on setting
	                                        // raises(DOMException) on retrieval
	
	    readonly attribute unsigned long   length;
	    DOMString          substringData(in unsigned long offset,
	                                     in unsigned long count)
	                                        raises(DOMException);
	    void               appendData(in DOMString arg)
	                                        raises(DOMException);
	    void               insertData(in unsigned long offset,
	                                  in DOMString arg)
	                                        raises(DOMException);
	    void               deleteData(in unsigned long offset,
	                                  in unsigned long count)
	                                        raises(DOMException);
	    void               replaceData(in unsigned long offset,
	                                   in unsigned long count,
	                                   in DOMString arg)
	                                        raises(DOMException);
	  };
	
	  interface Attr : Node {
	    readonly attribute DOMString       name;
	    readonly attribute boolean         specified;
	             attribute DOMString       value;
	                                        // raises(DOMException) on setting
	
	    // Introduced in DOM Level 2:
	    readonly attribute Element         ownerElement;
	    // Introduced in DOM Level 3:
	    readonly attribute TypeInfo        schemaTypeInfo;
	
	*/
	    // Introduced in DOM Level 3:
	core.Attr.prototype.__defineGetter__('isId', function() {
	  return (this.name.toLowerCase() === 'id');
	});
	/*
	  };
	
	  interface Element : Node {
	    readonly attribute DOMString       tagName;
	    DOMString          getAttribute(in DOMString name);
	    void               setAttribute(in DOMString name,
	                                    in DOMString value)
	                                        raises(DOMException);
	    void               removeAttribute(in DOMString name)
	                                        raises(DOMException);
	    Attr               getAttributeNode(in DOMString name);
	    Attr               setAttributeNode(in Attr newAttr)
	                                        raises(DOMException);
	    Attr               removeAttributeNode(in Attr oldAttr)
	                                        raises(DOMException);
	    NodeList           getElementsByTagName(in DOMString name);
	    // Introduced in DOM Level 2:
	    DOMString          getAttributeNS(in DOMString namespaceURI,
	                                      in DOMString localName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    void               setAttributeNS(in DOMString namespaceURI,
	                                      in DOMString qualifiedName,
	                                      in DOMString value)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    void               removeAttributeNS(in DOMString namespaceURI,
	                                         in DOMString localName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    Attr               getAttributeNodeNS(in DOMString namespaceURI,
	                                          in DOMString localName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    Attr               setAttributeNodeNS(in Attr newAttr)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    NodeList           getElementsByTagNameNS(in DOMString namespaceURI,
	                                              in DOMString localName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    boolean            hasAttribute(in DOMString name);
	    // Introduced in DOM Level 2:
	    boolean            hasAttributeNS(in DOMString namespaceURI,
	                                      in DOMString localName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 3:
	    readonly attribute TypeInfo        schemaTypeInfo;
	    // Introduced in DOM Level 3:
	    void               setIdAttribute(in DOMString name,
	                                      in boolean isId)
	                                        raises(DOMException);
	    // Introduced in DOM Level 3:
	    void               setIdAttributeNS(in DOMString namespaceURI,
	                                        in DOMString localName,
	                                        in boolean isId)
	                                        raises(DOMException);
	    // Introduced in DOM Level 3:
	    void               setIdAttributeNode(in Attr idAttr,
	                                          in boolean isId)
	                                        raises(DOMException);
	  };
	
	  interface Text : CharacterData {
	    Text               splitText(in unsigned long offset)
	                                        raises(DOMException);
	    // Introduced in DOM Level 3:
	    readonly attribute boolean         isElementContentWhitespace;
	    // Introduced in DOM Level 3:
	    readonly attribute DOMString       wholeText;
	    // Introduced in DOM Level 3:
	    Text               replaceWholeText(in DOMString content)
	                                        raises(DOMException);
	  };
	
	  interface Comment : CharacterData {
	  };
	
	  // Introduced in DOM Level 3:
	  interface TypeInfo {
	    readonly attribute DOMString       typeName;
	    readonly attribute DOMString       typeNamespace;
	
	    // DerivationMethods
	    const unsigned long       DERIVATION_RESTRICTION         = 0x00000001;
	    const unsigned long       DERIVATION_EXTENSION           = 0x00000002;
	    const unsigned long       DERIVATION_UNION               = 0x00000004;
	    const unsigned long       DERIVATION_LIST                = 0x00000008;
	
	    boolean            isDerivedFrom(in DOMString typeNamespaceArg,
	                                     in DOMString typeNameArg,
	                                     in unsigned long derivationMethod);
	  };
	*/
	// Introduced in DOM Level 3:
	core.UserDataHandler = function() {};
	core.UserDataHandler.prototype.NODE_CLONED   = 1;
	core.UserDataHandler.prototype.NODE_IMPORTED = 2;
	core.UserDataHandler.prototype.NODE_DELETED  = 3;
	core.UserDataHandler.prototype.NODE_RENAMED  = 4;
	core.UserDataHandler.prototype.NODE_ADOPTED  = 5;
	core.UserDataHandler.prototype.handle = function(operation, key, data, src, dst) {};
	
	// Introduced in DOM Level 3:
	core.DOMError = function(severity, message, type, relatedException, relatedData, location) {
	  this._severity         = severity;
	  this._message          = message;
	  this._type             = type;
	  this._relatedException = relatedException;
	  this._relatedData      = relatedData;
	  this._location         = location;
	};
	core.DOMError.prototype = {};
	core.DOMError.prototype.SEVERITY_WARNING     = 1;
	core.DOMError.prototype.SEVERITY_ERROR       = 2;
	core.DOMError.prototype.SEVERITY_FATAL_ERROR = 3;
	core.DOMError.prototype.__defineGetter__('severity', function() {
	  return this._severity;
	});
	core.DOMError.prototype.__defineGetter__('message', function() {
	  return this._message;
	});
	core.DOMError.prototype.__defineGetter__('type', function() {
	  return this._type;
	});
	core.DOMError.prototype.__defineGetter__('relatedException', function() {
	  return this._relatedException;
	});
	core.DOMError.prototype.__defineGetter__('relatedData', function() {
	  return this._relatedData;
	});
	core.DOMError.prototype.__defineGetter__('location', function() {
	  return this._location;
	});
	
	/*
	  // Introduced in DOM Level 3:
	  interface DOMErrorHandler {
	    boolean            handleError(in DOMError error);
	  };
	
	  // Introduced in DOM Level 3:
	  interface DOMLocator {
	    readonly attribute long            lineNumber;
	    readonly attribute long            columnNumber;
	    readonly attribute long            byteOffset;
	    readonly attribute long            utf16Offset;
	    readonly attribute Node            relatedNode;
	    readonly attribute DOMString       uri;
	  };
	*/
	
	// Introduced in DOM Level 3:
	core.DOMConfiguration = function(){
	  var possibleParameterNames = {
	    'canonical-form': [false, true], // extra rules for true
	    'cdata-sections': [true, false],
	    'check-character-normalization': [false, true],
	    'comments': [true, false],
	    'datatype-normalization': [false, true],
	    'element-content-whitespace': [true, false],
	    'entities': [true, false],
	    // 'error-handler': [],
	    'infoset': [undefined, true, false], // extra rules for true
	    'namespaces': [true, false],
	    'namespace-declarations': [true, false], // only checked if namespaces is true
	    'normalize-characters': [false, true],
	    // 'schema-location': [],
	    // 'schema-type': [],
	    'split-cdata-sections': [true, false],
	    'validate': [false, true],
	    'validate-if-schema': [false, true],
	    'well-formed': [true, false]
	  }
	};
	
	core.DOMConfiguration.prototype = {
	  setParameter: function(name, value) {},
	  getParameter: function(name) {},
	  canSetParameter: function(name, value) {},
	  parameterNames: function() {}
	};
	
	//core.Document.prototype._domConfig = new core.DOMConfiguration();
	core.Document.prototype.__defineGetter__('domConfig', function() {
	  return this._domConfig || new core.DOMConfiguration();;
	});
	
	// Introduced in DOM Level 3:
	core.DOMStringList = function() {};
	
	core.DOMStringList.prototype = {
	  item: function() {},
	  length: function() {},
	  contains: function() {}
	};
	
	
	/*
	  interface CDATASection : Text {
	  };
	
	  interface DocumentType : Node {
	    readonly attribute DOMString       name;
	    readonly attribute NamedNodeMap    entities;
	    readonly attribute NamedNodeMap    notations;
	    // Introduced in DOM Level 2:
	    readonly attribute DOMString       publicId;
	    // Introduced in DOM Level 2:
	    readonly attribute DOMString       systemId;
	    // Introduced in DOM Level 2:
	    readonly attribute DOMString       internalSubset;
	  };
	
	  interface Notation : Node {
	    readonly attribute DOMString       publicId;
	    readonly attribute DOMString       systemId;
	  };
	
	  interface Entity : Node {
	    readonly attribute DOMString       publicId;
	    readonly attribute DOMString       systemId;
	    readonly attribute DOMString       notationName;
	    // Introduced in DOM Level 3:
	    readonly attribute DOMString       inputEncoding;
	    // Introduced in DOM Level 3:
	    readonly attribute DOMString       xmlEncoding;
	    // Introduced in DOM Level 3:
	    readonly attribute DOMString       xmlVersion;
	  };
	
	  interface EntityReference : Node {
	  };
	
	  interface ProcessingInstruction : Node {
	    readonly attribute DOMString       target;
	             attribute DOMString       data;
	                                        // raises(DOMException) on setting
	
	  };
	
	  interface DocumentFragment : Node {
	  };
	
	  interface Document : Node {
	    // Modified in DOM Level 3:
	    readonly attribute DocumentType    doctype;
	    readonly attribute DOMImplementation implementation;
	    readonly attribute Element         documentElement;
	    Element            createElement(in DOMString tagName)
	                                        raises(DOMException);
	    DocumentFragment   createDocumentFragment();
	    Text               createTextNode(in DOMString data);
	    Comment            createComment(in DOMString data);
	    CDATASection       createCDATASection(in DOMString data)
	                                        raises(DOMException);
	    ProcessingInstruction createProcessingInstruction(in DOMString target,
	                                                      in DOMString data)
	                                        raises(DOMException);
	    Attr               createAttribute(in DOMString name)
	                                        raises(DOMException);
	    EntityReference    createEntityReference(in DOMString name)
	                                        raises(DOMException);
	    NodeList           getElementsByTagName(in DOMString tagname);
	    // Introduced in DOM Level 2:
	    Node               importNode(in Node importedNode,
	                                  in boolean deep)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    Element            createElementNS(in DOMString namespaceURI,
	                                       in DOMString qualifiedName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    Attr               createAttributeNS(in DOMString namespaceURI,
	                                         in DOMString qualifiedName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    NodeList           getElementsByTagNameNS(in DOMString namespaceURI,
	                                              in DOMString localName);
	    // Introduced in DOM Level 2:
	    Element            getElementById(in DOMString elementId);
	*/
	
	// Introduced in DOM Level 3:
	core.Document.prototype._inputEncoding = null;
	core.Document.prototype.__defineGetter__('inputEncoding', function() {
	  return this._inputEncoding;
	});
	/*
	    // Introduced in DOM Level 3:
	    readonly attribute DOMString       xmlEncoding;
	    // Introduced in DOM Level 3:
	             attribute boolean         xmlStandalone;
	                                        // raises(DOMException) on setting
	
	    // Introduced in DOM Level 3:
	             attribute DOMString       xmlVersion;
	                                        // raises(DOMException) on setting
	
	    // Introduced in DOM Level 3:
	             attribute boolean         strictErrorChecking;
	    // Introduced in DOM Level 3:
	             attribute DOMString       documentURI;
	    // Introduced in DOM Level 3:
	    Node               adoptNode(in Node source)
	                                        raises(DOMException);
	    // Introduced in DOM Level 3:
	    readonly attribute DOMConfiguration domConfig;
	    // Introduced in DOM Level 3:
	    void               normalizeDocument();
	    // Introduced in DOM Level 3:
	    Node               renameNode(in Node n,
	                                  in DOMString namespaceURI,
	                                  in DOMString qualifiedName)
	                                        raises(DOMException);
	  };
	};
	
	#endif // _DOM_IDL_
	*/
	
	exports.dom = {
	  level3 : {
	    core: core
	  }
	};


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/** Here is yet another implementation of XPath 1.0 in Javascript.
	 *
	 * My goal was to make it relatively compact, but as I fixed all the axis bugs
	 * the axes became more and more complicated. :-(.
	 *
	 * I have not implemented namespaces or case-sensitive axes for XML yet.
	 *
	 * How to test it in Chrome: You can make a Chrome extension that replaces
	 * the WebKit XPath parser with this one. But it takes a bit of effort to
	 * get around isolated world and same-origin restrictions:
	 * manifest.json:
	    {
	      "name": "XPathTest",
	      "version": "0.1",
	      "content_scripts": [{
	        "matches": ["http://localhost/*"],  // or wildcard host
	        "js": ["xpath.js", "injection.js"],
	        "all_frames": true, "run_at": "document_start"
	      }]
	    }
	 * injection.js:
	    // goal: give my xpath object to the website's JS context.
	    var script = document.createElement('script');
	    script.textContent =
	        "document.addEventListener('xpathextend', function(e) {\n" +
	        "  console.log('extending document with xpath...');\n" +
	        "  e.detail(window);" +
	        "});";
	    document.documentElement.appendChild(script);
	    document.documentElement.removeChild(script);
	    var evt = document.createEvent('CustomEvent');
	    evt.initCustomEvent('xpathextend', true, true, this.xpath.extend);
	    document.dispatchEvent(evt);
	 */
	(function() {
	  var core;
	  var xpath;
	  if (true) {
	    core = __webpack_require__(65).dom.level3.core;
	    xpath = exports;
	  } else {
	    core = this;
	    xpath = {};
	  }
	
	
	  /***************************************************************************
	   *                            Tokenization                                 *
	   ***************************************************************************/
	  /**
	   * The XPath lexer is basically a single regular expression, along with
	   * some helper functions to pop different types.
	   */
	  var Stream = xpath.Stream = function Stream(str) {
	    this.original = this.str = str;
	    this.peeked = null;
	    // TODO: not really needed, but supposedly tokenizer also disambiguates
	    // a * b vs. node test *
	    this.prev = null;  // for debugging
	    this.prevprev = null;
	  }
	  Stream.prototype = {
	    peek: function() {
	      if (this.peeked) return this.peeked;
	      var m = this.re.exec(this.str);
	      if (!m) return null;
	      this.str = this.str.substr(m[0].length);
	      return this.peeked = m[1];
	    },
	    /** Peek 2 tokens ahead. */
	    peek2: function() {
	      this.peek();  // make sure this.peeked is set
	      var m = this.re.exec(this.str);
	      if (!m) return null;
	      return m[1];
	    },
	    pop: function() {
	      var r = this.peek();
	      this.peeked = null;
	      this.prevprev = this.prev;
	      this.prev = r;
	      return r;
	    },
	    trypop: function(tokens) {
	      var tok = this.peek();
	      if (tok === tokens) return this.pop();
	      if (Array.isArray(tokens)) {
	        for (var i = 0; i < tokens.length; ++i) {
	          var t = tokens[i];
	          if (t == tok) return this.pop();;
	        }
	      }
	    },
	    trypopfuncname: function() {
	      var tok = this.peek();
	      if (!this.isQnameRe.test(tok))
	        return null;
	      switch (tok) {
	        case 'comment': case 'text': case 'processing-instruction': case 'node':
	          return null;
	      }
	      if ('(' != this.peek2()) return null;
	      return this.pop();
	    },
	    trypopaxisname: function() {
	      var tok = this.peek();
	      switch (tok) {
	        case 'ancestor': case 'ancestor-or-self': case 'attribute':
	        case 'child': case 'descendant': case 'descendant-or-self':
	        case 'following': case 'following-sibling': case 'namespace':
	        case 'parent': case 'preceding': case 'preceding-sibling': case 'self':
	          if ('::' == this.peek2()) return this.pop();
	      }
	      return null;
	    },
	    trypopnametest: function() {
	      var tok = this.peek();
	      if ('*' === tok || this.startsWithNcNameRe.test(tok)) return this.pop();
	      return null;
	    },
	    trypopliteral: function() {
	      var tok = this.peek();
	      if (null == tok) return null;
	      var first = tok.charAt(0);
	      var last = tok.charAt(tok.length - 1);
	      if ('"' === first && '"' === last ||
	          "'" === first && "'" === last) {
	        this.pop();
	        return tok.substr(1, tok.length - 2);
	      }
	    },
	    trypopnumber: function() {
	      var tok = this.peek();
	      if (this.isNumberRe.test(tok)) return parseFloat(this.pop());
	      else return null;
	    },
	    trypopvarref: function() {
	      var tok = this.peek();
	      if (null == tok) return null;
	      if ('$' === tok.charAt(0)) return this.pop().substr(1);
	      else return null;
	    },
	    position: function() {
	      return this.original.length - this.str.length;
	    }
	  };
	  (function() {
	    // http://www.w3.org/TR/REC-xml-names/#NT-NCName
	    var nameStartCharsExceptColon =
	        'A-Z_a-z\xc0-\xd6\xd8-\xf6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF' +
	        '\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF' +
	        '\uFDF0-\uFFFD';  // JS doesn't support [#x10000-#xEFFFF]
	    var nameCharExceptColon = nameStartCharsExceptColon +
	        '\\-\\.0-9\xb7\u0300-\u036F\u203F-\u2040';
	    var ncNameChars = '[' + nameStartCharsExceptColon +
	        '][' + nameCharExceptColon + ']*'
	    // http://www.w3.org/TR/REC-xml-names/#NT-QName
	    var qNameChars = ncNameChars + '(?::' + ncNameChars + ')?';
	    var otherChars = '\\.\\.|[\\(\\)\\[\\].@,]|::';  // .. must come before [.]
	    var operatorChars =
	        'and|or|mod|div|' +
	        '//|!=|<=|>=|[*/|+\\-=<>]';  // //, !=, <=, >= before individual ones.
	    var literal = '"[^"]*"|' + "'[^']*'";
	    var numberChars = '[0-9]+(?:\\.[0-9]*)?|\\.[0-9]+';
	    var variableReference = '\\$' + qNameChars;
	    var nameTestChars = '\\*|' + ncNameChars + ':\\*|' + qNameChars;
	    var optionalSpace = '[ \t\r\n]*';  // stricter than regexp \s.
	    var nodeType = 'comment|text|processing-instruction|node';
	    var re = new RegExp(
	        // numberChars before otherChars so that leading-decimal doesn't become .
	        '^' + optionalSpace + '(' + numberChars + '|' + otherChars + '|' +
	        nameTestChars + '|' + operatorChars + '|' + literal + '|' +
	        variableReference + ')'
	        // operatorName | nodeType | functionName | axisName are lumped into
	        // qName for now; we'll check them on pop.
	    );
	    Stream.prototype.re = re;
	    Stream.prototype.startsWithNcNameRe = new RegExp('^' + ncNameChars);
	    Stream.prototype.isQnameRe = new RegExp('^' + qNameChars + '$');
	    Stream.prototype.isNumberRe = new RegExp('^' + numberChars + '$');
	  })();
	
	  /***************************************************************************
	   *                               Parsing                                   *
	   ***************************************************************************/
	  var parse = xpath.parse = function parse(stream, a) {
	    var r = orExpr(stream,a);
	    var x, unparsed = [];
	    while (x = stream.pop()) {
	      unparsed.push(x);
	    }
	    if (unparsed.length)
	      throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                               'Position ' + stream.position() +
	                               ': Unparsed tokens: ' + unparsed.join(' '));
	    return r;
	  }
	
	  /**
	   * binaryL  ::= subExpr
	   *            | binaryL op subExpr
	   * so a op b op c becomes ((a op b) op c)
	   */
	  function binaryL(subExpr, stream, a, ops) {
	    var lhs = subExpr(stream, a);
	    if (lhs == null) return null;
	    var op;
	    while (op = stream.trypop(ops)) {
	      var rhs = subExpr(stream, a);
	      if (rhs == null)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected something after ' + op);
	      lhs = a.node(op, lhs, rhs);
	    }
	    return lhs;
	  }
	  /**
	   * Too bad this is never used. If they made a ** operator (raise to power),
	   ( we would use it.
	   * binaryR  ::= subExpr
	   *            | subExpr op binaryR
	   * so a op b op c becomes (a op (b op c))
	   */
	  function binaryR(subExpr, stream, a, ops) {
	    var lhs = subExpr(stream, a);
	    if (lhs == null) return null;
	    var op = stream.trypop(ops);
	    if (op) {
	      var rhs = binaryR(stream, a);
	      if (rhs == null)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected something after ' + op);
	      return a.node(op, lhs, rhs);
	    } else {
	      return lhs;// TODO
	    }
	  }
	  /** [1] LocationPath::= RelativeLocationPath | AbsoluteLocationPath
	   * e.g. a, a/b, //a/b
	   */
	  function locationPath(stream, a) {
	    return absoluteLocationPath(stream, a) ||
	           relativeLocationPath(null, stream, a);
	  }
	  /** [2] AbsoluteLocationPath::= '/' RelativeLocationPath? | AbbreviatedAbsoluteLocationPath
	   *  [10] AbbreviatedAbsoluteLocationPath::= '//' RelativeLocationPath
	   */
	  function absoluteLocationPath(stream, a) {
	    var op = stream.peek();
	    if ('/' === op || '//' === op) {
	      var lhs = a.node('Root');
	      return relativeLocationPath(lhs, stream, a, true);
	    } else {
	      return null;
	    }
	  }
	  /** [3] RelativeLocationPath::= Step | RelativeLocationPath '/' Step |
	   *                            | AbbreviatedRelativeLocationPath
	   *  [11] AbbreviatedRelativeLocationPath::= RelativeLocationPath '//' Step
	   * e.g. p/a, etc.
	   */
	  function relativeLocationPath(lhs, stream, a, isOnlyRootOk) {
	    if (null == lhs) {
	      lhs = step(stream, a);
	      if (null == lhs) return lhs;
	    }
	    var op;
	    while (op = stream.trypop(['/', '//'])) {
	      if ('//' === op) {
	        lhs = a.node('/', lhs,
	                     a.node('Axis', 'descendant-or-self', 'node', undefined));
	      }
	      var rhs = step(stream, a);
	      if (null == rhs && '/' === op && isOnlyRootOk) return lhs;
	      else isOnlyRootOk = false;
	      if (null == rhs)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected step after ' + op);
	      lhs = a.node('/', lhs, rhs);
	    }
	    return lhs;
	  }
	  /** [4] Step::= AxisSpecifier NodeTest Predicate* | AbbreviatedStep
	   *  [12] AbbreviatedStep::= '.' | '..'
	   * e.g. @href, self::p, p, a[@href], ., ..
	   */
	  function step(stream, a) {
	    var abbrStep = stream.trypop(['.', '..']);
	    if ('.' === abbrStep)  // A location step of . is short for self::node().
	      return a.node('Axis', 'self', 'node');
	    if ('..' === abbrStep)  // A location step of .. is short for parent::node()
	      return a.node('Axis', 'parent', 'node');
	
	    var axis = axisSpecifier(stream, a);
	    var nodeType = nodeTypeTest(stream, a);
	    var nodeName;
	    if (null == nodeType) nodeName = nodeNameTest(stream, a);
	    if (null == axis && null == nodeType && null == nodeName) return null;
	    if (null == nodeType && null == nodeName)
	        throw new XPathException(
	            XPathException.INVALID_EXPRESSION_ERR,
	            'Position ' + stream.position() +
	            ': Expected nodeTest after axisSpecifier ' + axis);
	    if (null == axis) axis = 'child';
	    if (null == nodeType) {
	      // When there's only a node name, then the node type is forced to be the
	      // principal node type of the axis.
	      // see http://www.w3.org/TR/xpath/#dt-principal-node-type
	      if ('attribute' === axis) nodeType = 'attribute';
	      else if ('namespace' === axis) nodeType = 'namespace';
	      else nodeType = 'element';
	    }
	    var lhs = a.node('Axis', axis, nodeType, nodeName);
	    var pred;
	    while (null != (pred = predicate(lhs, stream, a))) {
	      lhs = pred;
	    }
	    return lhs;
	  }
	  /** [5] AxisSpecifier::= AxisName '::' | AbbreviatedAxisSpecifier
	   *  [6] AxisName::= 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child'
	   *                | 'descendant' | 'descendant-or-self' | 'following'
	   *                | 'following-sibling' | 'namespace' | 'parent' |
	   *                | 'preceding' | 'preceding-sibling' | 'self'
	   *  [13] AbbreviatedAxisSpecifier::= '@'?
	   */
	  function axisSpecifier(stream, a) {
	    var attr = stream.trypop('@');
	    if (null != attr) return 'attribute';
	    var axisName = stream.trypopaxisname();
	    if (null != axisName) {
	      var coloncolon = stream.trypop('::');
	      if (null == coloncolon)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Should not happen. Should be ::.');
	      return axisName;
	    }
	  }
	  /** [7] NodeTest::= NameTest | NodeType '(' ')' | 'processing-instruction' '(' Literal ')'
	   *  [38] NodeType::= 'comment' | 'text' | 'processing-instruction' | 'node'
	   * I've split nodeTypeTest from nodeNameTest for convenience.
	   */
	  function nodeTypeTest(stream, a) {
	    if ('(' !== stream.peek2()) {
	      return null;
	    }
	    var type = stream.trypop(['comment', 'text', 'processing-instruction', 'node']);
	    if (null != type) {
	      if (null == stream.trypop('('))
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Should not happen.');
	      var param = undefined;
	      if (type == 'processing-instruction') {
	        param = stream.trypopliteral();
	      }
	      if (null == stream.trypop(')'))
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected close parens.');
	      return type
	    }
	  }
	  function nodeNameTest(stream, a) {
	    var name = stream.trypopnametest();
	    if (name != null) return name;
	    else return null;
	  }
	  /** [8] Predicate::= '[' PredicateExpr ']'
	   *  [9] PredicateExpr::= Expr
	   */
	  function predicate(lhs, stream, a) {
	    if (null == stream.trypop('[')) return null;
	    var expr = orExpr(stream, a);
	    if (null == expr)
	      throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                               'Position ' + stream.position() +
	                               ': Expected expression after [');
	    if (null == stream.trypop(']'))
	      throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                               'Position ' + stream.position() +
	                               ': Expected ] after expression.');
	    return a.node('Predicate', lhs, expr);
	  }
	  /** [14] Expr::= OrExpr
	   */
	  /** [15] PrimaryExpr::= VariableReference | '(' Expr ')' | Literal | Number | FunctionCall
	   * e.g. $x,  (3+4),  "hi",  32,  f(x)
	   */
	  function primaryExpr(stream, a) {
	    var x = stream.trypopliteral();
	    if (null == x)
	      x = stream.trypopnumber();
	    if (null != x) {
	      return x;
	    }
	    var varRef = stream.trypopvarref();
	    if (null != varRef) return a.node('VariableReference', varRef);
	    var funCall = functionCall(stream, a);
	    if (null != funCall) {
	      return funCall;
	    }
	    if (stream.trypop('(')) {
	      var e = orExpr(stream, a);
	      if (null == e)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected expression after (.');
	      if (null == stream.trypop(')'))
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected ) after expression.');
	      return e;
	    }
	    return null;
	  }
	  /** [16] FunctionCall::= FunctionName '(' ( Argument ( ',' Argument )* )? ')'
	   *  [17] Argument::= Expr
	   */
	  function functionCall(stream, a) {
	    var name = stream.trypopfuncname(stream, a);
	    if (null == name) return null;
	    if (null == stream.trypop('('))
	      throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                               'Position ' + stream.position() +
	                               ': Expected ( ) after function name.');
	    var params = [];
	    var first = true;
	    while (null == stream.trypop(')')) {
	      if (!first && null == stream.trypop(','))
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected , between arguments of the function.');
	      first = false;
	      var param = orExpr(stream, a);
	      if (param == null)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected expression as argument of function.');
	      params.push(param);
	    }
	    return a.node('FunctionCall', name, params);
	  }
	
	  /** [18] UnionExpr::= PathExpr | UnionExpr '|' PathExpr
	   */
	  function unionExpr(stream, a) { return binaryL(pathExpr, stream, a, '|'); }
	  /** [19] PathExpr ::= LocationPath
	   *                  | FilterExpr
	   *                  | FilterExpr '/' RelativeLocationPath
	   *                  | FilterExpr '//' RelativeLocationPath
	   * Unlike most other nodes, this one always generates a node because
	   * at this point all reverse nodesets must turn into a forward nodeset
	   */
	  function pathExpr(stream, a) {
	    // We have to do FilterExpr before LocationPath because otherwise
	    // LocationPath will eat up the name from a function call.
	    var filter = filterExpr(stream, a);
	    if (null == filter) {
	      var loc = locationPath(stream, a);
	      if (null == loc) {
	        throw new Error
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': The expression shouldn\'t be empty...');
	      }
	      return a.node('PathExpr', loc);
	    }
	    var rel = relativeLocationPath(filter, stream, a, false);
	    if (filter === rel) return rel;
	    else return a.node('PathExpr', rel);
	  }
	  /** [20] FilterExpr::= PrimaryExpr | FilterExpr Predicate
	   * aka. FilterExpr ::= PrimaryExpr Predicate*
	   */
	  function filterExpr(stream, a) {
	    var primary = primaryExpr(stream, a);
	    if (primary == null) return null;
	    var pred, lhs = primary;
	    while (null != (pred = predicate(lhs, stream, a))) {
	      lhs = pred;
	    }
	    return lhs;
	  }
	
	  /** [21] OrExpr::= AndExpr | OrExpr 'or' AndExpr
	   */
	  function orExpr(stream, a) {
	    var orig = (stream.peeked || '') + stream.str
	    var r = binaryL(andExpr, stream, a, 'or');
	    var now = (stream.peeked || '') + stream.str;
	    return r;
	  }
	  /** [22] AndExpr::= EqualityExpr | AndExpr 'and' EqualityExpr
	   */
	  function andExpr(stream, a) { return binaryL(equalityExpr, stream, a, 'and'); }
	  /** [23] EqualityExpr::= RelationalExpr | EqualityExpr '=' RelationalExpr
	   *                     | EqualityExpr '!=' RelationalExpr
	   */
	  function equalityExpr(stream, a) { return binaryL(relationalExpr, stream, a, ['=','!=']); }
	  /** [24] RelationalExpr::= AdditiveExpr | RelationalExpr '<' AdditiveExpr
	   *                       | RelationalExpr '>' AdditiveExpr
	   *                       | RelationalExpr '<=' AdditiveExpr
	   *                       | RelationalExpr '>=' AdditiveExpr
	   */
	  function relationalExpr(stream, a) { return binaryL(additiveExpr, stream, a, ['<','>','<=','>=']); }
	  /** [25] AdditiveExpr::= MultiplicativeExpr
	   *                     | AdditiveExpr '+' MultiplicativeExpr
	   *                     | AdditiveExpr '-' MultiplicativeExpr
	   */
	  function additiveExpr(stream, a) { return binaryL(multiplicativeExpr, stream, a, ['+','-']); }
	  /** [26] MultiplicativeExpr::= UnaryExpr
	   *                           | MultiplicativeExpr MultiplyOperator UnaryExpr
	   *                           | MultiplicativeExpr 'div' UnaryExpr
	   *                           | MultiplicativeExpr 'mod' UnaryExpr
	   */
	  function multiplicativeExpr(stream, a) { return binaryL(unaryExpr, stream, a, ['*','div','mod']); }
	  /** [27] UnaryExpr::= UnionExpr | '-' UnaryExpr
	   */
	  function unaryExpr(stream, a) {
	    if (stream.trypop('-')) {
	      var e = unaryExpr(stream, a);
	      if (null == e)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected unary expression after -');
	      return a.node('UnaryMinus', e);
	    }
	    else return unionExpr(stream, a);
	  }
	  var astFactory = {
	    node: function() {return Array.prototype.slice.call(arguments);}
	  };
	
	
	  /***************************************************************************
	   *                            Optimizations (TODO)                         *
	   ***************************************************************************/
	  /**
	   * Some things I've been considering:
	   * 1) a//b becomes a/descendant::b if there's no predicate that uses
	   *    position() or last()
	   * 2) axis[pred]: when pred doesn't use position, evaluate it just once per
	   *    node in the node-set rather than once per (node, position, last).
	   * For more optimizations, look up Gecko's optimizer:
	   * http://mxr.mozilla.org/mozilla-central/source/content/xslt/src/xpath/txXPathOptimizer.cpp
	   */
	  // TODO
	  function optimize(ast) {
	  }
	
	  /***************************************************************************
	   *                           Evaluation: axes                              *
	   ***************************************************************************/
	
	  /**
	   * Data types: For string, number, boolean, we just use Javascript types.
	   * Node-sets have the form
	   *    {nodes: [node, ...]}
	   * or {nodes: [node, ...], pos: [[1], [2], ...], lasts: [[1], [2], ...]}
	   *
	   * Most of the time, only the node is used and the position information is
	   * discarded. But if you use a predicate, we need to try every value of
	   * position and last in case the predicate calls position() or last().
	   */
	
	  /**
	   * The NodeMultiSet is a helper class to help generate
	   * {nodes:[], pos:[], lasts:[]} structures. It is useful for the
	   * descendant, descendant-or-self, following-sibling, and
	   * preceding-sibling axes for which we can use a stack to organize things.
	   */
	  function NodeMultiSet(isReverseAxis) {
	    this.nodes = [];
	    this.pos = [];
	    this.lasts = [];
	    this.nextPos = [];
	    this.seriesIndexes = [];  // index within nodes that each series begins.
	    this.isReverseAxis = isReverseAxis;
	    this._pushToNodes = isReverseAxis ? Array.prototype.unshift : Array.prototype.push;
	  }
	  NodeMultiSet.prototype = {
	    pushSeries: function pushSeries() {
	      this.nextPos.push(1);
	      this.seriesIndexes.push(this.nodes.length);
	    },
	    popSeries: function popSeries() {
	      console.assert(0 < this.nextPos.length, this.nextPos);
	      var last = this.nextPos.pop() - 1,
	          indexInPos = this.nextPos.length,
	          seriesBeginIndex = this.seriesIndexes.pop(),
	          seriesEndIndex = this.nodes.length;
	      for (var i = seriesBeginIndex; i < seriesEndIndex; ++i) {
	        console.assert(indexInPos < this.lasts[i].length);
	        console.assert(undefined === this.lasts[i][indexInPos]);
	        this.lasts[i][indexInPos] = last;
	      }
	    },
	    finalize: function() {
	      if (null == this.nextPos) return this;
	      console.assert(0 === this.nextPos.length);
	      for (var i = 0; i < this.lasts.length; ++i) {
	        for (var j = 0; j < this.lasts[i].length; ++j) {
	          console.assert(null != this.lasts[i][j], i + ',' + j + ':' + JSON.stringify(this.lasts));
	        }
	      }
	      this.pushSeries = this.popSeries = this.addNode = function() {
	        throw new Error('Already finalized.');
	      };
	      return this;
	    },
	    addNode: function addNode(node) {
	      console.assert(node);
	      this._pushToNodes.call(this.nodes, node)
	      this._pushToNodes.call(this.pos, this.nextPos.slice());
	      this._pushToNodes.call(this.lasts, new Array(this.nextPos.length));
	      for (var i = 0; i < this.nextPos.length; ++i) this.nextPos[i]++;
	    },
	    simplify: function() {
	      this.finalize();
	      return {nodes:this.nodes, pos:this.pos, lasts:this.lasts};
	    }
	  };
	  function eachContext(nodeMultiSet) {
	    var r = [];
	    for (var i = 0; i < nodeMultiSet.nodes.length; i++) {
	      var node = nodeMultiSet.nodes[i];
	      if (!nodeMultiSet.pos) {
	        r.push({nodes:[node], pos: [[i + 1]], lasts: [[nodeMultiSet.nodes.length]]});
	      } else {
	        for (var j = 0; j < nodeMultiSet.pos[i].length; ++j) {
	          r.push({nodes:[node], pos: [[nodeMultiSet.pos[i][j]]], lasts: [[nodeMultiSet.lasts[i][j]]]});
	        }
	      }
	    }
	    return r;
	  }
	  /** Matcher used in the axes.
	   */
	  function NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase) {
	    this.nodeTypeNum = nodeTypeNum;
	    this.nodeName = nodeName;
	    this.shouldLowerCase = shouldLowerCase;
	    this.nodeNameTest =
	      null == nodeName ? this._alwaysTrue :
	      shouldLowerCase ? this._nodeNameLowerCaseEquals :
	      this._nodeNameEquals;
	  }
	  NodeMatcher.prototype = {
	    matches: function matches(node) {
	      return (0 === this.nodeTypeNum || node.nodeType === this.nodeTypeNum) &&
	          this.nodeNameTest(node.nodeName);
	    },
	    _alwaysTrue: function(name) {return true;},
	    _nodeNameEquals: function _nodeNameEquals(name) {
	      return this.nodeName === name;
	    },
	    _nodeNameLowerCaseEquals: function _nodeNameLowerCaseEquals(name) {
	      return this.nodeName === name.toLowerCase();
	    }
	  };
	
	  function followingSiblingHelper(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase, shift, peek, followingNode, andSelf, isReverseAxis) {
	    var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	    var nodeMultiSet = new NodeMultiSet(isReverseAxis);
	    while (0 < nodeList.length) {  // can be if for following, preceding
	      var node = shift.call(nodeList);
	      console.assert(node != null);
	      node = followingNode(node);
	      nodeMultiSet.pushSeries();
	      var numPushed = 1;
	      while (null != node) {
	        if (! andSelf && matcher.matches(node))
	          nodeMultiSet.addNode(node);
	        if (node === peek.call(nodeList)) {
	          shift.call(nodeList);
	          nodeMultiSet.pushSeries();
	          numPushed++;
	        }
	        if (andSelf && matcher.matches(node))
	          nodeMultiSet.addNode(node);
	        node = followingNode(node);
	      }
	      while (0 < numPushed--)
	        nodeMultiSet.popSeries();
	    }
	    return nodeMultiSet;
	  }
	
	  /** Returns the next non-descendant node in document order.
	   * This is the first node in following::node(), if node is the context.
	   */
	  function followingNonDescendantNode(node) {
	    if (node.ownerElement) {
	      if (node.ownerElement.firstChild)
	        return node.ownerElement.firstChild;
	      node = node.ownerElement;
	    }
	    do {
	      if (node.nextSibling) return node.nextSibling;
	    } while (node = node.parentNode);
	    return null;
	  }
	
	  /** Returns the next node in a document-order depth-first search.
	   * See the definition of document order[1]:
	   *   1) element
	   *   2) namespace nodes
	   *   3) attributes
	   *   4) children
	   *   [1]: http://www.w3.org/TR/xpath/#dt-document-order
	   */
	  function followingNode(node) {
	    if (node.ownerElement)  // attributes: following node of element.
	      node = node.ownerElement;
	    if (null != node.firstChild)
	      return node.firstChild;
	    do {
	      if (null != node.nextSibling) {
	        return node.nextSibling;
	      }
	      node = node.parentNode;
	    } while (node);
	    return null;
	  }
	  /** Returns the previous node in document order (excluding attributes
	   * and namespace nodes).
	   */
	  function precedingNode(node) {
	    if (node.ownerElement)
	      return node.ownerElement;
	    if (null != node.previousSibling) {
	      node = node.previousSibling;
	      while (null != node.lastChild) {
	        node = node.lastChild;
	      }
	      return node;
	    }
	    if (null != node.parentNode) {
	      return node.parentNode;
	    }
	    return null;
	  }
	  /** This axis is inefficient if there are many nodes in the nodeList.
	   * But I think it's a pretty useless axis so it's ok. */
	  function followingHelper(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	    var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	    var nodeMultiSet = new NodeMultiSet(false);
	    var cursor = nodeList[0];
	    var unorderedFollowingStarts = [];
	    for (var i = 0; i < nodeList.length; i++) {
	      var node = nodeList[i];
	      var start = followingNonDescendantNode(node);
	      if (start)
	        unorderedFollowingStarts.push(start);
	    }
	    if (0 === unorderedFollowingStarts.length)
	      return {nodes:[]};
	    var pos = [], nextPos = [];
	    var started = 0;
	    while (cursor = followingNode(cursor)) {
	      for (var i = unorderedFollowingStarts.length - 1; i >= 0; i--){
	        if (cursor === unorderedFollowingStarts[i]) {
	          nodeMultiSet.pushSeries();
	          unorderedFollowingStarts.splice(i,i+1);
	          started++;
	        }
	      }
	      if (started && matcher.matches(cursor)) {
	        nodeMultiSet.addNode(cursor);
	      }
	    }
	    console.assert(0 === unorderedFollowingStarts.length);
	    for (var i = 0; i < started; i++)
	      nodeMultiSet.popSeries();
	    return nodeMultiSet.finalize();
	  }
	  function precedingHelper(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	    var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	    var cursor = nodeList.pop();
	    if (null == cursor) return {nodes:{}};
	    var r = {nodes:[], pos:[], lasts:[]};
	    var nextParents = [cursor.parentNode || cursor.ownerElement], nextPos = [1];
	    while (cursor = precedingNode(cursor)) {
	      if (cursor === nodeList[nodeList.length - 1]) {
	        nextParents.push(nodeList.pop());
	        nextPos.push(1);
	      }
	      var matches = matcher.matches(cursor);
	      var pos, someoneUsed = false;
	      if (matches)
	        pos = nextPos.slice();
	
	      for (var i = 0; i < nextParents.length; ++i) {
	        if (cursor === nextParents[i]) {
	          nextParents[i] = cursor.parentNode || cursor.ownerElement;
	          if (matches) {
	            pos[i] = null;
	          }
	        } else {
	          if (matches) {
	            pos[i] = nextPos[i]++;
	            someoneUsed = true;
	          }
	        }
	      }
	      if (someoneUsed) {
	        r.nodes.unshift(cursor);
	        r.pos.unshift(pos);
	      }
	    }
	    for (var i = 0; i < r.pos.length; ++i) {
	      var lasts = [];
	      r.lasts.push(lasts);
	      for (var j = r.pos[i].length - 1; j >= 0; j--) {
	        if (null == r.pos[i][j]) {
	          r.pos[i].splice(j, j+1);
	        } else {
	          lasts.unshift(nextPos[j] - 1);
	        }
	      }
	    }
	    return r;
	  }
	
	  /** node-set, axis -> node-set */
	  function descendantDfs(nodeMultiSet, node, remaining, matcher, andSelf, attrIndices, attrNodes) {
	    while (0 < remaining.length && null != remaining[0].ownerElement) {
	      var attr = remaining.shift();
	      if (andSelf && matcher.matches(attr)) {
	        attrNodes.push(attr);
	        attrIndices.push(nodeMultiSet.nodes.length);
	      }
	    }
	    if (null != node && !andSelf) {
	      if (matcher.matches(node))
	        nodeMultiSet.addNode(node);
	    }
	    var pushed = false;
	    if (null == node) {
	      if (0 === remaining.length) return;
	      node = remaining.shift();
	      nodeMultiSet.pushSeries();
	      pushed = true;
	    } else if (0 < remaining.length && node === remaining[0]) {
	      nodeMultiSet.pushSeries();
	      pushed = true;
	      remaining.shift();
	    }
	    if (andSelf) {
	      if (matcher.matches(node))
	        nodeMultiSet.addNode(node);
	    }
	    // TODO: use optimization. Also try element.getElementsByTagName
	    // var nodeList = 1 === nodeTypeNum && null != node.children ? node.children : node.childNodes;
	    var nodeList = node.childNodes;
	    for (var j = 0; j < nodeList.length; ++j) {
	      var child = nodeList[j];
	      descendantDfs(nodeMultiSet, child, remaining, matcher, andSelf, attrIndices, attrNodes);
	    }
	    if (pushed) {
	      nodeMultiSet.popSeries();
	    }
	  }
	  function descenantHelper(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase, andSelf) {
	    var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	    var nodeMultiSet = new NodeMultiSet(false);
	    var attrIndices = [], attrNodes = [];
	    while (0 < nodeList.length) {
	      // var node = nodeList.shift();
	      descendantDfs(nodeMultiSet, null, nodeList, matcher, andSelf, attrIndices, attrNodes);
	    }
	    nodeMultiSet.finalize();
	    for (var i = attrNodes.length-1; i >= 0; --i) {
	      nodeMultiSet.nodes.splice(attrIndices[i], attrIndices[i], attrNodes[i]);
	      nodeMultiSet.pos.splice(attrIndices[i], attrIndices[i], [1]);
	      nodeMultiSet.lasts.splice(attrIndices[i], attrIndices[i], [1]);
	    }
	    return nodeMultiSet;
	  }
	  /**
	   */
	  function ancestorHelper(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase, andSelf) {
	    var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	    var ancestors = []; // array of non-empty arrays of matching ancestors
	    for (var i = 0; i < nodeList.length; ++i) {
	      var node = nodeList[i];
	      var isFirst = true;
	      var a = [];
	      while (null != node) {
	        if (!isFirst || andSelf) {
	          if (matcher.matches(node))
	            a.push(node);
	        }
	        isFirst = false;
	        node = node.parentNode || node.ownerElement;
	      }
	      if (0 < a.length)
	        ancestors.push(a);
	    }
	    var lasts = [];
	    for (var i = 0; i < ancestors.length; ++i) lasts.push(ancestors[i].length);
	    var nodeMultiSet = new NodeMultiSet(true);
	    var newCtx = {nodes:[], pos:[], lasts:[]};
	    while (0 < ancestors.length) {
	      var pos = [ancestors[0].length];
	      var last = [lasts[0]];
	      var node = ancestors[0].pop();
	      for (var i = ancestors.length - 1; i > 0; --i) {
	        if (node === ancestors[i][ancestors[i].length - 1]) {
	          pos.push(ancestors[i].length);
	          last.push(lasts[i]);
	          ancestors[i].pop();
	          if (0 === ancestors[i].length) {
	            ancestors.splice(i, i+1);
	            lasts.splice(i, i+1);
	          }
	        }
	      }
	      if (0 === ancestors[0].length) {
	        ancestors.shift();
	        lasts.shift();
	      }
	      newCtx.nodes.push(node);
	      newCtx.pos.push(pos);
	      newCtx.lasts.push(last);
	    }
	    return newCtx;
	  }
	  /** Helper function for sortDocumentOrder. Returns a list of indices, from the
	   * node to the root, of positions within parent.
	   * For convenience, the node is the first element of the array.
	   */
	  function addressVector(node) {
	    var r = [node];
	    if (null != node.ownerElement) {
	      node = node.ownerElement;
	      r.push(-1);
	    }
	    while (null != node) {
	      var i = 0;
	      while (null != node.previousSibling) {
	        node = node.previousSibling;
	        i++;
	      }
	      r.push(i);
	      node = node.parentNode
	    }
	    return r;
	  }
	  function addressComparator(a, b) {
	    var minlen = Math.min(a.length - 1, b.length - 1),  // not including [0]=node
	        alen = a.length,
	        blen = b.length;
	    if (a[0] === b[0]) return 0;
	    var c;
	    for (var i = 0; i < minlen; ++i) {
	      c = a[alen - i - 1] - b[blen - i - 1];
	      if (0 !== c)
	        break;
	    }
	    if (null == c || 0 === c) {
	      // All equal until one of the nodes. The longer one is the descendant.
	      c = alen - blen;
	    }
	    if (0 === c)
	      c = a.nodeName - b.nodeName;
	    if (0 === c)
	      c = 1;
	    return c;
	  }
	  var sortUniqDocumentOrder = xpath.sortUniqDocumentOrder = function(nodes) {
	    var a = [];
	    for (var i = 0; i < nodes.length; i++) {
	      var node = nodes[i];
	      var v = addressVector(node);
	      a.push(v);
	    }
	    a.sort(addressComparator);
	    var b = [];
	    for (var i = 0; i < a.length; i++) {
	      if (0 < i && a[i][0] === a[i - 1][0])
	        continue;
	      b.push(a[i][0]);
	    }
	    return b;
	  }
	  /** Sort node multiset. Does not do any de-duping. */
	  function sortNodeMultiSet(nodeMultiSet) {
	    var a = [];
	    for (var i = 0; i < nodeMultiSet.nodes.length; i++) {
	      var v = addressVector(nodeMultiSet.nodes[i]);
	      a.push({v:v, n:nodeMultiSet.nodes[i],
	              p:nodeMultiSet.pos[i], l:nodeMultiSet.lasts[i]});
	    }
	    a.sort(compare);
	    var r = {nodes:[], pos:[], lasts:[]};
	    for (var i = 0; i < a.length; ++i) {
	      r.nodes.push(a[i].n);
	      r.pos.push(a[i].p);
	      r.lasts.push(a[i].l);
	    }
	    function compare(x, y) {
	      return addressComparator(x.v, y.v);
	    }
	    return r;
	  }
	  /** Returns an array containing all the ancestors down to a node.
	   * The array starts with document.
	   */
	  function nodeAndAncestors(node) {
	    var ancestors = [node];
	    var p = node;
	    while (p = p.parentNode || p.ownerElement) {
	      ancestors.unshift(p);
	    }
	    return ancestors;
	  }
	  function compareSiblings(a, b) {
	    if (a === b) return 0;
	    var c = a;
	    while (c = c.previousSibling) {
	      if (c === b)
	        return 1;  // b < a
	    }
	    c = b;
	    while (c = c.previousSibling) {
	      if (c === a)
	        return -1;  // a < b
	    }
	    throw new Error('a and b are not siblings: ' + xpath.stringifyObject(a) + ' vs ' + xpath.stringifyObject(b));
	  }
	  /** The merge in merge-sort.*/
	  function mergeNodeLists(x, y) {
	    var a, b, aanc, banc, r = [];
	    if ('object' !== typeof x)
	      throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                               'Invalid LHS for | operator ' +
	                               '(expected node-set): ' + x);
	    if ('object' !== typeof y)
	      throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                               'Invalid LHS for | operator ' +
	                               '(expected node-set): ' + y);
	    while (true) {
	      if (null == a) {
	        a = x.shift();
	        if (null != a)
	          aanc = addressVector(a);
	      }
	      if (null == b) {
	        b = y.shift();
	        if (null != b)
	          banc = addressVector(b);
	      }
	      if (null == a || null == b) break;
	      var c = addressComparator(aanc, banc);
	      if (c < 0) {
	        r.push(a);
	        a = null;
	        aanc = null;
	      } else if (c > 0) {
	        r.push(b);
	        b = null;
	        banc = null;
	      } else if (a.nodeName < b.nodeName) {  // attributes
	        r.push(a);
	        a = null;
	        aanc = null;
	      } else if (a.nodeName > b.nodeName) {  // attributes
	        r.push(b);
	        b = null;
	        banc = null;
	      } else if (a !== b) {
	        // choose b arbitrarily
	        r.push(b);
	        b = null;
	        banc = null;
	      } else {
	        console.assert(a === b, c);
	        // just skip b without pushing it.
	        b = null;
	        banc = null;
	      }
	    }
	    while (a) {
	      r.push(a);
	      a = x.shift();
	    }
	    while (b) {
	      r.push(b);
	      b = y.shift();
	    }
	    return r;
	  }
	  function comparisonHelper(test, x, y, isNumericComparison) {
	    var coersion;
	    if (isNumericComparison)
	      coersion = fn.number;
	    else coersion =
	      'boolean' === typeof x || 'boolean' === typeof y ? fn['boolean'] :
	      'number' === typeof x || 'number' === typeof y ? fn.number :
	      fn.string;
	    if ('object' === typeof x && 'object' === typeof y) {
	      var aMap = {};
	      for (var i = 0; i < x.nodes.length; ++i) {
	        var xi = coersion({nodes:[x.nodes[i]]});
	        for (var j = 0; j < y.nodes.length; ++j) {
	          var yj = coersion({nodes:[y.nodes[j]]});
	          if (test(xi, yj)) return true;
	        }
	      }
	      return false;
	    } else if ('object' === typeof x && x.nodes && x.nodes.length) {
	      for (var i = 0; i < x.nodes.length; ++i) {
	        var xi = coersion({nodes:[x.nodes[i]]}), yc = coersion(y);
	        if (test(xi, yc))
	          return true;
	      }
	      return false;
	    } else if ('object' === typeof y && x.nodes && x.nodes.length) {
	      for (var i = 0; i < x.nodes.length; ++i) {
	        var yi = coersion({nodes:[y.nodes[i]]}), xc = coersion(x);
	        if (test(xc, yi))
	          return true;
	      }
	      return false;
	    } else {
	      var xc = coersion(x), yc = coersion(y);
	      return test(xc, yc);
	    }
	  }
	  var axes = xpath.axes = {
	    'ancestor':
	      function ancestor(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return ancestorHelper(
	          nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase, false);
	      },
	    'ancestor-or-self':
	      function ancestorOrSelf(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return ancestorHelper(
	          nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase, true);
	      },
	    'attribute':
	      function attribute(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        // TODO: figure out whether positions should be undefined here.
	        var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	        var nodeMultiSet = new NodeMultiSet(false);
	        if (null != nodeName) {
	          // TODO: with namespace
	          for (var i = 0; i < nodeList.length; ++i) {
	            var node = nodeList[i];
	            if (null == node.getAttributeNode)
	              continue;  // only Element has .getAttributeNode
	            var attr = node.getAttributeNode(nodeName);
	            if (null != attr && matcher.matches(attr)) {
	              nodeMultiSet.pushSeries();
	              nodeMultiSet.addNode(attr);
	              nodeMultiSet.popSeries();
	            }
	          }
	        } else {
	          for (var i = 0; i < nodeList.length; ++i) {
	            var node = nodeList[i];
	            if (null != node.attributes) {
	              nodeMultiSet.pushSeries();
	              for (var j = 0; j < node.attributes.length; j++) {  // all nodes have .attributes
	                var attr = node.attributes[j];
	                if (matcher.matches(attr))  // TODO: I think this check is unnecessary
	                  nodeMultiSet.addNode(attr);
	              }
	              nodeMultiSet.popSeries();
	            }
	          }
	        }
	        return nodeMultiSet.finalize();
	      },
	    'child':
	      function child(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	        var nodeMultiSet = new NodeMultiSet(false);
	        for (var i = 0; i < nodeList.length; ++i) {
	          var n = nodeList[i];
	          if (n.ownerElement)  // skip attribute nodes' text child.
	            continue;
	          if (n.childNodes) {
	            nodeMultiSet.pushSeries();
	            var childList = 1 === nodeTypeNum && null != n.children ?
	                n.children : n.childNodes;
	            for (var j = 0; j < childList.length; ++j) {
	              var child = childList[j];
	              if (matcher.matches(child)) {
	                nodeMultiSet.addNode(child);
	              }
	              // don't have to do de-duping because children have parent,
	              // which are current context.
	            }
	            nodeMultiSet.popSeries();
	          }
	        }
	        nodeMultiSet.finalize();
	        r = sortNodeMultiSet(nodeMultiSet);
	        return r;
	      },
	    'descendant':
	      function descenant(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return descenantHelper(
	          nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase, false);
	      },
	    'descendant-or-self':
	      function descenantOrSelf(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return descenantHelper(
	          nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase, true);
	      },
	    'following':
	      function following(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return followingHelper(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase);
	      },
	    'following-sibling':
	      function followingSibling(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return followingSiblingHelper(
	          nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase,
	          Array.prototype.shift, function() {return this[0];},
	          function(node) {return node.nextSibling;});
	      },
	    'namespace':
	      function namespace(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        // TODO
	      },
	    'parent':
	      function parent(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	        var nodes = [], pos = [];
	        for (var i = 0; i < nodeList.length; ++i) {
	          var parent = nodeList[i].parentNode || nodeList[i].ownerElement;
	          if (null == parent)
	            continue;
	          if (!matcher.matches(parent))
	            continue;
	          if (nodes.length > 0 && parent === nodes[nodes.length-1])
	            continue;
	          nodes.push(parent);
	          pos.push([1]);
	        }
	        return {nodes:nodes, pos:pos, lasts:pos};
	      },
	    'preceding':
	      function preceding(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return precedingHelper(
	          nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase);
	      },
	    'preceding-sibling':
	      function precedingSibling(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return followingSiblingHelper(
	          nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase,
	          Array.prototype.pop, function() {return this[this.length-1];},
	          function(node) {return node.previousSibling},
	          false, true);
	      },
	    'self':
	      function self(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        var nodes = [], pos = [];
	        var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	        for (var i = 0; i < nodeList.length; ++i) {
	          if (matcher.matches(nodeList[i])) {
	            nodes.push(nodeList[i]);
	            pos.push([1]);
	          }
	        }
	        return {nodes: nodes, pos: pos, lasts: pos}
	      }
	  };
	
	  /***************************************************************************
	   *                         Evaluation: functions                           *
	   ***************************************************************************/
	  var fn = {
	    'number': function number(optObject) {
	      if ('number' === typeof optObject)
	        return optObject;
	      if ('string' === typeof optObject)
	        return parseFloat(optObject);  // note: parseFloat(' ') -> NaN, unlike +' ' -> 0.
	      if ('boolean' === typeof optObject)
	        return +optObject;
	      return fn.number(fn.string.call(this, optObject));  // for node-sets
	    },
	    'string': function string(optObject) {
	      if (null == optObject)
	        return fn.string(this);
	      if ('string' === typeof optObject || 'boolean' === typeof optObject ||
	          'number' === typeof optObject)
	        return '' + optObject;
	      if (0 == optObject.nodes.length) return '';
	      if (null != optObject.nodes[0].textContent)
	        return optObject.nodes[0].textContent;
	      return optObject.nodes[0].nodeValue;
	    },
	    'boolean': function booleanVal(x) {
	      return 'object' === typeof x ? x.nodes.length > 0 : !!x;
	    },
	    'last': function last() {
	      console.assert(Array.isArray(this.pos));
	      console.assert(Array.isArray(this.lasts));
	      console.assert(1 === this.pos.length);
	      console.assert(1 === this.lasts.length);
	      console.assert(1 === this.lasts[0].length);
	      return this.lasts[0][0];
	    },
	    'position': function position() {
	      console.assert(Array.isArray(this.pos));
	      console.assert(Array.isArray(this.lasts));
	      console.assert(1 === this.pos.length);
	      console.assert(1 === this.lasts.length);
	      console.assert(1 === this.pos[0].length);
	      return this.pos[0][0];
	    },
	    'count': function count(nodeSet) {
	      if ('object' !== typeof nodeSet)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Function count(node-set) ' +
	                                 'got wrong argument type: ' + nodeSet);
	      return nodeSet.nodes.length;
	    },
	    'id': function id(object) {
	      var r = {nodes: []};
	      var doc = this.nodes[0].ownerDocument || this.nodes[0];
	      console.assert(doc);
	      var ids;
	      if ('object' === typeof object) {
	        // for node-sets, map id over each node value.
	        ids = [];
	        for (var i = 0; i < object.nodes.length; ++i) {
	          var idNode = object.nodes[i];
	          var idsString = fn.string({nodes:[idNode]});
	          var a = idsString.split(/[ \t\r\n]+/g);
	          Array.prototype.push.apply(ids, a);
	        }
	      } else {
	        var idsString = fn.string(object);
	        var a = idsString.split(/[ \t\r\n]+/g);
	        ids = a;
	      }
	      for (var i = 0; i < ids.length; ++i) {
	        var id = ids[i];
	        if (0 === id.length)
	          continue;
	        var node = doc.getElementById(id);
	        if (null != node)
	          r.nodes.push(node);
	      }
	      r.nodes = sortUniqDocumentOrder(r.nodes);
	      return r;
	    },
	    'local-name': function(nodeSet) {
	      if (null == nodeSet)
	        return fn.name(this);
	      if (null == nodeSet.nodes) {
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'argument to name() must be a node-set. got ' + nodeSet);
	      }
	      // TODO: namespaced version
	      return nodeSet.nodes[0].nodeName.toLowerCase();  // TODO: no toLowerCase for xml
	    },
	    'namespace-uri': function(nodeSet) {
	      // TODO
	      throw new Error('not implemented yet');
	    },
	    'name': function(nodeSet) {
	      if (null == nodeSet)
	        return fn.name(this);
	      if (null == nodeSet.nodes) {
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'argument to name() must be a node-set. got ' + nodeSet);
	      }
	      return nodeSet.nodes[0].nodeName.toLowerCase();  // TODO: no toLowerCase for xml
	    },
	    'concat': function concat(x) {
	      var l = [];
	      for (var i = 0; i < arguments.length; ++i) {
	        l.push(fn.string(arguments[i]));
	      }
	      return l.join('');
	    },
	    'starts-with': function startsWith(a, b) {
	      var as = fn.string(a), bs = fn.string(b);
	      return as.substr(0, bs.length) === bs;
	    },
	    'contains': function contains(a, b) {
	      var as = fn.string(a), bs = fn.string(b);
	      var i = as.indexOf(bs);
	      if (-1 === i) return false;
	      return true;
	    },
	    'substring-before': function substringBefore(a, b) {
	      var as = fn.string(a), bs = fn.string(b);
	      var i = as.indexOf(bs);
	      if (-1 === i) return '';
	      return as.substr(0, i);
	    },
	    'substring-after': function substringBefore(a, b) {
	      var as = fn.string(a), bs = fn.string(b);
	      var i = as.indexOf(bs);
	      if (-1 === i) return '';
	      return as.substr(i + bs.length);
	    },
	    'substring': function substring(string, start, optEnd) {
	      if (null == string || null == start) {
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Must be at least 2 arguments to string()');
	      }
	      var sString = fn.string(string),
	          iStart = fn.round(start),
	          iEnd = optEnd == null ? null : fn.round(optEnd);
	      // Note that xpath string positions user 1-based index
	      if (iEnd == null)
	        return sString.substr(iStart - 1);
	      else
	        return sString.substr(iStart - 1, iEnd);
	    },
	    'string-length': function stringLength(optString) {
	      return fn.string.call(this, optString).length;
	    },
	    'normalize-space': function normalizeSpace(optString) {
	      var s = fn.string.call(this, optString);
	      return s.replace(/[ \t\r\n]+/g, ' ').replace(/^ | $/g, '');
	    },
	    'translate': function translate(string, from, to) {
	      var sString = fn.string.call(this, string),
	          sFrom = fn.string(from),
	          sTo = fn.string(to);
	      var eachCharRe = [];
	      var map = {};
	      for (var i = 0; i < sFrom.length; ++i) {
	        var c = sFrom.charAt(i);
	        map[c] = sTo.charAt(i);  // returns '' if beyond length of sTo.
	        // copied from goog.string.regExpEscape in the Closure library.
	        eachCharRe.push(
	          c.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').
	            replace(/\x08/g, '\\x08'));
	      }
	      var re = new RegExp(eachCharRe.join('|'), 'g');
	      return sString.replace(re, function(c) {return map[c];});
	    },
	    /// Boolean functions
	    'not': function not(x) {
	      var bx = fn['boolean'](x);
	      return !bx;
	    },
	    'true': function trueVal() { return true; },
	    'false': function falseVal() { return false; },
	    // TODO
	    'lang': function lang(string) { throw new Error('Not implemented');},
	    'sum': function sum(optNodeSet) {
	      if (null == optNodeSet) return fn.sum(this);
	      // for node-sets, map id over each node value.
	      var sum = 0;
	      for (var i = 0; i < optNodeSet.nodes.length; ++i) {
	        var node = optNodeSet.nodes[i];
	        var x = fn.number({nodes:[node]});
	        sum += x;
	      }
	      return sum;
	    },
	    'floor': function floor(number) {
	      return Math.floor(fn.number(number));
	    },
	    'ceiling': function ceiling(number) {
	      return Math.ceil(fn.number(number));
	    },
	    'round': function round(number) {
	      return Math.round(fn.number(number));
	    }
	  };
	  /***************************************************************************
	   *                         Evaluation: operators                           *
	   ***************************************************************************/
	  var more = {
	    UnaryMinus: function(x) { return -fn.number(x); },
	    '+': function(x, y) { return fn.number(x) + fn.number(y); },
	    '-': function(x, y) { return fn.number(x) - fn.number(y); },
	    '*': function(x, y) { return fn.number(x) * fn.number(y); },
	    'div': function(x, y) { return fn.number(x) / fn.number(y); },
	    'mod': function(x, y) { return fn.number(x) % fn.number(y); },
	    '<': function(x, y) {
	      return comparisonHelper(function(x, y) { return fn.number(x) < fn.number(y);}, x, y, true);
	    },
	    '<=': function(x, y) {
	      return comparisonHelper(function(x, y) { return fn.number(x) <= fn.number(y);}, x, y, true);
	    },
	    '>':  function(x, y) {
	      return comparisonHelper(function(x, y) { return fn.number(x) > fn.number(y);}, x, y, true);
	    },
	    '>=': function(x, y) {
	      return comparisonHelper(function(x, y) { return fn.number(x) >= fn.number(y);}, x, y, true);
	    },
	    'and': function(x, y) { return fn['boolean'](x) && fn['boolean'](y); },
	    'or': function(x, y) { return fn['boolean'](x) || fn['boolean'](y); },
	    '|': function(x, y) { return {nodes: mergeNodeLists(x.nodes, y.nodes)}; },
	    '=': function(x, y) {
	      // optimization for two node-sets case: avoid n^2 comparisons.
	      if ('object' === typeof x && 'object' === typeof y) {
	        var aMap = {};
	        for (var i = 0; i < x.nodes.length; ++i) {
	          var s = fn.string({nodes:[x.nodes[i]]});
	          aMap[s] = true;
	        }
	        for (var i = 0; i < y.nodes.length; ++i) {
	          var s = fn.string({nodes:[y.nodes[i]]});
	          if (aMap[s]) return true;
	        }
	        return false;
	      } else {
	        return comparisonHelper(function(x, y) {return x === y;}, x, y);
	      }
	    },
	    '!=': function(x, y) {
	      // optimization for two node-sets case: avoid n^2 comparisons.
	      if ('object' === typeof x && 'object' === typeof y) {
	        if (0 === x.nodes.length || 0 === y.nodes.length) return false;
	        var aMap = {};
	        for (var i = 0; i < x.nodes.length; ++i) {
	          var s = fn.string({nodes:[x.nodes[i]]});
	          aMap[s] = true;
	        }
	        for (var i = 0; i < y.nodes.length; ++i) {
	          var s = fn.string({nodes:[y.nodes[i]]});
	          if (!aMap[s]) return true;
	        }
	        return false;
	      } else {
	        return comparisonHelper(function(x, y) {return x !== y;}, x, y);
	      }
	    }
	  };
	  var nodeTypes = xpath.nodeTypes = {
	    'node': 0,
	    'attribute': 2,
	    'comment': 8, // this.doc.COMMENT_NODE,
	    'text': 3, // this.doc.TEXT_NODE,
	    'processing-instruction': 7, // this.doc.PROCESSING_INSTRUCTION_NODE,
	    'element': 1  //this.doc.ELEMENT_NODE
	  };
	  /** For debugging and unit tests: returnjs a stringified version of the
	   * argument. */
	  var stringifyObject = xpath.stringifyObject = function stringifyObject(ctx) {
	    var seenKey = 'seen' + Math.floor(Math.random()*1000000000);
	    return JSON.stringify(helper(ctx));
	
	    function helper(ctx) {
	      if (Array.isArray(ctx)) {
	        return ctx.map(function(x) {return helper(x);});
	      }
	      if ('object' !== typeof ctx) return ctx;
	      if (null == ctx) return ctx;
	    //  if (ctx.toString) return ctx.toString();
	      if (null != ctx.outerHTML) return ctx.outerHTML;
	      if (null != ctx.nodeValue) return ctx.nodeName + '=' + ctx.nodeValue;
	      if (ctx[seenKey]) return '[circular]';
	      ctx[seenKey] = true;
	      var nicer = {};
	      for (var key in ctx) {
	        if (seenKey === key)
	          continue;
	        try {
	          nicer[key] = helper(ctx[key]);
	        } catch (e) {
	          nicer[key] = '[exception: ' + e.message + ']';
	        }
	      }
	      delete ctx[seenKey];
	      return nicer;
	    }
	  }
	  var Evaluator = xpath.Evaluator = function Evaluator(doc) {
	    this.doc = doc;
	  }
	  Evaluator.prototype = {
	    val: function val(ast, ctx) {
	      console.assert(ctx.nodes);
	
	      if ('number' === typeof ast || 'string' === typeof ast) return ast;
	      if (more[ast[0]]) {
	        var evaluatedParams = [];
	        for (var i = 1; i < ast.length; ++i) {
	          evaluatedParams.push(this.val(ast[i], ctx));
	        }
	        var r = more[ast[0]].apply(ctx, evaluatedParams);
	        return r;
	      }
	      switch (ast[0]) {
	        case 'Root': return {nodes: [this.doc]};
	        case 'FunctionCall':
	          var functionName = ast[1], functionParams = ast[2];
	          if (null == fn[functionName])
	            throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                     'Unknown function: ' + functionName);
	          var evaluatedParams = [];
	          for (var i = 0; i < functionParams.length; ++i) {
	            evaluatedParams.push(this.val(functionParams[i], ctx));
	          }
	          var r = fn[functionName].apply(ctx, evaluatedParams);
	          return r;
	        case 'Predicate':
	          var lhs = this.val(ast[1], ctx);
	          var ret = {nodes: []};
	          var contexts = eachContext(lhs);
	          for (var i = 0; i < contexts.length; ++i) {
	            var singleNodeSet = contexts[i];
	            var rhs = this.val(ast[2], singleNodeSet);
	            var success;
	            if ('number' === typeof rhs) {
	              success = rhs === singleNodeSet.pos[0][0];
	            } else {
	              success = fn['boolean'](rhs);
	            }
	            if (success) {
	              var node = singleNodeSet.nodes[0];
	              ret.nodes.push(node);
	              // skip over all the rest of the same node.
	              while (i+1 < contexts.length && node === contexts[i+1].nodes[0]) {
	                i++;
	              }
	            }
	          }
	          return ret;
	        case 'PathExpr':
	          // turn the path into an expressoin; i.e., remove the position
	          // information of the last axis.
	          var x = this.val(ast[1], ctx);
	          // Make the nodeset a forward-direction-only one.
	          if (x.finalize) {  // it is a NodeMultiSet
	            for (var i = 0; i < x.nodes.length; ++i) {
	              console.assert(null != x.nodes[i].nodeType);
	            }
	            return {nodes: x.nodes};
	          } else {
	            return x;
	          }
	        case '/':
	          // TODO: don't generate '/' nodes, just Axis nodes.
	          var lhs = this.val(ast[1], ctx);
	          console.assert(null != lhs);
	          var r = this.val(ast[2], lhs);
	          console.assert(null != r);
	          return r;
	        case 'Axis':
	          // All the axis tests from Step. We only get AxisSpecifier NodeTest,
	          // not the predicate (which is applied later)
	          var axis = ast[1],
	              nodeType = ast[2],
	              nodeTypeNum = nodeTypes[nodeType],
	              shouldLowerCase = true,  // TODO: give option
	              nodeName = ast[3] && shouldLowerCase ? ast[3].toLowerCase() : ast[3];
	          nodeName = nodeName === '*' ? null : nodeName;
	          if ('object' !== typeof ctx) return {nodes:[], pos:[]};
	          var nodeList = ctx.nodes.slice();  // TODO: is copy needed?
	          var r = axes[axis](nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase);
	          return r;
	      }
	    }
	  };
	  var evaluate = xpath.evaluate = function evaluate(expr, doc, context) {
	    //var astFactory = new AstEvaluatorFactory(doc, context);
	    var stream = new Stream(expr);
	    var ast = parse(stream, astFactory);
	    var val = new Evaluator(doc).val(ast, {nodes: [context]});
	    return val;
	  }
	
	  /***************************************************************************
	   *                           DOM interface                                 *
	   ***************************************************************************/
	  var XPathException = xpath.XPathException = function XPathException(code, message) {
	    var e = new Error(message);
	    this.__proto__ = e;
	    this.name = 'XPathException';
	    this.code = code;
	  }
	  XPathException.prototype = Error.prototype;
	  XPathException.prototype.__proto__ = XPathException;
	  XPathException.INVALID_EXPRESSION_ERR = 51;
	  XPathException.TYPE_ERR = 52;
	
	
	  var XPathEvaluator = xpath.XPathEvaluator = function XPathEvaluator() {}
	  XPathEvaluator.prototype = {
	    createExpression: function(expression, resolver) {
	      return new XPathExpression(expression, resolver);
	    },
	    createNSResolver: function(nodeResolver) {
	      // TODO
	    },
	    evaluate: function evaluate(expression, contextNode, resolver, type, result) {
	      var expr = new XPathExpression(expression, resolver);
	      return expr.evaluate(contextNode, type, result);
	    }
	  };
	
	
	  var XPathExpression = xpath.XPathExpression = function XPathExpression(expression, resolver, optDoc) {
	    var stream = new Stream(expression);
	    this._ast = parse(stream, astFactory);
	    this._doc = optDoc;
	  }
	  XPathExpression.prototype = {
	    evaluate: function evaluate(contextNode, type, result) {
	      if (null == contextNode.nodeType)
	        throw new Error('bad argument (expected context node): ' + contextNode);
	      var doc = contextNode.ownerDocument || contextNode;
	      if (null != this._doc && this._doc !== doc) {
	        throw new core.DOMException(
	            core.WRONG_DOCUMENT_ERR,
	            'The document must be the same as the context node\'s document.');
	      }
	      var evaluator = new Evaluator(doc);
	      var value = evaluator.val(this._ast, {nodes: [contextNode]});
	      if (XPathResult.NUMBER_TYPE === type)
	        value = fn.number(value);
	      else if (XPathResult.STRING_TYPE === type)
	        value = fn.string(value);
	      else if (XPathResult.BOOLEAN_TYPE === type)
	        value = fn['boolean'](value);
	      else if (XPathResult.ANY_TYPE !== type &&
	               XPathResult.UNORDERED_NODE_ITERATOR_TYPE !== type &&
	               XPathResult.ORDERED_NODE_ITERATOR_TYPE !== type &&
	               XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE !== type &&
	               XPathResult.ORDERED_NODE_SNAPSHOT_TYPE !== type &&
	               XPathResult.ANY_UNORDERED_NODE_TYPE !== type &&
	               XPathResult.FIRST_ORDERED_NODE_TYPE !== type)
	        throw new core.DOMException(
	            core.NOT_SUPPORTED_ERR,
	            'You must provide an XPath result type (0=any).');
	      else if (XPathResult.ANY_TYPE !== type &&
	               'object' !== typeof value)
	        throw new XPathException(
	            XPathException.TYPE_ERR,
	            'Value should be a node-set: ' + value);
	      return new XPathResult(doc, value, type);
	    }
	  }
	
	  var XPathResult = xpath.XPathResult = function XPathResult(doc, value, resultType) {
	    this._value = value;
	    this._resultType = resultType;
	    this._i = 0;
	    this._invalidated = false;
	    if (this.resultType === XPathResult.UNORDERED_NODE_ITERATOR_TYPE ||
	        this.resultType === XPathResult.ORDERED_NODE_ITERATOR_TYPE) {
	      doc.addEventListener('DOMSubtreeModified', invalidate, true);
	      var self = this;
	      function invalidate() {
	        self._invalidated = true;
	        doc.removeEventListener('DOMSubtreeModified', invalidate, true);
	      }
	    }
	  }
	  XPathResult.ANY_TYPE = 0;
	  XPathResult.NUMBER_TYPE = 1;
	  XPathResult.STRING_TYPE = 2;
	  XPathResult.BOOLEAN_TYPE = 3;
	  XPathResult.UNORDERED_NODE_ITERATOR_TYPE = 4;
	  XPathResult.ORDERED_NODE_ITERATOR_TYPE = 5;
	  XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE = 6;
	  XPathResult.ORDERED_NODE_SNAPSHOT_TYPE = 7;
	  XPathResult.ANY_UNORDERED_NODE_TYPE = 8;
	  XPathResult.FIRST_ORDERED_NODE_TYPE = 9;
	  XPathResult.prototype = {
	    // XPathResultType
	    get resultType() {
	      if (this._resultType) return this._resultType;
	      switch (typeof this._value) {
	        case 'number': return XPathResult.NUMBER_TYPE;
	        case 'string': return XPathResult.STRING_TYPE;
	        case 'boolean': return XPathResult.BOOLEAN_TYPE;
	        default: return XPathResult.UNORDERED_NODE_ITERATOR_TYPE;
	      }
	    },
	    get numberValue() {
	      if (XPathResult.NUMBER_TYPE !== this.resultType)
	        throw new XPathException(XPathException.TYPE_ERR,
	                                 'You should have asked for a NUMBER_TYPE.');
	      return this._value;
	    },
	    get stringValue() {
	      if (XPathResult.STRING_TYPE !== this.resultType)
	        throw new XPathException(XPathException.TYPE_ERR,
	                                 'You should have asked for a STRING_TYPE.');
	      return this._value;
	    },
	    get booleanValue() {
	      if (XPathResult.BOOLEAN_TYPE !== this.resultType)
	        throw new XPathException(XPathException.TYPE_ERR,
	                                 'You should have asked for a BOOLEAN_TYPE.');
	      return this._value;
	    },
	    get singleNodeValue() {
	      if (XPathResult.ANY_UNORDERED_NODE_TYPE !== this.resultType &&
	          XPathResult.FIRST_ORDERED_NODE_TYPE !== this.resultType)
	        throw new XPathException(
	            XPathException.TYPE_ERR,
	            'You should have asked for a FIRST_ORDERED_NODE_TYPE.');
	      return this._value.nodes[0] || null;
	    },
	    get invalidIteratorState() {
	      if (XPathResult.UNORDERED_NODE_ITERATOR_TYPE !== this.resultType &&
	          XPathResult.ORDERED_NODE_ITERATOR_TYPE !== this.resultType)
	        return false;
	      return !!this._invalidated;
	    },
	    get snapshotLength() {
	      if (XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE !== this.resultType &&
	          XPathResult.ORDERED_NODE_SNAPSHOT_TYPE !== this.resultType)
	        throw new XPathException(
	            XPathException.TYPE_ERR,
	            'You should have asked for a ORDERED_NODE_SNAPSHOT_TYPE.');
	      return this._value.nodes.length;
	    },
	    iterateNext: function iterateNext() {
	      if (XPathResult.UNORDERED_NODE_ITERATOR_TYPE !== this.resultType &&
	          XPathResult.ORDERED_NODE_ITERATOR_TYPE !== this.resultType)
	        throw new XPathException(
	            XPathException.TYPE_ERR,
	            'You should have asked for a ORDERED_NODE_ITERATOR_TYPE.');
	      if (this.invalidIteratorState)
	        throw new core.DOMException(
	            core.INVALID_STATE_ERR,
	            'The document has been mutated since the result was returned');
	      return this._value.nodes[this._i++] || null;
	    },
	    snapshotItem: function snapshotItem(index) {
	      if (XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE !== this.resultType &&
	          XPathResult.ORDERED_NODE_SNAPSHOT_TYPE !== this.resultType)
	        throw new XPathException(
	            XPathException.TYPE_ERR,
	            'You should have asked for a ORDERED_NODE_SNAPSHOT_TYPE.');
	      return this._value.nodes[index] || null;
	    }
	  };
	  // so you can access ANY_TYPE etc. from the instances:
	  XPathResult.prototype.__proto__ = XPathResult;
	
	  core.XPathException = XPathException;
	  core.XPathExpression = XPathExpression;
	  core.XPathResult = XPathResult;
	  core.XPathEvaluator = XPathEvaluator;
	
	  core.Document.prototype.createExpression =
	    XPathEvaluator.prototype.createExpression;
	
	  core.Document.prototype.createNSResolver =
	      XPathEvaluator.prototype.createNSResolver;
	
	  core.Document.prototype.evaluate = XPathEvaluator.prototype.evaluate;
	
	})();


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	var events = __webpack_require__(79).dom.level2.events;
	
	// modify cloned instance for more info check: https://github.com/tmpvar/jsdom/issues/325
	events = Object.create(events);
	
	/*
	
	// File: events.idl
	
	#ifndef _EVENTS_IDL_
	#define _EVENTS_IDL_
	
	#include "dom.idl"
	#include "views.idl"
	
	#pragma prefix "dom.w3c.org"
	module events
	{
	
	  typedef dom::DOMString DOMString;
	  typedef dom::DOMTimeStamp DOMTimeStamp;
	  typedef dom::DOMObject DOMObject;
	  typedef dom::Node Node;
	
	  interface EventTarget;
	  interface EventListener;
	
	  // Introduced in DOM Level 2:
	  exception EventException {
	    unsigned short   code;
	  };
	  // EventExceptionCode
	  const unsigned short      UNSPECIFIED_EVENT_TYPE_ERR     = 0;
	  // Introduced in DOM Level 3:
	  const unsigned short      DISPATCH_REQUEST_ERR           = 1;
	
	
	  // Introduced in DOM Level 2:
	  interface Event {
	
	    // PhaseType
	    const unsigned short      CAPTURING_PHASE                = 1;
	    const unsigned short      AT_TARGET                      = 2;
	    const unsigned short      BUBBLING_PHASE                 = 3;
	
	    readonly attribute DOMString       type;
	    readonly attribute EventTarget     target;
	    readonly attribute EventTarget     currentTarget;
	    readonly attribute unsigned short  eventPhase;
	    readonly attribute boolean         bubbles;
	    readonly attribute boolean         cancelable;
	    readonly attribute DOMTimeStamp    timeStamp;
	    void               stopPropagation();
	    void               preventDefault();
	    void               initEvent(in DOMString eventTypeArg,
	                                 in boolean canBubbleArg,
	                                 in boolean cancelableArg);
	    // Introduced in DOM Level 3:
	    readonly attribute DOMString       namespaceURI;
	    // Introduced in DOM Level 3:
	    boolean            isCustom();
	    // Introduced in DOM Level 3:
	    void               stopImmediatePropagation();
	    // Introduced in DOM Level 3:
	    boolean            isDefaultPrevented();
	    // Introduced in DOM Level 3:
	    void               initEventNS(in DOMString namespaceURIArg,
	                                   in DOMString eventTypeArg,
	                                   in boolean canBubbleArg,
	                                   in boolean cancelableArg);
	  };
	
	  // Introduced in DOM Level 2:
	  interface EventTarget {
	    void               addEventListener(in DOMString type,
	                                        in EventListener listener,
	                                        in boolean useCapture);
	    void               removeEventListener(in DOMString type,
	                                           in EventListener listener,
	                                           in boolean useCapture);
	    // Modified in DOM Level 3:
	    boolean            dispatchEvent(in Event evt)
	                                        raises(EventException);
	    // Introduced in DOM Level 3:
	    void               addEventListenerNS(in DOMString namespaceURI,
	                                          in DOMString type,
	                                          in EventListener listener,
	                                          in boolean useCapture,
	                                          in DOMObject evtGroup);
	    // Introduced in DOM Level 3:
	    void               removeEventListenerNS(in DOMString namespaceURI,
	                                             in DOMString type,
	                                             in EventListener listener,
	                                             in boolean useCapture);
	    // Introduced in DOM Level 3:
	    boolean            willTriggerNS(in DOMString namespaceURI,
	                                     in DOMString type);
	    // Introduced in DOM Level 3:
	    boolean            hasEventListenerNS(in DOMString namespaceURI,
	                                          in DOMString type);
	  };
	
	  // Introduced in DOM Level 2:
	  interface EventListener {
	    void               handleEvent(in Event evt);
	  };
	
	  // Introduced in DOM Level 2:
	  interface DocumentEvent {
	    Event              createEvent(in DOMString eventType)
	                                        raises(dom::DOMException);
	    // Introduced in DOM Level 3:
	    boolean            canDispatch(in DOMString namespaceURI,
	                                   in DOMString type);
	  };
	
	  // Introduced in DOM Level 3:
	  interface CustomEvent : Event {
	    void               setDispatchState(in EventTarget target,
	                                        in unsigned short phase);
	    boolean            isPropagationStopped();
	    boolean            isImmediatePropagationStopped();
	  };
	
	  // Introduced in DOM Level 2:
	  interface UIEvent : Event {
	    readonly attribute views::AbstractView view;
	    readonly attribute long            detail;
	    void               initUIEvent(in DOMString typeArg,
	                                   in boolean canBubbleArg,
	                                   in boolean cancelableArg,
	                                   in views::AbstractView viewArg,
	                                   in long detailArg);
	    // Introduced in DOM Level 3:
	    void               initUIEventNS(in DOMString namespaceURI,
	                                     in DOMString typeArg,
	                                     in boolean canBubbleArg,
	                                     in boolean cancelableArg,
	                                     in views::AbstractView viewArg,
	                                     in long detailArg);
	  };
	
	  // Introduced in DOM Level 3:
	  interface TextEvent : UIEvent {
	    readonly attribute DOMString       data;
	    void               initTextEvent(in DOMString typeArg,
	                                     in boolean canBubbleArg,
	                                     in boolean cancelableArg,
	                                     in views::AbstractView viewArg,
	                                     in DOMString dataArg);
	    void               initTextEventNS(in DOMString namespaceURI,
	                                       in DOMString type,
	                                       in boolean canBubbleArg,
	                                       in boolean cancelableArg,
	                                       in views::AbstractView viewArg,
	                                       in DOMString dataArg);
	  };
	
	  // Introduced in DOM Level 2:
	  interface MouseEvent : UIEvent {
	    readonly attribute long            screenX;
	    readonly attribute long            screenY;
	    readonly attribute long            clientX;
	    readonly attribute long            clientY;
	    readonly attribute boolean         ctrlKey;
	    readonly attribute boolean         shiftKey;
	    readonly attribute boolean         altKey;
	    readonly attribute boolean         metaKey;
	    readonly attribute unsigned short  button;
	    readonly attribute EventTarget     relatedTarget;
	    void               initMouseEvent(in DOMString typeArg,
	                                      in boolean canBubbleArg,
	                                      in boolean cancelableArg,
	                                      in views::AbstractView viewArg,
	                                      in long detailArg,
	                                      in long screenXArg,
	                                      in long screenYArg,
	                                      in long clientXArg,
	                                      in long clientYArg,
	                                      in boolean ctrlKeyArg,
	                                      in boolean altKeyArg,
	                                      in boolean shiftKeyArg,
	                                      in boolean metaKeyArg,
	                                      in unsigned short buttonArg,
	                                      in EventTarget relatedTargetArg);
	    // Introduced in DOM Level 3:
	    boolean            getModifierState(in DOMString keyIdentifierArg);
	    // Introduced in DOM Level 3:
	    void               initMouseEventNS(in DOMString namespaceURI,
	                                        in DOMString typeArg,
	                                        in boolean canBubbleArg,
	                                        in boolean cancelableArg,
	                                        in views::AbstractView viewArg,
	                                        in long detailArg,
	                                        in long screenXArg,
	                                        in long screenYArg,
	                                        in long clientXArg,
	                                        in long clientYArg,
	                                        in unsigned short buttonArg,
	                                        in EventTarget relatedTargetArg,
	                                        in DOMString modifiersList);
	  };
	
	  // Introduced in DOM Level 3:
	  interface KeyboardEvent : UIEvent {
	
	    // KeyLocationCode
	    const unsigned long       DOM_KEY_LOCATION_STANDARD      = 0x00;
	    const unsigned long       DOM_KEY_LOCATION_LEFT          = 0x01;
	    const unsigned long       DOM_KEY_LOCATION_RIGHT         = 0x02;
	    const unsigned long       DOM_KEY_LOCATION_NUMPAD        = 0x03;
	
	    readonly attribute DOMString       keyIdentifier;
	    readonly attribute unsigned long   keyLocation;
	    readonly attribute boolean         ctrlKey;
	    readonly attribute boolean         shiftKey;
	    readonly attribute boolean         altKey;
	    readonly attribute boolean         metaKey;
	    boolean            getModifierState(in DOMString keyIdentifierArg);
	    void               initKeyboardEvent(in DOMString typeArg,
	                                         in boolean canBubbleArg,
	                                         in boolean cancelableArg,
	                                         in views::AbstractView viewArg,
	                                         in DOMString keyIdentifierArg,
	                                         in unsigned long keyLocationArg,
	                                         in DOMString modifiersList);
	    void               initKeyboardEventNS(in DOMString namespaceURI,
	                                           in DOMString typeArg,
	                                           in boolean canBubbleArg,
	                                           in boolean cancelableArg,
	                                           in views::AbstractView viewArg,
	                                           in DOMString keyIdentifierArg,
	                                           in unsigned long keyLocationArg,
	                                           in DOMString modifiersList);
	  };
	
	  // Introduced in DOM Level 2:
	  interface MutationEvent : Event {
	
	    // attrChangeType
	    const unsigned short      MODIFICATION                   = 1;
	    const unsigned short      ADDITION                       = 2;
	    const unsigned short      REMOVAL                        = 3;
	
	    readonly attribute Node            relatedNode;
	    readonly attribute DOMString       prevValue;
	    readonly attribute DOMString       newValue;
	    readonly attribute DOMString       attrName;
	    readonly attribute unsigned short  attrChange;
	    void               initMutationEvent(in DOMString typeArg,
	                                         in boolean canBubbleArg,
	                                         in boolean cancelableArg,
	                                         in Node relatedNodeArg,
	                                         in DOMString prevValueArg,
	                                         in DOMString newValueArg,
	                                         in DOMString attrNameArg,
	                                         in unsigned short attrChangeArg);
	    // Introduced in DOM Level 3:
	    void               initMutationEventNS(in DOMString namespaceURI,
	                                           in DOMString typeArg,
	                                           in boolean canBubbleArg,
	                                           in boolean cancelableArg,
	                                           in Node relatedNodeArg,
	                                           in DOMString prevValueArg,
	                                           in DOMString newValueArg,
	                                           in DOMString attrNameArg,
	                                           in unsigned short attrChangeArg);
	  };
	
	  // Introduced in DOM Level 3:
	  interface MutationNameEvent : MutationEvent {
	    readonly attribute DOMString       prevNamespaceURI;
	    readonly attribute DOMString       prevNodeName;
	    // Introduced in DOM Level 3:
	    void               initMutationNameEvent(in DOMString typeArg,
	                                             in boolean canBubbleArg,
	                                             in boolean cancelableArg,
	                                             in Node relatedNodeArg,
	                                             in DOMString prevNamespaceURIArg,
	                                             in DOMString prevNodeNameArg);
	    // Introduced in DOM Level 3:
	    void               initMutationNameEventNS(in DOMString namespaceURI,
	                                               in DOMString typeArg,
	                                               in boolean canBubbleArg,
	                                               in boolean cancelableArg,
	                                               in Node relatedNodeArg,
	                                               in DOMString prevNamespaceURIArg,
	                                               in DOMString prevNodeNameArg);
	  };
	};
	
	#endif // _EVENTS_IDL_
	*/
	
	exports.dom = {
	  level3 : {
	    events:  events
	  }
	}


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	var core = __webpack_require__(65).dom.level3.core,
	    html = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../level2/html\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).dom.level2.html
	
	exports.dom = {
	  level3 : {
	    html : html,
	    core : core
	  }
	};


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	// w3c Load/Save functionality: http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407/
	
	var core = __webpack_require__(65).dom.level3.core;
	var events = __webpack_require__(67).dom.level3.events;;
	
	var ls = {};
	
	// TODO: what is this?
	//typedef dom::DOMConfiguration DOMConfiguration;
	
	ls.LSException = function LSException(code) {
	  this.code = code;
	};
	
	ls.LSException.prototype = {
	  // LSExceptionCode
	  PARSE_ERR                       : 81,
	  SERIALIZE_ERR                   : 82
	};
	
	ls.DOMImplementationLS = function DOMImplementationLS() {
	
	};
	
	var DOMImplementationExtension = {
	
	  // DOMImplementationLSMode
	  MODE_SYNCHRONOUS  : 1,
	  MODE_ASYNCHRONOUS : 2,
	
	  // raises(dom::DOMException);
	  createLSParser : function(/* int */ mode, /* string */ schemaType) {
	    return new ls.LSParser(mode, schemaType);
	  },
	
	  createLSSerializer : function() {
	    return new ls.LSSerializer();
	  },
	
	  createLSInput : function() {
	    return new ls.LSInput();
	  },
	
	  createLSOutput : function() {
	    return new ls.LSOutput();
	  }
	};
	
	Object.keys(DOMImplementationExtension).forEach(function(k, v) {
	  core.DOMImplementation.prototype[k] = DOMImplementationExtension[k];
	});
	
	ls.DOMImplementationLS.prototype = DOMImplementationExtension; 
	
	core.Document.getFeature = function() {
	  return DOMImplementationExtension;
	};
	
	ls.LSParser = function LSParser() {
	  this._domConfig = new core.DOMConfiguration();
	};
	ls.LSParser.prototype = {
	  get domConfig() { return this._domConfig; },
	  get filter() { return this._filter || null; },
	  set filter(value) { this._filter = value; },
	  get async() { return this._async; },
	  get busy() { return this._busy; },
	
	  // raises(dom::DOMException, LSException);
	  parse : function (/* LSInput */ input) {
	    var doc = new core.Document();
	    doc._inputEncoding = 'UTF-16';
	    return doc;
	  },
	
	  // raises(dom::DOMException, LSException);
	  parseURI : function(/* string */ uri) {
	    return new core.Document();
	  },
	
	  // ACTION_TYPES
	  ACTION_APPEND_AS_CHILDREN       : 1,
	  ACTION_REPLACE_CHILDREN         : 2,
	  ACTION_INSERT_BEFORE            : 3,
	  ACTION_INSERT_AFTER             : 4,
	  ACTION_REPLACE                  : 5,
	
	  // @returns Node
	  // @raises DOMException, LSException
	  parseWithContext                : function(/* LSInput */ input, /* Node */ contextArg, /* int */ action) {
	    return new core.Node();
	  },
	
	  abort                           : function() {
	    // TODO: implement
	  }
	};
	
	ls.LSInput = function LSInput() {};
	ls.LSInput.prototype = {
	  get characterStream() { return this._characterStream || null; },
	  set characterStream(value) { this._characterStream = value; },
	  get byteStream() { return this._byteStream || null; },
	  set byteStream(value) { this._byteStream = value; },
	  get stringData() { return this._stringData || null; },
	  set stringData(value) { this._stringData = value; },
	  get systemId() { return this._systemId || null; },
	  set systemId(value) { this._systemId = value; },
	  get publicId() { return this._publicId || null; },
	  set publicId(value) { this._publicId = value; },
	  get baseURI() { return this._baseURI || null; },
	  set baseURI(value) { this._baseURI = value; },
	  get encoding() { return this._encoding || null; },
	  set encoding(value) { this._encoding = value; },
	  get certifiedText() { return this._certifiedText || null; },
	  set certifiedText(value) { this._certifiedText = value; },
	};
	
	ls.LSResourceResolver = function LSResourceResolver() {};
	
	// @returns LSInput
	ls.LSResourceResolver.prototype.resolveResource = function(type, namespaceURI, publicId, systemId, baseURI) {
	  return new ls.LSInput();
	};
	
	ls.LSParserFilter = function LSParserFilter() {};
	ls.LSParserFilter.prototype = {
	
	  // Constants returned by startElement and acceptNode
	  FILTER_ACCEPT                   : 1,
	  FILTER_REJECT                   : 2,
	  FILTER_SKIP                     : 3,
	  FILTER_INTERRUPT                : 4,
	
	  get whatToShow() { return this._whatToShow; },
	
	  // @returns int
	  startElement : function(/* Element */ elementArg) {
	    return 0;
	  },
	
	  // @returns int
	  acceptNode : function(/* Node */ nodeArg) {
	    return nodeArg;
	  }
	};
	
	ls.LSSerializer = function LSSerializer() {
	  this._domConfig = new core.DOMConfiguration();
	};
	ls.LSSerializer.prototype = {
	  get domConfig() { return this._domConfig; },
	  get newLine() { return this._newLine || null; },
	  set newLine(value) { this._newLine = value; },
	  get filter() { return this._filter || null; },
	  set filter(value) { this._filter = value; },
	
	  // @returns boolean
	  // @raises LSException
	  write : function(/* Node */ nodeArg, /* LSOutput */ destination) {
	   return true;
	  },
	
	  // @returns boolean
	  // @raises LSException
	  writeToURI : function(/* Node */ nodeArg, /* string */ uri) {
	   return true;
	  },
	
	  // @returns string
	  // @raises DOMException, LSException
	  writeToString : function(/* Node */ nodeArg) {
	    return "";
	  }
	};
	
	ls.LSOutput = function LSOutput() {};
	ls.LSOutput.prototype = {
	  get characterStream() { return this._characterStream || null; },
	  set characterStream(value) { this._characterStream = value; },
	  get byteStream() { return this._byteStream || null; },
	  set byteStream(value) { this._byteStream = value; },
	  get systemId() { return this._systemId || null; },
	  set systemId(value) { this._systemId = value; },
	  get encoding() { return this._encoding || null; },
	  set encoding(value) { this._encoding = value; },
	};
	
	ls.LSProgressEvent = function LSProgressEvent() {};
	ls.LSProgressEvent.prototype = {
	  get input() { return this._input; },
	  get position() { return this._position; },
	  get totalSize() { return this._totalSize; },
	};
	
	ls.LSProgressEvent.prototype.__proto__ = events.Event;
	
	ls.LSLoadEvent = function LSLoadEvent() {};
	ls.LSLoadEvent.prototype = {
	  get newDocument() { return this._newDocument; },
	  get input() { return this._input; },
	};
	
	ls.LSLoadEvent.prototype.__proto__ = events.Event;
	
	
	// TODO: do traversal
	ls.LSSerializerFilter = function LSSerializerFilter() {};
	ls.LSSerializerFilter.prototype = {
	  get whatToShow() { return this._whatToShow; },
	};
	
	// ls.LSSerializerFilter.prototype.__proto__ = level2.traversal.NodeFiler;
	
	// Export
	module.exports.dom = {
	  level3 : {
	    ls : ls 
	  }
	};
	


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	var HTMLDecode = __webpack_require__(72).HTMLDecode;
	
	function HtmlToDom(parser) {
	
	  if(parser && parser.write) {
	    // sax parser
	    this.appendHtmlToElement = function(html, element){
	
	      var currentElement = element, currentLevel = 0;
	
	      parser.onerror = function (e) {};
	
	      parser.ontext = function (t) {
	        var ownerDocument = currentElement.ownerDocument || currentElement;
	        var newText = ownerDocument.createTextNode(t);
	        currentElement.appendChild(newText);
	      };
	
	      parser.onopentag = function (node) {
	        var nodeName  = node.name.toLowerCase(),
	            document   = currentElement.ownerDocument || currentElement,
	            newElement = document.createElement(nodeName),
	            i          = 0,
	            length     = (node.attributes && node.attributes.length) ?
	                          node.attributes.length                     :
	                          0;
	
	        for (i in node.attributes) {
	          if (node.attributes.hasOwnProperty(i)) {
	            newElement.setAttribute(i, node.attributes[i]);
	          }
	        }
	
	        for (i=0; i<node.attributes.length; i++) {
	            newElement.setAttribute(i, node.attributes.item(i));
	        }
	        currentElement.appendChild(newElement);
	        currentElement = newElement;
	      };
	
	      parser.onclosetag = function(node) {
	        currentElement = currentElement.parentNode;
	      };
	
	      parser.write(html).close();
	
	      return element;
	    };
	
	  } else if (parser && (parser.ParseHtml || parser.DefaultHandler)) {
	
	    // Forgiving HTML parser
	
	    if (parser.ParseHtml) {
	      // davglass/node-htmlparser
	    } else if (parser.DefaultHandler){
	      // tautologistics/node-htmlparser
	
	      var handler        = new parser.DefaultHandler(),
	          parserInstance = new parser.Parser(handler);
	      parser.ParseHtml = function(rawHtml){
	        parserInstance.includeLocation = false;
	        parserInstance.parseComplete(rawHtml);
	        return handler.dom;
	      };
	    }
	
	    this.appendHtmlToElement = function(html, element) {
	
	      if (typeof html !== 'string') {
	        html +='';
	      }
	
	      var parsed = parser.ParseHtml(html);
	
	      for (var i = 0; i < parsed.length; i++) {
	        setChild(element, parsed[i]);
	      }
	
	      return element;
	    };
	
	  } else if (parser && parser.moduleName == 'HTML5') { /* HTML5 parser */
	    this.appendHtmlToElement = function(html, element) {
	
	      if (typeof html !== 'string') {
	        html += '';
	      }
	      if (html.length > 0) {
	        if (element.nodeType == 9) {
	          new parser.Parser({document: element}).parse(html);
	        }
	        else {
	          var p = new parser.Parser({document: element.ownerDocument});
	          p.parse_fragment(html, element);
	        }
	      }
	    };
	  } else {
	
	    this.appendHtmlToElement = function(){
	      console.log('');
	      console.log('###########################################################');
	      console.log('#  WARNING: No HTML parser could be found.');
	      console.log('#  Element.innerHTML setter support has been disabled');
	      console.log('#  Element.innerHTML getter support will still function');
	      console.log('#  Download: http://github.com/tautologistics/node-htmlparser');
	      console.log('###########################################################');
	      console.log('');
	    };
	
	  }
	};
	
	// utility function for forgiving parser
	function setChild(parent, node) {
	
	  var c, newNode, currentDocument = parent._ownerDocument || parent;
	
	  switch (node.type)
	  {
	    case 'tag':
	    case 'script':
	    case 'style':
	      try {
	        newNode = currentDocument.createElement(node.name);
	        if (node.location) {
	          newNode.sourceLocation = node.location;
	          newNode.sourceLocation.file = parent.sourceLocation.file;
	        }
	      } catch (err) {
	        currentDocument.raise('error', 'invalid markup', {
	          exception: err,
	          node : node
	        });
	
	        return null;
	      }
	    break;
	
	    case 'text':
	      // Decode HTML entities if we're not inside a <script> or <style> tag:
	      newNode = currentDocument.createTextNode(/^(?:script|style)$/i.test(parent.nodeName) ?
	                                                   node.data :
	                                                   HTMLDecode(node.data));
	    break;
	
	    case 'comment':
	      newNode = currentDocument.createComment(node.data);
	    break;
	
	    default:
	      return null;
	    break;
	  }
	
	  if (!newNode)
	    return null;
	
	  if (node.attribs) {
	    for (c in node.attribs) {
	      // catchin errors here helps with improperly escaped attributes
	      // but properly fixing parent should (can only?) be done in the htmlparser itself
	      try {
	        newNode.setAttribute(c.toLowerCase(), HTMLDecode(node.attribs[c]));
	      } catch(e2) { /* noop */ }
	    }
	  }
	
	  if (node.children) {
	    for (c = 0; c < node.children.length; c++) {
	      setChild(newNode, node.children[c]);
	    }
	  }
	
	  try{
	    return parent.appendChild(newNode);
	  }catch(err){
	    currentDocument.raise('error', err.message, {
	          exception: err,
	          node : node
	        });
	    return null;
	  }
	}
	
	exports.HtmlToDom = HtmlToDom;


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	//List from node-htmlparser
	var singleTags = {
	  area: 1,
	  base: 1,
	  basefont: 1,
	  br: 1,
	  col: 1,
	  frame: 1,
	  hr: 1,
	  img: 1,
	  input: 1,
	  isindex: 1,
	  link: 1,
	  meta: 1,
	  param: 1,
	  embed: 1
	};
	
	var expr = {
	  upperCaseChars: /([A-Z])/g,
	  breakBetweenTags: /(<(\/?\w+).*?>)(?=<(?!\/\2))/gi,
	  singleTag: (function() {
	    var tags = [];
	    for (var i in singleTags) {
	      tags.push(i);
	    }
	    return new RegExp('<' + tags.join('|<'), 'i');
	  })()
	};
	
	var uncanon = function(str, letter) {
	  return '-' + letter.toLowerCase();
	};
	
	var HTMLEncode = __webpack_require__(72).HTMLEncode;
	
	exports.stringifyElement = function stringifyElement(element) {
	  var tagName = element.tagName.toLowerCase(),
	      ret = {
	        start: "<" + tagName,
	        end:''
	      },
	      attributes = [],
	      i,
	      attribute = null;
	
	  if (element.attributes.length) {
	    ret.start += " ";
	    for (i = 0; i<element.attributes.length; i++) {
	      attribute = element.attributes.item(i);
	      attributes.push(attribute.name + '="' +
	                      HTMLEncode(attribute.nodeValue, true) + '"');
	    }
	  }
	  ret.start += attributes.join(" ");
	
	  if (singleTags[tagName]) {
	    ret.start += " />";
	    ret.end = '';
	  } else {
	    ret.start += ">";
	    ret.end = "</" + tagName + ">";
	  }
	
	  return ret;
	};
	
	var rawTextElements = /SCRIPT|STYLE/i;
	
	function stringifyDoctype (doctype) {
	  if (doctype.ownerDocument && doctype.ownerDocument._fullDT) {
	    return doctype.ownerDocument._fullDT;
	  }
	
	  var dt = '<!DOCTYPE ' + doctype.name;
	  if (doctype.publicId) {
	    // Public ID may never contain double quotes, so this is always safe.
	    dt += ' PUBLIC "' + doctype.publicId + '" ';
	  }
	  if (!doctype.publicId && doctype.systemId) {
	    dt += ' SYSTEM ';
	  }
	  if (doctype.systemId) {
	    // System ID may contain double quotes OR single quotes, not never both.
	    if (doctype.systemId.indexOf('"') > -1) {
	      dt += "'" + doctype.systemId + "'";
	    } else {
	      dt += '"' + doctype.systemId + '"';
	    }
	  }
	  dt += '>';
	  return dt;
	}
	
	exports.makeHtmlGenerator = function makeHtmlGenerator(indentUnit, eol) {
	  indentUnit = indentUnit || "";
	  eol = eol || "";
	
	  return function generateHtmlRecursive(node, rawText, curIndent) {
	    var ret = "", parent, current, i;
	    curIndent = curIndent || "";
	    if (node) {
	      if (node.nodeType &&
	          node.nodeType === node.ENTITY_REFERENCE_NODE) {
	        node = node._entity;
	      }
	
	      var childNodesRawText = rawText || rawTextElements.test(node.nodeName);
	
	      switch (node.nodeType) {
	        case node.ELEMENT_NODE:
	          current = exports.stringifyElement(node);
	          if (childNodesRawText) {
	            ret += curIndent + current.start;
	          } else {
	            ret += curIndent + current.start;
	          }
	          if (node._childNodes.length > 0) {
	            if (node._childNodes[0].nodeType !== node.TEXT_NODE) {
	              ret += eol;
	            }
	            for (i=0; i<node._childNodes.length; i++) {
	              ret += generateHtmlRecursive(node._childNodes[i], childNodesRawText, curIndent + indentUnit);
	            }
	            if (node._childNodes[node._childNodes.length - 1].nodeType !== node.TEXT_NODE) {
	              ret += curIndent;
	            }
	            ret += current.end + eol;
	          } else {
	            ret += ((rawText ? node.nodeValue : HTMLEncode(node.nodeValue, false)) || '') + current.end + eol;
	          }
	          break;
	        case node.TEXT_NODE:
	          // Skip pure whitespace nodes if we're indenting
	          if (!indentUnit || !/^[\s\n]*$/.test(node.nodeValue)) {
	            ret += (rawText ? node.nodeValue : HTMLEncode(node.nodeValue, false)) || '';
	          }
	          break;
	        case node.COMMENT_NODE:
	          ret += curIndent + '<!--' + node.nodeValue + '-->' + eol;
	          break;
	        case node.DOCUMENT_NODE:
	          for (i=0; i<node._childNodes.length; i++) {
	            ret += generateHtmlRecursive(node._childNodes[i], childNodesRawText, curIndent);
	          }
	          break;
	        case node.DOCUMENT_TYPE_NODE:
	          ret += stringifyDoctype(node);
	        break;
	      }
	    }
	    return ret;
	  };
	};
	
	exports.domToHtml = function(dom, noformat, raw) {
	  var htmlGenerator = exports.makeHtmlGenerator(noformat ? "" : "  ",
	                                                noformat ? "" : "\n");
	  if (dom.toArray) {
	    // node list
	    dom = dom.toArray();
	  }
	  if (typeof dom.length !== 'undefined') {
	    var ret = "";
	    for (var i=0,len=dom.length; i<len; i++) {
	      ret += htmlGenerator(dom[i], raw);
	    }
	    return ret;
	  } else {
	    // single node
	    return htmlGenerator(dom, raw);
	  }
	};


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	var charByEntityName = {
	  'quot': '"',
	  'amp': '&',
	  'apos': '\'',
	  'lt': '<',
	  'gt': '>',
	  'nbsp': 'Â ',
	  'iexcl': 'Â¡',
	  'cent': 'Â¢',
	  'pound': 'Â£',
	  'curren': 'Â¤',
	  'yen': 'Â¥',
	  'brvbar': 'Â¦',
	  'sect': 'Â§',
	  'uml': 'Â¨',
	  'copy': 'Â©',
	  'ordf': 'Âª',
	  'laquo': 'Â«',
	  'not': 'Â¬',
	  'shy': 'Â­',
	  'reg': 'Â®',
	  'macr': 'Â¯', // http://www.w3.org/TR/html4/sgml/entities.html
	  'strns': 'Â¯', // http://www.w3.org/TR/html5/named-character-references.html
	  'deg': 'Â°',
	  'plusmn': 'Â±', // http://www.w3.org/TR/html4/sgml/entities.html
	  'pm': 'Â±', // http://www.w3.org/TR/html5/named-character-references.html
	  'sup2': 'Â²',
	  'sup3': 'Â³',
	  'acute': 'Â´',
	  'micro': 'Âµ',
	  'para': 'Â¶',
	  'middot': 'Â·',
	  'cedil': 'Â¸',
	  'sup1': 'Â¹',
	  'ordm': 'Âº',
	  'raquo': 'Â»',
	  'frac14': 'Â¼',
	  'half': 'Â½', // http://www.w3.org/TR/html4/sgml/entities.html
	  'frac12': 'Â½', // http://www.w3.org/TR/html5/named-character-references.html
	  'frac34': 'Â¾',
	  'iquest': 'Â¿',
	  'Agrave': 'Ã',
	  'Aacute': 'Ã',
	  'Acirc': 'Ã',
	  'Atilde': 'Ã',
	  'Auml': 'Ã',
	  'Aring': 'Ã', // http://www.w3.org/TR/html4/sgml/entities.html
	  'angst': 'Ã', // http://www.w3.org/TR/html5/named-character-references.html
	  'AElig': 'Ã',
	  'Ccedil': 'Ã',
	  'Egrave': 'Ã',
	  'Eacute': 'Ã',
	  'Ecirc': 'Ã',
	  'Euml': 'Ã',
	  'Igrave': 'Ã',
	  'Iacute': 'Ã',
	  'Icirc': 'Ã',
	  'Iuml': 'Ã',
	  'ETH': 'Ã',
	  'Ntilde': 'Ã',
	  'Ograve': 'Ã',
	  'Oacute': 'Ã',
	  'Ocirc': 'Ã',
	  'Otilde': 'Ã',
	  'Ouml': 'Ã',
	  'times': 'Ã',
	  'Oslash': 'Ã',
	  'Ugrave': 'Ã',
	  'Uacute': 'Ã',
	  'Ucirc': 'Ã',
	  'Uuml': 'Ã',
	  'Yacute': 'Ã',
	  'THORN': 'Ã',
	  'szlig': 'Ã',
	  'agrave': 'Ã ',
	  'aacute': 'Ã¡',
	  'acirc': 'Ã¢',
	  'atilde': 'Ã£',
	  'auml': 'Ã¤',
	  'aring': 'Ã¥',
	  'aelig': 'Ã¦',
	  'ccedil': 'Ã§',
	  'egrave': 'Ã¨',
	  'eacute': 'Ã©',
	  'ecirc': 'Ãª',
	  'euml': 'Ã«',
	  'igrave': 'Ã¬',
	  'iacute': 'Ã­',
	  'icirc': 'Ã®',
	  'iuml': 'Ã¯',
	  'eth': 'Ã°',
	  'ntilde': 'Ã±',
	  'ograve': 'Ã²',
	  'oacute': 'Ã³',
	  'ocirc': 'Ã´',
	  'otilde': 'Ãµ',
	  'ouml': 'Ã¶',
	  'divide': 'Ã·',
	  'oslash': 'Ã¸',
	  'ugrave': 'Ã¹',
	  'uacute': 'Ãº',
	  'ucirc': 'Ã»',
	  'uuml': 'Ã¼',
	  'yacute': 'Ã½',
	  'thorn': 'Ã¾',
	  'yuml': 'Ã¿',
	  'Amacr': 'Ä',
	  'amacr': 'Ä',
	  'Abreve': 'Ä',
	  'abreve': 'Ä',
	  'Aogon': 'Ä',
	  'aogon': 'Ä',
	  'Cacute': 'Ä',
	  'cacute': 'Ä',
	  'Ccirc': 'Ä',
	  'ccirc': 'Ä',
	  'Cdot': 'Ä',
	  'cdot': 'Ä',
	  'Ccaron': 'Ä',
	  'ccaron': 'Ä',
	  'Dcaron': 'Ä',
	  'dcaron': 'Ä',
	  'Dstrok': 'Ä',
	  'dstrok': 'Ä',
	  'Emacr': 'Ä',
	  'emacr': 'Ä',
	  'Edot': 'Ä',
	  'edot': 'Ä',
	  'Eogon': 'Ä',
	  'eogon': 'Ä',
	  'Ecaron': 'Ä',
	  'ecaron': 'Ä',
	  'Gcirc': 'Ä',
	  'gcirc': 'Ä',
	  'Gbreve': 'Ä',
	  'gbreve': 'Ä',
	  'Gdot': 'Ä ',
	  'gdot': 'Ä¡',
	  'Gcedil': 'Ä¢',
	  'Hcirc': 'Ä¤',
	  'hcirc': 'Ä¥',
	  'Hstrok': 'Ä¦',
	  'hstrok': 'Ä§',
	  'Itilde': 'Ä¨',
	  'itilde': 'Ä©',
	  'Imacr': 'Äª',
	  'imacr': 'Ä«',
	  'Iogon': 'Ä®',
	  'iogon': 'Ä¯',
	  'Idot': 'Ä°',
	  'inodot': 'Ä±',
	  'IJlig': 'Ä²',
	  'ijlig': 'Ä³',
	  'Jcirc': 'Ä´',
	  'jcirc': 'Äµ',
	  'Kcedil': 'Ä¶',
	  'kcedil': 'Ä·',
	  'kgreen': 'Ä¸',
	  'Lacute': 'Ä¹',
	  'lacute': 'Äº',
	  'Lcedil': 'Ä»',
	  'lcedil': 'Ä¼',
	  'Lcaron': 'Ä½',
	  'lcaron': 'Ä¾',
	  'Lmidot': 'Ä¿',
	  'lmidot': 'Å',
	  'Lstrok': 'Å',
	  'lstrok': 'Å',
	  'Nacute': 'Å',
	  'nacute': 'Å',
	  'Ncedil': 'Å',
	  'ncedil': 'Å',
	  'Ncaron': 'Å',
	  'ncaron': 'Å',
	  'napos': 'Å',
	  'ENG': 'Å',
	  'eng': 'Å',
	  'Omacr': 'Å',
	  'omacr': 'Å',
	  'Odblac': 'Å',
	  'odblac': 'Å',
	  'OElig': 'Å',
	  'oelig': 'Å',
	  'Racute': 'Å',
	  'racute': 'Å',
	  'Rcedil': 'Å',
	  'rcedil': 'Å',
	  'Rcaron': 'Å',
	  'rcaron': 'Å',
	  'Sacute': 'Å',
	  'sacute': 'Å',
	  'Scirc': 'Å',
	  'scirc': 'Å',
	  'Scedil': 'Å',
	  'scedil': 'Å',
	  'Scaron': 'Å ',
	  'scaron': 'Å¡',
	  'Tcedil': 'Å¢',
	  'tcedil': 'Å£',
	  'Tcaron': 'Å¤',
	  'tcaron': 'Å¥',
	  'Tstrok': 'Å¦',
	  'tstrok': 'Å§',
	  'Utilde': 'Å¨',
	  'utilde': 'Å©',
	  'Umacr': 'Åª',
	  'umacr': 'Å«',
	  'Ubreve': 'Å¬',
	  'ubreve': 'Å­',
	  'Uring': 'Å®',
	  'uring': 'Å¯',
	  'Udblac': 'Å°',
	  'udblac': 'Å±',
	  'Uogon': 'Å²',
	  'uogon': 'Å³',
	  'Wcirc': 'Å´',
	  'wcirc': 'Åµ',
	  'Ycirc': 'Å¶',
	  'ycirc': 'Å·',
	  'Yuml': 'Å¸',
	  'Zacute': 'Å¹',
	  'zacute': 'Åº',
	  'Zdot': 'Å»',
	  'zdot': 'Å¼',
	  'Zcaron': 'Å½',
	  'zcaron': 'Å¾',
	  'fnof': 'Æ',
	  'imped': 'Æµ',
	  'gacute': 'Çµ',
	  'jmath': 'È·',
	  'circ': 'Ë',
	  'caron': 'Ë',
	  'breve': 'Ë',
	  'dot': 'Ë',
	  'ring': 'Ë',
	  'ogon': 'Ë',
	  'tilde': 'Ë',
	  'dblac': 'Ë',
	  'Alpha': 'Î',
	  'Beta': 'Î',
	  'Gamma': 'Î',
	  'Delta': 'Î',
	  'Epsilon': 'Î',
	  'Zeta': 'Î',
	  'Eta': 'Î',
	  'Theta': 'Î',
	  'Iota': 'Î',
	  'Kappa': 'Î',
	  'Lambda': 'Î',
	  'Mu': 'Î',
	  'Nu': 'Î',
	  'Xi': 'Î',
	  'Omicron': 'Î',
	  'Pi': 'Î ',
	  'Rho': 'Î¡',
	  'Sigma': 'Î£',
	  'Tau': 'Î¤',
	  'Upsilon': 'Î¥',
	  'Phi': 'Î¦',
	  'Chi': 'Î§',
	  'Psi': 'Î¨',
	  'Omega': 'Î©', // http://www.w3.org/TR/html4/sgml/entities.html
	  'ohm': 'Î©', // http://www.w3.org/TR/html5/named-character-references.html
	  'alpha': 'Î±',
	  'beta': 'Î²',
	  'gamma': 'Î³',
	  'delta': 'Î´',
	  'epsilon': 'Îµ',
	  'zeta': 'Î¶',
	  'eta': 'Î·',
	  'theta': 'Î¸',
	  'iota': 'Î¹',
	  'kappa': 'Îº',
	  'lambda': 'Î»',
	  'mu': 'Î¼',
	  'nu': 'Î½',
	  'xi': 'Î¾',
	  'omicron': 'Î¿',
	  'pi': 'Ï',
	  'rho': 'Ï',
	  'sigmaf': 'Ï', // http://www.w3.org/TR/html4/sgml/entities.html
	  'varsigma': 'Ï', // http://www.w3.org/TR/html5/named-character-references.html
	  'sigma': 'Ï',
	  'tau': 'Ï',
	  'upsilon': 'Ï',
	  'phi': 'Ï',
	  'chi': 'Ï',
	  'psi': 'Ï',
	  'omega': 'Ï',
	  'thetasym': 'Ï', // http://www.w3.org/TR/html4/sgml/entities.html
	  'vartheta': 'Ï', // http://www.w3.org/TR/html5/named-character-references.html
	  'upsih': 'Ï',
	  'varphi': 'Ï',
	  'piv': 'Ï', // http://www.w3.org/TR/html4/sgml/entities.html
	  'varpi': 'Ï', // http://www.w3.org/TR/html5/named-character-references.html
	  'Gammad': 'Ï',
	  'gammad': 'Ï',
	  'varkappa': 'Ï°',
	  'varrho': 'Ï±',
	  'varepsilon': 'Ïµ',
	  'bepsi': 'Ï¶',
	  'IOcy': 'Ð',
	  'DJcy': 'Ð',
	  'GJcy': 'Ð',
	  'Jukcy': 'Ð',
	  'DScy': 'Ð',
	  'Iukcy': 'Ð',
	  'YIcy': 'Ð',
	  'Jsercy': 'Ð',
	  'LJcy': 'Ð',
	  'NJcy': 'Ð',
	  'TSHcy': 'Ð',
	  'KJcy': 'Ð',
	  'Ubrcy': 'Ð',
	  'DZcy': 'Ð',
	  'Acy': 'Ð',
	  'Bcy': 'Ð',
	  'Vcy': 'Ð',
	  'Gcy': 'Ð',
	  'Dcy': 'Ð',
	  'IEcy': 'Ð',
	  'ZHcy': 'Ð',
	  'Zcy': 'Ð',
	  'Icy': 'Ð',
	  'Jcy': 'Ð',
	  'Kcy': 'Ð',
	  'Lcy': 'Ð',
	  'Mcy': 'Ð',
	  'Ncy': 'Ð',
	  'Ocy': 'Ð',
	  'Pcy': 'Ð',
	  'Rcy': 'Ð ',
	  'Scy': 'Ð¡',
	  'Tcy': 'Ð¢',
	  'Ucy': 'Ð£',
	  'Fcy': 'Ð¤',
	  'KHcy': 'Ð¥',
	  'TScy': 'Ð¦',
	  'CHcy': 'Ð§',
	  'SHcy': 'Ð¨',
	  'SHCHcy': 'Ð©',
	  'HARDcy': 'Ðª',
	  'Ycy': 'Ð«',
	  'SOFTcy': 'Ð¬',
	  'Ecy': 'Ð­',
	  'YUcy': 'Ð®',
	  'YAcy': 'Ð¯',
	  'acy': 'Ð°',
	  'bcy': 'Ð±',
	  'vcy': 'Ð²',
	  'gcy': 'Ð³',
	  'dcy': 'Ð´',
	  'iecy': 'Ðµ',
	  'zhcy': 'Ð¶',
	  'zcy': 'Ð·',
	  'icy': 'Ð¸',
	  'jcy': 'Ð¹',
	  'kcy': 'Ðº',
	  'lcy': 'Ð»',
	  'mcy': 'Ð¼',
	  'ncy': 'Ð½',
	  'ocy': 'Ð¾',
	  'pcy': 'Ð¿',
	  'rcy': 'Ñ',
	  'scy': 'Ñ',
	  'tcy': 'Ñ',
	  'ucy': 'Ñ',
	  'fcy': 'Ñ',
	  'khcy': 'Ñ',
	  'tscy': 'Ñ',
	  'chcy': 'Ñ',
	  'shcy': 'Ñ',
	  'shchcy': 'Ñ',
	  'hardcy': 'Ñ',
	  'ycy': 'Ñ',
	  'softcy': 'Ñ',
	  'ecy': 'Ñ',
	  'yucy': 'Ñ',
	  'yacy': 'Ñ',
	  'iocy': 'Ñ',
	  'djcy': 'Ñ',
	  'gjcy': 'Ñ',
	  'jukcy': 'Ñ',
	  'dscy': 'Ñ',
	  'iukcy': 'Ñ',
	  'yicy': 'Ñ',
	  'jsercy': 'Ñ',
	  'ljcy': 'Ñ',
	  'njcy': 'Ñ',
	  'tshcy': 'Ñ',
	  'kjcy': 'Ñ',
	  'ubrcy': 'Ñ',
	  'dzcy': 'Ñ',
	  'ensp': 'â',
	  'emsp': 'â',
	  'emsp13': 'â',
	  'emsp14': 'â',
	  'numsp': 'â',
	  'puncsp': 'â',
	  'thinsp': 'â',
	  'hairsp': 'â',
	  'ZeroWidthSpace': 'â',
	  'zwnj': 'â',
	  'zwj': 'â',
	  'lrm': 'â',
	  'rlm': 'â',
	  'hyphen': 'â',
	  'ndash': 'â',
	  'mdash': 'â',
	  'horbar': 'â',
	  'Vert': 'â',
	  'lsquo': 'â',
	  'rsquo': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'rsquor': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'sbquo': 'â',
	  'ldquo': 'â',
	  'rdquo': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'rdquor': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'ldquo': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'ldquor': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'dagger': 'â ',
	  'Dagger': 'â¡', // http://www.w3.org/TR/html4/sgml/entities.html
	  'ddagger': 'â¡', // http://www.w3.org/TR/html5/named-character-references.html
	  'bull': 'â¢', // http://www.w3.org/TR/html4/sgml/entities.html
	  'bullet': 'â¢', // http://www.w3.org/TR/html5/named-character-references.html
	  'nldr': 'â¥',
	  'hellip': 'â¦', // http://www.w3.org/TR/html4/sgml/entities.html
	  'mldr': 'â¦', // http://www.w3.org/TR/html5/named-character-references.html
	  'permil': 'â°',
	  'pertenk': 'â±',
	  'prime': 'â²',
	  'Prime': 'â³',
	  'tprime': 'â´',
	  'bprime': 'âµ',
	  'lsaquo': 'â¹',
	  'rsaquo': 'âº',
	  'oline': 'â¾',
	  'caret': 'â',
	  'hybull': 'â',
	  'frasl': 'â',
	  'bsemi': 'â',
	  'qprime': 'â',
	  'MediumSpace': 'â',
	  'NoBreak': 'â ',
	  'af': 'â¡',
	  'it': 'â¢',
	  'ic': 'â£',
	  'euro': 'â¬',
	  'complexes': 'â',
	  'incare': 'â',
	  'gscr': 'â',
	  'hamilt': 'â',
	  'Poincareplane': 'â',
	  'quaternions': 'â',
	  'planckh': 'â',
	  'plankv': 'â',
	  'imagline': 'â',
	  'image': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'imagpart': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'lagran': 'â',
	  'ell': 'â',
	  'naturals': 'â',
	  'numero': 'â',
	  'copysr': 'â',
	  'weierp': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'wp': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'primes': 'â',
	  'rationals': 'â',
	  'realine': 'â',
	  'real': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'realpart': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'reals': 'â',
	  'rx': 'â',
	  'trade': 'â¢',
	  'integers': 'â¤',
	  'mho': 'â§',
	  'zeetrf': 'â¨',
	  'iiota': 'â©',
	  'bernou': 'â¬',
	  'Cfr': 'â­',
	  'escr': 'â¯',
	  'expectation': 'â°',
	  'Fscr': 'â±',
	  'phmmat': 'â³',
	  'oscr': 'â´',
	  'alefsym': 'âµ', // http://www.w3.org/TR/html4/sgml/entities.html
	  'aleph': 'âµ', // http://www.w3.org/TR/html5/named-character-references.html
	  'beth': 'â¶',
	  'gimel': 'â·',
	  'daleth': 'â¸',
	  'DD': 'â',
	  'dd': 'â',
	  'exponentiale': 'â',
	  'ii': 'â',
	  'frac13': 'â',
	  'frac23': 'â',
	  'frac15': 'â',
	  'frac25': 'â',
	  'frac35': 'â',
	  'frac45': 'â',
	  'frac16': 'â',
	  'frac56': 'â',
	  'frac18': 'â',
	  'frac38': 'â',
	  'frac58': 'â',
	  'frac78': 'â',
	  'larr': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'slarr': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'uarr': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'uparrow': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'rarr': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'srarr': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'darr': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'downarrow': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'harr': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'leftrightarrow': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'varr': 'â',
	  'nwarrow': 'â',
	  'nearrow': 'â',
	  'searrow': 'â',
	  'swarrow': 'â',
	  'nleftarrow': 'â',
	  'nrightarrow': 'â',
	  'rightsquigarrow': 'â',
	  'twoheadleftarrow': 'â',
	  'Uarr': 'â',
	  'twoheadrightarrow': 'â ',
	  'Darr': 'â¡',
	  'leftarrowtail': 'â¢',
	  'rightarrowtail': 'â£',
	  'mapstoleft': 'â¤',
	  'mapstoup': 'â¥',
	  'mapsto': 'â¦',
	  'mapstodown': 'â§',
	  'larrhk': 'â©',
	  'rarrhk': 'âª',
	  'looparrowleft': 'â«',
	  'rarrlp': 'â¬',
	  'leftrightsquigarrow': 'â­',
	  'nleftrightarrow': 'â®',
	  'lsh': 'â°',
	  'rsh': 'â±',
	  'ldsh': 'â²',
	  'rdsh': 'â³',
	  'crarr': 'âµ',
	  'curvearrowleft': 'â¶',
	  'curvearrowright': 'â·',
	  'olarr': 'âº',
	  'orarr': 'â»',
	  'lharu': 'â¼',
	  'lhard': 'â½',
	  'upharpoonright': 'â¾',
	  'upharpoonleft': 'â¿',
	  'rightharpoonup': 'â',
	  'rightharpoondown': 'â',
	  'downharpoonright': 'â',
	  'downharpoonleft': 'â',
	  'rlarr': 'â',
	  'udarr': 'â',
	  'lrarr': 'â',
	  'llarr': 'â',
	  'uuarr': 'â',
	  'rrarr': 'â',
	  'downdownarrows': 'â',
	  'lrhar': 'â',
	  'rlhar': 'â',
	  'nlArr': 'â',
	  'nhArr': 'â',
	  'nrArr': 'â',
	  'lArr': 'â',
	  'uArr': 'â',
	  'rArr': 'â',
	  'dArr': 'â',
	  'hArr': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'iff': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'vArr': 'â',
	  'nwArr': 'â',
	  'neArr': 'â',
	  'seArr': 'â',
	  'swArr': 'â',
	  'lAarr': 'â',
	  'rAarr': 'â',
	  'zigrarr': 'â',
	  'larrb': 'â¤',
	  'rarrb': 'â¥',
	  'duarr': 'âµ',
	  'loarr': 'â½',
	  'roarr': 'â¾',
	  'hoarr': 'â¿',
	  'forall': 'â',
	  'complement': 'â',
	  'part': 'â',
	  'exist': 'â',
	  'nexists': 'â',
	  'empty': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'varnothing': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'nabla': 'â',
	  'isin': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'isinv': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'notin': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'notinva': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'ni': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'niv': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'notniva': 'â',
	  'prod': 'â',
	  'coprod': 'â',
	  'sum': 'â',
	  'minus': 'â',
	  'mp': 'â',
	  'plusdo': 'â',
	  'ssetmn': 'â',
	  'lowast': 'â',
	  'compfn': 'â',
	  'radic': 'â',
	  'prop': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'vprop': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'infin': 'â',
	  'angrt': 'â',
	  'ang': 'â ', // http://www.w3.org/TR/html4/sgml/entities.html
	  'angle': 'â ', // http://www.w3.org/TR/html5/named-character-references.html
	  'measuredangle': 'â¡',
	  'angsph': 'â¢',
	  'smid': 'â£',
	  'nsmid': 'â¤',
	  'spar': 'â¥',
	  'nspar': 'â¦',
	  'and': 'â§', // http://www.w3.org/TR/html4/sgml/entities.html
	  'wedge': 'â§', // http://www.w3.org/TR/html5/named-character-references.html
	  'or': 'â¨', // http://www.w3.org/TR/html4/sgml/entities.html
	  'vee': 'â¨', // http://www.w3.org/TR/html5/named-character-references.html
	  'cap': 'â©',
	  'cup': 'âª',
	  'int': 'â«',
	  'Int': 'â¬',
	  'tint': 'â­',
	  'oint': 'â®',
	  'DoubleContourIntegral': 'â¯',
	  'Cconint': 'â°',
	  'cwint': 'â±',
	  'cwconint': 'â²',
	  'awconint': 'â³',
	  'there4': 'â´', // http://www.w3.org/TR/html4/sgml/entities.html
	  'therefore': 'â´', // http://www.w3.org/TR/html5/named-character-references.html
	  'because': 'âµ',
	  'ratio': 'â¶',
	  'Proportion': 'â·',
	  'minusd': 'â¸',
	  'mDDot': 'âº',
	  'homtht': 'â»',
	  'sim': 'â¼', // http://www.w3.org/TR/html4/sgml/entities.html
	  'thksim': 'â¼', // http://www.w3.org/TR/html5/named-character-references.html
	  'bsim': 'â½',
	  'mstpos': 'â¾',
	  'acd': 'â¿',
	  'wreath': 'â',
	  'nsim': 'â',
	  'esim': 'â',
	  'simeq': 'â',
	  'nsimeq': 'â',
	  'cong': 'â',
	  'simne': 'â',
	  'ncong': 'â',
	  'asymp': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'thkap': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'napprox': 'â',
	  'approxeq': 'â',
	  'apid': 'â',
	  'bcong': 'â',
	  'asympeq': 'â',
	  'bump': 'â',
	  'bumpeq': 'â',
	  'esdot': 'â',
	  'eDot': 'â',
	  'fallingdotseq': 'â',
	  'risingdotseq': 'â',
	  'coloneq': 'â',
	  'eqcolon': 'â',
	  'eqcirc': 'â',
	  'cire': 'â',
	  'wedgeq': 'â',
	  'veeeq': 'â',
	  'trie': 'â',
	  'questeq': 'â',
	  'ne': 'â ',
	  'equiv': 'â¡',
	  'nequiv': 'â¢',
	  'le': 'â¤', // http://www.w3.org/TR/html4/sgml/entities.html
	  'leq': 'â¤', // http://www.w3.org/TR/html5/named-character-references.html
	  'ge': 'â¥', // http://www.w3.org/TR/html4/sgml/entities.html
	  'geq': 'â¥', // http://www.w3.org/TR/html5/named-character-references.html
	  'leqq': 'â¦',
	  'geqq': 'â§',
	  'lneqq': 'â¨',
	  'gneqq': 'â©',
	  'll': 'âª',
	  'gg': 'â«',
	  'twixt': 'â¬',
	  'NotCupCap': 'â­',
	  'nlt': 'â®',
	  'ngtr': 'â¯',
	  'nleq': 'â°',
	  'ngeq': 'â±',
	  'lsim': 'â²',
	  'gtrsim': 'â³',
	  'nlsim': 'â´',
	  'ngsim': 'âµ',
	  'lg': 'â¶',
	  'gtrless': 'â·',
	  'ntlg': 'â¸',
	  'ntgl': 'â¹',
	  'prec': 'âº',
	  'succ': 'â»',
	  'preccurlyeq': 'â¼',
	  'succcurlyeq': 'â½',
	  'prsim': 'â¾',
	  'succsim': 'â¿',
	  'nprec': 'â',
	  'nsucc': 'â',
	  'sub': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'subset': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'sup': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'supset': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'nsub': 'â',
	  'nsup': 'â',
	  'sube': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'subseteq': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'supe': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'supseteq': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'nsubseteq': 'â',
	  'nsupseteq': 'â',
	  'subsetneq': 'â',
	  'supsetneq': 'â',
	  'cupdot': 'â',
	  'uplus': 'â',
	  'sqsubset': 'â',
	  'sqsupset': 'â',
	  'sqsubseteq': 'â',
	  'sqsupseteq': 'â',
	  'sqcap': 'â',
	  'sqcup': 'â',
	  'oplus': 'â',
	  'ominus': 'â',
	  'otimes': 'â',
	  'osol': 'â',
	  'odot': 'â',
	  'ocir': 'â',
	  'oast': 'â',
	  'odash': 'â',
	  'plusb': 'â',
	  'minusb': 'â',
	  'timesb': 'â ',
	  'sdotb': 'â¡',
	  'vdash': 'â¢',
	  'dashv': 'â£',
	  'top': 'â¤',
	  'perp': 'â¥',
	  'models': 'â§',
	  'vDash': 'â¨',
	  'Vdash': 'â©',
	  'Vvdash': 'âª',
	  'VDash': 'â«',
	  'nvdash': 'â¬',
	  'nvDash': 'â­',
	  'nVdash': 'â®',
	  'nVDash': 'â¯',
	  'prurel': 'â°',
	  'vltri': 'â²',
	  'vrtri': 'â³',
	  'trianglelefteq': 'â´',
	  'trianglerighteq': 'âµ',
	  'origof': 'â¶',
	  'imof': 'â·',
	  'mumap': 'â¸',
	  'hercon': 'â¹',
	  'intercal': 'âº',
	  'veebar': 'â»',
	  'barvee': 'â½',
	  'angrtvb': 'â¾',
	  'lrtri': 'â¿',
	  'xwedge': 'â',
	  'xvee': 'â',
	  'xcap': 'â',
	  'xcup': 'â',
	  'diamond': 'â',
	  'sdot': 'â',
	  'sstarf': 'â',
	  'divonx': 'â',
	  'bowtie': 'â',
	  'ltimes': 'â',
	  'rtimes': 'â',
	  'lthree': 'â',
	  'rthree': 'â',
	  'bsime': 'â',
	  'cuvee': 'â',
	  'cuwed': 'â',
	  'Subset': 'â',
	  'Supset': 'â',
	  'Cap': 'â',
	  'Cup': 'â',
	  'pitchfork': 'â',
	  'epar': 'â',
	  'ltdot': 'â',
	  'gtrdot': 'â',
	  'Ll': 'â',
	  'ggg': 'â',
	  'lesseqgtr': 'â',
	  'gtreqless': 'â',
	  'curlyeqprec': 'â',
	  'curlyeqsucc': 'â',
	  'nprcue': 'â ',
	  'nsccue': 'â¡',
	  'nsqsube': 'â¢',
	  'nsqsupe': 'â£',
	  'lnsim': 'â¦',
	  'gnsim': 'â§',
	  'prnsim': 'â¨',
	  'succnsim': 'â©',
	  'ntriangleleft': 'âª',
	  'ntriangleright': 'â«',
	  'ntrianglelefteq': 'â¬',
	  'ntrianglerighteq': 'â­',
	  'vellip': 'â®',
	  'ctdot': 'â¯',
	  'utdot': 'â°',
	  'dtdot': 'â±',
	  'disin': 'â²',
	  'isinsv': 'â³',
	  'isins': 'â´',
	  'isindot': 'âµ',
	  'notinvc': 'â¶',
	  'notinvb': 'â·',
	  'isinE': 'â¹',
	  'nisd': 'âº',
	  'xnis': 'â»',
	  'nis': 'â¼',
	  'notnivc': 'â½',
	  'notnivb': 'â¾',
	  'barwedge': 'â',
	  'doublebarwedge': 'â',
	  'lceil': 'â',
	  'rceil': 'â',
	  'lfloor': 'â',
	  'rfloor': 'â',
	  'drcrop': 'â',
	  'dlcrop': 'â',
	  'urcrop': 'â',
	  'ulcrop': 'â',
	  'bnot': 'â',
	  'profline': 'â',
	  'profsurf': 'â',
	  'telrec': 'â',
	  'target': 'â',
	  'ulcorner': 'â',
	  'urcorner': 'â',
	  'llcorner': 'â',
	  'lrcorner': 'â',
	  'sfrown': 'â¢',
	  'ssmile': 'â£',
	  'lang': 'â©', // http://www.w3.org/TR/html4/sgml/entities.html
	  'rang': 'âª', // http://www.w3.org/TR/html4/sgml/entities.html
	  'cylcty': 'â­',
	  'profalar': 'â®',
	  'topbot': 'â¶',
	  'ovbar': 'â½',
	  'solbar': 'â¿',
	  'angzarr': 'â¼',
	  'lmoustache': 'â°',
	  'rmoustache': 'â±',
	  'tbrk': 'â´',
	  'bbrk': 'âµ',
	  'bbrktbrk': 'â¶',
	  'OverParenthesis': 'â',
	  'UnderParenthesis': 'â',
	  'OverBrace': 'â',
	  'UnderBrace': 'â',
	  'trpezium': 'â¢',
	  'elinters': 'â§',
	  'blank': 'â£',
	  'oS': 'â',
	  'boxh': 'â',
	  'boxv': 'â',
	  'boxdr': 'â',
	  'boxdl': 'â',
	  'boxur': 'â',
	  'boxul': 'â',
	  'boxvr': 'â',
	  'boxvl': 'â¤',
	  'boxhd': 'â¬',
	  'boxhu': 'â´',
	  'boxvh': 'â¼',
	  'boxH': 'â',
	  'boxV': 'â',
	  'boxdR': 'â',
	  'boxDr': 'â',
	  'boxDR': 'â',
	  'boxdL': 'â',
	  'boxDl': 'â',
	  'boxDL': 'â',
	  'boxuR': 'â',
	  'boxUr': 'â',
	  'boxUR': 'â',
	  'boxuL': 'â',
	  'boxUl': 'â',
	  'boxUL': 'â',
	  'boxvR': 'â',
	  'boxVr': 'â',
	  'boxVR': 'â ',
	  'boxvL': 'â¡',
	  'boxVl': 'â¢',
	  'boxVL': 'â£',
	  'boxHd': 'â¤',
	  'boxhD': 'â¥',
	  'boxHD': 'â¦',
	  'boxHu': 'â§',
	  'boxhU': 'â¨',
	  'boxHU': 'â©',
	  'boxvH': 'âª',
	  'boxVh': 'â«',
	  'boxVH': 'â¬',
	  'uhblk': 'â',
	  'lhblk': 'â',
	  'block': 'â',
	  'blk14': 'â',
	  'blk12': 'â',
	  'blk34': 'â',
	  'square': 'â¡',
	  'squf': 'âª',
	  'EmptyVerySmallSquare': 'â«',
	  'rect': 'â­',
	  'marker': 'â®',
	  'fltns': 'â±',
	  'xutri': 'â³',
	  'utrif': 'â´',
	  'utri': 'âµ',
	  'rtrif': 'â¸',
	  'triangleright': 'â¹',
	  'xdtri': 'â½',
	  'dtrif': 'â¾',
	  'triangledown': 'â¿',
	  'ltrif': 'â',
	  'triangleleft': 'â',
	  'loz': 'â', // http://www.w3.org/TR/html4/sgml/entities.html
	  'lozenge': 'â', // http://www.w3.org/TR/html5/named-character-references.html
	  'cir': 'â',
	  'tridot': 'â¬',
	  'xcirc': 'â¯',
	  'ultri': 'â¸',
	  'urtri': 'â¹',
	  'lltri': 'âº',
	  'EmptySmallSquare': 'â»',
	  'FilledSmallSquare': 'â¼',
	  'starf': 'â',
	  'star': 'â',
	  'phone': 'â',
	  'female': 'â',
	  'male': 'â',
	  'spades': 'â ', // http://www.w3.org/TR/html4/sgml/entities.html
	  'spadesuit': 'â ', // http://www.w3.org/TR/html5/named-character-references.html
	  'clubs': 'â£', // http://www.w3.org/TR/html4/sgml/entities.html
	  'clubsuit': 'â£', // http://www.w3.org/TR/html5/named-character-references.html
	  'hearts': 'â¥', // http://www.w3.org/TR/html4/sgml/entities.html
	  'heartsuit': 'â¥', // http://www.w3.org/TR/html5/named-character-references.html
	  'diams': 'â¦',
	  'sung': 'âª',
	  'flat': 'â­',
	  'natural': 'â®',
	  'sharp': 'â¯',
	  'checkmark': 'â',
	  'cross': 'â',
	  'maltese': 'â ',
	  'sext': 'â¶',
	  'VerticalSeparator': 'â',
	  'lbbrk': 'â²',
	  'rbbrk': 'â³',
	  'bsolhsub': 'â',
	  'suphsol': 'â',
	  'lobrk': 'â¦',
	  'robrk': 'â§',
	  'langle': 'â¨',
	  'rangle': 'â©',
	  'Lang': 'âª',
	  'Rang': 'â«',
	  'loang': 'â¬',
	  'roang': 'â­',
	  'xlarr': 'âµ',
	  'xrarr': 'â¶',
	  'xharr': 'â·',
	  'xlArr': 'â¸',
	  'xrArr': 'â¹',
	  'xhArr': 'âº',
	  'xmap': 'â¼',
	  'dzigrarr': 'â¿',
	  'nvlArr': 'â¤',
	  'nvrArr': 'â¤',
	  'nvHarr': 'â¤',
	  'Map': 'â¤',
	  'lbarr': 'â¤',
	  'rbarr': 'â¤',
	  'lBarr': 'â¤',
	  'rBarr': 'â¤',
	  'drbkarow': 'â¤',
	  'DDotrahd': 'â¤',
	  'UpArrowBar': 'â¤',
	  'DownArrowBar': 'â¤',
	  'Rarrtl': 'â¤',
	  'latail': 'â¤',
	  'ratail': 'â¤',
	  'lAtail': 'â¤',
	  'rAtail': 'â¤',
	  'larrfs': 'â¤',
	  'rarrfs': 'â¤',
	  'larrbfs': 'â¤',
	  'rarrbfs': 'â¤ ',
	  'nwarhk': 'â¤£',
	  'nearhk': 'â¤¤',
	  'searhk': 'â¤¥',
	  'swarhk': 'â¤¦',
	  'nwnear': 'â¤§',
	  'toea': 'â¤¨',
	  'tosa': 'â¤©',
	  'swnwar': 'â¤ª',
	  'rarrc': 'â¤³',
	  'cudarrr': 'â¤µ',
	  'ldca': 'â¤¶',
	  'rdca': 'â¤·',
	  'cudarrl': 'â¤¸',
	  'larrpl': 'â¤¹',
	  'curarrm': 'â¤¼',
	  'cularrp': 'â¤½',
	  'rarrpl': 'â¥',
	  'harrcir': 'â¥',
	  'Uarrocir': 'â¥',
	  'lurdshar': 'â¥',
	  'ldrushar': 'â¥',
	  'LeftRightVector': 'â¥',
	  'RightUpDownVector': 'â¥',
	  'DownLeftRightVector': 'â¥',
	  'LeftUpDownVector': 'â¥',
	  'LeftVectorBar': 'â¥',
	  'RightVectorBar': 'â¥',
	  'RightUpVectorBar': 'â¥',
	  'RightDownVectorBar': 'â¥',
	  'DownLeftVectorBar': 'â¥',
	  'DownRightVectorBar': 'â¥',
	  'LeftUpVectorBar': 'â¥',
	  'LeftDownVectorBar': 'â¥',
	  'LeftTeeVector': 'â¥',
	  'RightTeeVector': 'â¥',
	  'RightUpTeeVector': 'â¥',
	  'RightDownTeeVector': 'â¥',
	  'DownLeftTeeVector': 'â¥',
	  'DownRightTeeVector': 'â¥',
	  'LeftUpTeeVector': 'â¥ ',
	  'LeftDownTeeVector': 'â¥¡',
	  'lHar': 'â¥¢',
	  'uHar': 'â¥£',
	  'rHar': 'â¥¤',
	  'dHar': 'â¥¥',
	  'luruhar': 'â¥¦',
	  'ldrdhar': 'â¥§',
	  'ruluhar': 'â¥¨',
	  'rdldhar': 'â¥©',
	  'lharul': 'â¥ª',
	  'llhard': 'â¥«',
	  'rharul': 'â¥¬',
	  'lrhard': 'â¥­',
	  'udhar': 'â¥®',
	  'duhar': 'â¥¯',
	  'RoundImplies': 'â¥°',
	  'erarr': 'â¥±',
	  'simrarr': 'â¥²',
	  'larrsim': 'â¥³',
	  'rarrsim': 'â¥´',
	  'rarrap': 'â¥µ',
	  'ltlarr': 'â¥¶',
	  'gtrarr': 'â¥¸',
	  'subrarr': 'â¥¹',
	  'suplarr': 'â¥»',
	  'lfisht': 'â¥¼',
	  'rfisht': 'â¥½',
	  'ufisht': 'â¥¾',
	  'dfisht': 'â¥¿',
	  'lopar': 'â¦',
	  'ropar': 'â¦',
	  'lbrke': 'â¦',
	  'rbrke': 'â¦',
	  'lbrkslu': 'â¦',
	  'rbrksld': 'â¦',
	  'lbrksld': 'â¦',
	  'rbrkslu': 'â¦',
	  'langd': 'â¦',
	  'rangd': 'â¦',
	  'lparlt': 'â¦',
	  'rpargt': 'â¦',
	  'gtlPar': 'â¦',
	  'ltrPar': 'â¦',
	  'vzigzag': 'â¦',
	  'vangrt': 'â¦',
	  'angrtvbd': 'â¦',
	  'ange': 'â¦¤',
	  'range': 'â¦¥',
	  'dwangle': 'â¦¦',
	  'uwangle': 'â¦§',
	  'angmsdaa': 'â¦¨',
	  'angmsdab': 'â¦©',
	  'angmsdac': 'â¦ª',
	  'angmsdad': 'â¦«',
	  'angmsdae': 'â¦¬',
	  'angmsdaf': 'â¦­',
	  'angmsdag': 'â¦®',
	  'angmsdah': 'â¦¯',
	  'bemptyv': 'â¦°',
	  'demptyv': 'â¦±',
	  'cemptyv': 'â¦²',
	  'raemptyv': 'â¦³',
	  'laemptyv': 'â¦´',
	  'ohbar': 'â¦µ',
	  'omid': 'â¦¶',
	  'opar': 'â¦·',
	  'operp': 'â¦¹',
	  'olcross': 'â¦»',
	  'odsold': 'â¦¼',
	  'olcir': 'â¦¾',
	  'ofcir': 'â¦¿',
	  'olt': 'â§',
	  'ogt': 'â§',
	  'cirscir': 'â§',
	  'cirE': 'â§',
	  'solb': 'â§',
	  'bsolb': 'â§',
	  'boxbox': 'â§',
	  'trisb': 'â§',
	  'rtriltri': 'â§',
	  'LeftTriangleBar': 'â§',
	  'RightTriangleBar': 'â§',
	  'iinfin': 'â§',
	  'infintie': 'â§',
	  'nvinfin': 'â§',
	  'eparsl': 'â§£',
	  'smeparsl': 'â§¤',
	  'eqvparsl': 'â§¥',
	  'lozf': 'â§«',
	  'RuleDelayed': 'â§´',
	  'dsol': 'â§¶',
	  'xodot': 'â¨',
	  'xoplus': 'â¨',
	  'xotime': 'â¨',
	  'xuplus': 'â¨',
	  'xsqcup': 'â¨',
	  'qint': 'â¨',
	  'fpartint': 'â¨',
	  'cirfnint': 'â¨',
	  'awint': 'â¨',
	  'rppolint': 'â¨',
	  'scpolint': 'â¨',
	  'npolint': 'â¨',
	  'pointint': 'â¨',
	  'quatint': 'â¨',
	  'intlarhk': 'â¨',
	  'pluscir': 'â¨¢',
	  'plusacir': 'â¨£',
	  'simplus': 'â¨¤',
	  'plusdu': 'â¨¥',
	  'plussim': 'â¨¦',
	  'plustwo': 'â¨§',
	  'mcomma': 'â¨©',
	  'minusdu': 'â¨ª',
	  'loplus': 'â¨­',
	  'roplus': 'â¨®',
	  'Cross': 'â¨¯',
	  'timesd': 'â¨°',
	  'timesbar': 'â¨±',
	  'smashp': 'â¨³',
	  'lotimes': 'â¨´',
	  'rotimes': 'â¨µ',
	  'otimesas': 'â¨¶',
	  'Otimes': 'â¨·',
	  'odiv': 'â¨¸',
	  'triplus': 'â¨¹',
	  'triminus': 'â¨º',
	  'tritime': 'â¨»',
	  'iprod': 'â¨¼',
	  'amalg': 'â¨¿',
	  'capdot': 'â©',
	  'ncup': 'â©',
	  'ncap': 'â©',
	  'capand': 'â©',
	  'cupor': 'â©',
	  'cupcap': 'â©',
	  'capcup': 'â©',
	  'cupbrcap': 'â©',
	  'capbrcup': 'â©',
	  'cupcup': 'â©',
	  'capcap': 'â©',
	  'ccups': 'â©',
	  'ccaps': 'â©',
	  'ccupssm': 'â©',
	  'And': 'â©',
	  'Or': 'â©',
	  'andand': 'â©',
	  'oror': 'â©',
	  'orslope': 'â©',
	  'andslope': 'â©',
	  'andv': 'â©',
	  'orv': 'â©',
	  'andd': 'â©',
	  'ord': 'â©',
	  'wedbar': 'â©',
	  'sdote': 'â©¦',
	  'simdot': 'â©ª',
	  'congdot': 'â©­',
	  'easter': 'â©®',
	  'apacir': 'â©¯',
	  'apE': 'â©°',
	  'eplus': 'â©±',
	  'pluse': 'â©²',
	  'Esim': 'â©³',
	  'Colone': 'â©´',
	  'Equal': 'â©µ',
	  'eDDot': 'â©·',
	  'equivDD': 'â©¸',
	  'ltcir': 'â©¹',
	  'gtcir': 'â©º',
	  'ltquest': 'â©»',
	  'gtquest': 'â©¼',
	  'les': 'â©½',
	  'ges': 'â©¾',
	  'lesdot': 'â©¿',
	  'gesdot': 'âª',
	  'lesdoto': 'âª',
	  'gesdoto': 'âª',
	  'lesdotor': 'âª',
	  'gesdotol': 'âª',
	  'lessapprox': 'âª',
	  'gtrapprox': 'âª',
	  'lneq': 'âª',
	  'gneq': 'âª',
	  'lnapprox': 'âª',
	  'gnapprox': 'âª',
	  'lesseqqgtr': 'âª',
	  'gtreqqless': 'âª',
	  'lsime': 'âª',
	  'gsime': 'âª',
	  'lsimg': 'âª',
	  'gsiml': 'âª',
	  'lgE': 'âª',
	  'glE': 'âª',
	  'lesges': 'âª',
	  'gesles': 'âª',
	  'eqslantless': 'âª',
	  'eqslantgtr': 'âª',
	  'elsdot': 'âª',
	  'egsdot': 'âª',
	  'el': 'âª',
	  'eg': 'âª',
	  'siml': 'âª',
	  'simg': 'âª',
	  'simlE': 'âª',
	  'simgE': 'âª ',
	  'LessLess': 'âª¡',
	  'GreaterGreater': 'âª¢',
	  'glj': 'âª¤',
	  'gla': 'âª¥',
	  'ltcc': 'âª¦',
	  'gtcc': 'âª§',
	  'lescc': 'âª¨',
	  'gescc': 'âª©',
	  'smt': 'âªª',
	  'lat': 'âª«',
	  'smte': 'âª¬',
	  'late': 'âª­',
	  'bumpE': 'âª®',
	  'preceq': 'âª¯',
	  'succeq': 'âª°',
	  'prE': 'âª³',
	  'scE': 'âª´',
	  'prnE': 'âªµ',
	  'succneqq': 'âª¶',
	  'precapprox': 'âª·',
	  'succapprox': 'âª¸',
	  'prnap': 'âª¹',
	  'succnapprox': 'âªº',
	  'Pr': 'âª»',
	  'Sc': 'âª¼',
	  'subdot': 'âª½',
	  'supdot': 'âª¾',
	  'subplus': 'âª¿',
	  'supplus': 'â«',
	  'submult': 'â«',
	  'supmult': 'â«',
	  'subedot': 'â«',
	  'supedot': 'â«',
	  'subseteqq': 'â«',
	  'supseteqq': 'â«',
	  'subsim': 'â«',
	  'supsim': 'â«',
	  'subsetneqq': 'â«',
	  'supsetneqq': 'â«',
	  'csub': 'â«',
	  'csup': 'â«',
	  'csube': 'â«',
	  'csupe': 'â«',
	  'subsup': 'â«',
	  'supsub': 'â«',
	  'subsub': 'â«',
	  'supsup': 'â«',
	  'suphsub': 'â«',
	  'supdsub': 'â«',
	  'forkv': 'â«',
	  'topfork': 'â«',
	  'mlcp': 'â«',
	  'DoubleLeftTee': 'â«¤',
	  'Vdashl': 'â«¦',
	  'Barv': 'â«§',
	  'vBar': 'â«¨',
	  'vBarv': 'â«©',
	  'Vbar': 'â««',
	  'Not': 'â«¬',
	  'bNot': 'â«­',
	  'rnmid': 'â«®',
	  'cirmid': 'â«¯',
	  'midcir': 'â«°',
	  'topcir': 'â«±',
	  'nhpar': 'â«²',
	  'parsim': 'â«³',
	  'parsl': 'â«½',
	  'fflig': 'ï¬',
	  'filig': 'ï¬',
	  'fllig': 'ï¬',
	  'ffilig': 'ï¬',
	  'ffllig': 'ï¬',
	  'Ascr': 'í',
	  'Cscr': 'í',
	  'Dscr': 'í',
	  'Gscr': 'í¢',
	  'Jscr': 'í¥',
	  'Kscr': 'í¦',
	  'Nscr': 'í©',
	  'Oscr': 'íª',
	  'Pscr': 'í«',
	  'Qscr': 'í¬',
	  'Sscr': 'í®',
	  'Tscr': 'í¯',
	  'Uscr': 'í°',
	  'Vscr': 'í±',
	  'Wscr': 'í²',
	  'Xscr': 'í³',
	  'Yscr': 'í´',
	  'Zscr': 'íµ',
	  'ascr': 'í¶',
	  'bscr': 'í·',
	  'cscr': 'í¸',
	  'dscr': 'í¹',
	  'fscr': 'í»',
	  'hscr': 'í½',
	  'iscr': 'í¾',
	  'jscr': 'í¿',
	  'kscr': 'í',
	  'lscr': 'í',
	  'mscr': 'í',
	  'nscr': 'í',
	  'pscr': 'í',
	  'qscr': 'í',
	  'rscr': 'í',
	  'sscr': 'í',
	  'tscr': 'í',
	  'uscr': 'í',
	  'vscr': 'í',
	  'wscr': 'í',
	  'xscr': 'í',
	  'yscr': 'í',
	  'zscr': 'í',
	  'Afr': 'í',
	  'Bfr': 'í',
	  'Dfr': 'í',
	  'Efr': 'í',
	  'Ffr': 'í',
	  'Gfr': 'í',
	  'Jfr': 'í',
	  'Kfr': 'í',
	  'Lfr': 'í',
	  'Mfr': 'í',
	  'Nfr': 'í',
	  'Ofr': 'í',
	  'Pfr': 'í',
	  'Qfr': 'í',
	  'Sfr': 'í',
	  'Tfr': 'í',
	  'Ufr': 'í',
	  'Vfr': 'í',
	  'Wfr': 'í',
	  'Xfr': 'í',
	  'Yfr': 'í',
	  'afr': 'í',
	  'bfr': 'í',
	  'cfr': 'í ',
	  'dfr': 'í¡',
	  'efr': 'í¢',
	  'ffr': 'í£',
	  'gfr': 'í¤',
	  'hfr': 'í¥',
	  'ifr': 'í¦',
	  'jfr': 'í§',
	  'kfr': 'í¨',
	  'lfr': 'í©',
	  'mfr': 'íª',
	  'nfr': 'í«',
	  'ofr': 'í¬',
	  'pfr': 'í­',
	  'qfr': 'í®',
	  'rfr': 'í¯',
	  'sfr': 'í°',
	  'tfr': 'í±',
	  'ufr': 'í²',
	  'vfr': 'í³',
	  'wfr': 'í´',
	  'xfr': 'íµ',
	  'yfr': 'í¶',
	  'zfr': 'í·',
	  'Aopf': 'í¸',
	  'Bopf': 'í¹',
	  'Dopf': 'í»',
	  'Eopf': 'í¼',
	  'Fopf': 'í½',
	  'Gopf': 'í¾',
	  'Iopf': 'í',
	  'Jopf': 'í',
	  'Kopf': 'í',
	  'Lopf': 'í',
	  'Mopf': 'í',
	  'Oopf': 'í',
	  'Sopf': 'í',
	  'Topf': 'í',
	  'Uopf': 'í',
	  'Vopf': 'í',
	  'Wopf': 'í',
	  'Xopf': 'í',
	  'Yopf': 'í',
	  'aopf': 'í',
	  'bopf': 'í',
	  'copf': 'í',
	  'dopf': 'í',
	  'eopf': 'í',
	  'fopf': 'í',
	  'gopf': 'í',
	  'hopf': 'í',
	  'iopf': 'í',
	  'jopf': 'í',
	  'kopf': 'í',
	  'lopf': 'í',
	  'mopf': 'í',
	  'nopf': 'í',
	  'oopf': 'í ',
	  'popf': 'í¡',
	  'qopf': 'í¢',
	  'ropf': 'í£',
	  'sopf': 'í¤',
	  'topf': 'í¥',
	  'uopf': 'í¦',
	  'vopf': 'í§',
	  'wopf': 'í¨',
	  'xopf': 'í©',
	  'yopf': 'íª',
	  'zopf': 'í«'
	};
	
	var specialCharEntities = {
	  '&': '&amp;',
	  '"': '&quot;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '\xA0': '&nbsp;'
	};
	
	var entityRegExp = /&(?:#([0-9]+)|#x([0-9a-f]+)|([a-z0-9]+));/gi;
	var attributeModeSpecialCharRegExp = /["&<>\xA0]/g;
	var nonAttributeModeSpecialCharRegExp = /[&<>\xA0]/g;
	
	exports.HTMLDecode = function decode(s) {
	  if (!s) return '';
	  return s.replace(entityRegExp, function ($0, decimalStr, hexStr, entityName) {
	    if (decimalStr) {
	      return String.fromCharCode(parseInt(decimalStr, 10));
	    } else if (hexStr) {
	      return String.fromCharCode(parseInt(hexStr, 16));
	    } else {
	      // Fall back to the original string if we don't know the entity, as per browser behavior:
	      return charByEntityName[entityName] || $0;
	    }
	  });
	};
	
	function specialCharToEntity(s) {
	  var entity = specialCharEntities[s];
	  return entity ? entity : s;
	}
	
	exports.HTMLEncode = function encode(s, attributeMode) {
	  if (!s) return '';
	  if (!s.replace) return s;
	  if(attributeMode) {
		  return s.replace(attributeModeSpecialCharRegExp, specialCharToEntity);
	  } else {
		  return s.replace(nonAttributeModeSpecialCharRegExp, specialCharToEntity);
	  }
	};


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	var core                     = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../level1/core\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).dom.level1.core;
	
	// modify cloned instance for more info check: https://github.com/tmpvar/jsdom/issues/325
	core = Object.create(core);
	
	var INVALID_STATE_ERR        = core.INVALID_STATE_ERR        = 11,
	    SYNTAX_ERR               = core.SYNTAX_ERR               = 12,
	    INVALID_MODIFICATION_ERR = core.INVALID_MODIFICATION_ERR = 13,
	    NAMESPACE_ERR            = core.NAMESPACE_ERR            = 14,
	    INVALID_ACCESS_ERR       = core.INVALID_ACCESS_ERR       = 15,
	    ns = {
	      validate : function(ns, URI) {
	        if (!ns) {
	          throw new core.DOMException(core.INVALID_CHARACTER_ERR, "namespace is undefined");
	        }
	
	        if(ns.match(/[^0-9a-z\.:\-_]/i) !== null) {
	          throw new core.DOMException(core.INVALID_CHARACTER_ERR, ns);
	        }
	
	        var msg = false, parts = ns.split(':');
	        if (ns === 'xmlns'                          &&
	            URI !== "http://www.w3.org/2000/xmlns/")
	        {
	          msg = "localName is 'xmlns' but the namespaceURI is invalid";
	
	        } else if (ns === "xml"                                   &&
	                   URI !== "http://www.w3.org/XML/1998/namespace")
	        {
	          msg = "localName is 'xml' but the namespaceURI is invalid";
	
	        } else if (ns[ns.length-1] === ':') {
	          msg = "Namespace seperator found with no localName";
	
	        } else if (ns[0] === ':') {
	          msg = "Namespace seperator found, without a prefix";
	
	        } else if (parts.length > 2) {
	          msg = "Too many namespace seperators";
	
	        }
	
	        if (msg) {
	          throw new core.DOMException(NAMESPACE_ERR, msg + " (" + ns + "@" + URI + ")");
	        }
	      }
	    };
	
	core.exceptionMessages['NAMESPACE_ERR'] = "Invalid namespace";
	
	core.DOMImplementation.prototype.createDocumentType = function(/* String */ qualifiedName,
	                                                               /* String */ publicId,
	                                                               /* String */ systemId)
	{
	  ns.validate(qualifiedName);
	  var doctype = new core.DocumentType(null, qualifiedName);
	  doctype._publicId = publicId ? publicId : '';
	  doctype._systemId = systemId ? systemId : '';
	  return doctype;
	};
	
	/**
	  Creates an XML Document object of the specified type with its document element.
	  HTML-only DOM implementations do not need to implement this method.
	*/
	core.DOMImplementation.prototype.createDocument = function(/* String */       namespaceURI,
	                                                           /* String */       qualifiedName,
	                                                           /* DocumentType */ doctype)
	{
	  if (qualifiedName || namespaceURI) {
	    ns.validate(qualifiedName, namespaceURI);
	  }
	
	  if (doctype && doctype._ownerDocument !== null) {
	    throw new core.DOMException(core.WRONG_DOCUMENT_ERR);
	  }
	
	  if (qualifiedName && qualifiedName.indexOf(':') > -1 && !namespaceURI) {
	    throw new core.DOMException(NAMESPACE_ERR);
	  }
	
	  var document = new core.Document();
	  
	  if (doctype) {
	    document.doctype = doctype;
	    doctype._ownerDocument = document;
	    document.appendChild(doctype);
	  } else {
	    document.doctype = null;
	  }
	
	  if (doctype && !doctype.entities) {
	    doctype.entities = new dom.EntityNodeMap();
	  }
	
	  document._ownerDocument = document;
	
	  if (qualifiedName) {
	    var docElement = document.createElementNS(namespaceURI, qualifiedName);
	    document.appendChild(docElement);
	  }
	
	  return document;
	};
	
	core.Node.prototype.__defineGetter__("ownerDocument", function() {
	  return this._ownerDocument || null;
	});
	
	core.Node.prototype.isSupported = function(/* string */ feature,
	                                           /* string */ version)
	{
	  return this._ownerDocument.implementation.hasFeature(feature, version);
	};
	
	core.Node.prototype._namespaceURI = null;
	core.Node.prototype.__defineGetter__("namespaceURI", function() {
	  return this._namespaceURI || null;
	});
	
	core.Node.prototype.__defineSetter__("namespaceURI", function(value) {
	  this._namespaceURI = value;
	});
	
	core.Node.prototype.__defineGetter__("prefix", function() {
	  return this._prefix || null;
	});
	
	core.Node.prototype.__defineSetter__("prefix", function(value) {
	
	  if (this.readonly) {
	    throw new core.DOMException(core.NO_MODIFICATION_ALLOWED_ERR);
	  }
	
	  ns.validate(value, this._namespaceURI);
	
	  if ((this._created && !this._namespaceURI)  ||
	      this._prefix === "xmlns"                ||
	      (!this._prefix && this._created))
	  {
	    throw new core.DOMException(core.NAMESPACE_ERR);
	  }
	
	  if (this._localName) {
	    this._nodeName = value + ':' + this._localName;
	  }
	
	  this._prefix = value;
	});
	
	core.Node.prototype.__defineGetter__("localName", function() {
	  return this._localName || null;
	});
	
	/* return boolean */
	core.Node.prototype.hasAttributes = function() {
	  return (this.nodeType === this.ELEMENT_NODE &&
	          this._attributes                    &&
	          this._attributes.length > 0);
	};
	
	core.NamedNodeMap.prototype.getNamedItemNS = function(/* string */ namespaceURI,
	                                                      /* string */ localName)
	{
	  if (this._nsStore[namespaceURI] && this._nsStore[namespaceURI][localName]) {
	    return this._nsStore[namespaceURI][localName];
	  }
	  return null;
	};
	
	core.AttrNodeMap.prototype.setNamedItemNS = function(/* Node */ arg) {
	  if (arg.nodeType !== this._ownerDocument.ATTRIBUTE_NODE) {
	    throw new core.DOMException(core.HIERARCHY_REQUEST_ERR);
	  }
	
	  return core.NamedNodeMap.prototype.setNamedItemNS.call(this, arg);
	};
	
	var prevSetNamedItem = core.AttrNodeMap.prototype.setNamedItem;
	
	core.AttrNodeMap.prototype.setNamedItem = function(/* Node */ arg) {
	  if (arg.nodeType !== this._ownerDocument.ATTRIBUTE_NODE) {
	    throw new core.DOMException(core.HIERARCHY_REQUEST_ERR);
	  }
	
	  return prevSetNamedItem.call(this, arg);
	};
	
	
	core.NamedNodeMap.prototype.setNamedItemNS = function(/* Node */ arg)
	{
	  if (this._readonly) {
	    throw new core.DOMException(core.NO_MODIFICATION_ALLOWED_ERR);
	  }
	
	  var owner = this._ownerDocument;
	  if (this._parentNode &&
	      this._parentNode._parentNode &&
	      this._parentNode._parentNode.nodeType === owner.ENTITY_NODE)
	  {
	    throw new core.DOMException(core.NO_MODIFICATION_ALLOWED_ERR);
	  }
	
	  if (this._ownerDocument !== arg.ownerDocument) {
	    throw new core.DOMException(core.WRONG_DOCUMENT_ERR);
	  }
	
	  if (arg._ownerElement) {
	    throw new core.DOMException(core.INUSE_ATTRIBUTE_ERR);
	  }
	
	  // readonly
	  if (this._readonly === true) {
	    throw new core.DOMException(NO_MODIFICATION_ALLOWED_ERR);
	  }
	
	
	  if (!this._nsStore[arg.namespaceURI]) {
	    this._nsStore[arg.namespaceURI] = {};
	  }
	  var existing = null;
	  if (this._nsStore[arg.namespaceURI][arg.localName]) {
	    var existing = this._nsStore[arg.namespaceURI][arg.localName];
	  }
	
	  this._nsStore[arg.namespaceURI][arg.localName] = arg;
	
	  arg._specified = true;
	  arg._ownerDocument = this._ownerDocument;
	
	  return this.setNamedItem(arg);
	};
	
	core.NamedNodeMap.prototype.removeNamedItemNS = function(/*string */ namespaceURI,
	                                                         /* string */ localName)
	{
	
	  if (this.readonly) {
	    throw new core.DOMException(core.NO_MODIFICATION_ALLOWED_ERR);
	  }
	
	
	  var parent = this._parentNode,
	      found = null,
	      defaults,
	      clone,
	      defaultEl,
	      defaultAttr;
	
	  if (this._parentNode &&
	      this._parentNode._parentNode &&
	      this._parentNode._parentNode.nodeType === this._ownerDocument.ENTITY_NODE)
	  {
	    throw new core.DOMException(core.NO_MODIFICATION_ALLOWED_ERR);
	  }
	
	  if (this._nsStore[namespaceURI] &&
	      this._nsStore[namespaceURI][localName])
	  {
	    found = this._nsStore[namespaceURI][localName];
	    this.removeNamedItem(found.qualifiedName);
	    delete this._nsStore[namespaceURI][localName];
	  }
	
	  if (!found) {
	    throw new core.DOMException(core.NOT_FOUND_ERR);
	  }
	
	  if (parent.ownerDocument.doctype && parent.ownerDocument.doctype._attributes) {
	    defaults = parent.ownerDocument.doctype._attributes;
	    defaultEl = defaults.getNamedItemNS(parent._namespaceURI, parent._localName);
	  }
	
	  if (defaultEl) {
	    defaultAttr = defaultEl._attributes.getNamedItemNS(namespaceURI, localName);
	
	    if (defaultAttr) {
	      clone = defaultAttr.cloneNode(true);
	      clone._created               = false;
	      clone._namespaceURI          = found._namespaceURI;
	      clone._nodeName              = found.name;
	      clone._localName             = found._localName;
	      clone._prefix                = found._prefix
	      this.setNamedItemNS(clone);
	      clone._created               = true;
	      clone._specified             = false;
	    }
	  }
	
	  return found;
	};
	
	core.Attr.prototype.__defineGetter__("ownerElement", function() {
	  return this._ownerElement || null;
	});
	
	
	core.Node.prototype._prefix = false;
	
	core.Node.prototype.__defineSetter__("qualifiedName", function(qualifiedName) {
	  ns.validate(qualifiedName, this._namespaceURI);
	  qualifiedName       = qualifiedName || "";
	  this._localName     = qualifiedName.split(":")[1] || null;
	  this.prefix         = qualifiedName.split(":")[0] || null;
	  this._nodeName = qualifiedName;
	});
	
	core.Node.prototype.__defineGetter__("qualifiedName", function() {
	  return this._nodeName;
	});
	
	core.NamedNodeMap.prototype._map = function(fn) {
	  var ret = [], l = this.length, i = 0, node;
	  for(i; i<l; i++) {
	    node = this.item(i);
	    if (fn && fn(node)) {
	      ret.push(node);
	    }
	  }
	  return ret;
	};
	
	core.Element.prototype.getAttributeNS = function(/* string */ namespaceURI,
	                                                 /* string */ localName)
	{
	  var attr =  this._attributes.getNamedItemNS(namespaceURI, localName);
	  return (attr) ? attr.nodeValue : '';
	};
	
	core.Element.prototype.setAttributeNS = function(/* string */ namespaceURI,
	                                                 /* string */ qualifiedName,
	                                                 /* string */ value)
	{
	  var s       = qualifiedName.split(':'),
	      local   = s.pop(),
	      prefix  = s.pop() || null,
	      attr;
	
	  ns.validate(qualifiedName, namespaceURI);
	
	  if (qualifiedName.split(':').shift() === "xml" &&
	      namespaceURI !== "http://www.w3.org/XML/1998/namespace")
	  {
	    throw new core.DOMException(core.NAMESPACE_ERR);
	  }
	
	  if (prefix === "xmlns" && namespaceURI !== "http://www.w3.org/2000/xmlns/") {
	    throw new core.DOMException(core.NAMESPACE_ERR);
	  }
	
	  if (qualifiedName.split(':').length > 1 && !namespaceURI) {
	    throw new core.DOMException(core.NAMESPACE_ERR);
	  }
	
	  attr = this._attributes.getNamedItemNS(namespaceURI, local);
	
	  if (!attr) {
	    attr = this.ownerDocument.createAttributeNS(namespaceURI,
	                                                qualifiedName,
	                                                value);
	    this._attributes.setNamedItemNS(attr);
	  }
	
	  attr._namespaceURI = namespaceURI;
	  attr._prefix    = prefix;
	  attr._created = true;
	  attr.value = value;
	  attr._localName = local;
	};
	
	core.Element.prototype.removeAttributeNS = function(/* string */ namespaceURI,
	                                                    /* string */ localName)
	{
	
	  if (this.readonly) {
	    throw new core.DOMException(core.NO_MODIFICATION_ALLOWED_ERR);
	  }
	
	  var ownerDoc = this.ownerDocument,
	      defaults,
	      clone,
	      defaultEl,
	      defaultAttr,
	      clone,
	      localName;
	
	  if (ownerDoc.doctype && ownerDoc.doctype._attributes) {
	    defaults = ownerDoc.doctype._attributes;
	    defaultEl = defaults.getNamedItemNS(namespaceURI, this.localName);
	  }
	
	  if (defaultEl) {
	    defaultAttr = defaultEl.getAttributeNodeNS(namespaceURI, localName);
	  }
	
	  this._attributes.removeNamedItemNS(namespaceURI, localName);
	
	  if (defaultAttr) {
	    this.setAttributeNS(defaultAttr.namespaceURI,
	                                defaultAttr.name,
	                                defaultAttr.value);
	    localName = defaultAttr.name.split(':').pop();
	    clone = this.getAttributeNS(defaultAttr.namespaceURI, localName);
	    clone._specified = false;
	  }
	};
	
	core.Element.prototype.getAttributeNodeNS = function(/* string */ namespaceURI,
	                                                     /* string */ localName)
	{
	  return this._attributes.getNamedItemNS(namespaceURI, localName);
	};
	core.Element.prototype._created = false;
	
	core.Element.prototype.setAttributeNodeNS = function(/* Attr */ newAttr)
	{
	  if (newAttr.ownerElement) {
	    throw new core.DOMException(core.INUSE_ATTRIBUTE_ERR);
	  }
	
	  var existing = null;
	  try {
	    existing = this._attributes.removeNamedItemNS(newAttr.namespaceURI,
	                                                  newAttr.localName);
	  } catch (e) { /* noop */}
	
	  return this._attributes.setNamedItemNS(newAttr) || existing;
	};
	
	core.Element.prototype.getElementsByTagNameNS = function(/* String */ namespaceURI,
	                                                         /* String */ localName)
	{
	  var nsPrefixCache = {};
	
	  function filterByTagName(child) {
	    if (child.nodeType && child.nodeType === this.ENTITY_REFERENCE_NODE) {
	      child = child._entity;
	    }
	
	    var localMatch = child.localName === localName,
	        nsMatch    = child.namespaceURI === namespaceURI;
	
	    if ((localMatch || localName === "*") &&
	        (nsMatch || namespaceURI === "*"))
	    {
	      if (child.nodeType === child.ELEMENT_NODE) {
	        return true;
	      }
	    }
	    return false;
	  }
	
	  return new core.NodeList(this.ownerDocument || this,
	                           core.mapper(this, filterByTagName));
	};
	
	core.Element.prototype.hasAttribute = function(/* string */name)
	{
	  if (!this._attributes) {
	    return false;
	  }
	  return this._attributes.exists(name);
	};
	
	core.Element.prototype.hasAttributeNS = function(/* string */namespaceURI,
	                                                 /* string */localName)
	{
	  if (this._attributes.getNamedItemNS(namespaceURI, localName)) {
	    return true;
	  } else if (this.hasAttribute(localName)) {
	    return true;
	  }
	  return false;
	};
	
	core.DocumentType.prototype.__defineGetter__("publicId", function() {
	  return this._publicId || "";
	});
	
	core.DocumentType.prototype.__defineGetter__("systemId", function() {
	  return this._systemId || "";
	});
	
	core.DocumentType.prototype.__defineGetter__("internalSubset", function() {
	  return this._internalSubset || null;
	});
	
	core.Document.prototype.importNode = function(/* Node */ importedNode,
	                                              /* bool */ deep)
	{
	  if (importedNode && importedNode.nodeType) {
	    if (importedNode.nodeType === this.DOCUMENT_NODE ||
	        importedNode.nodeType === this.DOCUMENT_TYPE_NODE) {
	      throw new core.DOMException(core.NOT_SUPPORTED_ERR);
	    }
	  }
	
	  var self = this,
	      newNode = importedNode.cloneNode(deep, function(a, b) {
	        b._namespaceURI  = a._namespaceURI;
	        b._nodeName      = a._nodeName;
	        b._localName     = a._localName;
	      }),
	      defaults = false,
	      defaultEl;
	
	  if (this.doctype && this.doctype._attributes) {
	    defaults = this.doctype._attributes;
	  }
	
	  function lastChance(el) {
	    var attr, defaultEl;
	
	    el._ownerDocument = self;
	    if (el.id) {
	      if (!self._ids) {self._ids = {};}
	      if (!self._ids[el.id]) {self._ids[el.id] = [];}
	      self._ids[el.id].push(el);
	    }
	    if (el._attributes) {
	      el._attributes._ownerDocument = self;
	      for (var i=0,len=el._attributes.length; i < len; i++) {
	        attr = el._attributes.item(i);
	        attr._ownerDocument = self;
	        attr._specified = true;
	      }
	    }
	    if (defaults) {
	
	      defaultEl = defaults.getNamedItemNS(el._namespaceURI,
	                                          el._localName);
	
	      // TODO: This could use some love
	      if (defaultEl) {
	        defaultEl._attributes._map(function(defaultAttr) {
	          if (!el.hasAttributeNS(defaultAttr.namespaceURL,
	                                 defaultAttr.localName))
	          {
	            var clone = defaultAttr.cloneNode(true);
	            clone._namespaceURI = defaultAttr._namespaceURI;
	            clone._prefix       = defaultAttr._prefix;
	            clone._localName    = defaultAttr._localName;
	            el.setAttributeNodeNS(clone);
	            clone._specified = false;
	          }
	        });
	      }
	    }
	
	  }
	
	  if (deep) {
	    core.visitTree(newNode, lastChance);
	  }
	  else {
	    lastChance(newNode);
	  }
	
	  if (newNode.nodeType == newNode.ATTRIBUTE_NODE) {
	    newNode._specified = true;
	  }
	
	  return newNode;
	};
	
	core.Document.prototype.createElementNS = function(/* string */ namespaceURI,
	                                                   /* string */ qualifiedName)
	{
	  var parts   = qualifiedName.split(':'),
	      element, prefix;
	
	  if (parts.length > 1 && !namespaceURI) {
	    throw new core.DOMException(core.NAMESPACE_ERR);
	  }
	
	  ns.validate(qualifiedName, namespaceURI);
	  element = this.createElement(qualifiedName),
	
	  element._created = false;
	
	  element._namespaceURI = namespaceURI;
	  element._nodeName = qualifiedName;
	  element._localName = parts.pop();
	
	  if (parts.length > 0) {
	    prefix = parts.pop();
	    element.prefix = prefix;
	  }
	
	  element._created = true;
	  return element;
	};
	
	core.Document.prototype.createAttributeNS = function(/* string */ namespaceURI,
	                                                     /* string */ qualifiedName)
	{
	  var attribute, parts = qualifiedName.split(':');
	
	  if (parts.length > 1 && !namespaceURI) {
	    throw new core.DOMException(core.NAMESPACE_ERR,
	                                "Prefix specified without namespaceURI (" + qualifiedName + ")");
	  }
	
	
	  ns.validate(qualifiedName, namespaceURI);
	
	  attribute = this.createAttribute(qualifiedName);
	  attribute.namespaceURI = namespaceURI;
	  attribute.qualifiedName = qualifiedName;
	
	  attribute._localName = parts.pop();
	  attribute._prefix = (parts.length > 0) ? parts.pop() : null;
	  return attribute;
	};
	
	core.Document.prototype.getElementsByTagNameNS = function(/* String */ namespaceURI,
	                                                          /* String */ localName)
	{
	  return core.Element.prototype.getElementsByTagNameNS.call(this,
	                                                            namespaceURI,
	                                                            localName);
	};
	
	core.Element.prototype.__defineSetter__("id", function(id) {
	  this.setAttribute("id", id);
	});
	
	core.Element.prototype.__defineGetter__("id",function() {
	  return this.getAttribute("id");
	});
	
	core.Document.prototype.getElementById = function(id) {
	  // return the first element
	  return (this._ids && this._ids[id] && this._ids[id].length > 0 ? this._ids[id][0] : null);
	};
	
	
	exports.dom =
	{
	  level2 : {
	    core : core
	  }
	};


/***/ },
/* 74 */,
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Intercepts a method by replacing the prototype's implementation
	 * with a wrapper that invokes the given interceptor instead.
	 * 
	 *     utils.intercept(core.Element, 'inserBefore',
	 *       function(_super, args, newChild, refChild) {
	 *         console.log('insertBefore', newChild, refChild);
	 *         return _super.apply(this, args);
	 *       }
	 *     );
	 */
	exports.intercept = function(clazz, method, interceptor) {
	  var proto = clazz.prototype,
	      _super = proto[method],
	      unwrapArgs = interceptor.length > 2;
	
	  proto[method] = function() {
	    if (unwrapArgs) {
	      var args = Array.prototype.slice.call(arguments);
	      args.unshift(_super, arguments);
	      return interceptor.apply(this, args);
	    }
	    else {
	      return interceptor.call(this, _super, arguments);
	    }
	  };
	};


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Sizzle CSS Selector Engine
	 *  Copyright 2012 jQuery Foundation and other contributors
	 *  Released under the MIT license
	 *  http://sizzlejs.com/
	 */
	// Patch for jsdom
	module.exports = function( document ) {
	
	var dirruns,
		cachedruns,
		assertGetIdNotName,
		Expr,
		getText,
		isXML,
		contains,
		compile,
		sortOrder,
		hasDuplicate,
	
		baseHasDuplicate = true,
		strundefined = "undefined",
	
		expando = ( "sizcache" + Math.random() ).replace( ".", "" ),
	
		// jsdom document = window.document,
		docElem = document.documentElement,
		done = 0,
		slice = [].slice,
		push = [].push,
	
		// Augment a function for special use by Sizzle
		markFunction = function( fn, value ) {
			fn[ expando ] = value || true;
			return fn;
		},
	
		createCache = function() {
			var cache = {},
				keys = [];
	
			return markFunction(function( key, value ) {
				// Only keep the most recent entries
				if ( keys.push( key ) > Expr.cacheLength ) {
					delete cache[ keys.shift() ];
				}
	
				return (cache[ key ] = value);
			}, cache );
		},
	
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
	
		// Regex
	
		// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
		// http://www.w3.org/TR/css3-syntax/#characters
		characterEncoding = "(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",
	
		// Loosely modeled on CSS identifier characters
		// An unquoted value should be a CSS identifier (http://www.w3.org/TR/css3-selectors/#attribute-selectors)
		// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = characterEncoding.replace( "w", "w#" ),
	
		// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
		operators = "([*^$|!~]?=)",
		attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
			"*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",
	
		// Prefer arguments not in parens/brackets,
		//   then attribute selectors and non-pseudos (denoted by :),
		//   then anything else
		// These preferences are here to reduce the number of selectors
		//   needing tokenize in the PSEUDO preFilter
		pseudos = ":(" + characterEncoding + ")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:" + attributes + ")|[^:]|\\\\.)*|.*))\\)|)",
	
		// For matchExpr.POS and matchExpr.needsContext
		pos = ":(nth|eq|gt|lt|first|last|even|odd)(?:\\(((?:-\\d)?\\d*)\\)|)(?=[^-]|$)",
	
		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
	
		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*" ),
		rpseudo = new RegExp( pseudos ),
	
		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,
	
		rnot = /^:not/,
		rsibling = /[\x20\t\r\n\f]*[+~]/,
		rendsWithNot = /:not\($/,
	
		rheader = /h\d/i,
		rinputs = /input|select|textarea|button/i,
	
		rbackslash = /\\(?!\\)/g,
	
		matchExpr = {
			"ID": new RegExp( "^#(" + characterEncoding + ")" ),
			"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
			"NAME": new RegExp( "^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]" ),
			"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|nth|last|first)-child(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"POS": new RegExp( pos, "ig" ),
			// For use in libraries implementing .is()
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|" + pos, "i" )
		},
	
		// Support
	
		// Used for testing something on an element
		assert = function( fn ) {
			var div = document.createElement("div");
	
			try {
				return fn( div );
			} catch (e) {
				return false;
			} finally {
				// release memory in IE
				div = null;
			}
		},
	
		// Check if getElementsByTagName("*") returns only elements
		assertTagNameNoComments = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		}),
	
		// Check if getAttribute returns normalized href attributes
		assertHrefNotNormalized = assert(function( div ) {
			div.innerHTML = "<a href='#'></a>";
			return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
				div.firstChild.getAttribute("href") === "#";
		}),
	
		// Check if attributes should be retrieved by attribute nodes
		assertAttributes = assert(function( div ) {
			div.innerHTML = "<select></select>";
			var type = typeof div.lastChild.getAttribute("multiple");
			// IE8 returns a string for some attributes even when not present
			return type !== "boolean" && type !== "string";
		}),
	
		// Check if getElementsByClassName can be trusted
		assertUsableClassName = assert(function( div ) {
			// Opera can't find a second classname (in 9.6)
			div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
			if ( !div.getElementsByClassName || !div.getElementsByClassName("e").length ) {
				return false;
			}
	
			// Safari 3.2 caches class attributes and doesn't catch changes
			div.lastChild.className = "e";
			return div.getElementsByClassName("e").length === 2;
		}),
	
		// Check if getElementById returns elements by name
		// Check if getElementsByName privileges form controls or returns elements by ID
		assertUsableName = assert(function( div ) {
			// Inject content
			div.id = expando + 0;
			div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
			docElem.insertBefore( div, docElem.firstChild );
	
			// Test
			var pass = document.getElementsByName &&
				// buggy browsers will return fewer than the correct 2
				document.getElementsByName( expando ).length === 2 +
				// buggy browsers will return more than the correct 0
				document.getElementsByName( expando + 0 ).length;
			assertGetIdNotName = !document.getElementById( expando );
	
			// Cleanup
			docElem.removeChild( div );
	
			return pass;
		});
	
	// If slice is not available, provide a backup
	try {
		slice.call( docElem.childNodes, 0 )[0].nodeType;
	} catch ( e ) {
		slice = function( i ) {
			var elem, results = [];
			for ( ; (elem = this[i]); i++ ) {
				results.push( elem );
			}
			return results;
		};
	}
	
	function Sizzle( selector, context, results, seed ) {
		results = results || [];
		// PATCH for jsdom
		// context = context || document;
		// See: https://github.com/tmpvar/jsdom/issues/375
		context = context || seed[0].ownerDocument;
		var match, elem, xml, m,
			nodeType = context.nodeType;
	
		if ( nodeType !== 1 && nodeType !== 9 ) {
			return [];
		}
	
		if ( !selector || typeof selector !== "string" ) {
			return results;
		}
	
		xml = isXML( context );
	
		if ( !xml && !seed ) {
			if ( (match = rquickExpr.exec( selector )) ) {
				// Speed-up: Sizzle("#ID")
				if ( (m = match[1]) ) {
					if ( nodeType === 9 ) {
						elem = context.getElementById( m );
						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						if ( elem && elem.parentNode ) {
							// Handle the case where IE, Opera, and Webkit return items
							// by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}
					} else {
						// Context is not a document
						if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
							contains( context, elem ) && elem.id === m ) {
							results.push( elem );
							return results;
						}
					}
	
				// Speed-up: Sizzle("TAG")
				} else if ( match[2] ) {
					push.apply( results, slice.call(context.getElementsByTagName( selector ), 0) );
					return results;
	
				// Speed-up: Sizzle(".CLASS")
				} else if ( (m = match[3]) && assertUsableClassName && context.getElementsByClassName ) {
					push.apply( results, slice.call(context.getElementsByClassName( m ), 0) );
					return results;
				}
			}
		}
	
		// All others
		return select( selector, context, results, seed, xml );
	}
	
	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};
	
	Sizzle.matchesSelector = function( elem, expr ) {
		return Sizzle( expr, null, null, [ elem ] ).length > 0;
	};
	
	// Returns a function to use in pseudos for input types
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}
	
	// Returns a function to use in pseudos for buttons
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}
	
	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;
	
		if ( nodeType ) {
			if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
				// Use textContent for elements
				// innerText usage removed for consistency of new lines (see #11153)
				if ( typeof elem.textContent === "string" ) {
					return elem.textContent;
				} else {
					// Traverse its children
					for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
						ret += getText( elem );
					}
				}
			} else if ( nodeType === 3 || nodeType === 4 ) {
				return elem.nodeValue;
			}
			// Do not include comment or processing instruction nodes
		} else {
	
			// If no nodeType, this is expected to be an array
			for ( ; (node = elem[i]); i++ ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		}
		return ret;
	};
	
	isXML = Sizzle.isXML = function isXML( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};
	
	// Element contains another
	contains = Sizzle.contains = docElem.contains ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && adown.contains && adown.contains(bup) );
		} :
		docElem.compareDocumentPosition ?
		function( a, b ) {
			return b && !!( a.compareDocumentPosition( b ) & 16 );
		} :
		function( a, b ) {
			while ( (b = b.parentNode) ) {
				if ( b === a ) {
					return true;
				}
			}
			return false;
		};
	
	Sizzle.attr = function( elem, name ) {
		var attr,
			xml = isXML( elem );
	
		if ( !xml ) {
			name = name.toLowerCase();
		}
		if ( Expr.attrHandle[ name ] ) {
			return Expr.attrHandle[ name ]( elem );
		}
		if ( assertAttributes || xml ) {
			return elem.getAttribute( name );
		}
		attr = elem.getAttributeNode( name );
		return attr ?
			typeof elem[ name ] === "boolean" ?
				elem[ name ] ? name : null :
				attr.specified ? attr.value : null :
			null;
	};
	
	Expr = Sizzle.selectors = {
	
		// Can be adjusted by the user
		cacheLength: 50,
	
		createPseudo: markFunction,
	
		match: matchExpr,
	
		order: new RegExp( "ID|TAG" +
			(assertUsableName ? "|NAME" : "") +
			(assertUsableClassName ? "|CLASS" : "")
		),
	
		// IE6/7 return a modified href
		attrHandle: assertHrefNotNormalized ?
			{} :
			{
				"href": function( elem ) {
					return elem.getAttribute( "href", 2 );
				},
				"type": function( elem ) {
					return elem.getAttribute("type");
				}
			},
	
		find: {
			"ID": assertGetIdNotName ?
				function( id, context, xml ) {
					if ( typeof context.getElementById !== strundefined && !xml ) {
						var m = context.getElementById( id );
						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						return m && m.parentNode ? [m] : [];
					}
				} :
				function( id, context, xml ) {
					if ( typeof context.getElementById !== strundefined && !xml ) {
						var m = context.getElementById( id );
	
						return m ?
							m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
								[m] :
								undefined :
							[];
					}
				},
	
			"TAG": assertTagNameNoComments ?
				function( tag, context ) {
					if ( typeof context.getElementsByTagName !== strundefined ) {
						return context.getElementsByTagName( tag );
					}
				} :
				function( tag, context ) {
					var results = context.getElementsByTagName( tag );
	
					// Filter out possible comments
					if ( tag === "*" ) {
						var elem,
							tmp = [],
							i = 0;
	
						for ( ; (elem = results[i]); i++ ) {
							if ( elem.nodeType === 1 ) {
								tmp.push( elem );
							}
						}
	
						return tmp;
					}
					return results;
				},
	
			"NAME": function( tag, context ) {
				if ( typeof context.getElementsByName !== strundefined ) {
					return context.getElementsByName( name );
				}
			},
	
			"CLASS": function( className, context, xml ) {
				if ( typeof context.getElementsByClassName !== strundefined && !xml ) {
					return context.getElementsByClassName( className );
				}
			}
		},
	
		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},
	
		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( rbackslash, "" );
	
				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[4] || match[5] || "" ).replace( rbackslash, "" );
	
				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}
	
				return match.slice( 0, 4 );
			},
	
			"CHILD": function( match ) {
				/* matches from matchExpr.CHILD
					1 type (only|nth|...)
					2 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					3 xn-component of xn+y argument ([+-]?\d*n|)
					4 sign of xn-component
					5 x of xn-component
					6 sign of y-component
					7 y of y-component
				*/
				match[1] = match[1].toLowerCase();
	
				if ( match[1] === "nth" ) {
					// nth-child requires argument
					if ( !match[2] ) {
						Sizzle.error( match[0] );
					}
	
					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[3] = +( match[3] ? match[4] + (match[5] || 1) : 2 * ( match[2] === "even" || match[2] === "odd" ) );
					match[4] = +( ( match[6] + match[7] ) || match[2] === "odd" );
	
				// other types prohibit arguments
				} else if ( match[2] ) {
					Sizzle.error( match[0] );
				}
	
				return match;
			},
	
			"PSEUDO": function( match, context, xml ) {
				var unquoted, excess;
				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}
	
				if ( match[3] ) {
					match[2] = match[3];
				} else if ( (unquoted = match[4]) ) {
					// Only check arguments that contain a pseudo
					if ( rpseudo.test(unquoted) &&
						// Get excess from tokenize (recursively)
						(excess = tokenize( unquoted, context, xml, true )) &&
						// advance to the next closing parenthesis
						(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
	
						// excess is a negative index
						unquoted = unquoted.slice( 0, excess );
						match[0] = match[0].slice( 0, excess );
					}
					match[2] = unquoted;
				}
	
				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},
	
		filter: {
			"ID": assertGetIdNotName ?
				function( id ) {
					id = id.replace( rbackslash, "" );
					return function( elem ) {
						return elem.getAttribute("id") === id;
					};
				} :
				function( id ) {
					id = id.replace( rbackslash, "" );
					return function( elem ) {
						var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
						return node && node.value === id;
					};
				},
	
			"TAG": function( nodeName ) {
				if ( nodeName === "*" ) {
					return function() { return true; };
				}
				nodeName = nodeName.replace( rbackslash, "" ).toLowerCase();
	
				return function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
			},
	
			"CLASS": function( className ) {
				var pattern = classCache[ expando ][ className ];
				if ( !pattern ) {
					pattern = classCache( className, new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)") );
				}
				return function( elem ) {
					return pattern.test( elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "" );
				};
			},
	
			"ATTR": function( name, operator, check ) {
				if ( !operator ) {
					return function( elem ) {
						return Sizzle.attr( elem, name ) != null;
					};
				}
	
				return function( elem ) {
					var result = Sizzle.attr( elem, name ),
						value = result + "";
	
					if ( result == null ) {
						return operator === "!=";
					}
	
					switch ( operator ) {
						case "=":
							return value === check;
						case "!=":
							return value !== check;
						case "^=":
							return check && value.indexOf( check ) === 0;
						case "*=":
							return check && value.indexOf( check ) > -1;
						case "$=":
							return check && value.substr( value.length - check.length ) === check;
						case "~=":
							return ( " " + value + " " ).indexOf( check ) > -1;
						case "|=":
							return value === check || value.substr( 0, check.length + 1 ) === check + "-";
					}
				};
			},
	
			"CHILD": function( type, argument, first, last ) {
	
				if ( type === "nth" ) {
					var doneName = done++;
	
					return function( elem ) {
						var parent, diff,
							count = 0,
							node = elem;
	
						if ( first === 1 && last === 0 ) {
							return true;
						}
	
						parent = elem.parentNode;
	
						if ( parent && (parent[ expando ] !== doneName || !elem.sizset) ) {
							for ( node = parent.firstChild; node; node = node.nextSibling ) {
								if ( node.nodeType === 1 ) {
									node.sizset = ++count;
									if ( node === elem ) {
										break;
									}
								}
							}
	
							parent[ expando ] = doneName;
						}
	
						diff = elem.sizset - last;
	
						if ( first === 0 ) {
							return diff === 0;
	
						} else {
							return ( diff % first === 0 && diff / first >= 0 );
						}
					};
				}
	
				return function( elem ) {
					var node = elem;
	
					switch ( type ) {
						case "only":
						case "first":
							while ( (node = node.previousSibling) ) {
								if ( node.nodeType === 1 ) {
									return false;
								}
							}
	
							if ( type === "first" ) {
								return true;
							}
	
							node = elem;
	
							/* falls through */
						case "last":
							while ( (node = node.nextSibling) ) {
								if ( node.nodeType === 1 ) {
									return false;
								}
							}
	
							return true;
					}
				};
			},
	
			"PSEUDO": function( pseudo, argument, context, xml ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.pseudos[ pseudo.toLowerCase() ];
	
				if ( !fn ) {
					Sizzle.error( "unsupported pseudo: " + pseudo );
				}
	
				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( !fn[ expando ] ) {
					if ( fn.length > 1 ) {
						args = [ pseudo, pseudo, "", argument ];
						return function( elem ) {
							return fn( elem, 0, args );
						};
					}
					return fn;
				}
	
				return fn( argument, context, xml );
			}
		},
	
		pseudos: {
			"not": markFunction(function( selector, context, xml ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var matcher = compile( selector.replace( rtrim, "$1" ), context, xml );
				return function( elem ) {
					return !matcher( elem );
				};
			}),
	
			"enabled": function( elem ) {
				return elem.disabled === false;
			},
	
			"disabled": function( elem ) {
				return elem.disabled === true;
			},
	
			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},
	
			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}
	
				return elem.selected === true;
			},
	
			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},
	
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
				//   not comment, processing instructions, or others
				// Thanks to Diego Perini for the nodeName shortcut
				//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
				var nodeType;
				elem = elem.firstChild;
				while ( elem ) {
					if ( elem.nodeName > "@" || (nodeType = elem.nodeType) === 3 || nodeType === 4 ) {
						return false;
					}
					elem = elem.nextSibling;
				}
				return true;
			},
	
			"contains": markFunction(function( text ) {
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),
	
			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),
	
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},
	
			"text": function( elem ) {
				var type, attr;
				// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
				// use getAttribute instead to test this case
				return elem.nodeName.toLowerCase() === "input" &&
					(type = elem.type) === "text" &&
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === type );
			},
	
			// Input types
			"radio": createInputPseudo("radio"),
			"checkbox": createInputPseudo("checkbox"),
			"file": createInputPseudo("file"),
			"password": createInputPseudo("password"),
			"image": createInputPseudo("image"),
	
			"submit": createButtonPseudo("submit"),
			"reset": createButtonPseudo("reset"),
	
			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},
	
			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},
	
			"focus": function( elem ) {
				var doc = elem.ownerDocument;
				return elem === doc.activeElement && (!doc.hasFocus || doc.hasFocus()) && !!(elem.type || elem.href);
			},
	
			"active": function( elem ) {
				return elem === elem.ownerDocument.activeElement;
			}
		},
	
		setFilters: {
			"first": function( elements, argument, not ) {
				return not ? elements.slice( 1 ) : [ elements[0] ];
			},
	
			"last": function( elements, argument, not ) {
				var elem = elements.pop();
				return not ? elements : [ elem ];
			},
	
			"even": function( elements, argument, not ) {
				var results = [],
					i = not ? 1 : 0,
					len = elements.length;
				for ( ; i < len; i = i + 2 ) {
					results.push( elements[i] );
				}
				return results;
			},
	
			"odd": function( elements, argument, not ) {
				var results = [],
					i = not ? 0 : 1,
					len = elements.length;
				for ( ; i < len; i = i + 2 ) {
					results.push( elements[i] );
				}
				return results;
			},
	
			"lt": function( elements, argument, not ) {
				return not ? elements.slice( +argument ) : elements.slice( 0, +argument );
			},
	
			"gt": function( elements, argument, not ) {
				return not ? elements.slice( 0, +argument + 1 ) : elements.slice( +argument + 1 );
			},
	
			"eq": function( elements, argument, not ) {
				var elem = elements.splice( +argument, 1 );
				return not ? elements : elem;
			}
		}
	};
	
	function siblingCheck( a, b, ret ) {
		if ( a === b ) {
			return ret;
		}
	
		var cur = a.nextSibling;
	
		while ( cur ) {
			if ( cur === b ) {
				return -1;
			}
	
			cur = cur.nextSibling;
		}
	
		return 1;
	}
	
	sortOrder = docElem.compareDocumentPosition ?
		function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			return ( !a.compareDocumentPosition || !b.compareDocumentPosition ?
				a.compareDocumentPosition :
				a.compareDocumentPosition(b) & 4
			) ? -1 : 1;
		} :
		function( a, b ) {
			// The nodes are identical, we can exit early
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
	
			// Fallback to using sourceIndex (in IE) if it's available on both nodes
			} else if ( a.sourceIndex && b.sourceIndex ) {
				return a.sourceIndex - b.sourceIndex;
			}
	
			var al, bl,
				ap = [],
				bp = [],
				aup = a.parentNode,
				bup = b.parentNode,
				cur = aup;
	
			// If the nodes are siblings (or identical) we can do a quick check
			if ( aup === bup ) {
				return siblingCheck( a, b );
	
			// If no parents were found then the nodes are disconnected
			} else if ( !aup ) {
				return -1;
	
			} else if ( !bup ) {
				return 1;
			}
	
			// Otherwise they're somewhere else in the tree so we need
			// to build up a full list of the parentNodes for comparison
			while ( cur ) {
				ap.unshift( cur );
				cur = cur.parentNode;
			}
	
			cur = bup;
	
			while ( cur ) {
				bp.unshift( cur );
				cur = cur.parentNode;
			}
	
			al = ap.length;
			bl = bp.length;
	
			// Start walking down the tree looking for a discrepancy
			for ( var i = 0; i < al && i < bl; i++ ) {
				if ( ap[i] !== bp[i] ) {
					return siblingCheck( ap[i], bp[i] );
				}
			}
	
			// We ended someplace up the tree so do a sibling check
			return i === al ?
				siblingCheck( a, bp[i], -1 ) :
				siblingCheck( ap[i], b, 1 );
		};
	
	// Always assume the presence of duplicates if sort doesn't
	// pass them to our comparison function (as in Google Chrome).
	[0, 0].sort( sortOrder );
	baseHasDuplicate = !hasDuplicate;
	
	// Document sorting and removing duplicates
	Sizzle.uniqueSort = function( results ) {
		var elem,
			i = 1;
	
		hasDuplicate = baseHasDuplicate;
		results.sort( sortOrder );
	
		if ( hasDuplicate ) {
			for ( ; (elem = results[i]); i++ ) {
				if ( elem === results[ i - 1 ] ) {
					results.splice( i--, 1 );
				}
			}
		}
	
		return results;
	};
	
	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};
	
	function tokenize( selector, context, xml, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, group, i,
			preFilters, filters,
			checkContext = !xml && context !== document,
			// Token cache should maintain spaces
			key = ( checkContext ? "<s>" : "" ) + selector.replace( rtrim, "$1<s>" ),
			cached = tokenCache[ expando ][ key ];
	
		if ( cached ) {
			return parseOnly ? 0 : slice.call( cached, 0 );
		}
	
		soFar = selector;
		groups = [];
		i = 0;
		preFilters = Expr.preFilter;
		filters = Expr.filter;
	
		while ( soFar ) {
	
			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					soFar = soFar.slice( match[0].length );
					tokens.selector = group;
				}
				groups.push( tokens = [] );
				group = "";
	
				// Need to make sure we're within a narrower context if necessary
				// Adding a descendant combinator will generate what is needed
				if ( checkContext ) {
					soFar = " " + soFar;
				}
			}
	
			matched = false;
	
			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				group += match[0];
				soFar = soFar.slice( match[0].length );
	
				// Cast descendant combinators to space
				matched = tokens.push({
					part: match.pop().replace( rtrim, " " ),
					string: match[0],
					captures: match
				});
			}
	
			// Filters
			for ( type in filters ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					( match = preFilters[ type ](match, context, xml) )) ) {
	
					group += match[0];
					soFar = soFar.slice( match[0].length );
					matched = tokens.push({
						part: type,
						string: match.shift(),
						captures: match
					});
				}
			}
	
			if ( !matched ) {
				break;
			}
		}
	
		// Attach the full group as a selector
		if ( group ) {
			tokens.selector = group;
		}
	
		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				slice.call( tokenCache(key, groups), 0 );
	}
	
	function addCombinator( matcher, combinator, context, xml ) {
		var dir = combinator.dir,
			doneName = done++;
	
		if ( !matcher ) {
			// If there is no matcher to check, check against the context
			matcher = function( elem ) {
				return elem === context;
			};
		}
		return combinator.first ?
			function( elem ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 ) {
						return matcher( elem ) && elem;
					}
				}
			} :
			xml ?
				function( elem ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 ) {
							if ( matcher( elem ) ) {
								return elem;
							}
						}
					}
				} :
				function( elem ) {
					var cache,
						dirkey = doneName + "." + dirruns,
						cachedkey = dirkey + "." + cachedruns;
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 ) {
							if ( (cache = elem[ expando ]) === cachedkey ) {
								return elem.sizset;
							} else if ( typeof cache === "string" && cache.indexOf(dirkey) === 0 ) {
								if ( elem.sizset ) {
									return elem;
								}
							} else {
								elem[ expando ] = cachedkey;
								if ( matcher( elem ) ) {
									elem.sizset = true;
									return elem;
								}
								elem.sizset = false;
							}
						}
					}
				};
	}
	
	function addMatcher( higher, deeper ) {
		return higher ?
			function( elem ) {
				var result = deeper( elem );
				return result && higher( result === true ? elem : result );
			} :
			deeper;
	}
	
	// ["TAG", ">", "ID", " ", "CLASS"]
	function matcherFromTokens( tokens, context, xml ) {
		var token, matcher,
			i = 0;
	
		for ( ; (token = tokens[i]); i++ ) {
			if ( Expr.relative[ token.part ] ) {
				matcher = addCombinator( matcher, Expr.relative[ token.part ], context, xml );
			} else {
				matcher = addMatcher( matcher, Expr.filter[ token.part ].apply(null, token.captures.concat( context, xml )) );
			}
		}
	
		return matcher;
	}
	
	function matcherFromGroupMatchers( matchers ) {
		return function( elem ) {
			var matcher,
				j = 0;
			for ( ; (matcher = matchers[j]); j++ ) {
				if ( matcher(elem) ) {
					return true;
				}
			}
			return false;
		};
	}
	
	compile = Sizzle.compile = function( selector, context, xml ) {
		var group, i, len,
			cached = compilerCache[ expando ][ selector ];
	
		// Return a cached group function if already generated (context dependent)
		if ( cached && cached.context === context ) {
			return cached;
		}
	
		// Generate a function of recursive functions that can be used to check each element
		group = tokenize( selector, context, xml );
		for ( i = 0, len = group.length; i < len; i++ ) {
			group[i] = matcherFromTokens(group[i], context, xml);
		}
	
		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers(group) );
		cached.context = context;
		cached.runs = cached.dirruns = 0;
		return cached;
	};
	
	function multipleContexts( selector, contexts, results, seed ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results, seed );
		}
	}
	
	function handlePOSGroup( selector, posfilter, argument, contexts, seed, not ) {
		var results,
			fn = Expr.setFilters[ posfilter.toLowerCase() ];
	
		if ( !fn ) {
			Sizzle.error( posfilter );
		}
	
		if ( selector || !(results = seed) ) {
			multipleContexts( selector || "*", contexts, (results = []), seed );
		}
	
		return results.length > 0 ? fn( results, argument, not ) : [];
	}
	
	function handlePOS( groups, context, results, seed ) {
		var group, part, j, groupLen, token, selector,
			anchor, elements, match, matched,
			lastIndex, currentContexts, not,
			i = 0,
			len = groups.length,
			rpos = matchExpr["POS"],
			// This is generated here in case matchExpr["POS"] is extended
			rposgroups = new RegExp( "^" + rpos.source + "(?!" + whitespace + ")", "i" ),
			// This is for making sure non-participating
			// matching groups are represented cross-browser (IE6-8)
			setUndefined = function() {
				var i = 1,
					len = arguments.length - 2;
				for ( ; i < len; i++ ) {
					if ( arguments[i] === undefined ) {
						match[i] = undefined;
					}
				}
			};
	
		for ( ; i < len; i++ ) {
			group = groups[i];
			part = "";
			elements = seed;
			for ( j = 0, groupLen = group.length; j < groupLen; j++ ) {
				token = group[j];
				selector = token.string;
				if ( token.part === "PSEUDO" ) {
					// Reset regex index to 0
					rpos.exec("");
					anchor = 0;
					while ( (match = rpos.exec( selector )) ) {
						matched = true;
						lastIndex = rpos.lastIndex = match.index + match[0].length;
						if ( lastIndex > anchor ) {
							part += selector.slice( anchor, match.index );
							anchor = lastIndex;
							currentContexts = [ context ];
	
							if ( rcombinators.test(part) ) {
								if ( elements ) {
									currentContexts = elements;
								}
								elements = seed;
							}
	
							if ( (not = rendsWithNot.test( part )) ) {
								part = part.slice( 0, -5 ).replace( rcombinators, "$&*" );
								anchor++;
							}
	
							if ( match.length > 1 ) {
								match[0].replace( rposgroups, setUndefined );
							}
							elements = handlePOSGroup( part, match[1], match[2], currentContexts, elements, not );
						}
						part = "";
					}
	
				}
	
				if ( !matched ) {
					part += selector;
				}
				matched = false;
			}
	
			if ( part ) {
				if ( rcombinators.test(part) ) {
					multipleContexts( part, elements || [ context ], results, seed );
				} else {
					Sizzle( part, context, results, seed ? seed.concat(elements) : elements );
				}
			} else {
				push.apply( results, elements );
			}
		}
	
		// Do not sort if this is a single filter
		return len === 1 ? results : Sizzle.uniqueSort( results );
	}
	
	function select( selector, context, results, seed, xml ) {
		// Remove excessive whitespace
		selector = selector.replace( rtrim, "$1" );
		var elements, matcher, cached, elem,
			i, tokens, token, lastToken, findContext, type,
			match = tokenize( selector, context, xml ),
			contextNodeType = context.nodeType;
	
		// POS handling
		if ( matchExpr["POS"].test(selector) ) {
			return handlePOS( match, context, results, seed );
		}
	
		if ( seed ) {
			elements = slice.call( seed, 0 );
	
		// To maintain document order, only narrow the
		// set if there is one group
		} else if ( match.length === 1 ) {
	
			// Take a shortcut and set the context if the root selector is an ID
			if ( (tokens = slice.call( match[0], 0 )).length > 2 &&
					(token = tokens[0]).part === "ID" &&
					contextNodeType === 9 && !xml &&
					Expr.relative[ tokens[1].part ] ) {
	
				context = Expr.find["ID"]( token.captures[0].replace( rbackslash, "" ), context, xml )[0];
				if ( !context ) {
					return results;
				}
	
				selector = selector.slice( tokens.shift().string.length );
			}
	
			findContext = ( (match = rsibling.exec( tokens[0].string )) && !match.index && context.parentNode ) || context;
	
			// Reduce the set if possible
			lastToken = "";
			for ( i = tokens.length - 1; i >= 0; i-- ) {
				token = tokens[i];
				type = token.part;
				lastToken = token.string + lastToken;
				if ( Expr.relative[ type ] ) {
					break;
				}
				if ( Expr.order.test(type) ) {
					elements = Expr.find[ type ]( token.captures[0].replace( rbackslash, "" ), findContext, xml );
					if ( elements == null ) {
						continue;
					} else {
						selector = selector.slice( 0, selector.length - lastToken.length ) +
							lastToken.replace( matchExpr[ type ], "" );
	
						if ( !selector ) {
							push.apply( results, slice.call(elements, 0) );
						}
	
						break;
					}
				}
			}
		}
	
		// Only loop over the given elements once
		if ( selector ) {
			matcher = compile( selector, context, xml );
			dirruns = matcher.dirruns++;
			if ( elements == null ) {
				elements = Expr.find["TAG"]( "*", (rsibling.test( selector ) && context.parentNode) || context );
			}
	
			for ( i = 0; (elem = elements[i]); i++ ) {
				cachedruns = matcher.runs++;
				if ( matcher(elem) ) {
					results.push( elem );
				}
			}
		}
	
		return results;
	}
	
	// Patch for jsdom
	// we use sizzle to implement querySelectorAll, so sizzle cannot use it 
	if ( document.querySelectorAll && false ) {
		(function() {
			var disconnectedMatch,
				oldSelect = select,
				rescape = /'|\\/g,
				rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,
				rbuggyQSA = [],
				// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
				// A support test would require too much code (would include document ready)
				// just skip matchesSelector for :active
				rbuggyMatches = [":active"],
				matches = docElem.matchesSelector ||
					docElem.mozMatchesSelector ||
					docElem.webkitMatchesSelector ||
					docElem.oMatchesSelector ||
					docElem.msMatchesSelector;
	
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explictly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				div.innerHTML = "<select><option selected=''></option></select>";
	
				// IE8 - Some boolean attributes are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)" );
				}
	
				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here (do not put tests after this one)
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}
			});
	
			assert(function( div ) {
	
				// Opera 10-12/IE9 - ^= $= *= and empty values
				// Should not select anything
				div.innerHTML = "<p test=''></p>";
				if ( div.querySelectorAll("[test^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\"\"|'')" );
				}
	
				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here (do not put tests after this one)
				div.innerHTML = "<input type='hidden'/>";
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push(":enabled", ":disabled");
				}
			});
	
			rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	
			select = function( selector, context, results, seed, xml ) {
				// Only use querySelectorAll when not filtering,
				// when this is not xml,
				// and when no QSA bugs apply
				if ( !seed && !xml && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
					if ( context.nodeType === 9 ) {
						try {
							push.apply( results, slice.call(context.querySelectorAll( selector ), 0) );
							return results;
						} catch(qsaError) {}
					// qSA works strangely on Element-rooted queries
					// We can work around this by specifying an extra ID on the root
					// and working up from there (Thanks to Andrew Dupont for the technique)
					// IE 8 doesn't work on object elements
					} else if ( context.nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
						var groups, i, len,
							old = context.getAttribute("id"),
							nid = old || expando,
							newContext = rsibling.test( selector ) && context.parentNode || context;
	
						if ( old ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", nid );
						}
	
						groups = tokenize(selector, context, xml);
						// Trailing space is unnecessary
						// There is always a context check
						nid = "[id='" + nid + "']";
						for ( i = 0, len = groups.length; i < len; i++ ) {
							groups[i] = nid + groups[i].selector;
						}
						try {
							push.apply( results, slice.call( newContext.querySelectorAll(
								groups.join(",")
							), 0 ) );
							return results;
						} catch(qsaError) {
						} finally {
							if ( !old ) {
								context.removeAttribute("id");
							}
						}
					}
				}
	
				return oldSelect( selector, context, results, seed, xml );
			};
	
			if ( matches ) {
				assert(function( div ) {
					// Check to see if it's possible to do matchesSelector
					// on a disconnected node (IE 9)
					disconnectedMatch = matches.call( div, "div" );
	
					// This should fail with an exception
					// Gecko does not error, returns false instead
					try {
						matches.call( div, "[test!='']:sizzle" );
						rbuggyMatches.push( matchExpr["PSEUDO"].source, matchExpr["POS"].source, "!=" );
					} catch ( e ) {}
				});
	
				// rbuggyMatches always contains :active, so no need for a length check
				rbuggyMatches = /* rbuggyMatches.length && */ new RegExp( rbuggyMatches.join("|") );
	
				Sizzle.matchesSelector = function( elem, expr ) {
					// Make sure that attribute selectors are quoted
					expr = expr.replace( rattributeQuotes, "='$1']" );
	
					// rbuggyMatches always contains :active, so no need for an existence check
					if ( !isXML( elem ) && !rbuggyMatches.test( expr ) && (!rbuggyQSA || !rbuggyQSA.test( expr )) ) {
						try {
							var ret = matches.call( elem, expr );
	
							// IE 9's matchesSelector returns false on disconnected nodes
							if ( ret || disconnectedMatch ||
									// As well, disconnected nodes are said to be in a document
									// fragment in IE 9
									elem.document && elem.document.nodeType !== 11 ) {
								return ret;
							}
						} catch(e) {}
					}
	
					return Sizzle( expr, null, null, [ elem ] ).length > 0;
				};
			}
		})();
	}
	
	// Deprecated
	Expr.setFilters["nth"] = Expr.setFilters["eq"];
	
	// Back-compat
	Expr.filters = Expr.pseudos;
	
	// EXPOSE
	/* patch for jsdom */
	return Sizzle;
	/*
	if ( typeof define === "function" && define.amd ) {
		define(function() { return Sizzle; });
	} else {
		window.Sizzle = Sizzle;
	}
	*/
	// EXPOSE
	
	};


/***/ },
/* 77 */,
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	exports.javascript = function(element, code, filename) {
	  var doc = element.ownerDocument, window = doc && doc.parentWindow;
	  if (window) {
	    try {
	      window.run(code, filename);
	    } catch (e) {
	      element.raise(
	        'error', 'Running ' + filename + ' failed.',
	        {error: e, filename: filename}
	      );
	    }
	  }
	};


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/* DOM Level2 Events implemented as described here:
	 *
	 * http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html
	 *
	 */
	var core = __webpack_require__(73).dom.level2.core,
	    utils = __webpack_require__(75);
	
	// modify cloned instance for more info check: https://github.com/tmpvar/jsdom/issues/325
	core = Object.create(core);
	
	var events = {};
	
	events.EventException = function() {
	    if (arguments.length > 0) {
	        this._code = arguments[0];
	    } else {
	        this._code = 0;
	    }
	    if (arguments.length > 1) {
	        this._message = arguments[1];
	    } else {
	        this._message = "Unspecified event type";
	    }
	    Error.call(this, this._message);
	    if (Error.captureStackTrace) {
	        Error.captureStackTrace(this, events.EventException);
	    }
	};
	events.EventException.prototype = {
	  UNSPECIFIED_EVENT_TYPE_ERR : 0,
	  get code() { return this._code;}
	};
	events.EventException.prototype.__proto__ = Error.prototype;
	
	events.Event = function(eventType) {
	    this._eventType = eventType;
	    this._type = null;
	    this._bubbles = null;
	    this._cancelable = null;
	    this._target = null;
	    this._currentTarget = null;
	    this._eventPhase = null;
	    this._timeStamp = null;
	    this._preventDefault = false;
	    this._stopPropagation = false;
	};
	events.Event.prototype = {
	    initEvent: function(type, bubbles, cancelable) {
	        this._type = type;
	        this._bubbles = bubbles;
	        this._cancelable = cancelable;
	    },
	    preventDefault: function() {
	        if (this._cancelable) {
	            this._preventDefault = true;
	        }
	    },
	    stopPropagation: function() {
	        this._stopPropagation = true;
	    },
	    CAPTURING_PHASE : 1,
	    AT_TARGET       : 2,
	    BUBBLING_PHASE  : 3,
	    get eventType() { return this._eventType; },
	    get type() { return this._type; },
	    get bubbles() { return this._bubbles; },
	    get cancelable() { return this._cancelable; },
	    get target() { return this._target; },
	    get currentTarget() { return this._currentTarget; },
	    get eventPhase() { return this._eventPhase; },
	    get timeStamp() { return this._timeStamp; }
	};
	
	
	events.UIEvent = function(eventType) {
	    events.Event.call(this, eventType);
	    this.view = null;
	    this.detail = null;
	};
	events.UIEvent.prototype = {
	    initUIEvent: function(type, bubbles, cancelable, view, detail) {
	        this.initEvent(type, bubbles, cancelable);
	        this.view = view;
	        this.detail = detail;
	    },
	};
	events.UIEvent.prototype.__proto__ = events.Event.prototype;
	
	
	events.MouseEvent = function(eventType) {
	    events.UIEvent.call(this, eventType);
	    this.screenX = null;
	    this.screenY = null;
	    this.clientX = null;
	    this.clientY = null;
	    this.ctrlKey = null;
	    this.shiftKey = null;
	    this.altKey = null;
	    this.metaKey = null;
	    this.button = null;
	    this.relatedTarget = null;
	};
	events.MouseEvent.prototype = {
	    initMouseEvent:   function(type,
	                               bubbles,
	                               cancelable,
	                               view,
	                               detail,
	                               screenX,
	                               screenY,
	                               clientX,
	                               clientY,
	                               ctrlKey,
	                               altKey,
	                               shiftKey,
	                               metaKey,
	                               button,
	                               relatedTarget) {
	        this.initUIEvent(type, bubbles, cancelable, view, detail);
	        this.screenX  = screenX
	        this.screenY  = screenY
	        this.clientX  = clientX
	        this.clientY  = clientY
	        this.ctrlKey  = ctrlKey
	        this.shiftKey  = shiftKey
	        this.altKey  = altKey
	        this.metaKey  = metaKey
	        this.button  = button
	        this.relatedTarget  = relatedTarget
	    }
	};
	events.MouseEvent.prototype.__proto__ = events.UIEvent.prototype;
	
	
	events.MutationEvent = function(eventType) {
	    events.Event.call(this, eventType);
	    this.relatedNode = null;
	    this.prevValue = null;
	    this.newValue = null;
	    this.attrName = null;
	    this.attrChange = null;
	};
	events.MutationEvent.prototype = {
	    initMutationEvent:   function(type,
	                                  bubbles,
	                                  cancelable,
	                                  relatedNode,
	                                  prevValue,
	                                  newValue,
	                                  attrName,
	                                  attrChange) {
	        this.initEvent(type, bubbles, cancelable);
	        this.relatedNode = relatedNode;
	        this.prevValue = prevValue;
	        this.newValue = newValue;
	        this.attrName = attrName;
	        this.attrChange = attrChange;
	    },
	    MODIFICATION : 1,
	    ADDITION     : 2,
	    REMOVAL      : 3
	};
	events.MutationEvent.prototype.__proto__ = events.Event.prototype;
	
	events.EventTarget = function() {};
	
	events.EventTarget.getListeners = function getListeners(target, type, capturing) {
	    var listeners = target._listeners
	            && target._listeners[type]
	            && target._listeners[type][capturing] || [];
	    if (!capturing) {
	        var traditionalHandler = target['on' + type];
	        if (traditionalHandler) {
	            var implementation = (target._ownerDocument ? target._ownerDocument.implementation
	                                                        : target.document.implementation);
	
	            if (implementation.hasFeature('ProcessExternalResources', 'script')) {
	                listeners.push(traditionalHandler);
	            }
	        }
	    }
	    return listeners;
	};
	
	events.EventTarget.dispatch = function dispatch(event, iterator, capturing) {
	    var listeners,
	        currentListener,
	        target = iterator();
	
	    while (target && !event._stopPropagation) {
	        listeners = events.EventTarget.getListeners(target, event._type, capturing);
	        currentListener = listeners.length;
	        while (currentListener--) {
	            event._currentTarget = target;
	            try {
	              listeners[currentListener].call(target, event);
	            } catch (e) {
	              target.raise(
	                'error', "Dispatching event '" + event._type + "' failed",
	                {error: e, event: event}
	              );
	            }
	        }
	        target = iterator();
	    }
	    return !event._stopPropagation;
	};
	
	events.EventTarget.forwardIterator = function forwardIterator(list) {
	  var i = 0, len = list.length;
	  return function iterator() { return i < len ? list[i++] : null };
	};
	
	events.EventTarget.backwardIterator = function backwardIterator(list) {
	  var i = list.length;
	  return function iterator() { return i >=0 ? list[--i] : null };
	};
	
	events.EventTarget.singleIterator = function singleIterator(obj) {
	  var i = 1;
	  return function iterator() { return i-- ? obj : null };
	};
	
	events.EventTarget.prototype = {
	    addEventListener: function(type, listener, capturing) {
	        this._listeners = this._listeners || {};
	        var listeners = this._listeners[type] || {};
	        capturing = (capturing === true);
	        var capturingListeners = listeners[capturing] || [];
	        for (var i=0; i < capturingListeners.length; i++) {
	            if (capturingListeners[i] === listener) {
	                return;
	            }
	        }
	        capturingListeners.push(listener);
	        listeners[capturing] = capturingListeners;
	        this._listeners[type] = listeners;
	    },
	
	    removeEventListener: function(type, listener, capturing) {
	        var listeners  = this._listeners && this._listeners[type];
	        if (!listeners) return;
	        var capturingListeners = listeners[(capturing === true)];
	        if (!capturingListeners) return;
	        for (var i=0; i < capturingListeners.length; i++) {
	            if (capturingListeners[i] === listener) {
	                capturingListeners.splice(i, 1);
	                return;
	            }
	        }
	    },
	
	    dispatchEvent: function(event) {
	        if (event == null) {
	            throw new events.EventException(0, "Null event");
	        }
	        if (event._type == null || event._type == "") {
	            throw new events.EventException(0, "Uninitialized event");
	        }
	
	        var targetList = [];
	
	        event._target = this;
	
	        //per the spec we gather the list of targets first to ensure
	        //against dom modifications during actual event dispatch
	        var target = this,
	            targetParent = target._parentNode;
	        while (targetParent) {
	            targetList.push(targetParent);
	            target = targetParent;
	            targetParent = target._parentNode;
	        }
	        targetParent = target._parentWindow;
	        if (targetParent) {
	            targetList.push(targetParent);
	        }
	
	        var iterator = events.EventTarget.backwardIterator(targetList);
	
	        event._eventPhase = event.CAPTURING_PHASE;
	        if (!events.EventTarget.dispatch(event, iterator, true)) return event._preventDefault;
	
	        iterator = events.EventTarget.singleIterator(event._target);
	        event._eventPhase = event.AT_TARGET;
	        if (!events.EventTarget.dispatch(event, iterator, false)) return event._preventDefault;
	
	        if (event._bubbles && !event._stopPropagation) {
	            var i = 0;
	            iterator = events.EventTarget.forwardIterator(targetList);
	            event._eventPhase = event.BUBBLING_PHASE;
	            events.EventTarget.dispatch(event, iterator, false);
	        }
	
	        return event._preventDefault;
	    }
	
	};
	
	
	core.Node.prototype.__proto__ = events.EventTarget.prototype;
	
	function getDocument(el) {
	  return el.nodeType == core.Node.DOCUMENT_NODE ? el : el._ownerDocument;
	}
	
	function mutationEventsEnabled(el) {
	  return el.nodeType != core.Node.ATTRIBUTE_NODE &&
	         getDocument(el).implementation.hasFeature('MutationEvents');
	}
	
	utils.intercept(core.Node, 'insertBefore', function(_super, args, newChild, refChild) {
	  var ret = _super.apply(this, args);
	  if (mutationEventsEnabled(this)) {
	    var doc = getDocument(this),
	        ev = doc.createEvent("MutationEvents");
	
	    ev.initMutationEvent("DOMNodeInserted", true, false, this, null, null, null, null);
	    newChild.dispatchEvent(ev);
	    if (this.nodeType == core.Node.DOCUMENT_NODE || this._attachedToDocument) {
	      ev = doc.createEvent("MutationEvents");
	      ev.initMutationEvent("DOMNodeInsertedIntoDocument", false, false, null, null, null, null, null);
	      core.visitTree(newChild, function(el) {
	        if (el.nodeType == core.Node.ELEMENT_NODE) {
	          el.dispatchEvent(ev);
	          el._attachedToDocument = true;
	        }
	      });
	    }
	  }
	  return ret;
	});
	
	utils.intercept(core.Node, 'removeChild', function (_super, args, oldChild) {
	  if (mutationEventsEnabled(this)) {
	    var doc = getDocument(this),
	        ev = doc.createEvent("MutationEvents");
	
	    ev.initMutationEvent("DOMNodeRemoved", true, false, this, null, null, null, null);
	    oldChild.dispatchEvent(ev);
	
	    ev = doc.createEvent("MutationEvents");
	    ev.initMutationEvent("DOMNodeRemovedFromDocument", false, false, null, null, null, null, null);
	    core.visitTree(oldChild, function(el) {
	      if (el.nodeType == core.Node.ELEMENT_NODE) {
	        el.dispatchEvent(ev);
	        el._attachedToDocument = false;
	      }
	    });
	  }
	  return _super.apply(this, args);
	});
	
	function dispatchAttrEvent(change) {
	  return function(_super, args, node) {
	    var target = this._parentNode,
	        prev = _super.apply(this, args);
	
	    if (mutationEventsEnabled(target)) {
	      var doc = target._ownerDocument,
	          attrChange = events.MutationEvent.prototype[change],
	          attrName = prev && prev.name || node.name,
	          prevVal = prev && prev.value || null,
	          newVal = change == 'ADDITION' ? node.value : null,
	          ev;
	
	      if (!newVal || newVal != prevVal) {
	        ev = doc.createEvent("MutationEvents");
	        ev.initMutationEvent("DOMAttrModified", true, false, target, prevVal, newVal, attrName, attrChange);
	        target.dispatchEvent(ev);
	      }
	    }
	    return prev;
	  }
	}
	
	utils.intercept(core.AttrNodeMap, 'removeNamedItem', dispatchAttrEvent('REMOVAL'));
	utils.intercept(core.AttrNodeMap, 'setNamedItem', dispatchAttrEvent('ADDITION'));
	
	core.CharacterData.prototype.__defineGetter__("_nodeValue", function() {
	  return this.__nodeValue;
	});
	core.CharacterData.prototype.__defineSetter__("_nodeValue", function(value) {
	  var oldValue = this.__nodeValue;
	  this.__nodeValue = value;
	  if (this._ownerDocument && this._parentNode && mutationEventsEnabled(this)) {
	    var ev = this._ownerDocument.createEvent("MutationEvents")
	    ev.initMutationEvent("DOMCharacterDataModified", true, false, this, oldValue, value, null, null);
	    this.dispatchEvent(ev);
	  }
	});
	
	core.Document.prototype.createEvent = function(eventType) {
	    switch (eventType) {
	        case "MutationEvents": return new events.MutationEvent(eventType);
	        case "UIEvents": return new events.UIEvent(eventType);
	        case "MouseEvents": return new events.MouseEvent(eventType);
	        case "HTMLEvents": return new events.Event(eventType);
	    }
	    return new events.Event(eventType);
	};
	
	exports.dom =
	{
	  level2 : {
	    core   : core,
	    events : events
	  }
	};
	


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	exports.dom = {
	  level2 : {
	    core   : __webpack_require__(73).dom.level2.core,
	    events : __webpack_require__(79).dom.level2.events,
	    html   : __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./html\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).dom.level2.html
	  }
	};

/***/ },
/* 81 */,
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	exports.javascript = function(element, code, filename) {
	  var doc = element.ownerDocument, window = doc && doc.parentWindow;
	  if (window) {
	    try {
	      window.run(code, filename);
	    } catch (e) {
	      element.raise(
	        'error', 'Running ' + filename + ' failed.',
	        {error: e, filename: filename}
	      );
	    }
	  }
	};


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	var indexOf = __webpack_require__(153);
	
	var Object_keys = function (obj) {
	    if (Object.keys) return Object.keys(obj)
	    else {
	        var res = [];
	        for (var key in obj) res.push(key)
	        return res;
	    }
	};
	
	var forEach = function (xs, fn) {
	    if (xs.forEach) return xs.forEach(fn)
	    else for (var i = 0; i < xs.length; i++) {
	        fn(xs[i], i, xs);
	    }
	};
	
	var defineProp = (function() {
	    try {
	        Object.defineProperty({}, '_', {});
	        return function(obj, name, value) {
	            Object.defineProperty(obj, name, {
	                writable: true,
	                enumerable: false,
	                configurable: true,
	                value: value
	            })
	        };
	    } catch(e) {
	        return function(obj, name, value) {
	            obj[name] = value;
	        };
	    }
	}());
	
	var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
	'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
	'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
	'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
	'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];
	
	function Context() {}
	Context.prototype = {};
	
	var Script = exports.Script = function NodeScript (code) {
	    if (!(this instanceof Script)) return new Script(code);
	    this.code = code;
	};
	
	Script.prototype.runInContext = function (context) {
	    if (!(context instanceof Context)) {
	        throw new TypeError("needs a 'context' argument.");
	    }
	    
	    var iframe = document.createElement('iframe');
	    if (!iframe.style) iframe.style = {};
	    iframe.style.display = 'none';
	    
	    document.body.appendChild(iframe);
	    
	    var win = iframe.contentWindow;
	    var wEval = win.eval, wExecScript = win.execScript;
	
	    if (!wEval && wExecScript) {
	        // win.eval() magically appears when this is called in IE:
	        wExecScript.call(win, 'null');
	        wEval = win.eval;
	    }
	    
	    forEach(Object_keys(context), function (key) {
	        win[key] = context[key];
	    });
	    forEach(globals, function (key) {
	        if (context[key]) {
	            win[key] = context[key];
	        }
	    });
	    
	    var winKeys = Object_keys(win);
	
	    var res = wEval.call(win, this.code);
	    
	    forEach(Object_keys(win), function (key) {
	        // Avoid copying circular objects like `top` and `window` by only
	        // updating existing context properties or new properties in the `win`
	        // that was only introduced after the eval.
	        if (key in context || indexOf(winKeys, key) === -1) {
	            context[key] = win[key];
	        }
	    });
	
	    forEach(globals, function (key) {
	        if (!(key in context)) {
	            defineProp(context, key, win[key]);
	        }
	    });
	    
	    document.body.removeChild(iframe);
	    
	    return res;
	};
	
	Script.prototype.runInThisContext = function () {
	    return eval(this.code); // maybe...
	};
	
	Script.prototype.runInNewContext = function (context) {
	    var ctx = Script.createContext(context);
	    var res = this.runInContext(ctx);
	
	    forEach(Object_keys(ctx), function (key) {
	        context[key] = ctx[key];
	    });
	
	    return res;
	};
	
	forEach(Object_keys(Script.prototype), function (name) {
	    exports[name] = Script[name] = function (code) {
	        var s = Script(code);
	        return s[name].apply(s, [].slice.call(arguments, 1));
	    };
	});
	
	exports.createScript = function (code) {
	    return exports.Script(code);
	};
	
	exports.createContext = Script.createContext = function (context) {
	    var copy = new Context();
	    if(typeof context === 'object') {
	        forEach(Object_keys(context), function (key) {
	            copy[key] = context[key];
	        });
	    }
	    return copy;
	};


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// when used in node, this will actually load the util module we depend on
	// versus loading the builtin util module as happens otherwise
	// this is a bug in node module loading as far as I am concerned
	var util = __webpack_require__(158);
	
	var pSlice = Array.prototype.slice;
	var hasOwn = Object.prototype.hasOwnProperty;
	
	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.
	
	var assert = module.exports = ok;
	
	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })
	
	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;
	
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  }
	  else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;
	
	      // try to strip useless frames
	      var fn_name = stackStartFunction.name;
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }
	
	      this.stack = out;
	    }
	  }
	};
	
	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);
	
	function replacer(key, value) {
	  if (util.isUndefined(value)) {
	    return '' + value;
	  }
	  if (util.isNumber(value) && (isNaN(value) || !isFinite(value))) {
	    return value.toString();
	  }
	  if (util.isFunction(value) || util.isRegExp(value)) {
	    return value.toString();
	  }
	  return value;
	}
	
	function truncate(s, n) {
	  if (util.isString(s)) {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}
	
	function getMessage(self) {
	  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(JSON.stringify(self.expected, replacer), 128);
	}
	
	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.
	
	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.
	
	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}
	
	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;
	
	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.
	
	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;
	
	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);
	
	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};
	
	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);
	
	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};
	
	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);
	
	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};
	
	function _deepEqual(actual, expected) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;
	
	  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
	    if (actual.length != expected.length) return false;
	
	    for (var i = 0; i < actual.length; i++) {
	      if (actual[i] !== expected[i]) return false;
	    }
	
	    return true;
	
	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();
	
	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;
	
	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if (!util.isObject(actual) && !util.isObject(expected)) {
	    return actual == expected;
	
	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else {
	    return objEquiv(actual, expected);
	  }
	}
	
	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}
	
	function objEquiv(a, b) {
	  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
	    return false;
	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) return false;
	  //~~~I've managed to break Object.keys through screwy arguments passing.
	  //   Converting to array solves the problem.
	  if (isArguments(a)) {
	    if (!isArguments(b)) {
	      return false;
	    }
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b);
	  }
	  try {
	    var ka = objectKeys(a),
	        kb = objectKeys(b),
	        key, i;
	  } catch (e) {//happens when one is a string literal and the other isn't
	    return false;
	  }
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length != kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key])) return false;
	  }
	  return true;
	}
	
	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);
	
	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};
	
	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);
	
	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};
	
	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
	
	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};
	
	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }
	
	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  } else if (actual instanceof expected) {
	    return true;
	  } else if (expected.call({}, actual) === true) {
	    return true;
	  }
	
	  return false;
	}
	
	function _throws(shouldThrow, block, expected, message) {
	  var actual;
	
	  if (util.isString(expected)) {
	    message = expected;
	    expected = null;
	  }
	
	  try {
	    block();
	  } catch (e) {
	    actual = e;
	  }
	
	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');
	
	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }
	
	  if (!shouldThrow && expectedException(actual, expected)) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }
	
	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}
	
	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);
	
	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws.apply(this, [true].concat(pSlice.call(arguments)));
	};
	
	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/message) {
	  _throws.apply(this, [false].concat(pSlice.call(arguments)));
	};
	
	assert.ifError = function(err) { if (err) {throw err;}};
	
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {var optional = __webpack_require__(104)
	  , http = __webpack_require__(46)
	  , https = optional('https')
	  , tls = optional('tls')
	  , url = __webpack_require__(44)
	  , util = __webpack_require__(102)
	  , stream = __webpack_require__(145)
	  , qs = __webpack_require__(146)
	  , querystring = __webpack_require__(96)
	  , crypto = __webpack_require__(147)
	
	  , oauth = optional('oauth-sign')
	  , hawk = optional('hawk')
	  , aws = optional('aws-sign2')
	  , httpSignature = optional('http-signature')
	  , uuid = __webpack_require__(150)
	  , mime = __webpack_require__(151)
	  , tunnel = optional('tunnel-agent')
	  , _safeStringify = __webpack_require__(152)
	
	  , ForeverAgent = __webpack_require__(148)
	  , FormData = optional('form-data')
	
	  , cookies = __webpack_require__(86)
	  , globalCookieJar = cookies.jar()
	
	  , copy = __webpack_require__(87)
	  , debug = __webpack_require__(105)
	  , getSafe = __webpack_require__(106)
	  , net = __webpack_require__(22)
	  ;
	
	function safeStringify (obj) {
	  var ret
	  try { ret = JSON.stringify(obj) }
	  catch (e) { ret = _safeStringify(obj) }
	  return ret
	}
	
	var globalPool = {}
	var isUrl = /^https?:|^unix:/
	
	
	// Hacky fix for pre-0.4.4 https
	if (https && !https.Agent) {
	  https.Agent = function (options) {
	    http.Agent.call(this, options)
	  }
	  util.inherits(https.Agent, http.Agent)
	  https.Agent.prototype._getConnection = function (host, port, cb) {
	    var s = tls.connect(port, host, this.options, function () {
	      // do other checks here?
	      if (cb) cb()
	    })
	    return s
	  }
	}
	
	function isReadStream (rs) {
	  return rs.readable && rs.path && rs.mode;
	}
	
	function toBase64 (str) {
	  return (new Buffer(str || "", "ascii")).toString("base64")
	}
	
	function md5 (str) {
	  return crypto.createHash('md5').update(str).digest('hex')
	}
	
	function Request (options) {
	  stream.Stream.call(this)
	  this.readable = true
	  this.writable = true
	
	  if (typeof options === 'string') {
	    options = {uri:options}
	  }
	
	  var reserved = Object.keys(Request.prototype)
	  for (var i in options) {
	    if (reserved.indexOf(i) === -1) {
	      this[i] = options[i]
	    } else {
	      if (typeof options[i] === 'function') {
	        delete options[i]
	      }
	    }
	  }
	
	  if (options.method) {
	    this.explicitMethod = true
	  }
	
	  this.canTunnel = options.tunnel !== false && tunnel;
	
	  this.init(options)
	}
	util.inherits(Request, stream.Stream)
	Request.prototype.init = function (options) {
	  // init() contains all the code to setup the request object.
	  // the actual outgoing request is not started until start() is called
	  // this function is called from both the constructor and on redirect.
	  var self = this
	  if (!options) options = {}
	
	  if (!self.method) self.method = options.method || 'GET'
	  self.localAddress = options.localAddress
	
	  debug(options)
	  if (!self.pool && self.pool !== false) self.pool = globalPool
	  self.dests = self.dests || []
	  self.__isRequestRequest = true
	
	  // Protect against double callback
	  if (!self._callback && self.callback) {
	    self._callback = self.callback
	    self.callback = function () {
	      if (self._callbackCalled) return // Print a warning maybe?
	      self._callbackCalled = true
	      self._callback.apply(self, arguments)
	    }
	    self.on('error', self.callback.bind())
	    self.on('complete', self.callback.bind(self, null))
	  }
	
	  if (self.url && !self.uri) {
	    // People use this property instead all the time so why not just support it.
	    self.uri = self.url
	    delete self.url
	  }
	
	  if (!self.uri) {
	    // this will throw if unhandled but is handleable when in a redirect
	    return self.emit('error', new Error("options.uri is a required argument"))
	  } else {
	    if (typeof self.uri == "string") self.uri = url.parse(self.uri)
	  }
	
	  if (self.strictSSL === false) {
	    self.rejectUnauthorized = false
	  }
	
	  if (self.proxy) {
	    if (typeof self.proxy == 'string') self.proxy = url.parse(self.proxy)
	
	    // do the HTTP CONNECT dance using koichik/node-tunnel
	    if (http.globalAgent && self.uri.protocol === "https:" && self.canTunnel) {
	      var tunnelFn = self.proxy.protocol === "http:"
	                   ? tunnel.httpsOverHttp : tunnel.httpsOverHttps
	
	      var tunnelOptions = { proxy: { host: self.proxy.hostname
	                                   , port: +self.proxy.port
	                                   , proxyAuth: self.proxy.auth
	                                   , headers: { Host: self.uri.hostname + ':' +
	                                        (self.uri.port || self.uri.protocol === 'https:' ? 443 : 80) }}
	                          , rejectUnauthorized: self.rejectUnauthorized
	                          , ca: this.ca }
	
	      self.agent = tunnelFn(tunnelOptions)
	      self.tunnel = true
	    }
	  }
	
	  if (!self.uri.pathname) {self.uri.pathname = '/'}
	
	  if (!self.uri.host && !self.protocol=='unix:') {
	    // Invalid URI: it may generate lot of bad errors, like "TypeError: Cannot call method 'indexOf' of undefined" in CookieJar
	    // Detect and reject it as soon as possible
	    var faultyUri = url.format(self.uri)
	    var message = 'Invalid URI "' + faultyUri + '"'
	    if (Object.keys(options).length === 0) {
	      // No option ? This can be the sign of a redirect
	      // As this is a case where the user cannot do anything (they didn't call request directly with this URL)
	      // they should be warned that it can be caused by a redirection (can save some hair)
	      message += '. This can be caused by a crappy redirection.'
	    }
	    self.emit('error', new Error(message))
	    return // This error was fatal
	  }
	
	  self._redirectsFollowed = self._redirectsFollowed || 0
	  self.maxRedirects = (self.maxRedirects !== undefined) ? self.maxRedirects : 10
	  self.followRedirect = (self.followRedirect !== undefined) ? self.followRedirect : true
	  self.followAllRedirects = (self.followAllRedirects !== undefined) ? self.followAllRedirects : false
	  if (self.followRedirect || self.followAllRedirects)
	    self.redirects = self.redirects || []
	
	  self.headers = self.headers ? copy(self.headers) : {}
	
	  self.setHost = false
	  if (!self.hasHeader('host')) {
	    self.setHeader('host', self.uri.hostname)
	    if (self.uri.port) {
	      if ( !(self.uri.port === 80 && self.uri.protocol === 'http:') &&
	           !(self.uri.port === 443 && self.uri.protocol === 'https:') )
	      self.setHeader('host', self.getHeader('host') + (':'+self.uri.port) )
	    }
	    self.setHost = true
	  }
	
	  self.jar(self._jar || options.jar)
	
	  if (!self.uri.port) {
	    if (self.uri.protocol == 'http:') {self.uri.port = 80}
	    else if (self.uri.protocol == 'https:') {self.uri.port = 443}
	  }
	
	  if (self.proxy && !self.tunnel) {
	    self.port = self.proxy.port
	    self.host = self.proxy.hostname
	  } else {
	    self.port = self.uri.port
	    self.host = self.uri.hostname
	  }
	
	  self.clientErrorHandler = function (error) {
	    if (self._aborted) return
	    if (self.req && self.req._reusedSocket && error.code === 'ECONNRESET'
	        && self.agent.addRequestNoreuse) {
	      self.agent = { addRequest: self.agent.addRequestNoreuse.bind(self.agent) }
	      self.start()
	      self.req.end()
	      return
	    }
	    if (self.timeout && self.timeoutTimer) {
	      clearTimeout(self.timeoutTimer)
	      self.timeoutTimer = null
	    }
	    self.emit('error', error)
	  }
	
	  self._parserErrorHandler = function (error) {
	    if (this.res) {
	      if (this.res.request) {
	        this.res.request.emit('error', error)
	      } else {
	        this.res.emit('error', error)
	      }
	    } else {
	      this._httpMessage.emit('error', error)
	    }
	  }
	
	  self._buildRequest = function(){
	    var self = this;
	
	    if (options.form) {
	      self.form(options.form)
	    }
	
	    if (options.qs) self.qs(options.qs)
	
	    if (self.uri.path) {
	      self.path = self.uri.path
	    } else {
	      self.path = self.uri.pathname + (self.uri.search || "")
	    }
	
	    if (self.path.length === 0) self.path = '/'
	
	
	    // Auth must happen last in case signing is dependent on other headers
	    if (options.oauth) {
	      self.oauth(options.oauth)
	    }
	
	    if (options.aws) {
	      self.aws(options.aws)
	    }
	
	    if (options.hawk) {
	      self.hawk(options.hawk)
	    }
	
	    if (options.httpSignature) {
	      self.httpSignature(options.httpSignature)
	    }
	
	    if (options.auth) {
	      if (Object.prototype.hasOwnProperty.call(options.auth, 'username')) options.auth.user = options.auth.username
	      if (Object.prototype.hasOwnProperty.call(options.auth, 'password')) options.auth.pass = options.auth.password
	
	      self.auth(
	        options.auth.user,
	        options.auth.pass,
	        options.auth.sendImmediately,
	        options.auth.bearer
	      )
	    }
	
	    if (self.uri.auth && !self.hasHeader('authorization')) {
	      var authPieces = self.uri.auth.split(':').map(function(item){ return querystring.unescape(item) })
	      self.auth(authPieces[0], authPieces.slice(1).join(':'), true)
	    }
	    if (self.proxy && self.proxy.auth && !self.hasHeader('proxy-authorization') && !self.tunnel) {
	      self.setHeader('proxy-authorization', "Basic " + toBase64(self.proxy.auth.split(':').map(function(item){ return querystring.unescape(item)}).join(':')))
	    }
	
	
	    if (self.proxy && !self.tunnel) self.path = (self.uri.protocol + '//' + self.uri.host + self.path)
	
	    if (options.json) {
	      self.json(options.json)
	    } else if (options.multipart) {
	      self.boundary = uuid()
	      self.multipart(options.multipart)
	    }
	
	    if (self.body) {
	      var length = 0
	      if (!Buffer.isBuffer(self.body)) {
	        if (Array.isArray(self.body)) {
	          for (var i = 0; i < self.body.length; i++) {
	            length += self.body[i].length
	          }
	        } else {
	          self.body = new Buffer(self.body)
	          length = self.body.length
	        }
	      } else {
	        length = self.body.length
	      }
	      if (length) {
	        if (!self.hasHeader('content-length')) self.setHeader('content-length', length)
	      } else {
	        throw new Error('Argument error, options.body.')
	      }
	    }
	
	    var protocol = self.proxy && !self.tunnel ? self.proxy.protocol : self.uri.protocol
	      , defaultModules = {'http:':http, 'https:':https, 'unix:':http}
	      , httpModules = self.httpModules || {}
	      ;
	    self.httpModule = httpModules[protocol] || defaultModules[protocol]
	
	    if (!self.httpModule) return this.emit('error', new Error("Invalid protocol: " + protocol))
	
	    if (options.ca) self.ca = options.ca
	
	    if (!self.agent) {
	      if (options.agentOptions) self.agentOptions = options.agentOptions
	
	      if (options.agentClass) {
	        self.agentClass = options.agentClass
	      } else if (options.forever) {
	        self.agentClass = protocol === 'http:' ? ForeverAgent : ForeverAgent.SSL
	      } else {
	        self.agentClass = self.httpModule.Agent
	      }
	    }
	
	    if (self.pool === false) {
	      self.agent = false
	    } else {
	      self.agent = self.agent || self.getAgent()
	      if (self.maxSockets) {
	        // Don't use our pooling if node has the refactored client
	        self.agent.maxSockets = self.maxSockets
	      }
	      if (self.pool.maxSockets) {
	        // Don't use our pooling if node has the refactored client
	        self.agent.maxSockets = self.pool.maxSockets
	      }
	    }
	
	    self.on('pipe', function (src) {
	      if (self.ntick && self._started) throw new Error("You cannot pipe to this stream after the outbound request has started.")
	      self.src = src
	      if (isReadStream(src)) {
	        if (!self.hasHeader('content-type')) self.setHeader('content-type', mime.lookup(src.path))
	      } else {
	        if (src.headers) {
	          for (var i in src.headers) {
	            if (!self.hasHeader(i)) {
	              self.setHeader(i, src.headers[i])
	            }
	          }
	        }
	        if (self._json && !self.hasHeader('content-type'))
	          self.setHeader('content-type', 'application/json')
	        if (src.method && !self.explicitMethod) {
	          self.method = src.method
	        }
	      }
	
	      // self.on('pipe', function () {
	      //   console.error("You have already piped to this stream. Pipeing twice is likely to break the request.")
	      // })
	    })
	
	    process.nextTick(function () {
	      if (self._aborted) return
	
	      if (self._form) {
	        self.setHeaders(self._form.getHeaders())
	        try {
	          var length = self._form.getLengthSync()
	          self.setHeader('content-length', length)
	        } catch(e){}
	        self._form.pipe(self)
	      }
	      if (self.body) {
	        if (Array.isArray(self.body)) {
	          self.body.forEach(function (part) {
	            self.write(part)
	          })
	        } else {
	          self.write(self.body)
	        }
	        self.end()
	      } else if (self.requestBodyStream) {
	        console.warn("options.requestBodyStream is deprecated, please pass the request object to stream.pipe.")
	        self.requestBodyStream.pipe(self)
	      } else if (!self.src) {
	        if (self.method !== 'GET' && typeof self.method !== 'undefined') {
	          self.setHeader('content-length', 0)
	        }
	        self.end()
	      }
	      self.ntick = true
	    })
	
	  } // End _buildRequest
	
	  self._handleUnixSocketURI = function(self){
	    // Parse URI and extract a socket path (tested as a valid socket using net.connect), and a http style path suffix
	    // Thus http requests can be made to a socket using the uri unix://tmp/my.socket/urlpath
	    // and a request for '/urlpath' will be sent to the unix socket at /tmp/my.socket
	
	    self.unixsocket = true;
	
	    var full_path = self.uri.href.replace(self.uri.protocol+'/', '');
	
	    var lookup = full_path.split('/');
	    var error_connecting = true;
	
	    var lookup_table = {};
	    do { lookup_table[lookup.join('/')]={} } while(lookup.pop())
	    for (r in lookup_table){
	      try_next(r);
	    }
	
	    function try_next(table_row){
	      var client = net.connect( table_row );
	      client.path = table_row
	      client.on('error', function(){ lookup_table[this.path].error_connecting=true; this.end(); });
	      client.on('connect', function(){ lookup_table[this.path].error_connecting=false; this.end(); });
	      table_row.client = client;
	    }
	
	    wait_for_socket_response();
	
	    response_counter = 0;
	
	    function wait_for_socket_response(){
	      var detach;
	      if('undefined' == typeof setImmediate ) detach = process.nextTick
	      else detach = setImmediate;
	      detach(function(){
	        // counter to prevent infinite blocking waiting for an open socket to be found.
	        response_counter++;
	        var trying = false;
	        for (r in lookup_table){
	          //console.log(r, lookup_table[r], lookup_table[r].error_connecting)
	          if('undefined' == typeof lookup_table[r].error_connecting)
	            trying = true;
	        }
	        if(trying && response_counter<1000)
	          wait_for_socket_response()
	        else
	          set_socket_properties();
	      })
	    }
	
	    function set_socket_properties(){
	      var host;
	      for (r in lookup_table){
	        if(lookup_table[r].error_connecting === false){
	          host = r
	        }
	      }
	      if(!host){
	        self.emit('error', new Error("Failed to connect to any socket in "+full_path))
	      }
	      var path = full_path.replace(host, '')
	
	      self.socketPath = host
	      self.uri.pathname = path
	      self.uri.href = path
	      self.uri.path = path
	      self.host = ''
	      self.hostname = ''
	      delete self.host
	      delete self.hostname
	      self._buildRequest();
	    }
	  }
	
	  // Intercept UNIX protocol requests to change properties to match socket
	  if(/^unix:/.test(self.uri.protocol)){
	    self._handleUnixSocketURI(self);
	  } else {
	    self._buildRequest();
	  }
	
	}
	
	// Must call this when following a redirect from https to http or vice versa
	// Attempts to keep everything as identical as possible, but update the
	// httpModule, Tunneling agent, and/or Forever Agent in use.
	Request.prototype._updateProtocol = function () {
	  var self = this
	  var protocol = self.uri.protocol
	
	  if (protocol === 'https:') {
	    // previously was doing http, now doing https
	    // if it's https, then we might need to tunnel now.
	    if (self.proxy && self.canTunnel) {
	      self.tunnel = true
	      var tunnelFn = self.proxy.protocol === 'http:'
	                   ? tunnel.httpsOverHttp : tunnel.httpsOverHttps
	      var tunnelOptions = { proxy: { host: self.proxy.hostname
	                                   , port: +self.proxy.port
	                                   , proxyAuth: self.proxy.auth }
	                          , rejectUnauthorized: self.rejectUnauthorized
	                          , ca: self.ca }
	      self.agent = tunnelFn(tunnelOptions)
	      return
	    }
	
	    self.httpModule = https
	    switch (self.agentClass) {
	      case ForeverAgent:
	        self.agentClass = ForeverAgent.SSL
	        break
	      case http.Agent:
	        self.agentClass = https.Agent
	        break
	      default:
	        // nothing we can do.  Just hope for the best.
	        return
	    }
	
	    // if there's an agent, we need to get a new one.
	    if (self.agent) self.agent = self.getAgent()
	
	  } else {
	    // previously was doing https, now doing http
	    // stop any tunneling.
	    if (self.tunnel) self.tunnel = false
	    self.httpModule = http
	    switch (self.agentClass) {
	      case ForeverAgent.SSL:
	        self.agentClass = ForeverAgent
	        break
	      case https.Agent:
	        self.agentClass = http.Agent
	        break
	      default:
	        // nothing we can do.  just hope for the best
	        return
	    }
	
	    // if there's an agent, then get a new one.
	    if (self.agent) {
	      self.agent = null
	      self.agent = self.getAgent()
	    }
	  }
	}
	
	Request.prototype.getAgent = function () {
	  var Agent = this.agentClass
	  var options = {}
	  if (this.agentOptions) {
	    for (var i in this.agentOptions) {
	      options[i] = this.agentOptions[i]
	    }
	  }
	  if (this.ca) options.ca = this.ca
	  if (this.ciphers) options.ciphers = this.ciphers
	  if (this.secureProtocol) options.secureProtocol = this.secureProtocol
	  if (this.secureOptions) options.secureOptions = this.secureOptions
	  if (typeof this.rejectUnauthorized !== 'undefined') options.rejectUnauthorized = this.rejectUnauthorized
	
	  if (this.cert && this.key) {
	    options.key = this.key
	    options.cert = this.cert
	  }
	
	  var poolKey = ''
	
	  // different types of agents are in different pools
	  if (Agent !== this.httpModule.Agent) {
	    poolKey += Agent.name
	  }
	
	  if (!this.httpModule.globalAgent) {
	    // node 0.4.x
	    options.host = this.host
	    options.port = this.port
	    if (poolKey) poolKey += ':'
	    poolKey += this.host + ':' + this.port
	  }
	
	  // ca option is only relevant if proxy or destination are https
	  var proxy = this.proxy
	  if (typeof proxy === 'string') proxy = url.parse(proxy)
	  var isHttps = (proxy && proxy.protocol === 'https:') || this.uri.protocol === 'https:'
	  if (isHttps) {
	    if (options.ca) {
	      if (poolKey) poolKey += ':'
	      poolKey += options.ca
	    }
	
	    if (typeof options.rejectUnauthorized !== 'undefined') {
	      if (poolKey) poolKey += ':'
	      poolKey += options.rejectUnauthorized
	    }
	
	    if (options.cert)
	      poolKey += options.cert.toString('ascii') + options.key.toString('ascii')
	
	    if (options.ciphers) {
	      if (poolKey) poolKey += ':'
	      poolKey += options.ciphers
	    }
	
	    if (options.secureProtocol) {
	      if (poolKey) poolKey += ':'
	      poolKey += options.secureProtocol
	    }
	  }
	
	  if (this.pool === globalPool && !poolKey && Object.keys(options).length === 0 && this.httpModule.globalAgent) {
	    // not doing anything special.  Use the globalAgent
	    return this.httpModule.globalAgent
	  }
	
	  // we're using a stored agent.  Make sure it's protocol-specific
	  poolKey = this.uri.protocol + poolKey
	
	  // already generated an agent for this setting
	  if (this.pool[poolKey]) return this.pool[poolKey]
	
	  return this.pool[poolKey] = new Agent(options)
	}
	
	Request.prototype.start = function () {
	  // start() is called once we are ready to send the outgoing HTTP request.
	  // this is usually called on the first write(), end() or on nextTick()
	  var self = this
	
	  if (self._aborted) return
	
	  self._started = true
	  self.method = self.method || 'GET'
	  self.href = self.uri.href
	
	  if (self.src && self.src.stat && self.src.stat.size && !self.hasHeader('content-length')) {
	    self.setHeader('content-length', self.src.stat.size)
	  }
	  if (self._aws) {
	    self.aws(self._aws, true)
	  }
	
	  // We have a method named auth, which is completely different from the http.request
	  // auth option.  If we don't remove it, we're gonna have a bad time.
	  var reqOptions = copy(self)
	  delete reqOptions.auth
	
	  debug('make request', self.uri.href)
	  self.req = self.httpModule.request(reqOptions, self.onResponse.bind(self))
	
	  if (self.timeout && !self.timeoutTimer) {
	    self.timeoutTimer = setTimeout(function () {
	      self.req.abort()
	      var e = new Error("ETIMEDOUT")
	      e.code = "ETIMEDOUT"
	      self.emit("error", e)
	    }, self.timeout)
	
	    // Set additional timeout on socket - in case if remote
	    // server freeze after sending headers
	    if (self.req.setTimeout) { // only works on node 0.6+
	      self.req.setTimeout(self.timeout, function () {
	        if (self.req) {
	          self.req.abort()
	          var e = new Error("ESOCKETTIMEDOUT")
	          e.code = "ESOCKETTIMEDOUT"
	          self.emit("error", e)
	        }
	      })
	    }
	  }
	
	  self.req.on('error', self.clientErrorHandler)
	  self.req.on('drain', function() {
	    self.emit('drain')
	  })
	  self.on('end', function() {
	    if ( self.req.connection ) self.req.connection.removeListener('error', self._parserErrorHandler)
	  })
	  self.emit('request', self.req)
	}
	Request.prototype.onResponse = function (response) {
	  var self = this
	  debug('onResponse', self.uri.href, response.statusCode, response.headers)
	  response.on('end', function() {
	    debug('response end', self.uri.href, response.statusCode, response.headers)
	  });
	
	  if (response.connection.listeners('error').indexOf(self._parserErrorHandler) === -1) {
	    response.connection.once('error', self._parserErrorHandler)
	  }
	  if (self._aborted) {
	    debug('aborted', self.uri.href)
	    response.resume()
	    return
	  }
	  if (self._paused) response.pause()
	  else response.resume()
	
	  self.response = response
	  response.request = self
	  response.toJSON = toJSON
	
	  // XXX This is different on 0.10, because SSL is strict by default
	  if (self.httpModule === https &&
	      self.strictSSL &&
	      !response.client.authorized) {
	    debug('strict ssl error', self.uri.href)
	    var sslErr = response.client.authorizationError
	    self.emit('error', new Error('SSL Error: '+ sslErr))
	    return
	  }
	
	  if (self.setHost && self.hasHeader('host')) delete self.headers[self.hasHeader('host')]
	  if (self.timeout && self.timeoutTimer) {
	    clearTimeout(self.timeoutTimer)
	    self.timeoutTimer = null
	  }
	
	  var targetCookieJar = (self._jar && self._jar.setCookie)?self._jar:globalCookieJar;
	  var addCookie = function (cookie) {
	    //set the cookie if it's domain in the href's domain.
	    try {
	      targetCookieJar.setCookie(cookie, self.uri.href, {ignoreError: true});
	    } catch (e) {
	      self.emit('error', e);
	    }
	  }
	
	  if (hasHeader('set-cookie', response.headers) && (!self._disableCookies)) {
	    var headerName = hasHeader('set-cookie', response.headers)
	    if (Array.isArray(response.headers[headerName])) response.headers[headerName].forEach(addCookie)
	    else addCookie(response.headers[headerName])
	  }
	
	  var redirectTo = null
	  if (response.statusCode >= 300 && response.statusCode < 400 && hasHeader('location', response.headers)) {
	    var location = response.headers[hasHeader('location', response.headers)]
	    debug('redirect', location)
	
	    if (self.followAllRedirects) {
	      redirectTo = location
	    } else if (self.followRedirect) {
	      switch (self.method) {
	        case 'PATCH':
	        case 'PUT':
	        case 'POST':
	        case 'DELETE':
	          // Do not follow redirects
	          break
	        default:
	          redirectTo = location
	          break
	      }
	    }
	  } else if (response.statusCode == 401 && self._hasAuth && !self._sentAuth) {
	    var authHeader = response.headers[hasHeader('www-authenticate', response.headers)]
	    var authVerb = authHeader && authHeader.split(' ')[0].toLowerCase()
	    debug('reauth', authVerb)
	
	    switch (authVerb) {
	      case 'basic':
	        self.auth(self._user, self._pass, true)
	        redirectTo = self.uri
	        break
	
	      case 'bearer':
	        self.auth(null, null, true, self._bearer)
	        redirectTo = self.uri
	        break
	
	      case 'digest':
	        // TODO: More complete implementation of RFC 2617.
	        //   - check challenge.algorithm
	        //   - support algorithm="MD5-sess"
	        //   - handle challenge.domain
	        //   - support qop="auth-int" only
	        //   - handle Authentication-Info (not necessarily?)
	        //   - check challenge.stale (not necessarily?)
	        //   - increase nc (not necessarily?)
	        // For reference:
	        // http://tools.ietf.org/html/rfc2617#section-3
	        // https://github.com/bagder/curl/blob/master/lib/http_digest.c
	
	        var challenge = {}
	        var re = /([a-z0-9_-]+)=(?:"([^"]+)"|([a-z0-9_-]+))/gi
	        for (;;) {
	          var match = re.exec(authHeader)
	          if (!match) break
	          challenge[match[1]] = match[2] || match[3];
	        }
	
	        var ha1 = md5(self._user + ':' + challenge.realm + ':' + self._pass)
	        var ha2 = md5(self.method + ':' + self.uri.path)
	        var qop = /(^|,)\s*auth\s*($|,)/.test(challenge.qop) && 'auth'
	        var nc = qop && '00000001'
	        var cnonce = qop && uuid().replace(/-/g, '')
	        var digestResponse = qop ? md5(ha1 + ':' + challenge.nonce + ':' + nc + ':' + cnonce + ':' + qop + ':' + ha2) : md5(ha1 + ':' + challenge.nonce + ':' + ha2)
	        var authValues = {
	          username: self._user,
	          realm: challenge.realm,
	          nonce: challenge.nonce,
	          uri: self.uri.path,
	          qop: qop,
	          response: digestResponse,
	          nc: nc,
	          cnonce: cnonce,
	          algorithm: challenge.algorithm,
	          opaque: challenge.opaque
	        }
	
	        authHeader = []
	        for (var k in authValues) {
	          if (!authValues[k]) {
	            //ignore
	          } else if (k === 'qop' || k === 'nc' || k === 'algorithm') {
	            authHeader.push(k + '=' + authValues[k])
	          } else {
	            authHeader.push(k + '="' + authValues[k] + '"')
	          }
	        }
	        authHeader = 'Digest ' + authHeader.join(', ')
	        self.setHeader('authorization', authHeader)
	        self._sentAuth = true
	
	        redirectTo = self.uri
	        break
	    }
	  }
	
	  if (redirectTo) {
	    debug('redirect to', redirectTo)
	
	    // ignore any potential response body.  it cannot possibly be useful
	    // to us at this point.
	    if (self._paused) response.resume()
	
	    if (self._redirectsFollowed >= self.maxRedirects) {
	      self.emit('error', new Error("Exceeded maxRedirects. Probably stuck in a redirect loop "+self.uri.href))
	      return
	    }
	    self._redirectsFollowed += 1
	
	    if (!isUrl.test(redirectTo)) {
	      redirectTo = url.resolve(self.uri.href, redirectTo)
	    }
	
	    var uriPrev = self.uri
	    self.uri = url.parse(redirectTo)
	
	    // handle the case where we change protocol from https to http or vice versa
	    if (self.uri.protocol !== uriPrev.protocol) {
	      self._updateProtocol()
	    }
	
	    self.redirects.push(
	      { statusCode : response.statusCode
	      , redirectUri: redirectTo
	      }
	    )
	    if (self.followAllRedirects && response.statusCode != 401 && response.statusCode != 307) self.method = 'GET'
	    // self.method = 'GET' // Force all redirects to use GET || commented out fixes #215
	    delete self.src
	    delete self.req
	    delete self.agent
	    delete self._started
	    if (response.statusCode != 401 && response.statusCode != 307) {
	      // Remove parameters from the previous response, unless this is the second request
	      // for a server that requires digest authentication.
	      delete self.body
	      delete self._form
	      if (self.headers) {
	        if (self.hasHeader('host')) delete self.headers[self.hasHeader('host')]
	        if (self.hasHeader('content-type')) delete self.headers[self.hasHeader('content-type')]
	        if (self.hasHeader('content-length')) delete self.headers[self.hasHeader('content-length')]
	      }
	    }
	
	    self.emit('redirect');
	
	    self.init()
	    return // Ignore the rest of the response
	  } else {
	    self._redirectsFollowed = self._redirectsFollowed || 0
	    // Be a good stream and emit end when the response is finished.
	    // Hack to emit end on close because of a core bug that never fires end
	    response.on('close', function () {
	      if (!self._ended) self.response.emit('end')
	    })
	
	    if (self.encoding) {
	      if (self.dests.length !== 0) {
	        console.error("Ignoring encoding parameter as this stream is being piped to another stream which makes the encoding option invalid.")
	      } else {
	        response.setEncoding(self.encoding)
	      }
	    }
	
	    self.emit('response', response)
	
	    self.dests.forEach(function (dest) {
	      self.pipeDest(dest)
	    })
	
	    response.on("data", function (chunk) {
	      self._destdata = true
	      self.emit("data", chunk)
	    })
	    response.on("end", function (chunk) {
	      self._ended = true
	      self.emit("end", chunk)
	    })
	    response.on("close", function () {self.emit("close")})
	
	    if (self.callback) {
	      var buffer = []
	      var bodyLen = 0
	      self.on("data", function (chunk) {
	        buffer.push(chunk)
	        bodyLen += chunk.length
	      })
	      self.on("end", function () {
	        debug('end event', self.uri.href)
	        if (self._aborted) {
	          debug('aborted', self.uri.href)
	          return
	        }
	
	        if (buffer.length && Buffer.isBuffer(buffer[0])) {
	          debug('has body', self.uri.href, bodyLen)
	          var body = new Buffer(bodyLen)
	          var i = 0
	          buffer.forEach(function (chunk) {
	            chunk.copy(body, i, 0, chunk.length)
	            i += chunk.length
	          })
	          if (self.encoding === null) {
	            response.body = body
	          } else {
	            response.body = body.toString(self.encoding)
	          }
	        } else if (buffer.length) {
	          // The UTF8 BOM [0xEF,0xBB,0xBF] is converted to [0xFE,0xFF] in the JS UTC16/UCS2 representation.
	          // Strip this value out when the encoding is set to 'utf8', as upstream consumers won't expect it and it breaks JSON.parse().
	          if (self.encoding === 'utf8' && buffer[0].length > 0 && buffer[0][0] === "\uFEFF") {
	            buffer[0] = buffer[0].substring(1)
	          }
	          response.body = buffer.join('')
	        }
	
	        if (self._json) {
	          try {
	            response.body = JSON.parse(response.body)
	          } catch (e) {}
	        }
	        debug('emitting complete', self.uri.href)
	        if(response.body == undefined && !self._json) {
	          response.body = "";
	        }
	        self.emit('complete', response, response.body)
	      })
	    }
	    //if no callback
	    else{
	      self.on("end", function () {
	        if (self._aborted) {
	          debug('aborted', self.uri.href)
	          return
	        }
	        self.emit('complete', response);
	      });
	    }
	  }
	  debug('finish init function', self.uri.href)
	}
	
	Request.prototype.abort = function () {
	  this._aborted = true
	
	  if (this.req) {
	    this.req.abort()
	  }
	  else if (this.response) {
	    this.response.abort()
	  }
	
	  this.emit("abort")
	}
	
	Request.prototype.pipeDest = function (dest) {
	  var response = this.response
	  // Called after the response is received
	  if (dest.headers && !dest.headersSent) {
	    if (hasHeader('content-type', response.headers)) {
	      var ctname = hasHeader('content-type', response.headers)
	      if (dest.setHeader) dest.setHeader(ctname, response.headers[ctname])
	      else dest.headers[ctname] = response.headers[ctname]
	    }
	
	    if (hasHeader('content-length', response.headers)) {
	      var clname = hasHeader('content-length', response.headers)
	      if (dest.setHeader) dest.setHeader(clname, response.headers[clname])
	      else dest.headers[clname] = response.headers[clname]
	    }
	  }
	  if (dest.setHeader && !dest.headersSent) {
	    for (var i in response.headers) {
	      dest.setHeader(i, response.headers[i])
	    }
	    dest.statusCode = response.statusCode
	  }
	  if (this.pipefilter) this.pipefilter(response, dest)
	}
	
	// Composable API
	Request.prototype.setHeader = function (name, value, clobber) {
	  if (clobber === undefined) clobber = true
	  if (clobber || !this.hasHeader(name)) this.headers[name] = value
	  else this.headers[this.hasHeader(name)] += ',' + value
	  return this
	}
	Request.prototype.setHeaders = function (headers) {
	  for (var i in headers) {this.setHeader(i, headers[i])}
	  return this
	}
	Request.prototype.hasHeader = function (header, headers) {
	  var headers = Object.keys(headers || this.headers)
	    , lheaders = headers.map(function (h) {return h.toLowerCase()})
	    ;
	  header = header.toLowerCase()
	  for (var i=0;i<lheaders.length;i++) {
	    if (lheaders[i] === header) return headers[i]
	  }
	  return false
	}
	
	var hasHeader = Request.prototype.hasHeader
	
	Request.prototype.qs = function (q, clobber) {
	  var base
	  if (!clobber && this.uri.query) base = qs.parse(this.uri.query)
	  else base = {}
	
	  for (var i in q) {
	    base[i] = q[i]
	  }
	
	  if (qs.stringify(base) === ''){
	    return this
	  }
	
	  this.uri = url.parse(this.uri.href.split('?')[0] + '?' + qs.stringify(base))
	  this.url = this.uri
	  this.path = this.uri.path
	
	  return this
	}
	Request.prototype.form = function (form) {
	  if (form) {
	    this.setHeader('content-type', 'application/x-www-form-urlencoded; charset=utf-8')
	    this.body = qs.stringify(form).toString('utf8')
	    return this
	  }
	  // create form-data object
	  this._form = new FormData()
	  return this._form
	}
	Request.prototype.multipart = function (multipart) {
	  var self = this
	  self.body = []
	
	  if (!self.hasHeader('content-type')) {
	    self.setHeader('content-type', 'multipart/related; boundary=' + self.boundary)
	  } else {
	    var headerName = self.hasHeader('content-type');
	    self.setHeader(headerName, self.headers[headerName].split(';')[0] + '; boundary=' + self.boundary)
	  }
	
	  if (!multipart.forEach) throw new Error('Argument error, options.multipart.')
	
	  if (self.preambleCRLF) {
	    self.body.push(new Buffer('\r\n'))
	  }
	
	  multipart.forEach(function (part) {
	    var body = part.body
	    if(body == null) throw Error('Body attribute missing in multipart.')
	    delete part.body
	    var preamble = '--' + self.boundary + '\r\n'
	    Object.keys(part).forEach(function (key) {
	      preamble += key + ': ' + part[key] + '\r\n'
	    })
	    preamble += '\r\n'
	    self.body.push(new Buffer(preamble))
	    self.body.push(new Buffer(body))
	    self.body.push(new Buffer('\r\n'))
	  })
	  self.body.push(new Buffer('--' + self.boundary + '--'))
	  return self
	}
	Request.prototype.json = function (val) {
	  var self = this
	
	  if (!self.hasHeader('accept')) self.setHeader('accept', 'application/json')
	
	  this._json = true
	  if (typeof val === 'boolean') {
	    if (typeof this.body === 'object') {
	      this.body = safeStringify(this.body)
	      if (!self.hasHeader('content-type'))
	        self.setHeader('content-type', 'application/json')
	    }
	  } else {
	    this.body = safeStringify(val)
	    if (!self.hasHeader('content-type'))
	      self.setHeader('content-type', 'application/json')
	  }
	
	  return this
	}
	Request.prototype.getHeader = function (name, headers) {
	  var result, re, match
	  if (!headers) headers = this.headers
	  Object.keys(headers).forEach(function (key) {
	    if (key.length !== name.length) return
	    re = new RegExp(name, 'i')
	    match = key.match(re)
	    if (match) result = headers[key]
	  })
	  return result
	}
	var getHeader = Request.prototype.getHeader
	
	Request.prototype.auth = function (user, pass, sendImmediately, bearer) {
	  if (bearer !== undefined) {
	    this._bearer = bearer
	    this._hasAuth = true
	    if (sendImmediately || typeof sendImmediately == 'undefined') {
	      if (typeof bearer === 'function') {
	        bearer = bearer()
	      }
	      this.setHeader('authorization', 'Bearer ' + bearer)
	      this._sentAuth = true
	    }
	    return this
	  }
	  if (typeof user !== 'string' || (pass !== undefined && typeof pass !== 'string')) {
	    throw new Error('auth() received invalid user or password')
	  }
	  this._user = user
	  this._pass = pass
	  this._hasAuth = true
	  var header = typeof pass !== 'undefined' ? user + ':' + pass : user
	  if (sendImmediately || typeof sendImmediately == 'undefined') {
	    this.setHeader('authorization', 'Basic ' + toBase64(header))
	    this._sentAuth = true
	  }
	  return this
	}
	Request.prototype.aws = function (opts, now) {
	  if (!now) {
	    this._aws = opts
	    return this
	  }
	  var date = new Date()
	  this.setHeader('date', date.toUTCString())
	  var auth =
	    { key: opts.key
	    , secret: opts.secret
	    , verb: this.method.toUpperCase()
	    , date: date
	    , contentType: this.getHeader('content-type') || ''
	    , md5: this.getHeader('content-md5') || ''
	    , amazonHeaders: aws.canonicalizeHeaders(this.headers)
	    }
	  if (opts.bucket && this.path) {
	    auth.resource = '/' + opts.bucket + this.path
	  } else if (opts.bucket && !this.path) {
	    auth.resource = '/' + opts.bucket
	  } else if (!opts.bucket && this.path) {
	    auth.resource = this.path
	  } else if (!opts.bucket && !this.path) {
	    auth.resource = '/'
	  }
	  auth.resource = aws.canonicalizeResource(auth.resource)
	  this.setHeader('authorization', aws.authorization(auth))
	
	  return this
	}
	Request.prototype.httpSignature = function (opts) {
	  var req = this
	  httpSignature.signRequest({
	    getHeader: function(header) {
	      return getHeader(header, req.headers)
	    },
	    setHeader: function(header, value) {
	      req.setHeader(header, value)
	    },
	    method: this.method,
	    path: this.path
	  }, opts)
	  debug('httpSignature authorization', this.getHeader('authorization'))
	
	  return this
	}
	
	Request.prototype.hawk = function (opts) {
	  this.setHeader('Authorization', hawk.client.header(this.uri, this.method, opts).field)
	}
	
	Request.prototype.oauth = function (_oauth) {
	  var form
	  if (this.hasHeader('content-type') &&
	      this.getHeader('content-type').slice(0, 'application/x-www-form-urlencoded'.length) ===
	        'application/x-www-form-urlencoded'
	     ) {
	    form = qs.parse(this.body)
	  }
	  if (this.uri.query) {
	    form = qs.parse(this.uri.query)
	  }
	  if (!form) form = {}
	  var oa = {}
	  for (var i in form) oa[i] = form[i]
	  for (var i in _oauth) oa['oauth_'+i] = _oauth[i]
	  if (!oa.oauth_version) oa.oauth_version = '1.0'
	  if (!oa.oauth_timestamp) oa.oauth_timestamp = Math.floor( Date.now() / 1000 ).toString()
	  if (!oa.oauth_nonce) oa.oauth_nonce = uuid().replace(/-/g, '')
	
	  oa.oauth_signature_method = 'HMAC-SHA1'
	
	  var consumer_secret = oa.oauth_consumer_secret
	  delete oa.oauth_consumer_secret
	  var token_secret = oa.oauth_token_secret
	  delete oa.oauth_token_secret
	  var timestamp = oa.oauth_timestamp
	
	  var baseurl = this.uri.protocol + '//' + this.uri.host + this.uri.pathname
	  var signature = oauth.hmacsign(this.method, baseurl, oa, consumer_secret, token_secret)
	
	  // oa.oauth_signature = signature
	  for (var i in form) {
	    if ( i.slice(0, 'oauth_') in _oauth) {
	      // skip
	    } else {
	      delete oa['oauth_'+i]
	      if (i !== 'x_auth_mode') delete oa[i]
	    }
	  }
	  oa.oauth_timestamp = timestamp
	  var authHeader = 'OAuth '+Object.keys(oa).sort().map(function (i) {return i+'="'+oauth.rfc3986(oa[i])+'"'}).join(',')
	  authHeader += ',oauth_signature="' + oauth.rfc3986(signature) + '"'
	  this.setHeader('Authorization', authHeader)
	  return this
	}
	Request.prototype.jar = function (jar) {
	  var cookies
	
	  if (this._redirectsFollowed === 0) {
	    this.originalCookieHeader = this.getHeader('cookie')
	  }
	
	  if (!jar) {
	    // disable cookies
	    cookies = false
	    this._disableCookies = true
	  } else {
	    var targetCookieJar = (jar && jar.getCookieString)?jar:globalCookieJar;
	    var urihref = this.uri.href
	    //fetch cookie in the Specified host
	    if (targetCookieJar) {
	      cookies = targetCookieJar.getCookieString(urihref);
	    }
	  }
	
	  //if need cookie and cookie is not empty
	  if (cookies && cookies.length) {
	    if (this.originalCookieHeader) {
	      // Don't overwrite existing Cookie header
	      this.setHeader('cookie', this.originalCookieHeader + '; ' + cookies)
	    } else {
	      this.setHeader('cookie', cookies)
	    }
	  }
	  this._jar = jar
	  return this
	}
	
	
	// Stream API
	Request.prototype.pipe = function (dest, opts) {
	  if (this.response) {
	    if (this._destdata) {
	      throw new Error("You cannot pipe after data has been emitted from the response.")
	    } else if (this._ended) {
	      throw new Error("You cannot pipe after the response has been ended.")
	    } else {
	      stream.Stream.prototype.pipe.call(this, dest, opts)
	      this.pipeDest(dest)
	      return dest
	    }
	  } else {
	    this.dests.push(dest)
	    stream.Stream.prototype.pipe.call(this, dest, opts)
	    return dest
	  }
	}
	Request.prototype.write = function () {
	  if (!this._started) this.start()
	  return this.req.write.apply(this.req, arguments)
	}
	Request.prototype.end = function (chunk) {
	  if (chunk) this.write(chunk)
	  if (!this._started) this.start()
	  this.req.end()
	}
	Request.prototype.pause = function () {
	  if (!this.response) this._paused = true
	  else this.response.pause.apply(this.response, arguments)
	}
	Request.prototype.resume = function () {
	  if (!this.response) this._paused = false
	  else this.response.resume.apply(this.response, arguments)
	}
	Request.prototype.destroy = function () {
	  if (!this._ended) this.end()
	  else if (this.response) this.response.destroy()
	}
	
	function toJSON () {
	  return getSafe(this, '__' + (((1+Math.random())*0x10000)|0).toString(16))
	}
	
	Request.prototype.toJSON = toJSON
	
	
	module.exports = Request
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(48).Buffer, __webpack_require__(14)))

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	var optional = __webpack_require__(104)
	  , tough = optional('tough-cookie')
	  , Cookie = tough && tough.Cookie
	  , CookieJar = tough && tough.CookieJar
	  ;
	
	exports.parse = function(str) {
	  if (str && str.uri) str = str.uri
	  if (typeof str !== 'string') throw new Error("The cookie function only accepts STRING as param")
	  if (!Cookie) {
	    return null;
	  }
	  return Cookie.parse(str)
	};
	
	// Adapt the sometimes-Async api of tough.CookieJar to our requirements
	function RequestJar() {
	  this._jar = new CookieJar();
	}
	RequestJar.prototype.setCookie = function(cookieOrStr, uri, options) {
	  return this._jar.setCookieSync(cookieOrStr, uri, options || {});
	};
	RequestJar.prototype.getCookieString = function(uri) {
	  return this._jar.getCookieStringSync(uri);
	};
	
	exports.jar = function() {
	  if (!CookieJar) {
	    // tough-cookie not loaded, return a stub object:
	    return {
	      setCookie: function(){},
	      getCookieString: function(){}
	    };
	  }
	  return new RequestJar();
	};


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	module.exports =
	function copy (obj) {
	  var o = {}
	  Object.keys(obj).forEach(function (i) {
	    o[i] = obj[i]
	  })
	  return o
	}

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {var optional = __webpack_require__(108)
	  , http = __webpack_require__(46)
	  , https = optional('https')
	  , tls = optional('tls')
	  , url = __webpack_require__(44)
	  , util = __webpack_require__(102)
	  , stream = __webpack_require__(145)
	  , qs = __webpack_require__(154)
	  , querystring = __webpack_require__(96)
	  , crypto = __webpack_require__(147)
	
	  , oauth = optional('oauth-sign')
	  , hawk = optional('hawk')
	  , aws = optional('aws-sign2')
	  , httpSignature = optional('http-signature')
	  , uuid = __webpack_require__(160)
	  , mime = __webpack_require__(161)
	  , tunnel = optional('tunnel-agent')
	  , _safeStringify = __webpack_require__(162)
	
	  , ForeverAgent = __webpack_require__(155)
	  , FormData = optional('form-data')
	
	  , cookies = __webpack_require__(94)
	  , globalCookieJar = cookies.jar()
	
	  , copy = __webpack_require__(95)
	  , debug = __webpack_require__(109)
	  , getSafe = __webpack_require__(110)
	  , net = __webpack_require__(22)
	  ;
	
	function safeStringify (obj) {
	  var ret
	  try { ret = JSON.stringify(obj) }
	  catch (e) { ret = _safeStringify(obj) }
	  return ret
	}
	
	var globalPool = {}
	var isUrl = /^https?:|^unix:/
	
	
	// Hacky fix for pre-0.4.4 https
	if (https && !https.Agent) {
	  https.Agent = function (options) {
	    http.Agent.call(this, options)
	  }
	  util.inherits(https.Agent, http.Agent)
	  https.Agent.prototype._getConnection = function (host, port, cb) {
	    var s = tls.connect(port, host, this.options, function () {
	      // do other checks here?
	      if (cb) cb()
	    })
	    return s
	  }
	}
	
	function isReadStream (rs) {
	  return rs.readable && rs.path && rs.mode;
	}
	
	function toBase64 (str) {
	  return (new Buffer(str || "", "ascii")).toString("base64")
	}
	
	function md5 (str) {
	  return crypto.createHash('md5').update(str).digest('hex')
	}
	
	function Request (options) {
	  stream.Stream.call(this)
	  this.readable = true
	  this.writable = true
	
	  if (typeof options === 'string') {
	    options = {uri:options}
	  }
	
	  var reserved = Object.keys(Request.prototype)
	  for (var i in options) {
	    if (reserved.indexOf(i) === -1) {
	      this[i] = options[i]
	    } else {
	      if (typeof options[i] === 'function') {
	        delete options[i]
	      }
	    }
	  }
	
	  if (options.method) {
	    this.explicitMethod = true
	  }
	
	  this.canTunnel = options.tunnel !== false && tunnel;
	
	  this.init(options)
	}
	util.inherits(Request, stream.Stream)
	Request.prototype.init = function (options) {
	  // init() contains all the code to setup the request object.
	  // the actual outgoing request is not started until start() is called
	  // this function is called from both the constructor and on redirect.
	  var self = this
	  if (!options) options = {}
	
	  if (!self.method) self.method = options.method || 'GET'
	  self.localAddress = options.localAddress
	
	  debug(options)
	  if (!self.pool && self.pool !== false) self.pool = globalPool
	  self.dests = self.dests || []
	  self.__isRequestRequest = true
	
	  // Protect against double callback
	  if (!self._callback && self.callback) {
	    self._callback = self.callback
	    self.callback = function () {
	      if (self._callbackCalled) return // Print a warning maybe?
	      self._callbackCalled = true
	      self._callback.apply(self, arguments)
	    }
	    self.on('error', self.callback.bind())
	    self.on('complete', self.callback.bind(self, null))
	  }
	
	  if (self.url && !self.uri) {
	    // People use this property instead all the time so why not just support it.
	    self.uri = self.url
	    delete self.url
	  }
	
	  if (!self.uri) {
	    // this will throw if unhandled but is handleable when in a redirect
	    return self.emit('error', new Error("options.uri is a required argument"))
	  } else {
	    if (typeof self.uri == "string") self.uri = url.parse(self.uri)
	  }
	
	  if (self.strictSSL === false) {
	    self.rejectUnauthorized = false
	  }
	
	  if (self.proxy) {
	    if (typeof self.proxy == 'string') self.proxy = url.parse(self.proxy)
	
	    // do the HTTP CONNECT dance using koichik/node-tunnel
	    if (http.globalAgent && self.uri.protocol === "https:" && self.canTunnel) {
	      var tunnelFn = self.proxy.protocol === "http:"
	                   ? tunnel.httpsOverHttp : tunnel.httpsOverHttps
	
	      var tunnelOptions = { proxy: { host: self.proxy.hostname
	                                   , port: +self.proxy.port
	                                   , proxyAuth: self.proxy.auth
	                                   , headers: { Host: self.uri.hostname + ':' +
	                                        (self.uri.port || self.uri.protocol === 'https:' ? 443 : 80) }}
	                          , rejectUnauthorized: self.rejectUnauthorized
	                          , ca: this.ca }
	
	      self.agent = tunnelFn(tunnelOptions)
	      self.tunnel = true
	    }
	  }
	
	  if (!self.uri.pathname) {self.uri.pathname = '/'}
	
	  if (!self.uri.host && !self.protocol=='unix:') {
	    // Invalid URI: it may generate lot of bad errors, like "TypeError: Cannot call method 'indexOf' of undefined" in CookieJar
	    // Detect and reject it as soon as possible
	    var faultyUri = url.format(self.uri)
	    var message = 'Invalid URI "' + faultyUri + '"'
	    if (Object.keys(options).length === 0) {
	      // No option ? This can be the sign of a redirect
	      // As this is a case where the user cannot do anything (they didn't call request directly with this URL)
	      // they should be warned that it can be caused by a redirection (can save some hair)
	      message += '. This can be caused by a crappy redirection.'
	    }
	    self.emit('error', new Error(message))
	    return // This error was fatal
	  }
	
	  self._redirectsFollowed = self._redirectsFollowed || 0
	  self.maxRedirects = (self.maxRedirects !== undefined) ? self.maxRedirects : 10
	  self.followRedirect = (self.followRedirect !== undefined) ? self.followRedirect : true
	  self.followAllRedirects = (self.followAllRedirects !== undefined) ? self.followAllRedirects : false
	  if (self.followRedirect || self.followAllRedirects)
	    self.redirects = self.redirects || []
	
	  self.headers = self.headers ? copy(self.headers) : {}
	
	  self.setHost = false
	  if (!self.hasHeader('host')) {
	    self.setHeader('host', self.uri.hostname)
	    if (self.uri.port) {
	      if ( !(self.uri.port === 80 && self.uri.protocol === 'http:') &&
	           !(self.uri.port === 443 && self.uri.protocol === 'https:') )
	      self.setHeader('host', self.getHeader('host') + (':'+self.uri.port) )
	    }
	    self.setHost = true
	  }
	
	  self.jar(self._jar || options.jar)
	
	  if (!self.uri.port) {
	    if (self.uri.protocol == 'http:') {self.uri.port = 80}
	    else if (self.uri.protocol == 'https:') {self.uri.port = 443}
	  }
	
	  if (self.proxy && !self.tunnel) {
	    self.port = self.proxy.port
	    self.host = self.proxy.hostname
	  } else {
	    self.port = self.uri.port
	    self.host = self.uri.hostname
	  }
	
	  self.clientErrorHandler = function (error) {
	    if (self._aborted) return
	    if (self.req && self.req._reusedSocket && error.code === 'ECONNRESET'
	        && self.agent.addRequestNoreuse) {
	      self.agent = { addRequest: self.agent.addRequestNoreuse.bind(self.agent) }
	      self.start()
	      self.req.end()
	      return
	    }
	    if (self.timeout && self.timeoutTimer) {
	      clearTimeout(self.timeoutTimer)
	      self.timeoutTimer = null
	    }
	    self.emit('error', error)
	  }
	
	  self._parserErrorHandler = function (error) {
	    if (this.res) {
	      if (this.res.request) {
	        this.res.request.emit('error', error)
	      } else {
	        this.res.emit('error', error)
	      }
	    } else {
	      this._httpMessage.emit('error', error)
	    }
	  }
	
	  self._buildRequest = function(){
	    var self = this;
	
	    if (options.form) {
	      self.form(options.form)
	    }
	
	    if (options.qs) self.qs(options.qs)
	
	    if (self.uri.path) {
	      self.path = self.uri.path
	    } else {
	      self.path = self.uri.pathname + (self.uri.search || "")
	    }
	
	    if (self.path.length === 0) self.path = '/'
	
	
	    // Auth must happen last in case signing is dependent on other headers
	    if (options.oauth) {
	      self.oauth(options.oauth)
	    }
	
	    if (options.aws) {
	      self.aws(options.aws)
	    }
	
	    if (options.hawk) {
	      self.hawk(options.hawk)
	    }
	
	    if (options.httpSignature) {
	      self.httpSignature(options.httpSignature)
	    }
	
	    if (options.auth) {
	      if (Object.prototype.hasOwnProperty.call(options.auth, 'username')) options.auth.user = options.auth.username
	      if (Object.prototype.hasOwnProperty.call(options.auth, 'password')) options.auth.pass = options.auth.password
	
	      self.auth(
	        options.auth.user,
	        options.auth.pass,
	        options.auth.sendImmediately,
	        options.auth.bearer
	      )
	    }
	
	    if (self.uri.auth && !self.hasHeader('authorization')) {
	      var authPieces = self.uri.auth.split(':').map(function(item){ return querystring.unescape(item) })
	      self.auth(authPieces[0], authPieces.slice(1).join(':'), true)
	    }
	    if (self.proxy && self.proxy.auth && !self.hasHeader('proxy-authorization') && !self.tunnel) {
	      self.setHeader('proxy-authorization', "Basic " + toBase64(self.proxy.auth.split(':').map(function(item){ return querystring.unescape(item)}).join(':')))
	    }
	
	
	    if (self.proxy && !self.tunnel) self.path = (self.uri.protocol + '//' + self.uri.host + self.path)
	
	    if (options.json) {
	      self.json(options.json)
	    } else if (options.multipart) {
	      self.boundary = uuid()
	      self.multipart(options.multipart)
	    }
	
	    if (self.body) {
	      var length = 0
	      if (!Buffer.isBuffer(self.body)) {
	        if (Array.isArray(self.body)) {
	          for (var i = 0; i < self.body.length; i++) {
	            length += self.body[i].length
	          }
	        } else {
	          self.body = new Buffer(self.body)
	          length = self.body.length
	        }
	      } else {
	        length = self.body.length
	      }
	      if (length) {
	        if (!self.hasHeader('content-length')) self.setHeader('content-length', length)
	      } else {
	        throw new Error('Argument error, options.body.')
	      }
	    }
	
	    var protocol = self.proxy && !self.tunnel ? self.proxy.protocol : self.uri.protocol
	      , defaultModules = {'http:':http, 'https:':https, 'unix:':http}
	      , httpModules = self.httpModules || {}
	      ;
	    self.httpModule = httpModules[protocol] || defaultModules[protocol]
	
	    if (!self.httpModule) return this.emit('error', new Error("Invalid protocol: " + protocol))
	
	    if (options.ca) self.ca = options.ca
	
	    if (!self.agent) {
	      if (options.agentOptions) self.agentOptions = options.agentOptions
	
	      if (options.agentClass) {
	        self.agentClass = options.agentClass
	      } else if (options.forever) {
	        self.agentClass = protocol === 'http:' ? ForeverAgent : ForeverAgent.SSL
	      } else {
	        self.agentClass = self.httpModule.Agent
	      }
	    }
	
	    if (self.pool === false) {
	      self.agent = false
	    } else {
	      self.agent = self.agent || self.getAgent()
	      if (self.maxSockets) {
	        // Don't use our pooling if node has the refactored client
	        self.agent.maxSockets = self.maxSockets
	      }
	      if (self.pool.maxSockets) {
	        // Don't use our pooling if node has the refactored client
	        self.agent.maxSockets = self.pool.maxSockets
	      }
	    }
	
	    self.on('pipe', function (src) {
	      if (self.ntick && self._started) throw new Error("You cannot pipe to this stream after the outbound request has started.")
	      self.src = src
	      if (isReadStream(src)) {
	        if (!self.hasHeader('content-type')) self.setHeader('content-type', mime.lookup(src.path))
	      } else {
	        if (src.headers) {
	          for (var i in src.headers) {
	            if (!self.hasHeader(i)) {
	              self.setHeader(i, src.headers[i])
	            }
	          }
	        }
	        if (self._json && !self.hasHeader('content-type'))
	          self.setHeader('content-type', 'application/json')
	        if (src.method && !self.explicitMethod) {
	          self.method = src.method
	        }
	      }
	
	      // self.on('pipe', function () {
	      //   console.error("You have already piped to this stream. Pipeing twice is likely to break the request.")
	      // })
	    })
	
	    process.nextTick(function () {
	      if (self._aborted) return
	
	      if (self._form) {
	        self.setHeaders(self._form.getHeaders())
	        try {
	          var length = self._form.getLengthSync()
	          self.setHeader('content-length', length)
	        } catch(e){}
	        self._form.pipe(self)
	      }
	      if (self.body) {
	        if (Array.isArray(self.body)) {
	          self.body.forEach(function (part) {
	            self.write(part)
	          })
	        } else {
	          self.write(self.body)
	        }
	        self.end()
	      } else if (self.requestBodyStream) {
	        console.warn("options.requestBodyStream is deprecated, please pass the request object to stream.pipe.")
	        self.requestBodyStream.pipe(self)
	      } else if (!self.src) {
	        if (self.method !== 'GET' && typeof self.method !== 'undefined') {
	          self.setHeader('content-length', 0)
	        }
	        self.end()
	      }
	      self.ntick = true
	    })
	
	  } // End _buildRequest
	
	  self._handleUnixSocketURI = function(self){
	    // Parse URI and extract a socket path (tested as a valid socket using net.connect), and a http style path suffix
	    // Thus http requests can be made to a socket using the uri unix://tmp/my.socket/urlpath
	    // and a request for '/urlpath' will be sent to the unix socket at /tmp/my.socket
	
	    self.unixsocket = true;
	
	    var full_path = self.uri.href.replace(self.uri.protocol+'/', '');
	
	    var lookup = full_path.split('/');
	    var error_connecting = true;
	
	    var lookup_table = {};
	    do { lookup_table[lookup.join('/')]={} } while(lookup.pop())
	    for (r in lookup_table){
	      try_next(r);
	    }
	
	    function try_next(table_row){
	      var client = net.connect( table_row );
	      client.path = table_row
	      client.on('error', function(){ lookup_table[this.path].error_connecting=true; this.end(); });
	      client.on('connect', function(){ lookup_table[this.path].error_connecting=false; this.end(); });
	      table_row.client = client;
	    }
	
	    wait_for_socket_response();
	
	    response_counter = 0;
	
	    function wait_for_socket_response(){
	      var detach;
	      if('undefined' == typeof setImmediate ) detach = process.nextTick
	      else detach = setImmediate;
	      detach(function(){
	        // counter to prevent infinite blocking waiting for an open socket to be found.
	        response_counter++;
	        var trying = false;
	        for (r in lookup_table){
	          //console.log(r, lookup_table[r], lookup_table[r].error_connecting)
	          if('undefined' == typeof lookup_table[r].error_connecting)
	            trying = true;
	        }
	        if(trying && response_counter<1000)
	          wait_for_socket_response()
	        else
	          set_socket_properties();
	      })
	    }
	
	    function set_socket_properties(){
	      var host;
	      for (r in lookup_table){
	        if(lookup_table[r].error_connecting === false){
	          host = r
	        }
	      }
	      if(!host){
	        self.emit('error', new Error("Failed to connect to any socket in "+full_path))
	      }
	      var path = full_path.replace(host, '')
	
	      self.socketPath = host
	      self.uri.pathname = path
	      self.uri.href = path
	      self.uri.path = path
	      self.host = ''
	      self.hostname = ''
	      delete self.host
	      delete self.hostname
	      self._buildRequest();
	    }
	  }
	
	  // Intercept UNIX protocol requests to change properties to match socket
	  if(/^unix:/.test(self.uri.protocol)){
	    self._handleUnixSocketURI(self);
	  } else {
	    self._buildRequest();
	  }
	
	}
	
	// Must call this when following a redirect from https to http or vice versa
	// Attempts to keep everything as identical as possible, but update the
	// httpModule, Tunneling agent, and/or Forever Agent in use.
	Request.prototype._updateProtocol = function () {
	  var self = this
	  var protocol = self.uri.protocol
	
	  if (protocol === 'https:') {
	    // previously was doing http, now doing https
	    // if it's https, then we might need to tunnel now.
	    if (self.proxy && self.canTunnel) {
	      self.tunnel = true
	      var tunnelFn = self.proxy.protocol === 'http:'
	                   ? tunnel.httpsOverHttp : tunnel.httpsOverHttps
	      var tunnelOptions = { proxy: { host: self.proxy.hostname
	                                   , port: +self.proxy.port
	                                   , proxyAuth: self.proxy.auth }
	                          , rejectUnauthorized: self.rejectUnauthorized
	                          , ca: self.ca }
	      self.agent = tunnelFn(tunnelOptions)
	      return
	    }
	
	    self.httpModule = https
	    switch (self.agentClass) {
	      case ForeverAgent:
	        self.agentClass = ForeverAgent.SSL
	        break
	      case http.Agent:
	        self.agentClass = https.Agent
	        break
	      default:
	        // nothing we can do.  Just hope for the best.
	        return
	    }
	
	    // if there's an agent, we need to get a new one.
	    if (self.agent) self.agent = self.getAgent()
	
	  } else {
	    // previously was doing https, now doing http
	    // stop any tunneling.
	    if (self.tunnel) self.tunnel = false
	    self.httpModule = http
	    switch (self.agentClass) {
	      case ForeverAgent.SSL:
	        self.agentClass = ForeverAgent
	        break
	      case https.Agent:
	        self.agentClass = http.Agent
	        break
	      default:
	        // nothing we can do.  just hope for the best
	        return
	    }
	
	    // if there's an agent, then get a new one.
	    if (self.agent) {
	      self.agent = null
	      self.agent = self.getAgent()
	    }
	  }
	}
	
	Request.prototype.getAgent = function () {
	  var Agent = this.agentClass
	  var options = {}
	  if (this.agentOptions) {
	    for (var i in this.agentOptions) {
	      options[i] = this.agentOptions[i]
	    }
	  }
	  if (this.ca) options.ca = this.ca
	  if (this.ciphers) options.ciphers = this.ciphers
	  if (this.secureProtocol) options.secureProtocol = this.secureProtocol
	  if (this.secureOptions) options.secureOptions = this.secureOptions
	  if (typeof this.rejectUnauthorized !== 'undefined') options.rejectUnauthorized = this.rejectUnauthorized
	
	  if (this.cert && this.key) {
	    options.key = this.key
	    options.cert = this.cert
	  }
	
	  var poolKey = ''
	
	  // different types of agents are in different pools
	  if (Agent !== this.httpModule.Agent) {
	    poolKey += Agent.name
	  }
	
	  if (!this.httpModule.globalAgent) {
	    // node 0.4.x
	    options.host = this.host
	    options.port = this.port
	    if (poolKey) poolKey += ':'
	    poolKey += this.host + ':' + this.port
	  }
	
	  // ca option is only relevant if proxy or destination are https
	  var proxy = this.proxy
	  if (typeof proxy === 'string') proxy = url.parse(proxy)
	  var isHttps = (proxy && proxy.protocol === 'https:') || this.uri.protocol === 'https:'
	  if (isHttps) {
	    if (options.ca) {
	      if (poolKey) poolKey += ':'
	      poolKey += options.ca
	    }
	
	    if (typeof options.rejectUnauthorized !== 'undefined') {
	      if (poolKey) poolKey += ':'
	      poolKey += options.rejectUnauthorized
	    }
	
	    if (options.cert)
	      poolKey += options.cert.toString('ascii') + options.key.toString('ascii')
	
	    if (options.ciphers) {
	      if (poolKey) poolKey += ':'
	      poolKey += options.ciphers
	    }
	
	    if (options.secureProtocol) {
	      if (poolKey) poolKey += ':'
	      poolKey += options.secureProtocol
	    }
	  }
	
	  if (this.pool === globalPool && !poolKey && Object.keys(options).length === 0 && this.httpModule.globalAgent) {
	    // not doing anything special.  Use the globalAgent
	    return this.httpModule.globalAgent
	  }
	
	  // we're using a stored agent.  Make sure it's protocol-specific
	  poolKey = this.uri.protocol + poolKey
	
	  // already generated an agent for this setting
	  if (this.pool[poolKey]) return this.pool[poolKey]
	
	  return this.pool[poolKey] = new Agent(options)
	}
	
	Request.prototype.start = function () {
	  // start() is called once we are ready to send the outgoing HTTP request.
	  // this is usually called on the first write(), end() or on nextTick()
	  var self = this
	
	  if (self._aborted) return
	
	  self._started = true
	  self.method = self.method || 'GET'
	  self.href = self.uri.href
	
	  if (self.src && self.src.stat && self.src.stat.size && !self.hasHeader('content-length')) {
	    self.setHeader('content-length', self.src.stat.size)
	  }
	  if (self._aws) {
	    self.aws(self._aws, true)
	  }
	
	  // We have a method named auth, which is completely different from the http.request
	  // auth option.  If we don't remove it, we're gonna have a bad time.
	  var reqOptions = copy(self)
	  delete reqOptions.auth
	
	  debug('make request', self.uri.href)
	  self.req = self.httpModule.request(reqOptions, self.onResponse.bind(self))
	
	  if (self.timeout && !self.timeoutTimer) {
	    self.timeoutTimer = setTimeout(function () {
	      self.req.abort()
	      var e = new Error("ETIMEDOUT")
	      e.code = "ETIMEDOUT"
	      self.emit("error", e)
	    }, self.timeout)
	
	    // Set additional timeout on socket - in case if remote
	    // server freeze after sending headers
	    if (self.req.setTimeout) { // only works on node 0.6+
	      self.req.setTimeout(self.timeout, function () {
	        if (self.req) {
	          self.req.abort()
	          var e = new Error("ESOCKETTIMEDOUT")
	          e.code = "ESOCKETTIMEDOUT"
	          self.emit("error", e)
	        }
	      })
	    }
	  }
	
	  self.req.on('error', self.clientErrorHandler)
	  self.req.on('drain', function() {
	    self.emit('drain')
	  })
	  self.on('end', function() {
	    if ( self.req.connection ) self.req.connection.removeListener('error', self._parserErrorHandler)
	  })
	  self.emit('request', self.req)
	}
	Request.prototype.onResponse = function (response) {
	  var self = this
	  debug('onResponse', self.uri.href, response.statusCode, response.headers)
	  response.on('end', function() {
	    debug('response end', self.uri.href, response.statusCode, response.headers)
	  });
	
	  if (response.connection.listeners('error').indexOf(self._parserErrorHandler) === -1) {
	    response.connection.once('error', self._parserErrorHandler)
	  }
	  if (self._aborted) {
	    debug('aborted', self.uri.href)
	    response.resume()
	    return
	  }
	  if (self._paused) response.pause()
	  else response.resume()
	
	  self.response = response
	  response.request = self
	  response.toJSON = toJSON
	
	  // XXX This is different on 0.10, because SSL is strict by default
	  if (self.httpModule === https &&
	      self.strictSSL &&
	      !response.client.authorized) {
	    debug('strict ssl error', self.uri.href)
	    var sslErr = response.client.authorizationError
	    self.emit('error', new Error('SSL Error: '+ sslErr))
	    return
	  }
	
	  if (self.setHost && self.hasHeader('host')) delete self.headers[self.hasHeader('host')]
	  if (self.timeout && self.timeoutTimer) {
	    clearTimeout(self.timeoutTimer)
	    self.timeoutTimer = null
	  }
	
	  var targetCookieJar = (self._jar && self._jar.setCookie)?self._jar:globalCookieJar;
	  var addCookie = function (cookie) {
	    //set the cookie if it's domain in the href's domain.
	    try {
	      targetCookieJar.setCookie(cookie, self.uri.href, {ignoreError: true});
	    } catch (e) {
	      self.emit('error', e);
	    }
	  }
	
	  if (hasHeader('set-cookie', response.headers) && (!self._disableCookies)) {
	    var headerName = hasHeader('set-cookie', response.headers)
	    if (Array.isArray(response.headers[headerName])) response.headers[headerName].forEach(addCookie)
	    else addCookie(response.headers[headerName])
	  }
	
	  var redirectTo = null
	  if (response.statusCode >= 300 && response.statusCode < 400 && hasHeader('location', response.headers)) {
	    var location = response.headers[hasHeader('location', response.headers)]
	    debug('redirect', location)
	
	    if (self.followAllRedirects) {
	      redirectTo = location
	    } else if (self.followRedirect) {
	      switch (self.method) {
	        case 'PATCH':
	        case 'PUT':
	        case 'POST':
	        case 'DELETE':
	          // Do not follow redirects
	          break
	        default:
	          redirectTo = location
	          break
	      }
	    }
	  } else if (response.statusCode == 401 && self._hasAuth && !self._sentAuth) {
	    var authHeader = response.headers[hasHeader('www-authenticate', response.headers)]
	    var authVerb = authHeader && authHeader.split(' ')[0].toLowerCase()
	    debug('reauth', authVerb)
	
	    switch (authVerb) {
	      case 'basic':
	        self.auth(self._user, self._pass, true)
	        redirectTo = self.uri
	        break
	
	      case 'bearer':
	        self.auth(null, null, true, self._bearer)
	        redirectTo = self.uri
	        break
	
	      case 'digest':
	        // TODO: More complete implementation of RFC 2617.
	        //   - check challenge.algorithm
	        //   - support algorithm="MD5-sess"
	        //   - handle challenge.domain
	        //   - support qop="auth-int" only
	        //   - handle Authentication-Info (not necessarily?)
	        //   - check challenge.stale (not necessarily?)
	        //   - increase nc (not necessarily?)
	        // For reference:
	        // http://tools.ietf.org/html/rfc2617#section-3
	        // https://github.com/bagder/curl/blob/master/lib/http_digest.c
	
	        var challenge = {}
	        var re = /([a-z0-9_-]+)=(?:"([^"]+)"|([a-z0-9_-]+))/gi
	        for (;;) {
	          var match = re.exec(authHeader)
	          if (!match) break
	          challenge[match[1]] = match[2] || match[3];
	        }
	
	        var ha1 = md5(self._user + ':' + challenge.realm + ':' + self._pass)
	        var ha2 = md5(self.method + ':' + self.uri.path)
	        var qop = /(^|,)\s*auth\s*($|,)/.test(challenge.qop) && 'auth'
	        var nc = qop && '00000001'
	        var cnonce = qop && uuid().replace(/-/g, '')
	        var digestResponse = qop ? md5(ha1 + ':' + challenge.nonce + ':' + nc + ':' + cnonce + ':' + qop + ':' + ha2) : md5(ha1 + ':' + challenge.nonce + ':' + ha2)
	        var authValues = {
	          username: self._user,
	          realm: challenge.realm,
	          nonce: challenge.nonce,
	          uri: self.uri.path,
	          qop: qop,
	          response: digestResponse,
	          nc: nc,
	          cnonce: cnonce,
	          algorithm: challenge.algorithm,
	          opaque: challenge.opaque
	        }
	
	        authHeader = []
	        for (var k in authValues) {
	          if (!authValues[k]) {
	            //ignore
	          } else if (k === 'qop' || k === 'nc' || k === 'algorithm') {
	            authHeader.push(k + '=' + authValues[k])
	          } else {
	            authHeader.push(k + '="' + authValues[k] + '"')
	          }
	        }
	        authHeader = 'Digest ' + authHeader.join(', ')
	        self.setHeader('authorization', authHeader)
	        self._sentAuth = true
	
	        redirectTo = self.uri
	        break
	    }
	  }
	
	  if (redirectTo) {
	    debug('redirect to', redirectTo)
	
	    // ignore any potential response body.  it cannot possibly be useful
	    // to us at this point.
	    if (self._paused) response.resume()
	
	    if (self._redirectsFollowed >= self.maxRedirects) {
	      self.emit('error', new Error("Exceeded maxRedirects. Probably stuck in a redirect loop "+self.uri.href))
	      return
	    }
	    self._redirectsFollowed += 1
	
	    if (!isUrl.test(redirectTo)) {
	      redirectTo = url.resolve(self.uri.href, redirectTo)
	    }
	
	    var uriPrev = self.uri
	    self.uri = url.parse(redirectTo)
	
	    // handle the case where we change protocol from https to http or vice versa
	    if (self.uri.protocol !== uriPrev.protocol) {
	      self._updateProtocol()
	    }
	
	    self.redirects.push(
	      { statusCode : response.statusCode
	      , redirectUri: redirectTo
	      }
	    )
	    if (self.followAllRedirects && response.statusCode != 401 && response.statusCode != 307) self.method = 'GET'
	    // self.method = 'GET' // Force all redirects to use GET || commented out fixes #215
	    delete self.src
	    delete self.req
	    delete self.agent
	    delete self._started
	    if (response.statusCode != 401 && response.statusCode != 307) {
	      // Remove parameters from the previous response, unless this is the second request
	      // for a server that requires digest authentication.
	      delete self.body
	      delete self._form
	      if (self.headers) {
	        if (self.hasHeader('host')) delete self.headers[self.hasHeader('host')]
	        if (self.hasHeader('content-type')) delete self.headers[self.hasHeader('content-type')]
	        if (self.hasHeader('content-length')) delete self.headers[self.hasHeader('content-length')]
	      }
	    }
	
	    self.emit('redirect');
	
	    self.init()
	    return // Ignore the rest of the response
	  } else {
	    self._redirectsFollowed = self._redirectsFollowed || 0
	    // Be a good stream and emit end when the response is finished.
	    // Hack to emit end on close because of a core bug that never fires end
	    response.on('close', function () {
	      if (!self._ended) self.response.emit('end')
	    })
	
	    if (self.encoding) {
	      if (self.dests.length !== 0) {
	        console.error("Ignoring encoding parameter as this stream is being piped to another stream which makes the encoding option invalid.")
	      } else {
	        response.setEncoding(self.encoding)
	      }
	    }
	
	    self.emit('response', response)
	
	    self.dests.forEach(function (dest) {
	      self.pipeDest(dest)
	    })
	
	    response.on("data", function (chunk) {
	      self._destdata = true
	      self.emit("data", chunk)
	    })
	    response.on("end", function (chunk) {
	      self._ended = true
	      self.emit("end", chunk)
	    })
	    response.on("close", function () {self.emit("close")})
	
	    if (self.callback) {
	      var buffer = []
	      var bodyLen = 0
	      self.on("data", function (chunk) {
	        buffer.push(chunk)
	        bodyLen += chunk.length
	      })
	      self.on("end", function () {
	        debug('end event', self.uri.href)
	        if (self._aborted) {
	          debug('aborted', self.uri.href)
	          return
	        }
	
	        if (buffer.length && Buffer.isBuffer(buffer[0])) {
	          debug('has body', self.uri.href, bodyLen)
	          var body = new Buffer(bodyLen)
	          var i = 0
	          buffer.forEach(function (chunk) {
	            chunk.copy(body, i, 0, chunk.length)
	            i += chunk.length
	          })
	          if (self.encoding === null) {
	            response.body = body
	          } else {
	            response.body = body.toString(self.encoding)
	          }
	        } else if (buffer.length) {
	          // The UTF8 BOM [0xEF,0xBB,0xBF] is converted to [0xFE,0xFF] in the JS UTC16/UCS2 representation.
	          // Strip this value out when the encoding is set to 'utf8', as upstream consumers won't expect it and it breaks JSON.parse().
	          if (self.encoding === 'utf8' && buffer[0].length > 0 && buffer[0][0] === "\uFEFF") {
	            buffer[0] = buffer[0].substring(1)
	          }
	          response.body = buffer.join('')
	        }
	
	        if (self._json) {
	          try {
	            response.body = JSON.parse(response.body)
	          } catch (e) {}
	        }
	        debug('emitting complete', self.uri.href)
	        if(response.body == undefined && !self._json) {
	          response.body = "";
	        }
	        self.emit('complete', response, response.body)
	      })
	    }
	    //if no callback
	    else{
	      self.on("end", function () {
	        if (self._aborted) {
	          debug('aborted', self.uri.href)
	          return
	        }
	        self.emit('complete', response);
	      });
	    }
	  }
	  debug('finish init function', self.uri.href)
	}
	
	Request.prototype.abort = function () {
	  this._aborted = true
	
	  if (this.req) {
	    this.req.abort()
	  }
	  else if (this.response) {
	    this.response.abort()
	  }
	
	  this.emit("abort")
	}
	
	Request.prototype.pipeDest = function (dest) {
	  var response = this.response
	  // Called after the response is received
	  if (dest.headers && !dest.headersSent) {
	    if (hasHeader('content-type', response.headers)) {
	      var ctname = hasHeader('content-type', response.headers)
	      if (dest.setHeader) dest.setHeader(ctname, response.headers[ctname])
	      else dest.headers[ctname] = response.headers[ctname]
	    }
	
	    if (hasHeader('content-length', response.headers)) {
	      var clname = hasHeader('content-length', response.headers)
	      if (dest.setHeader) dest.setHeader(clname, response.headers[clname])
	      else dest.headers[clname] = response.headers[clname]
	    }
	  }
	  if (dest.setHeader && !dest.headersSent) {
	    for (var i in response.headers) {
	      dest.setHeader(i, response.headers[i])
	    }
	    dest.statusCode = response.statusCode
	  }
	  if (this.pipefilter) this.pipefilter(response, dest)
	}
	
	// Composable API
	Request.prototype.setHeader = function (name, value, clobber) {
	  if (clobber === undefined) clobber = true
	  if (clobber || !this.hasHeader(name)) this.headers[name] = value
	  else this.headers[this.hasHeader(name)] += ',' + value
	  return this
	}
	Request.prototype.setHeaders = function (headers) {
	  for (var i in headers) {this.setHeader(i, headers[i])}
	  return this
	}
	Request.prototype.hasHeader = function (header, headers) {
	  var headers = Object.keys(headers || this.headers)
	    , lheaders = headers.map(function (h) {return h.toLowerCase()})
	    ;
	  header = header.toLowerCase()
	  for (var i=0;i<lheaders.length;i++) {
	    if (lheaders[i] === header) return headers[i]
	  }
	  return false
	}
	
	var hasHeader = Request.prototype.hasHeader
	
	Request.prototype.qs = function (q, clobber) {
	  var base
	  if (!clobber && this.uri.query) base = qs.parse(this.uri.query)
	  else base = {}
	
	  for (var i in q) {
	    base[i] = q[i]
	  }
	
	  if (qs.stringify(base) === ''){
	    return this
	  }
	
	  this.uri = url.parse(this.uri.href.split('?')[0] + '?' + qs.stringify(base))
	  this.url = this.uri
	  this.path = this.uri.path
	
	  return this
	}
	Request.prototype.form = function (form) {
	  if (form) {
	    this.setHeader('content-type', 'application/x-www-form-urlencoded; charset=utf-8')
	    this.body = qs.stringify(form).toString('utf8')
	    return this
	  }
	  // create form-data object
	  this._form = new FormData()
	  return this._form
	}
	Request.prototype.multipart = function (multipart) {
	  var self = this
	  self.body = []
	
	  if (!self.hasHeader('content-type')) {
	    self.setHeader('content-type', 'multipart/related; boundary=' + self.boundary)
	  } else {
	    var headerName = self.hasHeader('content-type');
	    self.setHeader(headerName, self.headers[headerName].split(';')[0] + '; boundary=' + self.boundary)
	  }
	
	  if (!multipart.forEach) throw new Error('Argument error, options.multipart.')
	
	  if (self.preambleCRLF) {
	    self.body.push(new Buffer('\r\n'))
	  }
	
	  multipart.forEach(function (part) {
	    var body = part.body
	    if(body == null) throw Error('Body attribute missing in multipart.')
	    delete part.body
	    var preamble = '--' + self.boundary + '\r\n'
	    Object.keys(part).forEach(function (key) {
	      preamble += key + ': ' + part[key] + '\r\n'
	    })
	    preamble += '\r\n'
	    self.body.push(new Buffer(preamble))
	    self.body.push(new Buffer(body))
	    self.body.push(new Buffer('\r\n'))
	  })
	  self.body.push(new Buffer('--' + self.boundary + '--'))
	  return self
	}
	Request.prototype.json = function (val) {
	  var self = this
	
	  if (!self.hasHeader('accept')) self.setHeader('accept', 'application/json')
	
	  this._json = true
	  if (typeof val === 'boolean') {
	    if (typeof this.body === 'object') {
	      this.body = safeStringify(this.body)
	      if (!self.hasHeader('content-type'))
	        self.setHeader('content-type', 'application/json')
	    }
	  } else {
	    this.body = safeStringify(val)
	    if (!self.hasHeader('content-type'))
	      self.setHeader('content-type', 'application/json')
	  }
	
	  return this
	}
	Request.prototype.getHeader = function (name, headers) {
	  var result, re, match
	  if (!headers) headers = this.headers
	  Object.keys(headers).forEach(function (key) {
	    if (key.length !== name.length) return
	    re = new RegExp(name, 'i')
	    match = key.match(re)
	    if (match) result = headers[key]
	  })
	  return result
	}
	var getHeader = Request.prototype.getHeader
	
	Request.prototype.auth = function (user, pass, sendImmediately, bearer) {
	  if (bearer !== undefined) {
	    this._bearer = bearer
	    this._hasAuth = true
	    if (sendImmediately || typeof sendImmediately == 'undefined') {
	      if (typeof bearer === 'function') {
	        bearer = bearer()
	      }
	      this.setHeader('authorization', 'Bearer ' + bearer)
	      this._sentAuth = true
	    }
	    return this
	  }
	  if (typeof user !== 'string' || (pass !== undefined && typeof pass !== 'string')) {
	    throw new Error('auth() received invalid user or password')
	  }
	  this._user = user
	  this._pass = pass
	  this._hasAuth = true
	  var header = typeof pass !== 'undefined' ? user + ':' + pass : user
	  if (sendImmediately || typeof sendImmediately == 'undefined') {
	    this.setHeader('authorization', 'Basic ' + toBase64(header))
	    this._sentAuth = true
	  }
	  return this
	}
	Request.prototype.aws = function (opts, now) {
	  if (!now) {
	    this._aws = opts
	    return this
	  }
	  var date = new Date()
	  this.setHeader('date', date.toUTCString())
	  var auth =
	    { key: opts.key
	    , secret: opts.secret
	    , verb: this.method.toUpperCase()
	    , date: date
	    , contentType: this.getHeader('content-type') || ''
	    , md5: this.getHeader('content-md5') || ''
	    , amazonHeaders: aws.canonicalizeHeaders(this.headers)
	    }
	  if (opts.bucket && this.path) {
	    auth.resource = '/' + opts.bucket + this.path
	  } else if (opts.bucket && !this.path) {
	    auth.resource = '/' + opts.bucket
	  } else if (!opts.bucket && this.path) {
	    auth.resource = this.path
	  } else if (!opts.bucket && !this.path) {
	    auth.resource = '/'
	  }
	  auth.resource = aws.canonicalizeResource(auth.resource)
	  this.setHeader('authorization', aws.authorization(auth))
	
	  return this
	}
	Request.prototype.httpSignature = function (opts) {
	  var req = this
	  httpSignature.signRequest({
	    getHeader: function(header) {
	      return getHeader(header, req.headers)
	    },
	    setHeader: function(header, value) {
	      req.setHeader(header, value)
	    },
	    method: this.method,
	    path: this.path
	  }, opts)
	  debug('httpSignature authorization', this.getHeader('authorization'))
	
	  return this
	}
	
	Request.prototype.hawk = function (opts) {
	  this.setHeader('Authorization', hawk.client.header(this.uri, this.method, opts).field)
	}
	
	Request.prototype.oauth = function (_oauth) {
	  var form
	  if (this.hasHeader('content-type') &&
	      this.getHeader('content-type').slice(0, 'application/x-www-form-urlencoded'.length) ===
	        'application/x-www-form-urlencoded'
	     ) {
	    form = qs.parse(this.body)
	  }
	  if (this.uri.query) {
	    form = qs.parse(this.uri.query)
	  }
	  if (!form) form = {}
	  var oa = {}
	  for (var i in form) oa[i] = form[i]
	  for (var i in _oauth) oa['oauth_'+i] = _oauth[i]
	  if (!oa.oauth_version) oa.oauth_version = '1.0'
	  if (!oa.oauth_timestamp) oa.oauth_timestamp = Math.floor( Date.now() / 1000 ).toString()
	  if (!oa.oauth_nonce) oa.oauth_nonce = uuid().replace(/-/g, '')
	
	  oa.oauth_signature_method = 'HMAC-SHA1'
	
	  var consumer_secret = oa.oauth_consumer_secret
	  delete oa.oauth_consumer_secret
	  var token_secret = oa.oauth_token_secret
	  delete oa.oauth_token_secret
	  var timestamp = oa.oauth_timestamp
	
	  var baseurl = this.uri.protocol + '//' + this.uri.host + this.uri.pathname
	  var signature = oauth.hmacsign(this.method, baseurl, oa, consumer_secret, token_secret)
	
	  // oa.oauth_signature = signature
	  for (var i in form) {
	    if ( i.slice(0, 'oauth_') in _oauth) {
	      // skip
	    } else {
	      delete oa['oauth_'+i]
	      if (i !== 'x_auth_mode') delete oa[i]
	    }
	  }
	  oa.oauth_timestamp = timestamp
	  var authHeader = 'OAuth '+Object.keys(oa).sort().map(function (i) {return i+'="'+oauth.rfc3986(oa[i])+'"'}).join(',')
	  authHeader += ',oauth_signature="' + oauth.rfc3986(signature) + '"'
	  this.setHeader('Authorization', authHeader)
	  return this
	}
	Request.prototype.jar = function (jar) {
	  var cookies
	
	  if (this._redirectsFollowed === 0) {
	    this.originalCookieHeader = this.getHeader('cookie')
	  }
	
	  if (!jar) {
	    // disable cookies
	    cookies = false
	    this._disableCookies = true
	  } else {
	    var targetCookieJar = (jar && jar.getCookieString)?jar:globalCookieJar;
	    var urihref = this.uri.href
	    //fetch cookie in the Specified host
	    if (targetCookieJar) {
	      cookies = targetCookieJar.getCookieString(urihref);
	    }
	  }
	
	  //if need cookie and cookie is not empty
	  if (cookies && cookies.length) {
	    if (this.originalCookieHeader) {
	      // Don't overwrite existing Cookie header
	      this.setHeader('cookie', this.originalCookieHeader + '; ' + cookies)
	    } else {
	      this.setHeader('cookie', cookies)
	    }
	  }
	  this._jar = jar
	  return this
	}
	
	
	// Stream API
	Request.prototype.pipe = function (dest, opts) {
	  if (this.response) {
	    if (this._destdata) {
	      throw new Error("You cannot pipe after data has been emitted from the response.")
	    } else if (this._ended) {
	      throw new Error("You cannot pipe after the response has been ended.")
	    } else {
	      stream.Stream.prototype.pipe.call(this, dest, opts)
	      this.pipeDest(dest)
	      return dest
	    }
	  } else {
	    this.dests.push(dest)
	    stream.Stream.prototype.pipe.call(this, dest, opts)
	    return dest
	  }
	}
	Request.prototype.write = function () {
	  if (!this._started) this.start()
	  return this.req.write.apply(this.req, arguments)
	}
	Request.prototype.end = function (chunk) {
	  if (chunk) this.write(chunk)
	  if (!this._started) this.start()
	  this.req.end()
	}
	Request.prototype.pause = function () {
	  if (!this.response) this._paused = true
	  else this.response.pause.apply(this.response, arguments)
	}
	Request.prototype.resume = function () {
	  if (!this.response) this._paused = false
	  else this.response.resume.apply(this.response, arguments)
	}
	Request.prototype.destroy = function () {
	  if (!this._ended) this.end()
	  else if (this.response) this.response.destroy()
	}
	
	function toJSON () {
	  return getSafe(this, '__' + (((1+Math.random())*0x10000)|0).toString(16))
	}
	
	Request.prototype.toJSON = toJSON
	
	
	module.exports = Request
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(48).Buffer, __webpack_require__(14)))

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	var binding = __webpack_require__(563)('contextify');
	var ContextifyContext = binding.ContextifyContext;
	var ContextifyScript = binding.ContextifyScript;
	
	function Contextify (sandbox) {
	    if (typeof sandbox != 'object') {
	        sandbox = {};
	    }
	    var ctx = new ContextifyContext(sandbox);
	
	    sandbox.run = function () {
	        return ctx.run.apply(ctx, arguments);
	    };
	
	    sandbox.getGlobal = function () {
	        return ctx.getGlobal();
	    }
	
	    sandbox.dispose = function () {
	        sandbox.run = function () {
	            throw new Error("Called run() after dispose().");
	        };
	        sandbox.getGlobal = function () {
	            throw new Error("Called getGlobal() after dispose().");
	        };
	        sandbox.dispose = function () {
	            throw new Error("Called dispose() after dispose().");
	        };
	        ctx = null;
	    }
	    return sandbox;
	}
	
	Contextify.createContext = function (sandbox) {
	    if (typeof sandbox != 'object') {
	        sandbox = {};
	    }
	    return new ContextifyContext(sandbox);
	};
	
	Contextify.createScript = function (code, filename) {
	    if (typeof code != 'string') {
	        throw new TypeError('Code argument is required');
	    }
	    return new ContextifyScript(code, filename);
	};
	
	module.exports = Contextify;


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__filename, __dirname) {/***********************************************
	Copyright 2010, 2011, Chris Winberry <chris@winberry.net>. All rights reserved.
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to
	deal in the Software without restriction, including without limitation the
	rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	sell copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
	IN THE SOFTWARE.
	***********************************************/
	/* v1.7.6 */
	
	(function () {
	
	function runningInNode () {
		return(
			('function') == "function"
			&&
			(typeof exports) == "object"
			&&
			(typeof module) == "object"
			&&
			(typeof __filename) == "string"
			&&
			(typeof __dirname) == "string"
			);
	}
	
	if (!runningInNode()) {
		if (!this.Tautologistics)
			this.Tautologistics = {};
		else if (this.Tautologistics.NodeHtmlParser)
			return; //NodeHtmlParser already defined!
		this.Tautologistics.NodeHtmlParser = {};
		exports = this.Tautologistics.NodeHtmlParser;
	}
	
	//Types of elements found in the DOM
	var ElementType = {
		  Text: "text" //Plain text
		, Directive: "directive" //Special tag <!...>
		, Comment: "comment" //Special tag <!--...-->
		, Script: "script" //Special tag <script>...</script>
		, Style: "style" //Special tag <style>...</style>
		, Tag: "tag" //Any tag that isn't special
	}
	
	function Parser (handler, options) {
		this._options = options ? options : { };
		if (this._options.includeLocation == undefined) {
			this._options.includeLocation = false; //Do not track element position in document by default
		}
	
		this.validateHandler(handler);
		this._handler = handler;
		this.reset();
	}
	
		//**"Static"**//
		//Regular expressions used for cleaning up and parsing (stateless)
		Parser._reTrim = /(^\s+|\s+$)/g; //Trim leading/trailing whitespace
		Parser._reTrimComment = /(^\!--|--$)/g; //Remove comment tag markup from comment contents
		Parser._reWhitespace = /\s/g; //Used to find any whitespace to split on
		Parser._reTagName = /^\s*(\/?)\s*([^\s\/]+)/; //Used to find the tag name for an element
	
		//Regular expressions used for parsing (stateful)
		Parser._reAttrib = //Find attributes in a tag
			/([^=<>\"\'\s]+)\s*=\s*"([^"]*)"|([^=<>\"\'\s]+)\s*=\s*'([^']*)'|([^=<>\"\'\s]+)\s*=\s*([^'"\s]+)|([^=<>\"\'\s\/]+)/g;
		Parser._reTags = /[\<\>]/g; //Find tag markers
	
		//**Public**//
		//Methods//
		//Parses a complete HTML and pushes it to the handler
		Parser.prototype.parseComplete = function Parser$parseComplete (data) {
			this.reset();
			this.parseChunk(data);
			this.done();
		}
	
		//Parses a piece of an HTML document
		Parser.prototype.parseChunk = function Parser$parseChunk (data) {
			if (this._done)
				this.handleError(new Error("Attempted to parse chunk after parsing already done"));
			this._buffer += data; //FIXME: this can be a bottleneck
			this.parseTags();
		}
	
		//Tells the parser that the HTML being parsed is complete
		Parser.prototype.done = function Parser$done () {
			if (this._done)
				return;
			this._done = true;
		
			//Push any unparsed text into a final element in the element list
			if (this._buffer.length) {
				var rawData = this._buffer;
				this._buffer = "";
				var element = {
					  raw: rawData
					, data: (this._parseState == ElementType.Text) ? rawData : rawData.replace(Parser._reTrim, "")
					, type: this._parseState
					};
				if (this._parseState == ElementType.Tag || this._parseState == ElementType.Script || this._parseState == ElementType.Style)
					element.name = this.parseTagName(element.data);
				this.parseAttribs(element);
				this._elements.push(element);
			}
		
			this.writeHandler();
			this._handler.done();
		}
	
		//Resets the parser to a blank state, ready to parse a new HTML document
		Parser.prototype.reset = function Parser$reset () {
			this._buffer = "";
			this._done = false;
			this._elements = [];
			this._elementsCurrent = 0;
			this._current = 0;
			this._next = 0;
			this._location = {
				  row: 0
				, col: 0
				, charOffset: 0
				, inBuffer: 0
			};
			this._parseState = ElementType.Text;
			this._prevTagSep = '';
			this._tagStack = [];
			this._handler.reset();
		}
		
		//**Private**//
		//Properties//
		Parser.prototype._options = null; //Parser options for how to behave
		Parser.prototype._handler = null; //Handler for parsed elements
		Parser.prototype._buffer = null; //Buffer of unparsed data
		Parser.prototype._done = false; //Flag indicating whether parsing is done
		Parser.prototype._elements =  null; //Array of parsed elements
		Parser.prototype._elementsCurrent = 0; //Pointer to last element in _elements that has been processed
		Parser.prototype._current = 0; //Position in data that has already been parsed
		Parser.prototype._next = 0; //Position in data of the next tag marker (<>)
		Parser.prototype._location = null; //Position tracking for elements in a stream
		Parser.prototype._parseState = ElementType.Text; //Current type of element being parsed
		Parser.prototype._prevTagSep = ''; //Previous tag marker found
		//Stack of element types previously encountered; keeps track of when
		//parsing occurs inside a script/comment/style tag
		Parser.prototype._tagStack = null;
	
		//Methods//
		//Takes an array of elements and parses any found attributes
		Parser.prototype.parseTagAttribs = function Parser$parseTagAttribs (elements) {
			var idxEnd = elements.length;
			var idx = 0;
		
			while (idx < idxEnd) {
				var element = elements[idx++];
				if (element.type == ElementType.Tag || element.type == ElementType.Script || element.type == ElementType.style)
					this.parseAttribs(element);
			}
		
			return(elements);
		}
	
		//Takes an element and adds an "attribs" property for any element attributes found 
		Parser.prototype.parseAttribs = function Parser$parseAttribs (element) {
			//Only parse attributes for tags
			if (element.type != ElementType.Script && element.type != ElementType.Style && element.type != ElementType.Tag)
				return;
		
			var tagName = element.data.split(Parser._reWhitespace, 1)[0];
			var attribRaw = element.data.substring(tagName.length);
			if (attribRaw.length < 1)
				return;
		
			var match;
			Parser._reAttrib.lastIndex = 0;
			while (match = Parser._reAttrib.exec(attribRaw)) {
				if (element.attribs == undefined)
					element.attribs = {};
		
				if (typeof match[1] == "string" && match[1].length) {
					element.attribs[match[1]] = match[2];
				} else if (typeof match[3] == "string" && match[3].length) {
					element.attribs[match[3].toString()] = match[4].toString();
				} else if (typeof match[5] == "string" && match[5].length) {
					element.attribs[match[5]] = match[6];
				} else if (typeof match[7] == "string" && match[7].length) {
					element.attribs[match[7]] = match[7];
				}
			}
		}
	
		//Extracts the base tag name from the data value of an element
		Parser.prototype.parseTagName = function Parser$parseTagName (data) {
			if (data == null || data == "")
				return("");
			var match = Parser._reTagName.exec(data);
			if (!match)
				return("");
			return((match[1] ? "/" : "") + match[2]);
		}
	
		//Parses through HTML text and returns an array of found elements
		//I admit, this function is rather large but splitting up had an noticeable impact on speed
		Parser.prototype.parseTags = function Parser$parseTags () {
			var bufferEnd = this._buffer.length - 1;
			while (Parser._reTags.test(this._buffer)) {
				this._next = Parser._reTags.lastIndex - 1;
				var tagSep = this._buffer.charAt(this._next); //The currently found tag marker
				var rawData = this._buffer.substring(this._current, this._next); //The next chunk of data to parse
		
				//A new element to eventually be appended to the element list
				var element = {
					  raw: rawData
					, data: (this._parseState == ElementType.Text) ? rawData : rawData.replace(Parser._reTrim, "")
					, type: this._parseState
				};
		
				var elementName = this.parseTagName(element.data);
		
				//This section inspects the current tag stack and modifies the current
				//element if we're actually parsing a special area (script/comment/style tag)
				if (this._tagStack.length) { //We're parsing inside a script/comment/style tag
					if (this._tagStack[this._tagStack.length - 1] == ElementType.Script) { //We're currently in a script tag
						if (elementName.toLowerCase() == "/script") //Actually, we're no longer in a script tag, so pop it off the stack
							this._tagStack.pop();
						else { //Not a closing script tag
							if (element.raw.indexOf("!--") != 0) { //Make sure we're not in a comment
								//All data from here to script close is now a text element
								element.type = ElementType.Text;
								//If the previous element is text, append the current text to it
								if (this._elements.length && this._elements[this._elements.length - 1].type == ElementType.Text) {
									var prevElement = this._elements[this._elements.length - 1];
									prevElement.raw = prevElement.data = prevElement.raw + this._prevTagSep + element.raw;
									element.raw = element.data = ""; //This causes the current element to not be added to the element list
								}
							}
						}
					}
					else if (this._tagStack[this._tagStack.length - 1] == ElementType.Style) { //We're currently in a style tag
						if (elementName.toLowerCase() == "/style") //Actually, we're no longer in a style tag, so pop it off the stack
							this._tagStack.pop();
						else {
							if (element.raw.indexOf("!--") != 0) { //Make sure we're not in a comment
								//All data from here to style close is now a text element
								element.type = ElementType.Text;
								//If the previous element is text, append the current text to it
								if (this._elements.length && this._elements[this._elements.length - 1].type == ElementType.Text) {
									var prevElement = this._elements[this._elements.length - 1];
									if (element.raw != "") {
										prevElement.raw = prevElement.data = prevElement.raw + this._prevTagSep + element.raw;
										element.raw = element.data = ""; //This causes the current element to not be added to the element list
									} else { //Element is empty, so just append the last tag marker found
										prevElement.raw = prevElement.data = prevElement.raw + this._prevTagSep;
									}
								} else { //The previous element was not text
									if (element.raw != "") {
										element.raw = element.data = element.raw;
									}
								}
							}
						}
					}
					else if (this._tagStack[this._tagStack.length - 1] == ElementType.Comment) { //We're currently in a comment tag
						var rawLen = element.raw.length;
						if (element.raw.charAt(rawLen - 2) == "-" && element.raw.charAt(rawLen - 1) == "-" && tagSep == ">") {
							//Actually, we're no longer in a style tag, so pop it off the stack
							this._tagStack.pop();
							//If the previous element is a comment, append the current text to it
							if (this._elements.length && this._elements[this._elements.length - 1].type == ElementType.Comment) {
								var prevElement = this._elements[this._elements.length - 1];
								prevElement.raw = prevElement.data = (prevElement.raw + element.raw).replace(Parser._reTrimComment, "");
								element.raw = element.data = ""; //This causes the current element to not be added to the element list
								element.type = ElementType.Text;
							}
							else //Previous element not a comment
								element.type = ElementType.Comment; //Change the current element's type to a comment
						}
						else { //Still in a comment tag
							element.type = ElementType.Comment;
							//If the previous element is a comment, append the current text to it
							if (this._elements.length && this._elements[this._elements.length - 1].type == ElementType.Comment) {
								var prevElement = this._elements[this._elements.length - 1];
								prevElement.raw = prevElement.data = prevElement.raw + element.raw + tagSep;
								element.raw = element.data = ""; //This causes the current element to not be added to the element list
								element.type = ElementType.Text;
							}
							else
								element.raw = element.data = element.raw + tagSep;
						}
					}
				}
		
				//Processing of non-special tags
				if (element.type == ElementType.Tag) {
					element.name = elementName;
					var elementNameCI = elementName.toLowerCase();
					
					if (element.raw.indexOf("!--") == 0) { //This tag is really comment
						element.type = ElementType.Comment;
						delete element["name"];
						var rawLen = element.raw.length;
						//Check if the comment is terminated in the current element
						if (element.raw.charAt(rawLen - 1) == "-" && element.raw.charAt(rawLen - 2) == "-" && tagSep == ">")
							element.raw = element.data = element.raw.replace(Parser._reTrimComment, "");
						else { //It's not so push the comment onto the tag stack
							element.raw += tagSep;
							this._tagStack.push(ElementType.Comment);
						}
					}
					else if (element.raw.indexOf("!") == 0 || element.raw.indexOf("?") == 0) {
						element.type = ElementType.Directive;
						//TODO: what about CDATA?
					}
					else if (elementNameCI == "script") {
						element.type = ElementType.Script;
						//Special tag, push onto the tag stack if not terminated
						if (element.data.charAt(element.data.length - 1) != "/")
							this._tagStack.push(ElementType.Script);
					}
					else if (elementNameCI == "/script")
						element.type = ElementType.Script;
					else if (elementNameCI == "style") {
						element.type = ElementType.Style;
						//Special tag, push onto the tag stack if not terminated
						if (element.data.charAt(element.data.length - 1) != "/")
							this._tagStack.push(ElementType.Style);
					}
					else if (elementNameCI == "/style")
						element.type = ElementType.Style;
					if (element.name && element.name.charAt(0) == "/")
						element.data = element.name;
				}
		
				//Add all tags and non-empty text elements to the element list
				if (element.raw != "" || element.type != ElementType.Text) {
					if (this._options.includeLocation && !element.location) {
						element.location = this.getLocation(element.type == ElementType.Tag);
					}
					this.parseAttribs(element);
					this._elements.push(element);
					//If tag self-terminates, add an explicit, separate closing tag
					if (
						element.type != ElementType.Text
						&&
						element.type != ElementType.Comment
						&&
						element.type != ElementType.Directive
						&&
						element.data.charAt(element.data.length - 1) == "/"
						)
						this._elements.push({
							  raw: "/" + element.name
							, data: "/" + element.name
							, name: "/" + element.name
							, type: element.type
						});
				}
				this._parseState = (tagSep == "<") ? ElementType.Tag : ElementType.Text;
				this._current = this._next + 1;
				this._prevTagSep = tagSep;
			}
	
			if (this._options.includeLocation) {
				this.getLocation();
				this._location.row += this._location.inBuffer;
				this._location.inBuffer = 0;
				this._location.charOffset = 0;
			}
			this._buffer = (this._current <= bufferEnd) ? this._buffer.substring(this._current) : "";
			this._current = 0;
		
			this.writeHandler();
		}
	
		Parser.prototype.getLocation = function Parser$getLocation (startTag) {
			var c,
				l = this._location,
				end = this._current - (startTag ? 1 : 0),
				chunk = startTag && l.charOffset == 0 && this._current == 0;
			
			for (; l.charOffset < end; l.charOffset++) {
				c = this._buffer.charAt(l.charOffset);
				if (c == '\n') {
					l.inBuffer++;
					l.col = 0;
				} else if (c != '\r') {
					l.col++;
				}
			}
			return {
				  line: l.row + l.inBuffer + 1
				, col: l.col + (chunk ? 0: 1)
			};
		}
	
		//Checks the handler to make it is an object with the right "interface"
		Parser.prototype.validateHandler = function Parser$validateHandler (handler) {
			if ((typeof handler) != "object")
				throw new Error("Handler is not an object");
			if ((typeof handler.reset) != "function")
				throw new Error("Handler method 'reset' is invalid");
			if ((typeof handler.done) != "function")
				throw new Error("Handler method 'done' is invalid");
			if ((typeof handler.writeTag) != "function")
				throw new Error("Handler method 'writeTag' is invalid");
			if ((typeof handler.writeText) != "function")
				throw new Error("Handler method 'writeText' is invalid");
			if ((typeof handler.writeComment) != "function")
				throw new Error("Handler method 'writeComment' is invalid");
			if ((typeof handler.writeDirective) != "function")
				throw new Error("Handler method 'writeDirective' is invalid");
		}
	
		//Writes parsed elements out to the handler
		Parser.prototype.writeHandler = function Parser$writeHandler (forceFlush) {
			forceFlush = !!forceFlush;
			if (this._tagStack.length && !forceFlush)
				return;
			while (this._elements.length) {
				var element = this._elements.shift();
				switch (element.type) {
					case ElementType.Comment:
						this._handler.writeComment(element);
						break;
					case ElementType.Directive:
						this._handler.writeDirective(element);
						break;
					case ElementType.Text:
						this._handler.writeText(element);
						break;
					default:
						this._handler.writeTag(element);
						break;
				}
			}
		}
	
		Parser.prototype.handleError = function Parser$handleError (error) {
			if ((typeof this._handler.error) == "function")
				this._handler.error(error);
			else
				throw error;
		}
	
	//TODO: make this a trully streamable handler
	function RssHandler (callback) {
		RssHandler.super_.call(this, callback, { ignoreWhitespace: true, verbose: false, enforceEmptyTags: false });
	}
	inherits(RssHandler, DefaultHandler);
	
		RssHandler.prototype.done = function RssHandler$done () {
			var feed = { };
			var feedRoot;
	
			var found = DomUtils.getElementsByTagName(function (value) { return(value == "rss" || value == "feed"); }, this.dom, false);
			if (found.length) {
				feedRoot = found[0];
			}
			if (feedRoot) {
				if (feedRoot.name == "rss") {
					feed.type = "rss";
					feedRoot = feedRoot.children[0]; //<channel/>
					feed.id = "";
					try {
						feed.title = DomUtils.getElementsByTagName("title", feedRoot.children, false)[0].children[0].data;
					} catch (ex) { }
					try {
						feed.link = DomUtils.getElementsByTagName("link", feedRoot.children, false)[0].children[0].data;
					} catch (ex) { }
					try {
						feed.description = DomUtils.getElementsByTagName("description", feedRoot.children, false)[0].children[0].data;
					} catch (ex) { }
					try {
						feed.updated = new Date(DomUtils.getElementsByTagName("lastBuildDate", feedRoot.children, false)[0].children[0].data);
					} catch (ex) { }
					try {
						feed.author = DomUtils.getElementsByTagName("managingEditor", feedRoot.children, false)[0].children[0].data;
					} catch (ex) { }
					feed.items = [];
					DomUtils.getElementsByTagName("item", feedRoot.children).forEach(function (item, index, list) {
						var entry = {};
						try {
							entry.id = DomUtils.getElementsByTagName("guid", item.children, false)[0].children[0].data;
						} catch (ex) { }
						try {
							entry.title = DomUtils.getElementsByTagName("title", item.children, false)[0].children[0].data;
						} catch (ex) { }
						try {
							entry.link = DomUtils.getElementsByTagName("link", item.children, false)[0].children[0].data;
						} catch (ex) { }
						try {
							entry.description = DomUtils.getElementsByTagName("description", item.children, false)[0].children[0].data;
						} catch (ex) { }
						try {
							entry.pubDate = new Date(DomUtils.getElementsByTagName("pubDate", item.children, false)[0].children[0].data);
						} catch (ex) { }
						feed.items.push(entry);
					});
				} else {
					feed.type = "atom";
					try {
						feed.id = DomUtils.getElementsByTagName("id", feedRoot.children, false)[0].children[0].data;
					} catch (ex) { }
					try {
						feed.title = DomUtils.getElementsByTagName("title", feedRoot.children, false)[0].children[0].data;
					} catch (ex) { }
					try {
						feed.link = DomUtils.getElementsByTagName("link", feedRoot.children, false)[0].attribs.href;
					} catch (ex) { }
					try {
						feed.description = DomUtils.getElementsByTagName("subtitle", feedRoot.children, false)[0].children[0].data;
					} catch (ex) { }
					try {
						feed.updated = new Date(DomUtils.getElementsByTagName("updated", feedRoot.children, false)[0].children[0].data);
					} catch (ex) { }
					try {
						feed.author = DomUtils.getElementsByTagName("email", feedRoot.children, true)[0].children[0].data;
					} catch (ex) { }
					feed.items = [];
					DomUtils.getElementsByTagName("entry", feedRoot.children).forEach(function (item, index, list) {
						var entry = {};
						try {
							entry.id = DomUtils.getElementsByTagName("id", item.children, false)[0].children[0].data;
						} catch (ex) { }
						try {
							entry.title = DomUtils.getElementsByTagName("title", item.children, false)[0].children[0].data;
						} catch (ex) { }
						try {
							entry.link = DomUtils.getElementsByTagName("link", item.children, false)[0].attribs.href;
						} catch (ex) { }
						try {
							entry.description = DomUtils.getElementsByTagName("summary", item.children, false)[0].children[0].data;
						} catch (ex) { }
						try {
							entry.pubDate = new Date(DomUtils.getElementsByTagName("updated", item.children, false)[0].children[0].data);
						} catch (ex) { }
						feed.items.push(entry);
					});
				}
	
				this.dom = feed;
			}
			RssHandler.super_.prototype.done.call(this);
		}
	
	///////////////////////////////////////////////////
	
	function DefaultHandler (callback, options) {
		this.reset();
		this._options = options ? options : { };
		if (this._options.ignoreWhitespace == undefined)
			this._options.ignoreWhitespace = false; //Keep whitespace-only text nodes
		if (this._options.verbose == undefined)
			this._options.verbose = true; //Keep data property for tags and raw property for all
		if (this._options.enforceEmptyTags == undefined)
			this._options.enforceEmptyTags = true; //Don't allow children for HTML tags defined as empty in spec
		if ((typeof callback) == "function")
			this._callback = callback;
	}
	
		//**"Static"**//
		//HTML Tags that shouldn't contain child nodes
		DefaultHandler._emptyTags = {
			  area: 1
			, base: 1
			, basefont: 1
			, br: 1
			, col: 1
			, frame: 1
			, hr: 1
			, img: 1
			, input: 1
			, isindex: 1
			, link: 1
			, meta: 1
			, param: 1
			, embed: 1
		}
		//Regex to detect whitespace only text nodes
		DefaultHandler.reWhitespace = /^\s*$/;
	
		//**Public**//
		//Properties//
		DefaultHandler.prototype.dom = null; //The hierarchical object containing the parsed HTML
		//Methods//
		//Resets the handler back to starting state
		DefaultHandler.prototype.reset = function DefaultHandler$reset() {
			this.dom = [];
			this._done = false;
			this._tagStack = [];
			this._tagStack.last = function DefaultHandler$_tagStack$last () {
				return(this.length ? this[this.length - 1] : null);
			}
		}
		//Signals the handler that parsing is done
		DefaultHandler.prototype.done = function DefaultHandler$done () {
			this._done = true;
			this.handleCallback(null);
		}
		DefaultHandler.prototype.writeTag = function DefaultHandler$writeTag (element) {
			this.handleElement(element);
		} 
		DefaultHandler.prototype.writeText = function DefaultHandler$writeText (element) {
			if (this._options.ignoreWhitespace)
				if (DefaultHandler.reWhitespace.test(element.data))
					return;
			this.handleElement(element);
		} 
		DefaultHandler.prototype.writeComment = function DefaultHandler$writeComment (element) {
			this.handleElement(element);
		} 
		DefaultHandler.prototype.writeDirective = function DefaultHandler$writeDirective (element) {
			this.handleElement(element);
		}
		DefaultHandler.prototype.error = function DefaultHandler$error (error) {
			this.handleCallback(error);
		}
	
		//**Private**//
		//Properties//
		DefaultHandler.prototype._options = null; //Handler options for how to behave
		DefaultHandler.prototype._callback = null; //Callback to respond to when parsing done
		DefaultHandler.prototype._done = false; //Flag indicating whether handler has been notified of parsing completed
		DefaultHandler.prototype._tagStack = null; //List of parents to the currently element being processed
		//Methods//
		DefaultHandler.prototype.handleCallback = function DefaultHandler$handleCallback (error) {
				if ((typeof this._callback) != "function")
					if (error)
						throw error;
					else
						return;
				this._callback(error, this.dom);
		}
		
		DefaultHandler.prototype.isEmptyTag = function(element) {
			var name = element.name.toLowerCase();
			if (name.charAt(0) == '/') {
				name = name.substring(1);
			}
			return this._options.enforceEmptyTags && !!DefaultHandler._emptyTags[name];
		};
		
		DefaultHandler.prototype.handleElement = function DefaultHandler$handleElement (element) {
			if (this._done)
				this.handleCallback(new Error("Writing to the handler after done() called is not allowed without a reset()"));
			if (!this._options.verbose) {
	//			element.raw = null; //FIXME: Not clean
				//FIXME: Serious performance problem using delete
				delete element.raw;
				if (element.type == "tag" || element.type == "script" || element.type == "style")
					delete element.data;
			}
			if (!this._tagStack.last()) { //There are no parent elements
				//If the element can be a container, add it to the tag stack and the top level list
				if (element.type != ElementType.Text && element.type != ElementType.Comment && element.type != ElementType.Directive) {
					if (element.name.charAt(0) != "/") { //Ignore closing tags that obviously don't have an opening tag
						this.dom.push(element);
						if (!this.isEmptyTag(element)) { //Don't add tags to the tag stack that can't have children
							this._tagStack.push(element);
						}
					}
				}
				else //Otherwise just add to the top level list
					this.dom.push(element);
			}
			else { //There are parent elements
				//If the element can be a container, add it as a child of the element
				//on top of the tag stack and then add it to the tag stack
				if (element.type != ElementType.Text && element.type != ElementType.Comment && element.type != ElementType.Directive) {
					if (element.name.charAt(0) == "/") {
						//This is a closing tag, scan the tagStack to find the matching opening tag
						//and pop the stack up to the opening tag's parent
						var baseName = element.name.substring(1);
						if (!this.isEmptyTag(element)) {
							var pos = this._tagStack.length - 1;
							while (pos > -1 && this._tagStack[pos--].name != baseName) { }
							if (pos > -1 || this._tagStack[0].name == baseName)
								while (pos < this._tagStack.length - 1)
									this._tagStack.pop();
						}
					}
					else { //This is not a closing tag
						if (!this._tagStack.last().children)
							this._tagStack.last().children = [];
						this._tagStack.last().children.push(element);
						if (!this.isEmptyTag(element)) //Don't add tags to the tag stack that can't have children
							this._tagStack.push(element);
					}
				}
				else { //This is not a container element
					if (!this._tagStack.last().children)
						this._tagStack.last().children = [];
					this._tagStack.last().children.push(element);
				}
			}
		}
	
		var DomUtils = {
			  testElement: function DomUtils$testElement (options, element) {
				if (!element) {
					return false;
				}
		
				for (var key in options) {
					if (key == "tag_name") {
						if (element.type != "tag" && element.type != "script" && element.type != "style") {
							return false;
						}
						if (!options["tag_name"](element.name)) {
							return false;
						}
					} else if (key == "tag_type") {
						if (!options["tag_type"](element.type)) {
							return false;
						}
					} else if (key == "tag_contains") {
						if (element.type != "text" && element.type != "comment" && element.type != "directive") {
							return false;
						}
						if (!options["tag_contains"](element.data)) {
							return false;
						}
					} else {
						if (!element.attribs || !options[key](element.attribs[key])) {
							return false;
						}
					}
				}
			
				return true;
			}
		
			, getElements: function DomUtils$getElements (options, currentElement, recurse, limit) {
				recurse = (recurse === undefined || recurse === null) || !!recurse;
				limit = isNaN(parseInt(limit)) ? -1 : parseInt(limit);
	
				if (!currentElement) {
					return([]);
				}
		
				var found = [];
				var elementList;
	
				function getTest (checkVal) {
					return(function (value) { return(value == checkVal); });
				}
				for (var key in options) {
					if ((typeof options[key]) != "function") {
						options[key] = getTest(options[key]);
					}
				}
		
				if (DomUtils.testElement(options, currentElement)) {
					found.push(currentElement);
				}
	
				if (limit >= 0 && found.length >= limit) {
					return(found);
				}
	
				if (recurse && currentElement.children) {
					elementList = currentElement.children;
				} else if (currentElement instanceof Array) {
					elementList = currentElement;
				} else {
					return(found);
				}
		
				for (var i = 0; i < elementList.length; i++) {
					found = found.concat(DomUtils.getElements(options, elementList[i], recurse, limit));
					if (limit >= 0 && found.length >= limit) {
						break;
					}
				}
		
				return(found);
			}
			
			, getElementById: function DomUtils$getElementById (id, currentElement, recurse) {
				var result = DomUtils.getElements({ id: id }, currentElement, recurse, 1);
				return(result.length ? result[0] : null);
			}
			
			, getElementsByTagName: function DomUtils$getElementsByTagName (name, currentElement, recurse, limit) {
				return(DomUtils.getElements({ tag_name: name }, currentElement, recurse, limit));
			}
			
			, getElementsByTagType: function DomUtils$getElementsByTagType (type, currentElement, recurse, limit) {
				return(DomUtils.getElements({ tag_type: type }, currentElement, recurse, limit));
			}
		}
	
		function inherits (ctor, superCtor) {
			var tempCtor = function(){};
			tempCtor.prototype = superCtor.prototype;
			ctor.super_ = superCtor;
			ctor.prototype = new tempCtor();
			ctor.prototype.constructor = ctor;
		}
	
	exports.Parser = Parser;
	
	exports.DefaultHandler = DefaultHandler;
	
	exports.RssHandler = RssHandler;
	
	exports.ElementType = ElementType;
	
	exports.DomUtils = DomUtils;
	
	})();
	
	/* WEBPACK VAR INJECTION */}.call(exports, "/index.js", "/"))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	var Stream = __webpack_require__(145);
	var Response = __webpack_require__(126);
	var Base64 = __webpack_require__(163);
	var inherits = __webpack_require__(164);
	
	var Request = module.exports = function (xhr, params) {
	    var self = this;
	    self.writable = true;
	    self.xhr = xhr;
	    self.body = [];
	    
	    self.uri = (params.scheme || 'http') + '://'
	        + params.host
	        + (params.port ? ':' + params.port : '')
	        + (params.path || '/')
	    ;
	    
	    if (typeof params.withCredentials === 'undefined') {
	        params.withCredentials = true;
	    }
	
	    try { xhr.withCredentials = params.withCredentials }
	    catch (e) {}
	    
	    xhr.open(
	        params.method || 'GET',
	        self.uri,
	        true
	    );
	
	    self._headers = {};
	    
	    if (params.headers) {
	        var keys = objectKeys(params.headers);
	        for (var i = 0; i < keys.length; i++) {
	            var key = keys[i];
	            if (!self.isSafeRequestHeader(key)) continue;
	            var value = params.headers[key];
	            self.setHeader(key, value);
	        }
	    }
	    
	    if (params.auth) {
	        //basic auth
	        this.setHeader('Authorization', 'Basic ' + Base64.btoa(params.auth));
	    }
	
	    var res = new Response;
	    res.on('close', function () {
	        self.emit('close');
	    });
	    
	    res.on('ready', function () {
	        self.emit('response', res);
	    });
	    
	    xhr.onreadystatechange = function () {
	        // Fix for IE9 bug
	        // SCRIPT575: Could not complete the operation due to error c00c023f
	        // It happens when a request is aborted, calling the success callback anyway with readyState === 4
	        if (xhr.__aborted) return;
	        res.handle(xhr);
	    };
	};
	
	inherits(Request, Stream);
	
	Request.prototype.setHeader = function (key, value) {
	    this._headers[key.toLowerCase()] = value
	};
	
	Request.prototype.getHeader = function (key) {
	    return this._headers[key.toLowerCase()]
	};
	
	Request.prototype.removeHeader = function (key) {
	    delete this._headers[key.toLowerCase()]
	};
	
	Request.prototype.write = function (s) {
	    this.body.push(s);
	};
	
	Request.prototype.destroy = function (s) {
	    this.xhr.__aborted = true;
	    this.xhr.abort();
	    this.emit('close');
	};
	
	Request.prototype.end = function (s) {
	    if (s !== undefined) this.body.push(s);
	
	    var keys = objectKeys(this._headers);
	    for (var i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        var value = this._headers[key];
	        if (isArray(value)) {
	            for (var j = 0; j < value.length; j++) {
	                this.xhr.setRequestHeader(key, value[j]);
	            }
	        }
	        else this.xhr.setRequestHeader(key, value)
	    }
	
	    if (this.body.length === 0) {
	        this.xhr.send('');
	    }
	    else if (typeof this.body[0] === 'string') {
	        this.xhr.send(this.body.join(''));
	    }
	    else if (isArray(this.body[0])) {
	        var body = [];
	        for (var i = 0; i < this.body.length; i++) {
	            body.push.apply(body, this.body[i]);
	        }
	        this.xhr.send(body);
	    }
	    else if (/Array/.test(Object.prototype.toString.call(this.body[0]))) {
	        var len = 0;
	        for (var i = 0; i < this.body.length; i++) {
	            len += this.body[i].length;
	        }
	        var body = new(this.body[0].constructor)(len);
	        var k = 0;
	        
	        for (var i = 0; i < this.body.length; i++) {
	            var b = this.body[i];
	            for (var j = 0; j < b.length; j++) {
	                body[k++] = b[j];
	            }
	        }
	        this.xhr.send(body);
	    }
	    else {
	        var body = '';
	        for (var i = 0; i < this.body.length; i++) {
	            body += this.body[i].toString();
	        }
	        this.xhr.send(body);
	    }
	};
	
	// Taken from http://dxr.mozilla.org/mozilla/mozilla-central/content/base/src/nsXMLHttpRequest.cpp.html
	Request.unsafeHeaders = [
	    "accept-charset",
	    "accept-encoding",
	    "access-control-request-headers",
	    "access-control-request-method",
	    "connection",
	    "content-length",
	    "cookie",
	    "cookie2",
	    "content-transfer-encoding",
	    "date",
	    "expect",
	    "host",
	    "keep-alive",
	    "origin",
	    "referer",
	    "te",
	    "trailer",
	    "transfer-encoding",
	    "upgrade",
	    "user-agent",
	    "via"
	];
	
	Request.prototype.isSafeRequestHeader = function (headerName) {
	    if (!headerName) return false;
	    return indexOf(Request.unsafeHeaders, headerName.toLowerCase()) === -1;
	};
	
	var objectKeys = Object.keys || function (obj) {
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    return keys;
	};
	
	var isArray = Array.isArray || function (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};
	
	var indexOf = function (xs, x) {
	    if (xs.indexOf) return xs.indexOf(x);
	    for (var i = 0; i < xs.length; i++) {
	        if (xs[i] === x) return i;
	    }
	    return -1;
	};


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.CSSStyleDeclaration = __webpack_require__(111).CSSStyleDeclaration;
	exports.CSSRule = __webpack_require__(112).CSSRule;
	exports.CSSStyleRule = __webpack_require__(113).CSSStyleRule;
	exports.MediaList = __webpack_require__(114).MediaList;
	exports.CSSMediaRule = __webpack_require__(115).CSSMediaRule;
	exports.CSSImportRule = __webpack_require__(116).CSSImportRule;
	exports.CSSFontFaceRule = __webpack_require__(117).CSSFontFaceRule;
	exports.StyleSheet = __webpack_require__(118).StyleSheet;
	exports.CSSStyleSheet = __webpack_require__(119).CSSStyleSheet;
	exports.CSSKeyframesRule = __webpack_require__(120).CSSKeyframesRule;
	exports.CSSKeyframeRule = __webpack_require__(121).CSSKeyframeRule;
	exports.parse = __webpack_require__(122).parse;
	exports.clone = __webpack_require__(123).clone;


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {/*********************************************************************
	 * This is a fork from the CSS Style Declaration part of
	 * https://github.com/NV/CSSOM
	 ********************************************************************/
	"use strict";
	var CSSOM = __webpack_require__(962);
	var fs = __webpack_require__(22);
	var path = __webpack_require__(156);
	
	var camelToDashed = __webpack_require__(124).camelToDashed;
	
	/**
	 * @constructor
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration
	 */
	var CSSStyleDeclaration = function CSSStyleDeclaration() {
	    this._values = {};
	    this._importants = {};
	    this._length = 0;
	};
	CSSStyleDeclaration.prototype = {
	    constructor: CSSStyleDeclaration,
	
	    /**
	     *
	     * @param {string} name
	     * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-getPropertyValue
	     * @return {string} the value of the property if it has been explicitly set for this declaration block.
	     * Returns the empty string if the property has not been set.
	     */
	    getPropertyValue: function (name) {
	        return this._values[name] || "";
	    },
	
	    /**
	     *
	     * @param {string} name
	     * @param {string} value
	     * @param {string} [priority=null] "important" or null
	     * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-setProperty
	     */
	    setProperty: function (name, value, priority) {
	        if (value === undefined) {
	            return;
	        }
	        if (value === null || value === '') {
	            this.removeProperty(name);
	            return;
	        }
	        if (this._values[name]) {
	            // Property already exist. Overwrite it.
	            var index = Array.prototype.indexOf.call(this, name);
	            if (index < 0) {
	                this[this._length] = name;
	                this._length++;
	            }
	        } else {
	            // New property.
	            this[this._length] = name;
	            this._length++;
	        }
	        this._values[name] = value;
	        this._importants[name] = priority;
	    },
	
	    /**
	     *
	     * @param {string} name
	     * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-removeProperty
	     * @return {string} the value of the property if it has been explicitly set for this declaration block.
	     * Returns the empty string if the property has not been set or the property name does not correspond to a known CSS property.
	     */
	    removeProperty: function (name) {
	        if (!this._values.hasOwnProperty(name)) {
	            return "";
	        }
	        var index = Array.prototype.indexOf.call(this, name);
	        if (index < 0) {
	            return "";
	        }
	        var prevValue = this._values[name];
	        delete this._values[name];
	
	        // That's what WebKit and Opera do
	        Array.prototype.splice.call(this, index, 1);
	
	        // That's what Firefox does
	        //this[index] = ""
	
	        return prevValue;
	    },
	
	
	    /**
	     *
	     * @param {String} name
	     */
	    getPropertyPriority: function (name) {
	        return this._importants[name] || "";
	    },
	
	
	    getPropertyCSSValue: function () {
	        //FIXME
	        return;
	    },
	
	    /**
	     *   element.style.overflow = "auto"
	     *   element.style.getPropertyShorthand("overflow-x")
	     *   -> "overflow"
	     */
	    getPropertyShorthand: function () {
	        //FIXME
	        return;
	    },
	
	    isPropertyImplicit: function () {
	        //FIXME
	        return;
	    },
	
	    /**
	     *   http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-item
	     */
	    item: function (index) {
	        index = parseInt(index, 10);
	        if (index < 0 || index >= this._length) {
	            return '';
	        }
	        return this[index];
	    }
	};
	
	Object.defineProperties(CSSStyleDeclaration.prototype, {
	    cssText: {
	        get: function () {
	            var properties = [];
	            var i;
	            var name;
	            var value;
	            var priority;
	            for (i = 0; i < this._length; i++) {
	                name = this[i];
	                value = this.getPropertyValue(name);
	                priority = this.getPropertyPriority(name);
	                if (priority !== '') {
	                    priority = " !" + priority;
	                }
	                properties.push([name, ': ', value, priority, ';'].join(''));
	            }
	            return properties.join(' ');
	        },
	        set: function (value) {
	            var i;
	            this._values = {};
	            Array.prototype.splice.call(this, 0, this._length);
	            this._importants = {};
	            var dummyRule = CSSOM.parse('#bogus{' + value + '}').cssRules[0].style;
	            var rule_length = dummyRule.length;
	            var name;
	            for (i = 0; i < rule_length; ++i) {
	                name = dummyRule[i];
	                this.setProperty(dummyRule[i], dummyRule.getPropertyValue(name), dummyRule.getPropertyPriority(name));
	            }
	        },
	        enumerable: true,
	        configurable: true
	    },
	    parentRule: {
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    },
	    length: {
	        get: function () { return this._length; },
	        /**
	         * This deletes indices if the new length is less then the current
	         * length. If the new length is more, it does nothing, the new indices
	         * will be undefined until set.
	         **/
	        set: function (value) {
	            var i;
	            for (i = value; i < this._length; i++) {
	                delete this[i];
	            }
	            this._length = value;
	        },
	        enumerable: true,
	        configurable: true
	    }
	});
	
	var LazyDefinition = function (property, modulePath) {
	    this.get = function () {
	        var definition = __webpack_require__(125)(modulePath).definition;
	        Object.defineProperty(this, property, definition);
	        return this[property];
	    };
	
	    this.set = function (v) {
	        var definition = __webpack_require__(125)(modulePath).definition;
	        Object.defineProperty(this, property, definition);
	        this[property] = v;
	    };
	
	    this.enumerable = true;
	    this.configurable = true;
	};
	
	/*
	 *
	 * http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSS2Properties
	 */
	var property_files = fs.readdirSync(__dirname + '/properties');
	property_files.forEach(function (property) {
	    var dashed;
	    if (property.substr(-3) === '.js') {
	        property = path.basename(property, '.js');
	        dashed = camelToDashed(property);
	        Object.defineProperty(CSSStyleDeclaration.prototype, property, new LazyDefinition(property, './properties/' + property));
	        Object.defineProperty(CSSStyleDeclaration.prototype, dashed, new LazyDefinition(property, './properties/' + property));
	    }
	});
	
	exports.CSSStyleDeclaration = CSSStyleDeclaration;
	
	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	var optional = __webpack_require__(108)
	  , tough = optional('tough-cookie')
	  , Cookie = tough && tough.Cookie
	  , CookieJar = tough && tough.CookieJar
	  ;
	
	exports.parse = function(str) {
	  if (str && str.uri) str = str.uri
	  if (typeof str !== 'string') throw new Error("The cookie function only accepts STRING as param")
	  if (!Cookie) {
	    return null;
	  }
	  return Cookie.parse(str)
	};
	
	// Adapt the sometimes-Async api of tough.CookieJar to our requirements
	function RequestJar() {
	  this._jar = new CookieJar();
	}
	RequestJar.prototype.setCookie = function(cookieOrStr, uri, options) {
	  return this._jar.setCookieSync(cookieOrStr, uri, options || {});
	};
	RequestJar.prototype.getCookieString = function(uri) {
	  return this._jar.getCookieStringSync(uri);
	};
	
	exports.jar = function() {
	  if (!CookieJar) {
	    // tough-cookie not loaded, return a stub object:
	    return {
	      setCookie: function(){},
	      getCookieString: function(){}
	    };
	  }
	  return new RequestJar();
	};


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	module.exports =
	function copy (obj) {
	  var o = {}
	  Object.keys(obj).forEach(function (i) {
	    o[i] = obj[i]
	  })
	  return o
	}

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.decode = exports.parse = __webpack_require__(128);
	exports.encode = exports.stringify = __webpack_require__(129);


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! http://mths.be/punycode v1.2.4 by @mathias */
	;(function(root) {
	
		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports;
		var freeModule = typeof module == 'object' && module &&
			module.exports == freeExports && module;
		var freeGlobal = typeof global == 'object' && global;
		if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
			root = freeGlobal;
		}
	
		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,
	
		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
	
		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'
	
		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^ -~]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /\x2E|\u3002|\uFF0E|\uFF61/g, // RFC 3490 separators
	
		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},
	
		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,
	
		/** Temporary variable */
		key;
	
		/*--------------------------------------------------------------------------*/
	
		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}
	
		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			while (length--) {
				array[length] = fn(array[length]);
			}
			return array;
		}
	
		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings.
		 * @private
		 * @param {String} domain The domain name.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			return map(string.split(regexSeparators), fn).join('.');
		}
	
		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <http://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}
	
		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}
	
		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}
	
		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}
	
		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}
	
		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;
	
			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.
	
			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}
	
			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}
	
			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.
	
			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {
	
				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {
	
					if (index >= inputLength) {
						error('invalid-input');
					}
	
					digit = basicToDigit(input.charCodeAt(index++));
	
					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}
	
					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
	
					if (digit < t) {
						break;
					}
	
					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}
	
					w *= baseMinusT;
	
				}
	
				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);
	
				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}
	
				n += floor(i / out);
				i %= out;
	
				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);
	
			}
	
			return ucs2encode(output);
		}
	
		/**
		 * Converts a string of Unicode symbols to a Punycode string of ASCII-only
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;
	
			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);
	
			// Cache the length
			inputLength = input.length;
	
			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;
	
			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}
	
			handledCPCount = basicLength = output.length;
	
			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.
	
			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}
	
			// Main encoding loop:
			while (handledCPCount < inputLength) {
	
				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}
	
				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}
	
				delta += (m - n) * handledCPCountPlusOne;
				n = m;
	
				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];
	
					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}
	
					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}
	
						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}
	
				++delta;
				++n;
	
			}
			return output.join('');
		}
	
		/**
		 * Converts a Punycode string representing a domain name to Unicode. Only the
		 * Punycoded parts of the domain name will be converted, i.e. it doesn't
		 * matter if you call it on a string that has already been converted to
		 * Unicode.
		 * @memberOf punycode
		 * @param {String} domain The Punycode domain name to convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(domain) {
			return mapDomain(domain, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}
	
		/**
		 * Converts a Unicode string representing a domain name to Punycode. Only the
		 * non-ASCII parts of the domain name will be converted, i.e. it doesn't
		 * matter if you call it with a domain that's already in ASCII.
		 * @memberOf punycode
		 * @param {String} domain The domain name to convert, as a Unicode string.
		 * @returns {String} The Punycode representation of the given domain name.
		 */
		function toASCII(domain) {
			return mapDomain(domain, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}
	
		/*--------------------------------------------------------------------------*/
	
		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.2.4',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <http://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};
	
		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module)), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && !freeExports.nodeType) {
			if (freeModule) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}
	
	}(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31)(module), (function() { return this; }())))

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	var binding = __webpack_require__(967)('contextify');
	var ContextifyContext = binding.ContextifyContext;
	var ContextifyScript = binding.ContextifyScript;
	
	function Contextify (sandbox) {
	    if (typeof sandbox != 'object') {
	        sandbox = {};
	    }
	    var ctx = new ContextifyContext(sandbox);
	
	    sandbox.run = function () {
	        return ctx.run.apply(ctx, arguments);
	    };
	
	    sandbox.getGlobal = function () {
	        return ctx.getGlobal();
	    }
	
	    sandbox.dispose = function () {
	        sandbox.run = function () {
	            throw new Error("Called run() after dispose().");
	        };
	        sandbox.getGlobal = function () {
	            throw new Error("Called getGlobal() after dispose().");
	        };
	        sandbox.dispose = function () {
	            throw new Error("Called dispose() after dispose().");
	        };
	        ctx = null;
	    }
	    return sandbox;
	}
	
	Contextify.createContext = function (sandbox) {
	    if (typeof sandbox != 'object') {
	        sandbox = {};
	    }
	    return new ContextifyContext(sandbox);
	};
	
	Contextify.createScript = function (code, filename) {
	    if (typeof code != 'string') {
	        throw new TypeError('Code argument is required');
	    }
	    return new ContextifyScript(code, filename);
	};
	
	module.exports = Contextify;


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__filename, __dirname) {/***********************************************
	Copyright 2010, 2011, Chris Winberry <chris@winberry.net>. All rights reserved.
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to
	deal in the Software without restriction, including without limitation the
	rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	sell copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
	IN THE SOFTWARE.
	***********************************************/
	/* v1.7.6 */
	
	(function () {
	
	function runningInNode () {
		return(
			('function') == "function"
			&&
			(typeof exports) == "object"
			&&
			(typeof module) == "object"
			&&
			(typeof __filename) == "string"
			&&
			(typeof __dirname) == "string"
			);
	}
	
	if (!runningInNode()) {
		if (!this.Tautologistics)
			this.Tautologistics = {};
		else if (this.Tautologistics.NodeHtmlParser)
			return; //NodeHtmlParser already defined!
		this.Tautologistics.NodeHtmlParser = {};
		exports = this.Tautologistics.NodeHtmlParser;
	}
	
	//Types of elements found in the DOM
	var ElementType = {
		  Text: "text" //Plain text
		, Directive: "directive" //Special tag <!...>
		, Comment: "comment" //Special tag <!--...-->
		, Script: "script" //Special tag <script>...</script>
		, Style: "style" //Special tag <style>...</style>
		, Tag: "tag" //Any tag that isn't special
	}
	
	function Parser (handler, options) {
		this._options = options ? options : { };
		if (this._options.includeLocation == undefined) {
			this._options.includeLocation = false; //Do not track element position in document by default
		}
	
		this.validateHandler(handler);
		this._handler = handler;
		this.reset();
	}
	
		//**"Static"**//
		//Regular expressions used for cleaning up and parsing (stateless)
		Parser._reTrim = /(^\s+|\s+$)/g; //Trim leading/trailing whitespace
		Parser._reTrimComment = /(^\!--|--$)/g; //Remove comment tag markup from comment contents
		Parser._reWhitespace = /\s/g; //Used to find any whitespace to split on
		Parser._reTagName = /^\s*(\/?)\s*([^\s\/]+)/; //Used to find the tag name for an element
	
		//Regular expressions used for parsing (stateful)
		Parser._reAttrib = //Find attributes in a tag
			/([^=<>\"\'\s]+)\s*=\s*"([^"]*)"|([^=<>\"\'\s]+)\s*=\s*'([^']*)'|([^=<>\"\'\s]+)\s*=\s*([^'"\s]+)|([^=<>\"\'\s\/]+)/g;
		Parser._reTags = /[\<\>]/g; //Find tag markers
	
		//**Public**//
		//Methods//
		//Parses a complete HTML and pushes it to the handler
		Parser.prototype.parseComplete = function Parser$parseComplete (data) {
			this.reset();
			this.parseChunk(data);
			this.done();
		}
	
		//Parses a piece of an HTML document
		Parser.prototype.parseChunk = function Parser$parseChunk (data) {
			if (this._done)
				this.handleError(new Error("Attempted to parse chunk after parsing already done"));
			this._buffer += data; //FIXME: this can be a bottleneck
			this.parseTags();
		}
	
		//Tells the parser that the HTML being parsed is complete
		Parser.prototype.done = function Parser$done () {
			if (this._done)
				return;
			this._done = true;
		
			//Push any unparsed text into a final element in the element list
			if (this._buffer.length) {
				var rawData = this._buffer;
				this._buffer = "";
				var element = {
					  raw: rawData
					, data: (this._parseState == ElementType.Text) ? rawData : rawData.replace(Parser._reTrim, "")
					, type: this._parseState
					};
				if (this._parseState == ElementType.Tag || this._parseState == ElementType.Script || this._parseState == ElementType.Style)
					element.name = this.parseTagName(element.data);
				this.parseAttribs(element);
				this._elements.push(element);
			}
		
			this.writeHandler();
			this._handler.done();
		}
	
		//Resets the parser to a blank state, ready to parse a new HTML document
		Parser.prototype.reset = function Parser$reset () {
			this._buffer = "";
			this._done = false;
			this._elements = [];
			this._elementsCurrent = 0;
			this._current = 0;
			this._next = 0;
			this._location = {
				  row: 0
				, col: 0
				, charOffset: 0
				, inBuffer: 0
			};
			this._parseState = ElementType.Text;
			this._prevTagSep = '';
			this._tagStack = [];
			this._handler.reset();
		}
		
		//**Private**//
		//Properties//
		Parser.prototype._options = null; //Parser options for how to behave
		Parser.prototype._handler = null; //Handler for parsed elements
		Parser.prototype._buffer = null; //Buffer of unparsed data
		Parser.prototype._done = false; //Flag indicating whether parsing is done
		Parser.prototype._elements =  null; //Array of parsed elements
		Parser.prototype._elementsCurrent = 0; //Pointer to last element in _elements that has been processed
		Parser.prototype._current = 0; //Position in data that has already been parsed
		Parser.prototype._next = 0; //Position in data of the next tag marker (<>)
		Parser.prototype._location = null; //Position tracking for elements in a stream
		Parser.prototype._parseState = ElementType.Text; //Current type of element being parsed
		Parser.prototype._prevTagSep = ''; //Previous tag marker found
		//Stack of element types previously encountered; keeps track of when
		//parsing occurs inside a script/comment/style tag
		Parser.prototype._tagStack = null;
	
		//Methods//
		//Takes an array of elements and parses any found attributes
		Parser.prototype.parseTagAttribs = function Parser$parseTagAttribs (elements) {
			var idxEnd = elements.length;
			var idx = 0;
		
			while (idx < idxEnd) {
				var element = elements[idx++];
				if (element.type == ElementType.Tag || element.type == ElementType.Script || element.type == ElementType.style)
					this.parseAttribs(element);
			}
		
			return(elements);
		}
	
		//Takes an element and adds an "attribs" property for any element attributes found 
		Parser.prototype.parseAttribs = function Parser$parseAttribs (element) {
			//Only parse attributes for tags
			if (element.type != ElementType.Script && element.type != ElementType.Style && element.type != ElementType.Tag)
				return;
		
			var tagName = element.data.split(Parser._reWhitespace, 1)[0];
			var attribRaw = element.data.substring(tagName.length);
			if (attribRaw.length < 1)
				return;
		
			var match;
			Parser._reAttrib.lastIndex = 0;
			while (match = Parser._reAttrib.exec(attribRaw)) {
				if (element.attribs == undefined)
					element.attribs = {};
		
				if (typeof match[1] == "string" && match[1].length) {
					element.attribs[match[1]] = match[2];
				} else if (typeof match[3] == "string" && match[3].length) {
					element.attribs[match[3].toString()] = match[4].toString();
				} else if (typeof match[5] == "string" && match[5].length) {
					element.attribs[match[5]] = match[6];
				} else if (typeof match[7] == "string" && match[7].length) {
					element.attribs[match[7]] = match[7];
				}
			}
		}
	
		//Extracts the base tag name from the data value of an element
		Parser.prototype.parseTagName = function Parser$parseTagName (data) {
			if (data == null || data == "")
				return("");
			var match = Parser._reTagName.exec(data);
			if (!match)
				return("");
			return((match[1] ? "/" : "") + match[2]);
		}
	
		//Parses through HTML text and returns an array of found elements
		//I admit, this function is rather large but splitting up had an noticeable impact on speed
		Parser.prototype.parseTags = function Parser$parseTags () {
			var bufferEnd = this._buffer.length - 1;
			while (Parser._reTags.test(this._buffer)) {
				this._next = Parser._reTags.lastIndex - 1;
				var tagSep = this._buffer.charAt(this._next); //The currently found tag marker
				var rawData = this._buffer.substring(this._current, this._next); //The next chunk of data to parse
		
				//A new element to eventually be appended to the element list
				var element = {
					  raw: rawData
					, data: (this._parseState == ElementType.Text) ? rawData : rawData.replace(Parser._reTrim, "")
					, type: this._parseState
				};
		
				var elementName = this.parseTagName(element.data);
		
				//This section inspects the current tag stack and modifies the current
				//element if we're actually parsing a special area (script/comment/style tag)
				if (this._tagStack.length) { //We're parsing inside a script/comment/style tag
					if (this._tagStack[this._tagStack.length - 1] == ElementType.Script) { //We're currently in a script tag
						if (elementName.toLowerCase() == "/script") //Actually, we're no longer in a script tag, so pop it off the stack
							this._tagStack.pop();
						else { //Not a closing script tag
							if (element.raw.indexOf("!--") != 0) { //Make sure we're not in a comment
								//All data from here to script close is now a text element
								element.type = ElementType.Text;
								//If the previous element is text, append the current text to it
								if (this._elements.length && this._elements[this._elements.length - 1].type == ElementType.Text) {
									var prevElement = this._elements[this._elements.length - 1];
									prevElement.raw = prevElement.data = prevElement.raw + this._prevTagSep + element.raw;
									element.raw = element.data = ""; //This causes the current element to not be added to the element list
								}
							}
						}
					}
					else if (this._tagStack[this._tagStack.length - 1] == ElementType.Style) { //We're currently in a style tag
						if (elementName.toLowerCase() == "/style") //Actually, we're no longer in a style tag, so pop it off the stack
							this._tagStack.pop();
						else {
							if (element.raw.indexOf("!--") != 0) { //Make sure we're not in a comment
								//All data from here to style close is now a text element
								element.type = ElementType.Text;
								//If the previous element is text, append the current text to it
								if (this._elements.length && this._elements[this._elements.length - 1].type == ElementType.Text) {
									var prevElement = this._elements[this._elements.length - 1];
									if (element.raw != "") {
										prevElement.raw = prevElement.data = prevElement.raw + this._prevTagSep + element.raw;
										element.raw = element.data = ""; //This causes the current element to not be added to the element list
									} else { //Element is empty, so just append the last tag marker found
										prevElement.raw = prevElement.data = prevElement.raw + this._prevTagSep;
									}
								} else { //The previous element was not text
									if (element.raw != "") {
										element.raw = element.data = element.raw;
									}
								}
							}
						}
					}
					else if (this._tagStack[this._tagStack.length - 1] == ElementType.Comment) { //We're currently in a comment tag
						var rawLen = element.raw.length;
						if (element.raw.charAt(rawLen - 2) == "-" && element.raw.charAt(rawLen - 1) == "-" && tagSep == ">") {
							//Actually, we're no longer in a style tag, so pop it off the stack
							this._tagStack.pop();
							//If the previous element is a comment, append the current text to it
							if (this._elements.length && this._elements[this._elements.length - 1].type == ElementType.Comment) {
								var prevElement = this._elements[this._elements.length - 1];
								prevElement.raw = prevElement.data = (prevElement.raw + element.raw).replace(Parser._reTrimComment, "");
								element.raw = element.data = ""; //This causes the current element to not be added to the element list
								element.type = ElementType.Text;
							}
							else //Previous element not a comment
								element.type = ElementType.Comment; //Change the current element's type to a comment
						}
						else { //Still in a comment tag
							element.type = ElementType.Comment;
							//If the previous element is a comment, append the current text to it
							if (this._elements.length && this._elements[this._elements.length - 1].type == ElementType.Comment) {
								var prevElement = this._elements[this._elements.length - 1];
								prevElement.raw = prevElement.data = prevElement.raw + element.raw + tagSep;
								element.raw = element.data = ""; //This causes the current element to not be added to the element list
								element.type = ElementType.Text;
							}
							else
								element.raw = element.data = element.raw + tagSep;
						}
					}
				}
		
				//Processing of non-special tags
				if (element.type == ElementType.Tag) {
					element.name = elementName;
					var elementNameCI = elementName.toLowerCase();
					
					if (element.raw.indexOf("!--") == 0) { //This tag is really comment
						element.type = ElementType.Comment;
						delete element["name"];
						var rawLen = element.raw.length;
						//Check if the comment is terminated in the current element
						if (element.raw.charAt(rawLen - 1) == "-" && element.raw.charAt(rawLen - 2) == "-" && tagSep == ">")
							element.raw = element.data = element.raw.replace(Parser._reTrimComment, "");
						else { //It's not so push the comment onto the tag stack
							element.raw += tagSep;
							this._tagStack.push(ElementType.Comment);
						}
					}
					else if (element.raw.indexOf("!") == 0 || element.raw.indexOf("?") == 0) {
						element.type = ElementType.Directive;
						//TODO: what about CDATA?
					}
					else if (elementNameCI == "script") {
						element.type = ElementType.Script;
						//Special tag, push onto the tag stack if not terminated
						if (element.data.charAt(element.data.length - 1) != "/")
							this._tagStack.push(ElementType.Script);
					}
					else if (elementNameCI == "/script")
						element.type = ElementType.Script;
					else if (elementNameCI == "style") {
						element.type = ElementType.Style;
						//Special tag, push onto the tag stack if not terminated
						if (element.data.charAt(element.data.length - 1) != "/")
							this._tagStack.push(ElementType.Style);
					}
					else if (elementNameCI == "/style")
						element.type = ElementType.Style;
					if (element.name && element.name.charAt(0) == "/")
						element.data = element.name;
				}
		
				//Add all tags and non-empty text elements to the element list
				if (element.raw != "" || element.type != ElementType.Text) {
					if (this._options.includeLocation && !element.location) {
						element.location = this.getLocation(element.type == ElementType.Tag);
					}
					this.parseAttribs(element);
					this._elements.push(element);
					//If tag self-terminates, add an explicit, separate closing tag
					if (
						element.type != ElementType.Text
						&&
						element.type != ElementType.Comment
						&&
						element.type != ElementType.Directive
						&&
						element.data.charAt(element.data.length - 1) == "/"
						)
						this._elements.push({
							  raw: "/" + element.name
							, data: "/" + element.name
							, name: "/" + element.name
							, type: element.type
						});
				}
				this._parseState = (tagSep == "<") ? ElementType.Tag : ElementType.Text;
				this._current = this._next + 1;
				this._prevTagSep = tagSep;
			}
	
			if (this._options.includeLocation) {
				this.getLocation();
				this._location.row += this._location.inBuffer;
				this._location.inBuffer = 0;
				this._location.charOffset = 0;
			}
			this._buffer = (this._current <= bufferEnd) ? this._buffer.substring(this._current) : "";
			this._current = 0;
		
			this.writeHandler();
		}
	
		Parser.prototype.getLocation = function Parser$getLocation (startTag) {
			var c,
				l = this._location,
				end = this._current - (startTag ? 1 : 0),
				chunk = startTag && l.charOffset == 0 && this._current == 0;
			
			for (; l.charOffset < end; l.charOffset++) {
				c = this._buffer.charAt(l.charOffset);
				if (c == '\n') {
					l.inBuffer++;
					l.col = 0;
				} else if (c != '\r') {
					l.col++;
				}
			}
			return {
				  line: l.row + l.inBuffer + 1
				, col: l.col + (chunk ? 0: 1)
			};
		}
	
		//Checks the handler to make it is an object with the right "interface"
		Parser.prototype.validateHandler = function Parser$validateHandler (handler) {
			if ((typeof handler) != "object")
				throw new Error("Handler is not an object");
			if ((typeof handler.reset) != "function")
				throw new Error("Handler method 'reset' is invalid");
			if ((typeof handler.done) != "function")
				throw new Error("Handler method 'done' is invalid");
			if ((typeof handler.writeTag) != "function")
				throw new Error("Handler method 'writeTag' is invalid");
			if ((typeof handler.writeText) != "function")
				throw new Error("Handler method 'writeText' is invalid");
			if ((typeof handler.writeComment) != "function")
				throw new Error("Handler method 'writeComment' is invalid");
			if ((typeof handler.writeDirective) != "function")
				throw new Error("Handler method 'writeDirective' is invalid");
		}
	
		//Writes parsed elements out to the handler
		Parser.prototype.writeHandler = function Parser$writeHandler (forceFlush) {
			forceFlush = !!forceFlush;
			if (this._tagStack.length && !forceFlush)
				return;
			while (this._elements.length) {
				var element = this._elements.shift();
				switch (element.type) {
					case ElementType.Comment:
						this._handler.writeComment(element);
						break;
					case ElementType.Directive:
						this._handler.writeDirective(element);
						break;
					case ElementType.Text:
						this._handler.writeText(element);
						break;
					default:
						this._handler.writeTag(element);
						break;
				}
			}
		}
	
		Parser.prototype.handleError = function Parser$handleError (error) {
			if ((typeof this._handler.error) == "function")
				this._handler.error(error);
			else
				throw error;
		}
	
	//TODO: make this a trully streamable handler
	function RssHandler (callback) {
		RssHandler.super_.call(this, callback, { ignoreWhitespace: true, verbose: false, enforceEmptyTags: false });
	}
	inherits(RssHandler, DefaultHandler);
	
		RssHandler.prototype.done = function RssHandler$done () {
			var feed = { };
			var feedRoot;
	
			var found = DomUtils.getElementsByTagName(function (value) { return(value == "rss" || value == "feed"); }, this.dom, false);
			if (found.length) {
				feedRoot = found[0];
			}
			if (feedRoot) {
				if (feedRoot.name == "rss") {
					feed.type = "rss";
					feedRoot = feedRoot.children[0]; //<channel/>
					feed.id = "";
					try {
						feed.title = DomUtils.getElementsByTagName("title", feedRoot.children, false)[0].children[0].data;
					} catch (ex) { }
					try {
						feed.link = DomUtils.getElementsByTagName("link", feedRoot.children, false)[0].children[0].data;
					} catch (ex) { }
					try {
						feed.description = DomUtils.getElementsByTagName("description", feedRoot.children, false)[0].children[0].data;
					} catch (ex) { }
					try {
						feed.updated = new Date(DomUtils.getElementsByTagName("lastBuildDate", feedRoot.children, false)[0].children[0].data);
					} catch (ex) { }
					try {
						feed.author = DomUtils.getElementsByTagName("managingEditor", feedRoot.children, false)[0].children[0].data;
					} catch (ex) { }
					feed.items = [];
					DomUtils.getElementsByTagName("item", feedRoot.children).forEach(function (item, index, list) {
						var entry = {};
						try {
							entry.id = DomUtils.getElementsByTagName("guid", item.children, false)[0].children[0].data;
						} catch (ex) { }
						try {
							entry.title = DomUtils.getElementsByTagName("title", item.children, false)[0].children[0].data;
						} catch (ex) { }
						try {
							entry.link = DomUtils.getElementsByTagName("link", item.children, false)[0].children[0].data;
						} catch (ex) { }
						try {
							entry.description = DomUtils.getElementsByTagName("description", item.children, false)[0].children[0].data;
						} catch (ex) { }
						try {
							entry.pubDate = new Date(DomUtils.getElementsByTagName("pubDate", item.children, false)[0].children[0].data);
						} catch (ex) { }
						feed.items.push(entry);
					});
				} else {
					feed.type = "atom";
					try {
						feed.id = DomUtils.getElementsByTagName("id", feedRoot.children, false)[0].children[0].data;
					} catch (ex) { }
					try {
						feed.title = DomUtils.getElementsByTagName("title", feedRoot.children, false)[0].children[0].data;
					} catch (ex) { }
					try {
						feed.link = DomUtils.getElementsByTagName("link", feedRoot.children, false)[0].attribs.href;
					} catch (ex) { }
					try {
						feed.description = DomUtils.getElementsByTagName("subtitle", feedRoot.children, false)[0].children[0].data;
					} catch (ex) { }
					try {
						feed.updated = new Date(DomUtils.getElementsByTagName("updated", feedRoot.children, false)[0].children[0].data);
					} catch (ex) { }
					try {
						feed.author = DomUtils.getElementsByTagName("email", feedRoot.children, true)[0].children[0].data;
					} catch (ex) { }
					feed.items = [];
					DomUtils.getElementsByTagName("entry", feedRoot.children).forEach(function (item, index, list) {
						var entry = {};
						try {
							entry.id = DomUtils.getElementsByTagName("id", item.children, false)[0].children[0].data;
						} catch (ex) { }
						try {
							entry.title = DomUtils.getElementsByTagName("title", item.children, false)[0].children[0].data;
						} catch (ex) { }
						try {
							entry.link = DomUtils.getElementsByTagName("link", item.children, false)[0].attribs.href;
						} catch (ex) { }
						try {
							entry.description = DomUtils.getElementsByTagName("summary", item.children, false)[0].children[0].data;
						} catch (ex) { }
						try {
							entry.pubDate = new Date(DomUtils.getElementsByTagName("updated", item.children, false)[0].children[0].data);
						} catch (ex) { }
						feed.items.push(entry);
					});
				}
	
				this.dom = feed;
			}
			RssHandler.super_.prototype.done.call(this);
		}
	
	///////////////////////////////////////////////////
	
	function DefaultHandler (callback, options) {
		this.reset();
		this._options = options ? options : { };
		if (this._options.ignoreWhitespace == undefined)
			this._options.ignoreWhitespace = false; //Keep whitespace-only text nodes
		if (this._options.verbose == undefined)
			this._options.verbose = true; //Keep data property for tags and raw property for all
		if (this._options.enforceEmptyTags == undefined)
			this._options.enforceEmptyTags = true; //Don't allow children for HTML tags defined as empty in spec
		if ((typeof callback) == "function")
			this._callback = callback;
	}
	
		//**"Static"**//
		//HTML Tags that shouldn't contain child nodes
		DefaultHandler._emptyTags = {
			  area: 1
			, base: 1
			, basefont: 1
			, br: 1
			, col: 1
			, frame: 1
			, hr: 1
			, img: 1
			, input: 1
			, isindex: 1
			, link: 1
			, meta: 1
			, param: 1
			, embed: 1
		}
		//Regex to detect whitespace only text nodes
		DefaultHandler.reWhitespace = /^\s*$/;
	
		//**Public**//
		//Properties//
		DefaultHandler.prototype.dom = null; //The hierarchical object containing the parsed HTML
		//Methods//
		//Resets the handler back to starting state
		DefaultHandler.prototype.reset = function DefaultHandler$reset() {
			this.dom = [];
			this._done = false;
			this._tagStack = [];
			this._tagStack.last = function DefaultHandler$_tagStack$last () {
				return(this.length ? this[this.length - 1] : null);
			}
		}
		//Signals the handler that parsing is done
		DefaultHandler.prototype.done = function DefaultHandler$done () {
			this._done = true;
			this.handleCallback(null);
		}
		DefaultHandler.prototype.writeTag = function DefaultHandler$writeTag (element) {
			this.handleElement(element);
		} 
		DefaultHandler.prototype.writeText = function DefaultHandler$writeText (element) {
			if (this._options.ignoreWhitespace)
				if (DefaultHandler.reWhitespace.test(element.data))
					return;
			this.handleElement(element);
		} 
		DefaultHandler.prototype.writeComment = function DefaultHandler$writeComment (element) {
			this.handleElement(element);
		} 
		DefaultHandler.prototype.writeDirective = function DefaultHandler$writeDirective (element) {
			this.handleElement(element);
		}
		DefaultHandler.prototype.error = function DefaultHandler$error (error) {
			this.handleCallback(error);
		}
	
		//**Private**//
		//Properties//
		DefaultHandler.prototype._options = null; //Handler options for how to behave
		DefaultHandler.prototype._callback = null; //Callback to respond to when parsing done
		DefaultHandler.prototype._done = false; //Flag indicating whether handler has been notified of parsing completed
		DefaultHandler.prototype._tagStack = null; //List of parents to the currently element being processed
		//Methods//
		DefaultHandler.prototype.handleCallback = function DefaultHandler$handleCallback (error) {
				if ((typeof this._callback) != "function")
					if (error)
						throw error;
					else
						return;
				this._callback(error, this.dom);
		}
		
		DefaultHandler.prototype.isEmptyTag = function(element) {
			var name = element.name.toLowerCase();
			if (name.charAt(0) == '/') {
				name = name.substring(1);
			}
			return this._options.enforceEmptyTags && !!DefaultHandler._emptyTags[name];
		};
		
		DefaultHandler.prototype.handleElement = function DefaultHandler$handleElement (element) {
			if (this._done)
				this.handleCallback(new Error("Writing to the handler after done() called is not allowed without a reset()"));
			if (!this._options.verbose) {
	//			element.raw = null; //FIXME: Not clean
				//FIXME: Serious performance problem using delete
				delete element.raw;
				if (element.type == "tag" || element.type == "script" || element.type == "style")
					delete element.data;
			}
			if (!this._tagStack.last()) { //There are no parent elements
				//If the element can be a container, add it to the tag stack and the top level list
				if (element.type != ElementType.Text && element.type != ElementType.Comment && element.type != ElementType.Directive) {
					if (element.name.charAt(0) != "/") { //Ignore closing tags that obviously don't have an opening tag
						this.dom.push(element);
						if (!this.isEmptyTag(element)) { //Don't add tags to the tag stack that can't have children
							this._tagStack.push(element);
						}
					}
				}
				else //Otherwise just add to the top level list
					this.dom.push(element);
			}
			else { //There are parent elements
				//If the element can be a container, add it as a child of the element
				//on top of the tag stack and then add it to the tag stack
				if (element.type != ElementType.Text && element.type != ElementType.Comment && element.type != ElementType.Directive) {
					if (element.name.charAt(0) == "/") {
						//This is a closing tag, scan the tagStack to find the matching opening tag
						//and pop the stack up to the opening tag's parent
						var baseName = element.name.substring(1);
						if (!this.isEmptyTag(element)) {
							var pos = this._tagStack.length - 1;
							while (pos > -1 && this._tagStack[pos--].name != baseName) { }
							if (pos > -1 || this._tagStack[0].name == baseName)
								while (pos < this._tagStack.length - 1)
									this._tagStack.pop();
						}
					}
					else { //This is not a closing tag
						if (!this._tagStack.last().children)
							this._tagStack.last().children = [];
						this._tagStack.last().children.push(element);
						if (!this.isEmptyTag(element)) //Don't add tags to the tag stack that can't have children
							this._tagStack.push(element);
					}
				}
				else { //This is not a container element
					if (!this._tagStack.last().children)
						this._tagStack.last().children = [];
					this._tagStack.last().children.push(element);
				}
			}
		}
	
		var DomUtils = {
			  testElement: function DomUtils$testElement (options, element) {
				if (!element) {
					return false;
				}
		
				for (var key in options) {
					if (key == "tag_name") {
						if (element.type != "tag" && element.type != "script" && element.type != "style") {
							return false;
						}
						if (!options["tag_name"](element.name)) {
							return false;
						}
					} else if (key == "tag_type") {
						if (!options["tag_type"](element.type)) {
							return false;
						}
					} else if (key == "tag_contains") {
						if (element.type != "text" && element.type != "comment" && element.type != "directive") {
							return false;
						}
						if (!options["tag_contains"](element.data)) {
							return false;
						}
					} else {
						if (!element.attribs || !options[key](element.attribs[key])) {
							return false;
						}
					}
				}
			
				return true;
			}
		
			, getElements: function DomUtils$getElements (options, currentElement, recurse, limit) {
				recurse = (recurse === undefined || recurse === null) || !!recurse;
				limit = isNaN(parseInt(limit)) ? -1 : parseInt(limit);
	
				if (!currentElement) {
					return([]);
				}
		
				var found = [];
				var elementList;
	
				function getTest (checkVal) {
					return(function (value) { return(value == checkVal); });
				}
				for (var key in options) {
					if ((typeof options[key]) != "function") {
						options[key] = getTest(options[key]);
					}
				}
		
				if (DomUtils.testElement(options, currentElement)) {
					found.push(currentElement);
				}
	
				if (limit >= 0 && found.length >= limit) {
					return(found);
				}
	
				if (recurse && currentElement.children) {
					elementList = currentElement.children;
				} else if (currentElement instanceof Array) {
					elementList = currentElement;
				} else {
					return(found);
				}
		
				for (var i = 0; i < elementList.length; i++) {
					found = found.concat(DomUtils.getElements(options, elementList[i], recurse, limit));
					if (limit >= 0 && found.length >= limit) {
						break;
					}
				}
		
				return(found);
			}
			
			, getElementById: function DomUtils$getElementById (id, currentElement, recurse) {
				var result = DomUtils.getElements({ id: id }, currentElement, recurse, 1);
				return(result.length ? result[0] : null);
			}
			
			, getElementsByTagName: function DomUtils$getElementsByTagName (name, currentElement, recurse, limit) {
				return(DomUtils.getElements({ tag_name: name }, currentElement, recurse, limit));
			}
			
			, getElementsByTagType: function DomUtils$getElementsByTagType (type, currentElement, recurse, limit) {
				return(DomUtils.getElements({ tag_type: type }, currentElement, recurse, limit));
			}
		}
	
		function inherits (ctor, superCtor) {
			var tempCtor = function(){};
			tempCtor.prototype = superCtor.prototype;
			ctor.super_ = superCtor;
			ctor.prototype = new tempCtor();
			ctor.prototype.constructor = ctor;
		}
	
	exports.Parser = Parser;
	
	exports.DefaultHandler = DefaultHandler;
	
	exports.RssHandler = RssHandler;
	
	exports.ElementType = ElementType;
	
	exports.DomUtils = DomUtils;
	
	})();
	
	/* WEBPACK VAR INJECTION */}.call(exports, "/index.js", "/"))

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.CSSStyleDeclaration = __webpack_require__(132).CSSStyleDeclaration;
	exports.CSSRule = __webpack_require__(133).CSSRule;
	exports.CSSStyleRule = __webpack_require__(134).CSSStyleRule;
	exports.MediaList = __webpack_require__(135).MediaList;
	exports.CSSMediaRule = __webpack_require__(136).CSSMediaRule;
	exports.CSSImportRule = __webpack_require__(137).CSSImportRule;
	exports.CSSFontFaceRule = __webpack_require__(138).CSSFontFaceRule;
	exports.StyleSheet = __webpack_require__(139).StyleSheet;
	exports.CSSStyleSheet = __webpack_require__(140).CSSStyleSheet;
	exports.CSSKeyframesRule = __webpack_require__(141).CSSKeyframesRule;
	exports.CSSKeyframeRule = __webpack_require__(142).CSSKeyframeRule;
	exports.parse = __webpack_require__(143).parse;
	exports.clone = __webpack_require__(144).clone;


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {/*********************************************************************
	 * This is a fork from the CSS Style Declaration part of
	 * https://github.com/NV/CSSOM
	 ********************************************************************/
	"use strict";
	var CSSOM = __webpack_require__(969);
	var fs = __webpack_require__(22);
	var path = __webpack_require__(156);
	
	var camelToDashed = __webpack_require__(130).camelToDashed;
	
	/**
	 * @constructor
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration
	 */
	var CSSStyleDeclaration = function CSSStyleDeclaration() {
	    this._values = {};
	    this._importants = {};
	    this._length = 0;
	};
	CSSStyleDeclaration.prototype = {
	    constructor: CSSStyleDeclaration,
	
	    /**
	     *
	     * @param {string} name
	     * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-getPropertyValue
	     * @return {string} the value of the property if it has been explicitly set for this declaration block.
	     * Returns the empty string if the property has not been set.
	     */
	    getPropertyValue: function (name) {
	        return this._values[name] || "";
	    },
	
	    /**
	     *
	     * @param {string} name
	     * @param {string} value
	     * @param {string} [priority=null] "important" or null
	     * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-setProperty
	     */
	    setProperty: function (name, value, priority) {
	        if (value === undefined) {
	            return;
	        }
	        if (value === null || value === '') {
	            this.removeProperty(name);
	            return;
	        }
	        if (this._values[name]) {
	            // Property already exist. Overwrite it.
	            var index = Array.prototype.indexOf.call(this, name);
	            if (index < 0) {
	                this[this._length] = name;
	                this._length++;
	            }
	        } else {
	            // New property.
	            this[this._length] = name;
	            this._length++;
	        }
	        this._values[name] = value;
	        this._importants[name] = priority;
	    },
	
	    /**
	     *
	     * @param {string} name
	     * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-removeProperty
	     * @return {string} the value of the property if it has been explicitly set for this declaration block.
	     * Returns the empty string if the property has not been set or the property name does not correspond to a known CSS property.
	     */
	    removeProperty: function (name) {
	        if (!this._values.hasOwnProperty(name)) {
	            return "";
	        }
	        var index = Array.prototype.indexOf.call(this, name);
	        if (index < 0) {
	            return "";
	        }
	        var prevValue = this._values[name];
	        delete this._values[name];
	
	        // That's what WebKit and Opera do
	        Array.prototype.splice.call(this, index, 1);
	
	        // That's what Firefox does
	        //this[index] = ""
	
	        return prevValue;
	    },
	
	
	    /**
	     *
	     * @param {String} name
	     */
	    getPropertyPriority: function (name) {
	        return this._importants[name] || "";
	    },
	
	
	    getPropertyCSSValue: function () {
	        //FIXME
	        return;
	    },
	
	    /**
	     *   element.style.overflow = "auto"
	     *   element.style.getPropertyShorthand("overflow-x")
	     *   -> "overflow"
	     */
	    getPropertyShorthand: function () {
	        //FIXME
	        return;
	    },
	
	    isPropertyImplicit: function () {
	        //FIXME
	        return;
	    },
	
	    /**
	     *   http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-item
	     */
	    item: function (index) {
	        index = parseInt(index, 10);
	        if (index < 0 || index >= this._length) {
	            return '';
	        }
	        return this[index];
	    }
	};
	
	Object.defineProperties(CSSStyleDeclaration.prototype, {
	    cssText: {
	        get: function () {
	            var properties = [];
	            var i;
	            var name;
	            var value;
	            var priority;
	            for (i = 0; i < this._length; i++) {
	                name = this[i];
	                value = this.getPropertyValue(name);
	                priority = this.getPropertyPriority(name);
	                if (priority !== '') {
	                    priority = " !" + priority;
	                }
	                properties.push([name, ': ', value, priority, ';'].join(''));
	            }
	            return properties.join(' ');
	        },
	        set: function (value) {
	            var i;
	            this._values = {};
	            Array.prototype.splice.call(this, 0, this._length);
	            this._importants = {};
	            var dummyRule = CSSOM.parse('#bogus{' + value + '}').cssRules[0].style;
	            var rule_length = dummyRule.length;
	            var name;
	            for (i = 0; i < rule_length; ++i) {
	                name = dummyRule[i];
	                this.setProperty(dummyRule[i], dummyRule.getPropertyValue(name), dummyRule.getPropertyPriority(name));
	            }
	        },
	        enumerable: true,
	        configurable: true
	    },
	    parentRule: {
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    },
	    length: {
	        get: function () { return this._length; },
	        /**
	         * This deletes indices if the new length is less then the current
	         * length. If the new length is more, it does nothing, the new indices
	         * will be undefined until set.
	         **/
	        set: function (value) {
	            var i;
	            for (i = value; i < this._length; i++) {
	                delete this[i];
	            }
	            this._length = value;
	        },
	        enumerable: true,
	        configurable: true
	    }
	});
	
	var LazyDefinition = function (property, modulePath) {
	    this.get = function () {
	        var definition = __webpack_require__(131)(modulePath).definition;
	        Object.defineProperty(this, property, definition);
	        return this[property];
	    };
	
	    this.set = function (v) {
	        var definition = __webpack_require__(131)(modulePath).definition;
	        Object.defineProperty(this, property, definition);
	        this[property] = v;
	    };
	
	    this.enumerable = true;
	    this.configurable = true;
	};
	
	/*
	 *
	 * http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSS2Properties
	 */
	var property_files = fs.readdirSync(__dirname + '/properties');
	property_files.forEach(function (property) {
	    var dashed;
	    if (property.substr(-3) === '.js') {
	        property = path.basename(property, '.js');
	        dashed = camelToDashed(property);
	        Object.defineProperty(CSSStyleDeclaration.prototype, property, new LazyDefinition(property, './properties/' + property));
	        Object.defineProperty(CSSStyleDeclaration.prototype, dashed, new LazyDefinition(property, './properties/' + property));
	    }
	});
	
	exports.CSSStyleDeclaration = CSSStyleDeclaration;
	
	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }
	
	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};
	
	
	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }
	
	  if (process.noDeprecation === true) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	};
	
	
	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};
	
	
	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;
	
	
	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};
	
	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};
	
	
	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];
	
	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}
	
	
	function stylizeNoColor(str, styleType) {
	  return str;
	}
	
	
	function arrayToHash(array) {
	  var hash = {};
	
	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });
	
	  return hash;
	}
	
	
	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }
	
	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }
	
	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);
	
	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }
	
	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }
	
	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }
	
	  var base = '', array = false, braces = ['{', '}'];
	
	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }
	
	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }
	
	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }
	
	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }
	
	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }
	
	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }
	
	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }
	
	  ctx.seen.push(value);
	
	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }
	
	  ctx.seen.pop();
	
	  return reduceToSingleString(output, base, braces);
	}
	
	
	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}
	
	
	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}
	
	
	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}
	
	
	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }
	
	  return name + ': ' + str;
	}
	
	
	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);
	
	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }
	
	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}
	
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = __webpack_require__(157);
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	
	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}
	
	
	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];
	
	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}
	
	
	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};
	
	
	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(968);
	
	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;
	
	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};
	
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(14)))

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;
	
	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;
	
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;
	
	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;
	
	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};
	
	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;
	
	  if (!this._events)
	    this._events = {};
	
	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        throw TypeError('Uncaught, unspecified "error" event.');
	      }
	      return false;
	    }
	  }
	
	  handler = this._events[type];
	
	  if (isUndefined(handler))
	    return false;
	
	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        len = arguments.length;
	        args = new Array(len - 1);
	        for (i = 1; i < len; i++)
	          args[i - 1] = arguments[i];
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    len = arguments.length;
	    args = new Array(len - 1);
	    for (i = 1; i < len; i++)
	      args[i - 1] = arguments[i];
	
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }
	
	  return true;
	};
	
	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events)
	    this._events = {};
	
	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);
	
	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];
	
	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    var m;
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }
	
	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.on = EventEmitter.prototype.addListener;
	
	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  var fired = false;
	
	  function g() {
	    this.removeListener(type, g);
	
	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }
	
	  g.listener = listener;
	  this.on(type, g);
	
	  return this;
	};
	
	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events || !this._events[type])
	    return this;
	
	  list = this._events[type];
	  length = list.length;
	  position = -1;
	
	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	
	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }
	
	    if (position < 0)
	      return this;
	
	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }
	
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;
	
	  if (!this._events)
	    return this;
	
	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }
	
	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }
	
	  listeners = this._events[type];
	
	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];
	
	  return this;
	};
	
	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};
	
	EventEmitter.listenerCount = function(emitter, type) {
	  var ret;
	  if (!emitter._events || !emitter._events[type])
	    ret = 0;
	  else if (isFunction(emitter._events[type]))
	    ret = 1;
	  else
	    ret = emitter._events[type].length;
	  return ret;
	};
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	
	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(module) {
	  try {
	    return __webpack_require__(149)(module);
	  } catch (e) {}
	};


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var util = __webpack_require__(102)
	
	module.exports =
	function debug () {
	  if (/\brequest\b/.test(process.env.NODE_DEBUG))
	    console.error('REQUEST %s', util.format.apply(util, arguments))
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	// Safe toJSON
	module.exports =
	function getSafe (self, uuid) {
	  if (typeof self === 'object' || typeof self === 'function') var safe = {}
	  if (Array.isArray(self)) var safe = []
	
	  var recurse = []
	
	  Object.defineProperty(self, uuid, {})
	
	  var attrs = Object.keys(self).filter(function (i) {
	    if (i === uuid) return false
	    if ( (typeof self[i] !== 'object' && typeof self[i] !== 'function') || self[i] === null) return true
	    return !(Object.getOwnPropertyDescriptor(self[i], uuid))
	  })
	
	
	  for (var i=0;i<attrs.length;i++) {
	    if ( (typeof self[attrs[i]] !== 'object' && typeof self[attrs[i]] !== 'function') ||
	          self[attrs[i]] === null
	        ) {
	      safe[attrs[i]] = self[attrs[i]]
	    } else {
	      recurse.push(attrs[i])
	      Object.defineProperty(self[attrs[i]], uuid, {})
	    }
	  }
	
	  for (var i=0;i<recurse.length;i++) {
	    safe[recurse[i]] = getSafe(self[recurse[i]], uuid)
	  }
	
	  return safe
	}

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	exports.read = function(buffer, offset, isLE, mLen, nBytes) {
	  var e, m,
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      nBits = -7,
	      i = isLE ? (nBytes - 1) : 0,
	      d = isLE ? -1 : 1,
	      s = buffer[offset + i];
	
	  i += d;
	
	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
	
	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
	
	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity);
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
	};
	
	exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c,
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
	      i = isLE ? 0 : (nBytes - 1),
	      d = isLE ? 1 : -1,
	      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;
	
	  value = Math.abs(value);
	
	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }
	
	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }
	
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
	
	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
	
	  buffer[offset + i - d] |= s * 128;
	};


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(module) {
	  try {
	    return __webpack_require__(159)(module);
	  } catch (e) {}
	};


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var util = __webpack_require__(102)
	
	module.exports =
	function debug () {
	  if (/\brequest\b/.test(process.env.NODE_DEBUG))
	    console.error('REQUEST %s', util.format.apply(util, arguments))
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	// Safe toJSON
	module.exports =
	function getSafe (self, uuid) {
	  if (typeof self === 'object' || typeof self === 'function') var safe = {}
	  if (Array.isArray(self)) var safe = []
	
	  var recurse = []
	
	  Object.defineProperty(self, uuid, {})
	
	  var attrs = Object.keys(self).filter(function (i) {
	    if (i === uuid) return false
	    if ( (typeof self[i] !== 'object' && typeof self[i] !== 'function') || self[i] === null) return true
	    return !(Object.getOwnPropertyDescriptor(self[i], uuid))
	  })
	
	
	  for (var i=0;i<attrs.length;i++) {
	    if ( (typeof self[attrs[i]] !== 'object' && typeof self[attrs[i]] !== 'function') ||
	          self[attrs[i]] === null
	        ) {
	      safe[attrs[i]] = self[attrs[i]]
	    } else {
	      recurse.push(attrs[i])
	      Object.defineProperty(self[attrs[i]], uuid, {})
	    }
	  }
	
	  for (var i=0;i<recurse.length;i++) {
	    safe[recurse[i]] = getSafe(self[recurse[i]], uuid)
	  }
	
	  return safe
	}

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration
	 */
	CSSOM.CSSStyleDeclaration = function CSSStyleDeclaration(){
		this.length = 0;
		this.parentRule = null;
	
		// NON-STANDARD
		this._importants = {};
	};
	
	
	CSSOM.CSSStyleDeclaration.prototype = {
	
		constructor: CSSOM.CSSStyleDeclaration,
	
		/**
		 *
		 * @param {string} name
		 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-getPropertyValue
		 * @return {string} the value of the property if it has been explicitly set for this declaration block.
		 * Returns the empty string if the property has not been set.
		 */
		getPropertyValue: function(name) {
			return this[name] || "";
		},
	
		/**
		 *
		 * @param {string} name
		 * @param {string} value
		 * @param {string} [priority=null] "important" or null
		 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-setProperty
		 */
		setProperty: function(name, value, priority) {
			if (this[name]) {
				// Property already exist. Overwrite it.
				var index = Array.prototype.indexOf.call(this, name);
				if (index < 0) {
					this[this.length] = name;
					this.length++;
				}
			} else {
				// New property.
				this[this.length] = name;
				this.length++;
			}
			this[name] = value;
			this._importants[name] = priority;
		},
	
		/**
		 *
		 * @param {string} name
		 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-removeProperty
		 * @return {string} the value of the property if it has been explicitly set for this declaration block.
		 * Returns the empty string if the property has not been set or the property name does not correspond to a known CSS property.
		 */
		removeProperty: function(name) {
			if (!(name in this)) {
				return "";
			}
			var index = Array.prototype.indexOf.call(this, name);
			if (index < 0) {
				return "";
			}
			var prevValue = this[name];
			this[name] = "";
	
			// That's what WebKit and Opera do
			Array.prototype.splice.call(this, index, 1);
	
			// That's what Firefox does
			//this[index] = ""
	
			return prevValue;
		},
	
		getPropertyCSSValue: function() {
			//FIXME
		},
	
		/**
		 *
		 * @param {String} name
		 */
		getPropertyPriority: function(name) {
			return this._importants[name] || "";
		},
	
	
		/**
		 *   element.style.overflow = "auto"
		 *   element.style.getPropertyShorthand("overflow-x")
		 *   -> "overflow"
		 */
		getPropertyShorthand: function() {
			//FIXME
		},
	
		isPropertyImplicit: function() {
			//FIXME
		},
	
		// Doesn't work in IE < 9
		get cssText(){
			var properties = [];
			for (var i=0, length=this.length; i < length; ++i) {
				var name = this[i];
				var value = this.getPropertyValue(name);
				var priority = this.getPropertyPriority(name);
				if (priority) {
					priority = " !" + priority;
				}
				properties[i] = name + ": " + value + priority + ";";
			}
			return properties.join(" ");
		},
	
		set cssText(cssText){
			var i, name;
			for (i = this.length; i--;) {
				name = this[i];
				this[name] = "";
			}
			Array.prototype.splice.call(this, 0, this.length);
			this._importants = {};
	
			var dummyRule = CSSOM.parse('#bogus{' + cssText + '}').cssRules[0].style;
			var length = dummyRule.length;
			for (i = 0; i < length; ++i) {
				name = dummyRule[i];
				this.setProperty(dummyRule[i], dummyRule.getPropertyValue(name), dummyRule.getPropertyPriority(name));
			}
		}
	};
	
	
	//.CommonJS
	exports.CSSStyleDeclaration = CSSOM.CSSStyleDeclaration;
	CSSOM.parse = __webpack_require__(122).parse; // Cannot be included sooner due to the mutual dependency between parse.js and CSSStyleDeclaration.js
	///CommonJS


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#the-cssrule-interface
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSRule
	 */
	CSSOM.CSSRule = function CSSRule() {
		this.parentRule = null;
		this.parentStyleSheet = null;
	};
	
	CSSOM.CSSRule.STYLE_RULE = 1;
	CSSOM.CSSRule.IMPORT_RULE = 3;
	CSSOM.CSSRule.MEDIA_RULE = 4;
	CSSOM.CSSRule.FONT_FACE_RULE = 5;
	CSSOM.CSSRule.PAGE_RULE = 6;
	CSSOM.CSSRule.WEBKIT_KEYFRAMES_RULE = 8;
	CSSOM.CSSRule.WEBKIT_KEYFRAME_RULE = 9;
	
	// Obsolete in CSSOM http://dev.w3.org/csswg/cssom/
	//CSSOM.CSSRule.UNKNOWN_RULE = 0;
	//CSSOM.CSSRule.CHARSET_RULE = 2;
	
	// Never implemented
	//CSSOM.CSSRule.VARIABLES_RULE = 7;
	
	CSSOM.CSSRule.prototype = {
		constructor: CSSOM.CSSRule
		//FIXME
	};
	
	
	//.CommonJS
	exports.CSSRule = CSSOM.CSSRule;
	///CommonJS


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSStyleDeclaration: __webpack_require__(111).CSSStyleDeclaration,
		CSSRule: __webpack_require__(112).CSSRule
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#cssstylerule
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleRule
	 */
	CSSOM.CSSStyleRule = function CSSStyleRule() {
		CSSOM.CSSRule.call(this);
		this.selectorText = "";
		this.style = new CSSOM.CSSStyleDeclaration;
		this.style.parentRule = this;
	};
	
	CSSOM.CSSStyleRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSStyleRule.prototype.constructor = CSSOM.CSSStyleRule;
	CSSOM.CSSStyleRule.prototype.type = 1;
	
	CSSOM.CSSStyleRule.prototype.__defineGetter__("cssText", function() {
		var text;
		if (this.selectorText) {
			text = this.selectorText + " {" + this.style.cssText + "}";
		} else {
			text = "";
		}
		return text;
	});
	
	CSSOM.CSSStyleRule.prototype.__defineSetter__("cssText", function(cssText) {
		var rule = CSSOM.CSSStyleRule.parse(cssText);
		this.style = rule.style;
		this.selectorText = rule.selectorText;
	});
	
	
	/**
	 * NON-STANDARD
	 * lightweight version of parse.js.
	 * @param {string} ruleText
	 * @return CSSStyleRule
	 */
	CSSOM.CSSStyleRule.parse = function(ruleText) {
		var i = 0;
		var state = "selector";
		var index;
		var j = i;
		var buffer = "";
	
		var SIGNIFICANT_WHITESPACE = {
			"selector": true,
			"value": true
		};
	
		var styleRule = new CSSOM.CSSStyleRule;
		var selector, name, value, priority="";
	
		for (var character; character = ruleText.charAt(i); i++) {
	
			switch (character) {
	
			case " ":
			case "\t":
			case "\r":
			case "\n":
			case "\f":
				if (SIGNIFICANT_WHITESPACE[state]) {
					// Squash 2 or more white-spaces in the row into 1
					switch (ruleText.charAt(i - 1)) {
						case " ":
						case "\t":
						case "\r":
						case "\n":
						case "\f":
							break;
						default:
							buffer += " ";
							break;
					}
				}
				break;
	
			// String
			case '"':
				j = i + 1;
				index = ruleText.indexOf('"', j) + 1;
				if (!index) {
					throw '" is missing';
				}
				buffer += ruleText.slice(i, index);
				i = index - 1;
				break;
	
			case "'":
				j = i + 1;
				index = ruleText.indexOf("'", j) + 1;
				if (!index) {
					throw "' is missing";
				}
				buffer += ruleText.slice(i, index);
				i = index - 1;
				break;
	
			// Comment
			case "/":
				if (ruleText.charAt(i + 1) === "*") {
					i += 2;
					index = ruleText.indexOf("*/", i);
					if (index === -1) {
						throw new SyntaxError("Missing */");
					} else {
						i = index + 1;
					}
				} else {
					buffer += character;
				}
				break;
	
			case "{":
				if (state === "selector") {
					styleRule.selectorText = buffer.trim();
					buffer = "";
					state = "name";
				}
				break;
	
			case ":":
				if (state === "name") {
					name = buffer.trim();
					buffer = "";
					state = "value";
				} else {
					buffer += character;
				}
				break;
	
			case "!":
				if (state === "value" && ruleText.indexOf("!important", i) === i) {
					priority = "important";
					i += "important".length;
				} else {
					buffer += character;
				}
				break;
	
			case ";":
				if (state === "value") {
					styleRule.style.setProperty(name, buffer.trim(), priority);
					priority = "";
					buffer = "";
					state = "name";
				} else {
					buffer += character;
				}
				break;
	
			case "}":
				if (state === "value") {
					styleRule.style.setProperty(name, buffer.trim(), priority);
					priority = "";
					buffer = "";
				} else if (state === "name") {
					break;
				} else {
					buffer += character;
				}
				state = "selector";
				break;
	
			default:
				buffer += character;
				break;
	
			}
		}
	
		return styleRule;
	
	};
	
	
	//.CommonJS
	exports.CSSStyleRule = CSSOM.CSSStyleRule;
	///CommonJS


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#the-medialist-interface
	 */
	CSSOM.MediaList = function MediaList(){
		this.length = 0;
	};
	
	CSSOM.MediaList.prototype = {
	
		constructor: CSSOM.MediaList,
	
		/**
		 * @return {string}
		 */
		get mediaText() {
			return Array.prototype.join.call(this, ", ");
		},
	
		/**
		 * @param {string} value
		 */
		set mediaText(value) {
			var values = value.split(",");
			var length = this.length = values.length;
			for (var i=0; i<length; i++) {
				this[i] = values[i].trim();
			}
		},
	
		/**
		 * @param {string} medium
		 */
		appendMedium: function(medium) {
			if (Array.prototype.indexOf.call(this, medium) === -1) {
				this[this.length] = medium;
				this.length++;
			}
		},
	
		/**
		 * @param {string} medium
		 */
		deleteMedium: function(medium) {
			var index = Array.prototype.indexOf.call(this, medium);
			if (index !== -1) {
				Array.prototype.splice.call(this, index, 1);
			}
		}
	
	};
	
	
	//.CommonJS
	exports.MediaList = CSSOM.MediaList;
	///CommonJS


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSRule: __webpack_require__(112).CSSRule,
		MediaList: __webpack_require__(114).MediaList
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#cssmediarule
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSMediaRule
	 */
	CSSOM.CSSMediaRule = function CSSMediaRule() {
		CSSOM.CSSRule.call(this);
		this.media = new CSSOM.MediaList;
		this.cssRules = [];
	};
	
	CSSOM.CSSMediaRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSMediaRule.prototype.constructor = CSSOM.CSSMediaRule;
	CSSOM.CSSMediaRule.prototype.type = 4;
	//FIXME
	//CSSOM.CSSMediaRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSMediaRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;
	
	// http://opensource.apple.com/source/WebCore/WebCore-658.28/css/CSSMediaRule.cpp
	CSSOM.CSSMediaRule.prototype.__defineGetter__("cssText", function() {
		var cssTexts = [];
		for (var i=0, length=this.cssRules.length; i < length; i++) {
			cssTexts.push(this.cssRules[i].cssText);
		}
		return "@media " + this.media.mediaText + " {" + cssTexts.join("") + "}";
	});
	
	
	//.CommonJS
	exports.CSSMediaRule = CSSOM.CSSMediaRule;
	///CommonJS


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSRule: __webpack_require__(112).CSSRule,
		CSSStyleSheet: __webpack_require__(119).CSSStyleSheet,
		MediaList: __webpack_require__(114).MediaList
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#cssimportrule
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSImportRule
	 */
	CSSOM.CSSImportRule = function CSSImportRule() {
		CSSOM.CSSRule.call(this);
		this.href = "";
		this.media = new CSSOM.MediaList;
		this.styleSheet = new CSSOM.CSSStyleSheet;
	};
	
	CSSOM.CSSImportRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSImportRule.prototype.constructor = CSSOM.CSSImportRule;
	CSSOM.CSSImportRule.prototype.type = 3;
	CSSOM.CSSImportRule.prototype.__defineGetter__("cssText", function() {
		var mediaText = this.media.mediaText;
		return "@import url(" + this.href + ")" + (mediaText ? " " + mediaText : "") + ";";
	});
	
	CSSOM.CSSImportRule.prototype.__defineSetter__("cssText", function(cssText) {
		var i = 0;
	
		/**
		 * @import url(partial.css) screen, handheld;
		 *        ||               |
		 *        after-import     media
		 *         |
		 *         url
		 */
		var state = '';
	
		var buffer = '';
		var index;
		var mediaText = '';
		for (var character; character = cssText.charAt(i); i++) {
	
			switch (character) {
				case ' ':
				case '\t':
				case '\r':
				case '\n':
				case '\f':
					if (state === 'after-import') {
						state = 'url';
					} else {
						buffer += character;
					}
					break;
	
				case '@':
					if (!state && cssText.indexOf('@import', i) === i) {
						state = 'after-import';
						i += 'import'.length;
						buffer = '';
					}
					break;
	
				case 'u':
					if (state === 'url' && cssText.indexOf('url(', i) === i) {
						index = cssText.indexOf(')', i + 1);
						if (index === -1) {
							throw i + ': ")" not found';
						}
						i += 'url('.length;
						var url = cssText.slice(i, index);
						if (url[0] === url[url.length - 1]) {
							if (url[0] === '"' || url[0] === "'") {
								url = url.slice(1, -1);
							}
						}
						this.href = url;
						i = index;
						state = 'media';
					}
					break;
	
				case '"':
					if (state === 'url') {
						index = cssText.indexOf('"', i + 1);
						if (!index) {
							throw i + ": '\"' not found";
						}
						this.href = cssText.slice(i + 1, index);
						i = index;
						state = 'media';
					}
					break;
	
				case "'":
					if (state === 'url') {
						index = cssText.indexOf("'", i + 1);
						if (!index) {
							throw i + ': "\'" not found';
						}
						this.href = cssText.slice(i + 1, index);
						i = index;
						state = 'media';
					}
					break;
	
				case ';':
					if (state === 'media') {
						if (buffer) {
							this.media.mediaText = buffer.trim();
						}
					}
					break;
	
				default:
					if (state === 'media') {
						buffer += character;
					}
					break;
			}
		}
	});
	
	
	//.CommonJS
	exports.CSSImportRule = CSSOM.CSSImportRule;
	///CommonJS


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSStyleDeclaration: __webpack_require__(111).CSSStyleDeclaration,
		CSSRule: __webpack_require__(112).CSSRule
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#css-font-face-rule
	 */
	CSSOM.CSSFontFaceRule = function CSSFontFaceRule() {
		CSSOM.CSSRule.call(this);
		this.style = new CSSOM.CSSStyleDeclaration;
		this.style.parentRule = this;
	};
	
	CSSOM.CSSFontFaceRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSFontFaceRule.prototype.constructor = CSSOM.CSSFontFaceRule;
	CSSOM.CSSFontFaceRule.prototype.type = 5;
	//FIXME
	//CSSOM.CSSFontFaceRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSFontFaceRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;
	
	// http://www.opensource.apple.com/source/WebCore/WebCore-955.66.1/css/WebKitCSSFontFaceRule.cpp
	CSSOM.CSSFontFaceRule.prototype.__defineGetter__("cssText", function() {
		return "@font-face {" + this.style.cssText + "}";
	});
	
	
	//.CommonJS
	exports.CSSFontFaceRule = CSSOM.CSSFontFaceRule;
	///CommonJS


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#the-stylesheet-interface
	 */
	CSSOM.StyleSheet = function StyleSheet() {
		this.parentStyleSheet = null;
	};
	
	
	//.CommonJS
	exports.StyleSheet = CSSOM.StyleSheet;
	///CommonJS


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		StyleSheet: __webpack_require__(118).StyleSheet,
		CSSStyleRule: __webpack_require__(113).CSSStyleRule
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet
	 */
	CSSOM.CSSStyleSheet = function CSSStyleSheet() {
		CSSOM.StyleSheet.call(this);
		this.cssRules = [];
	};
	
	
	CSSOM.CSSStyleSheet.prototype = new CSSOM.StyleSheet;
	CSSOM.CSSStyleSheet.prototype.constructor = CSSOM.CSSStyleSheet;
	
	
	/**
	 * Used to insert a new rule into the style sheet. The new rule now becomes part of the cascade.
	 *
	 *   sheet = new Sheet("body {margin: 0}")
	 *   sheet.toString()
	 *   -> "body{margin:0;}"
	 *   sheet.insertRule("img {border: none}", 0)
	 *   -> 0
	 *   sheet.toString()
	 *   -> "img{border:none;}body{margin:0;}"
	 *
	 * @param {string} rule
	 * @param {number} index
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet-insertRule
	 * @return {number} The index within the style sheet's rule collection of the newly inserted rule.
	 */
	CSSOM.CSSStyleSheet.prototype.insertRule = function(rule, index) {
		if (index < 0 || index > this.cssRules.length) {
			throw new RangeError("INDEX_SIZE_ERR");
		}
		var cssRule = CSSOM.parse(rule).cssRules[0];
		this.cssRules.splice(index, 0, cssRule);
		return index;
	};
	
	
	/**
	 * Used to delete a rule from the style sheet.
	 *
	 *   sheet = new Sheet("img{border:none} body{margin:0}")
	 *   sheet.toString()
	 *   -> "img{border:none;}body{margin:0;}"
	 *   sheet.deleteRule(0)
	 *   sheet.toString()
	 *   -> "body{margin:0;}"
	 *
	 * @param {number} index within the style sheet's rule list of the rule to remove.
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet-deleteRule
	 */
	CSSOM.CSSStyleSheet.prototype.deleteRule = function(index) {
		if (index < 0 || index >= this.cssRules.length) {
			throw new RangeError("INDEX_SIZE_ERR");
		}
		this.cssRules.splice(index, 1);
	};
	
	
	/**
	 * NON-STANDARD
	 * @return {string} serialize stylesheet
	 */
	CSSOM.CSSStyleSheet.prototype.toString = function() {
		var result = "";
		var rules = this.cssRules;
		for (var i=0; i<rules.length; i++) {
			result += rules[i].cssText + "\n";
		}
		return result;
	};
	
	
	//.CommonJS
	exports.CSSStyleSheet = CSSOM.CSSStyleSheet;
	CSSOM.parse = __webpack_require__(122).parse; // Cannot be included sooner due to the mutual dependency between parse.js and CSSStyleSheet.js
	///CommonJS


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSRule: __webpack_require__(112).CSSRule
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://www.w3.org/TR/css3-animations/#DOM-CSSKeyframesRule
	 */
	CSSOM.CSSKeyframesRule = function CSSKeyframesRule() {
		CSSOM.CSSRule.call(this);
		this.name = '';
		this.cssRules = [];
	};
	
	CSSOM.CSSKeyframesRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSKeyframesRule.prototype.constructor = CSSOM.CSSKeyframesRule;
	CSSOM.CSSKeyframesRule.prototype.type = 8;
	//FIXME
	//CSSOM.CSSKeyframesRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSKeyframesRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;
	
	// http://www.opensource.apple.com/source/WebCore/WebCore-955.66.1/css/WebKitCSSKeyframesRule.cpp
	CSSOM.CSSKeyframesRule.prototype.__defineGetter__("cssText", function() {
		var cssTexts = [];
		for (var i=0, length=this.cssRules.length; i < length; i++) {
			cssTexts.push("  " + this.cssRules[i].cssText);
		}
		return "@" + (this._vendorPrefix || '') + "keyframes " + this.name + " { \n" + cssTexts.join("\n") + "\n}";
	});
	
	
	//.CommonJS
	exports.CSSKeyframesRule = CSSOM.CSSKeyframesRule;
	///CommonJS


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSRule: __webpack_require__(112).CSSRule,
		CSSStyleDeclaration: __webpack_require__(111).CSSStyleDeclaration
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://www.w3.org/TR/css3-animations/#DOM-CSSKeyframeRule
	 */
	CSSOM.CSSKeyframeRule = function CSSKeyframeRule() {
		CSSOM.CSSRule.call(this);
		this.keyText = '';
		this.style = new CSSOM.CSSStyleDeclaration;
		this.style.parentRule = this;
	};
	
	CSSOM.CSSKeyframeRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSKeyframeRule.prototype.constructor = CSSOM.CSSKeyframeRule;
	CSSOM.CSSKeyframeRule.prototype.type = 9;
	//FIXME
	//CSSOM.CSSKeyframeRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSKeyframeRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;
	
	// http://www.opensource.apple.com/source/WebCore/WebCore-955.66.1/css/WebKitCSSKeyframeRule.cpp
	CSSOM.CSSKeyframeRule.prototype.__defineGetter__("cssText", function() {
		return this.keyText + " {" + this.style.cssText + "} ";
	});
	
	
	//.CommonJS
	exports.CSSKeyframeRule = CSSOM.CSSKeyframeRule;
	///CommonJS


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @param {string} token
	 */
	CSSOM.parse = function parse(token) {
	
		var i = 0;
	
		/**
		  "before-selector" or
		  "selector" or
		  "atRule" or
		  "atBlock" or
		  "before-name" or
		  "name" or
		  "before-value" or
		  "value"
		*/
		var state = "before-selector";
	
		var index;
		var buffer = "";
	
		var SIGNIFICANT_WHITESPACE = {
			"selector": true,
			"value": true,
			"atRule": true,
			"importRule-begin": true,
			"importRule": true,
			"atBlock": true
		};
	
		var styleSheet = new CSSOM.CSSStyleSheet;
	
		// @type CSSStyleSheet|CSSMediaRule|CSSFontFaceRule|CSSKeyframesRule
		var currentScope = styleSheet;
	
		// @type CSSMediaRule|CSSKeyframesRule
		var parentRule;
	
		var selector, name, value, priority="", styleRule, mediaRule, importRule, fontFaceRule, keyframesRule, keyframeRule;
	
		var atKeyframesRegExp = /@(-(?:\w+-)+)?keyframes/g;
	
		var parseError = function(message) {
			var lines = token.substring(0, i).split('\n');
			var lineCount = lines.length;
			var charCount = lines.pop().length + 1;
			var error = new Error(message + ' (line ' + lineCount + ', char ' + charCount + ')');
			error.line = lineCount;
			error.char = charCount;
			error.styleSheet = styleSheet;
			throw error;
		};
	
		for (var character; character = token.charAt(i); i++) {
	
			switch (character) {
	
			case " ":
			case "\t":
			case "\r":
			case "\n":
			case "\f":
				if (SIGNIFICANT_WHITESPACE[state]) {
					buffer += character;
				}
				break;
	
			// String
			case '"':
				index = token.indexOf('"', i + 1) + 1;
				if (!index) {
					parseError('Unmatched "');
				}
				buffer += token.slice(i, index);
				i = index - 1;
				switch (state) {
					case 'before-value':
						state = 'value';
						break;
					case 'importRule-begin':
						state = 'importRule';
						break;
				}
				break;
	
			case "'":
				index = token.indexOf("'", i + 1) + 1;
				if (!index) {
					parseError("Unmatched '");
				}
				buffer += token.slice(i, index);
				i = index - 1;
				switch (state) {
					case 'before-value':
						state = 'value';
						break;
					case 'importRule-begin':
						state = 'importRule';
						break;
				}
				break;
	
			// Comment
			case "/":
				if (token.charAt(i + 1) === "*") {
					i += 2;
					index = token.indexOf("*/", i);
					if (index === -1) {
						parseError("Missing */");
					} else {
						i = index + 1;
					}
				} else {
					buffer += character;
				}
				if (state === "importRule-begin") {
					buffer += " ";
					state = "importRule";
				}
				break;
	
			// At-rule
			case "@":
				if (token.indexOf("@media", i) === i) {
					state = "atBlock";
					mediaRule = new CSSOM.CSSMediaRule;
					mediaRule.__starts = i;
					i += "media".length;
					buffer = "";
					break;
				} else if (token.indexOf("@import", i) === i) {
					state = "importRule-begin";
					i += "import".length;
					buffer += "@import";
					break;
				} else if (token.indexOf("@font-face", i) === i) {
					state = "fontFaceRule-begin";
					i += "font-face".length;
					fontFaceRule = new CSSOM.CSSFontFaceRule;
					fontFaceRule.__starts = i;
					buffer = "";
					break;
				} else {
					atKeyframesRegExp.lastIndex = i;
					var matchKeyframes = atKeyframesRegExp.exec(token);
					if (matchKeyframes && matchKeyframes.index === i) {
						state = "keyframesRule-begin";
						keyframesRule = new CSSOM.CSSKeyframesRule;
						keyframesRule.__starts = i;
						keyframesRule._vendorPrefix = matchKeyframes[1]; // Will come out as undefined if no prefix was found
						i += matchKeyframes[0].length - 1;
						buffer = "";
						break;
					} else if (state == "selector") {
						state = "atRule";
					}
				}
				buffer += character;
				break;
	
			case "{":
				if (state === "selector" || state === "atRule") {
					styleRule.selectorText = buffer.trim();
					styleRule.style.__starts = i;
					buffer = "";
					state = "before-name";
				} else if (state === "atBlock") {
					mediaRule.media.mediaText = buffer.trim();
					currentScope = parentRule = mediaRule;
					mediaRule.parentStyleSheet = styleSheet;
					buffer = "";
					state = "before-selector";
				} else if (state === "fontFaceRule-begin") {
					if (parentRule) {
						fontFaceRule.parentRule = parentRule;
					}
					fontFaceRule.parentStyleSheet = styleSheet;
					styleRule = fontFaceRule;
					buffer = "";
					state = "before-name";
				} else if (state === "keyframesRule-begin") {
					keyframesRule.name = buffer.trim();
					if (parentRule) {
						keyframesRule.parentRule = parentRule;
					}
					keyframesRule.parentStyleSheet = styleSheet;
					currentScope = parentRule = keyframesRule;
					buffer = "";
					state = "keyframeRule-begin";
				} else if (state === "keyframeRule-begin") {
					styleRule = new CSSOM.CSSKeyframeRule;
					styleRule.keyText = buffer.trim();
					styleRule.__starts = i;
					buffer = "";
					state = "before-name";
				}
				break;
	
			case ":":
				if (state === "name") {
					name = buffer.trim();
					buffer = "";
					state = "before-value";
				} else {
					buffer += character;
				}
				break;
	
			case '(':
				if (state === 'value') {
					index = token.indexOf(')', i + 1);
					if (index === -1) {
						parseError('Unmatched "("');
					}
					buffer += token.slice(i, index + 1);
					i = index;
				} else {
					buffer += character;
				}
				break;
	
			case "!":
				if (state === "value" && token.indexOf("!important", i) === i) {
					priority = "important";
					i += "important".length;
				} else {
					buffer += character;
				}
				break;
	
			case ";":
				switch (state) {
					case "value":
						styleRule.style.setProperty(name, buffer.trim(), priority);
						priority = "";
						buffer = "";
						state = "before-name";
						break;
					case "atRule":
						buffer = "";
						state = "before-selector";
						break;
					case "importRule":
						importRule = new CSSOM.CSSImportRule;
						importRule.parentStyleSheet = importRule.styleSheet.parentStyleSheet = styleSheet;
						importRule.cssText = buffer + character;
						styleSheet.cssRules.push(importRule);
						buffer = "";
						state = "before-selector";
						break;
					default:
						buffer += character;
						break;
				}
				break;
	
			case "}":
				switch (state) {
					case "value":
						styleRule.style.setProperty(name, buffer.trim(), priority);
						priority = "";
					case "before-name":
					case "name":
						styleRule.__ends = i + 1;
						if (parentRule) {
							styleRule.parentRule = parentRule;
						}
						styleRule.parentStyleSheet = styleSheet;
						currentScope.cssRules.push(styleRule);
						buffer = "";
						if (currentScope.constructor === CSSOM.CSSKeyframesRule) {
							state = "keyframeRule-begin";
						} else {
							state = "before-selector";
						}
						break;
					case "keyframeRule-begin":
					case "before-selector":
					case "selector":
						// End of media rule.
						if (!parentRule) {
							parseError("Unexpected }");
						}
						currentScope.__ends = i + 1;
						// Nesting rules aren't supported yet
						styleSheet.cssRules.push(currentScope);
						currentScope = styleSheet;
						parentRule = null;
						buffer = "";
						state = "before-selector";
						break;
				}
				break;
	
			default:
				switch (state) {
					case "before-selector":
						state = "selector";
						styleRule = new CSSOM.CSSStyleRule;
						styleRule.__starts = i;
						break;
					case "before-name":
						state = "name";
						break;
					case "before-value":
						state = "value";
						break;
					case "importRule-begin":
						state = "importRule";
						break;
				}
				buffer += character;
				break;
			}
		}
	
		return styleSheet;
	};
	
	
	//.CommonJS
	exports.parse = CSSOM.parse;
	// The following modules cannot be included sooner due to the mutual dependency with parse.js
	CSSOM.CSSStyleSheet = __webpack_require__(119).CSSStyleSheet;
	CSSOM.CSSStyleRule = __webpack_require__(113).CSSStyleRule;
	CSSOM.CSSImportRule = __webpack_require__(116).CSSImportRule;
	CSSOM.CSSMediaRule = __webpack_require__(115).CSSMediaRule;
	CSSOM.CSSFontFaceRule = __webpack_require__(117).CSSFontFaceRule;
	CSSOM.CSSStyleDeclaration = __webpack_require__(111).CSSStyleDeclaration;
	CSSOM.CSSKeyframeRule = __webpack_require__(121).CSSKeyframeRule;
	CSSOM.CSSKeyframesRule = __webpack_require__(120).CSSKeyframesRule;
	///CommonJS


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSStyleSheet: __webpack_require__(119).CSSStyleSheet,
		CSSStyleRule: __webpack_require__(113).CSSStyleRule,
		CSSMediaRule: __webpack_require__(115).CSSMediaRule,
		CSSStyleDeclaration: __webpack_require__(111).CSSStyleDeclaration,
		CSSKeyframeRule: __webpack_require__(121).CSSKeyframeRule,
		CSSKeyframesRule: __webpack_require__(120).CSSKeyframesRule
	};
	///CommonJS
	
	
	/**
	 * Produces a deep copy of stylesheet â the instance variables of stylesheet are copied recursively.
	 * @param {CSSStyleSheet|CSSOM.CSSStyleSheet} stylesheet
	 * @nosideeffects
	 * @return {CSSOM.CSSStyleSheet}
	 */
	CSSOM.clone = function clone(stylesheet) {
	
		var cloned = new CSSOM.CSSStyleSheet;
	
		var rules = stylesheet.cssRules;
		if (!rules) {
			return cloned;
		}
	
		var RULE_TYPES = {
			1: CSSOM.CSSStyleRule,
			4: CSSOM.CSSMediaRule,
			//3: CSSOM.CSSImportRule,
			//5: CSSOM.CSSFontFaceRule,
			//6: CSSOM.CSSPageRule,
			8: CSSOM.CSSKeyframesRule,
			9: CSSOM.CSSKeyframeRule
		};
	
		for (var i=0, rulesLength=rules.length; i < rulesLength; i++) {
			var rule = rules[i];
			var ruleClone = cloned.cssRules[i] = new RULE_TYPES[rule.type];
	
			var style = rule.style;
			if (style) {
				var styleClone = ruleClone.style = new CSSOM.CSSStyleDeclaration;
				for (var j=0, styleLength=style.length; j < styleLength; j++) {
					var name = styleClone[j] = style[j];
					styleClone[name] = style[name];
					styleClone._importants[name] = style.getPropertyPriority(name);
				}
				styleClone.length = style.length;
			}
	
			if (rule.hasOwnProperty('keyText')) {
				ruleClone.keyText = rule.keyText;
			}
	
			if (rule.hasOwnProperty('selectorText')) {
				ruleClone.selectorText = rule.selectorText;
			}
	
			if (rule.hasOwnProperty('mediaText')) {
				ruleClone.mediaText = rule.mediaText;
			}
	
			if (rule.hasOwnProperty('cssRules')) {
				ruleClone.cssRules = clone(rule).cssRules;
			}
		}
	
		return cloned;
	
	};
	
	//.CommonJS
	exports.clone = CSSOM.clone;
	///CommonJS


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/*********************************************************************
	 * These are commonly used parsers for CSS Values they take a string *
	 * to parse and return a string after it's been converted, if needed *
	 ********************************************************************/
	'use strict';
	
	exports.TYPES = {
	    INTEGER: 1,
	    NUMBER: 2,
	    LENGTH: 3,
	    PERCENT: 4,
	    URL: 5,
	    COLOR: 6,
	    STRING: 7,
	    ANGLE: 8,
	    KEYWORD: 9,
	    NULL_OR_EMPTY_STR: 10
	};
	
	/*jslint regexp: true*/
	// rough regular expressions
	var integerRegEx = /^[\-+]?[0-9]+$/;
	var numberRegEx = /^[\-+]?[0-9]*\.[0-9]+$/;
	var lengthRegEx = /^(0|[\-+]?[0-9]?\.?[0-9]+(in|cm|em|mm|pt|pc|px))$/;
	var percentRegEx = /^[\-+]?[0-9]?\.?[0-9]+%$/;
	var urlRegEx = /^url\(\s*([^\)]*)\s*\)$/;
	var stringRegEx = /^("[^"]*"|'[^']*')$/;
	var colorRegEx1 = /^#[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]([0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])?$/;
	var colorRegEx2 = /^rgb\(([^\)]*)\)$/;
	var colorRegEx3 = /^rgba\(([^\)]*)\)$/;
	var angleRegEx = /^([\-+]?[0-9]?\.?[0-9]+)(deg|grad|rad)$/;
	/*jslint regexp: false*/
	
	// This will return one of the above types based on the passed in string
	exports.valueType = function valueType(val) {
	    if (val === '' || val === null) {
	        return exports.TYPES.NULL_OR_EMPTY_STR;
	    }
	    if (typeof val === 'number') {
	        val = val.toString();
	    }
	
	    if (typeof val !== 'string') {
	        return undefined;
	    }
	
	    if (integerRegEx.test(val)) {
	        return exports.TYPES.INTEGER;
	    }
	    if (numberRegEx.test(val)) {
	        return exports.TYPES.NUMBER;
	    }
	    if (lengthRegEx.test(val)) {
	        return exports.TYPES.LENGTH;
	    }
	    if (percentRegEx.test(val)) {
	        return exports.TYPES.PERCENT;
	    }
	    if (urlRegEx.test(val)) {
	        return exports.TYPES.URL;
	    }
	    if (stringRegEx.test(val)) {
	        return exports.TYPES.STRING;
	    }
	    if (angleRegEx.test(val)) {
	        return exports.TYPES.ANGLE;
	    }
	    if (colorRegEx1.test(val)) {
	        return exports.TYPES.COLOR;
	    }
	    var res = colorRegEx2.exec(val);
	    var parts;
	    if (res !== null) {
	        parts = res[1].split(/\s*,\s*/);
	        if (parts.length !== 3) {
	            return undefined;
	        }
	        if (parts.every(percentRegEx.test.bind(percentRegEx)) || parts.every(integerRegEx.test.bind(integerRegEx))) {
	            return exports.TYPES.COLOR;
	        }
	        return undefined;
	    }
	    res = colorRegEx3.exec(val);
	    if (res !== null) {
	        parts = res[1].split(/\s*,\s*/);
	        if (parts.length !== 4) {
	            return undefined;
	        }
	        if (parts.slice(0, 3).every(percentRegEx.test.bind(percentRegEx)) || parts.every(integerRegEx.test.bind(integerRegEx))) {
	            if (numberRegEx.test(parts[3])) {
	                return exports.TYPES.COLOR;
	            }
	        }
	        return undefined;
	    }
	
	    // could still be a color, one of the standard keyword colors
	    val = val.toLowerCase();
	    switch (val) {
	    case 'maroon':
	    case 'red':
	    case 'orange':
	    case 'yellow':
	    case 'olive':
	    case 'purple':
	    case 'fuchsia':
	    case 'white':
	    case 'lime':
	    case 'green':
	    case 'navy':
	    case 'blue':
	    case 'aqua':
	    case 'teal':
	    case 'black':
	    case 'silver':
	    case 'gray':
	        // the following are deprecated in CSS3
	    case 'activeborder':
	    case 'activecaption':
	    case 'appworkspace':
	    case 'background':
	    case 'buttonface':
	    case 'buttonhighlight':
	    case 'buttonshadow':
	    case 'buttontext':
	    case 'captiontext':
	    case 'graytext':
	    case 'highlight':
	    case 'highlighttext':
	    case 'inactiveborder':
	    case 'inactivecaption':
	    case 'inactivecaptiontext':
	    case 'infobackground':
	    case 'infotext':
	    case 'menu':
	    case 'menutext':
	    case 'scrollbar':
	    case 'threeddarkshadow':
	    case 'threedface':
	    case 'threedhighlight':
	    case 'threedlightshadow':
	    case 'threedshadow':
	    case 'window':
	    case 'windowframe':
	    case 'windowtext':
	        return exports.TYPES.COLOR;
	    default:
	        return exports.TYPES.KEYWORD;
	    }
	};
	
	exports.parseInteger = function parseInteger(val) {
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    if (type !== exports.TYPES.INTEGER) {
	        return undefined;
	    }
	    return String(parseInt(val, 10));
	};
	
	exports.parseNumber = function parseNumber(val) {
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    if (type !== exports.TYPES.NUMBER) {
	        return undefined;
	    }
	    return String(parseFloat(val));
	};
	
	exports.parseLength = function parseLength(val) {
	    if (val === 0 || val === '0') {
	        return '0px';
	    }
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    if (type !== exports.TYPES.LENGTH) {
	        return undefined;
	    }
	    return val;
	};
	
	exports.parsePercent = function parsePercent(val) {
	    if (val === 0 || val === '0') {
	        return '0%';
	    }
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    if (type !== exports.TYPES.PERCENT) {
	        return undefined;
	    }
	    return val;
	};
	
	// either a length or a percent
	exports.parseMeasurement = function parseMeasurement(val) {
	    var length = exports.parseLength(val);
	    if (length !== undefined) {
	        return length;
	    }
	    return exports.parsePercent(val);
	};
	
	exports.parseUrl = function parseUrl(val) {
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    var res = urlRegEx.exec(val);
	    // does it match the regex?
	    if (!res) {
	        return undefined;
	    }
	    var str = res[1];
	    // if it starts with single or double quotes, does it end with the same?
	    if ((str[1] === '"' || str[1] === "'") && str[1] !== str[str.length - 1]) {
	        return undefined;
	    }
	    if (str[1] === '"' || str[1] === "'") {
	        str = str.substr(1, -1);
	    }
	
	    var i;
	    for (i = 0; i < str.length; i++) {
	        switch (str[i]) {
	        case '(':
	        case ')':
	        case ' ':
	        case '\t':
	        case '\n':
	        case "'":
	        case '"':
	            return undefined;
	        case '\\':
	            i++;
	            break;
	        }
	    }
	    return 'url(' + str + ')';
	};
	
	exports.parseString = function parseString(val) {
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    if (type !== exports.TYPES.STRING) {
	        return undefined;
	    }
	    var i;
	    for (i = 1; i < val.length - 1; i++) {
	        switch (val[i]) {
	        case val[0]:
	            return undefined;
	        case '\\':
	            i++;
	            while (i < val.length - 1 && /[0-9A-Fa-f]/.test(val[i])) {
	                i++;
	            }
	            break;
	        }
	    }
	    if (i >= val.length) {
	        return undefined;
	    }
	    return val;
	};
	
	exports.parseColor = function parseColor(val) {
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    var red, green, blue, alpha = 1;
	    var parts;
	    var res = colorRegEx1.exec(val);
	    // is it #aaa or #ababab
	    if (res) {
	        var hex = val.substr(1);
	        if (hex.length === 3) {
	            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
	        }
	        red = parseInt(hex.substr(0, 2), 16);
	        green = parseInt(hex.substr(2, 2), 16);
	        blue = parseInt(hex.substr(4, 2), 16);
	        return 'rgb(' + red + ', ' + green + ', ' + blue + ')';
	    }
	
	    res = colorRegEx2.exec(val);
	    if (res) {
	        parts = res[1].split(/\s*,\s*/);
	        if (parts.length !== 3) {
	            return undefined;
	        }
	        if (parts.every(percentRegEx.test.bind(percentRegEx))) {
	            red = Math.floor(parseFloat(parts[0].slice(0, -1)) * 255 / 100);
	            green = Math.floor(parseFloat(parts[1].slice(0, -1)) * 255 / 100);
	            blue = Math.floor(parseFloat(parts[2].slice(0, -1)) * 255 / 100);
	        } else if (parts.every(integerRegEx.test.bind(integerRegEx))) {
	            red = parseInt(parts[0], 10);
	            green = parseInt(parts[1], 10);
	            blue = parseInt(parts[2], 10);
	        } else {
	            return undefined;
	        }
	        red = Math.min(255, Math.max(0, red));
	        green = Math.min(255, Math.max(0, green));
	        blue = Math.min(255, Math.max(0, blue));
	        return 'rgb(' + red + ', ' + green + ', ' + blue + ')';
	    }
	
	    res = colorRegEx3.exec(val);
	    if (res) {
	        parts = res[1].split(/\s*,\s*/);
	        if (parts.length !== 4) {
	            return undefined;
	        }
	        if (parts.slice(0, 3).every(percentRegEx.test.bind(percentRegEx))) {
	            red = Math.floor(parseFloat(parts[0].slice(0, -1)) * 255 / 100);
	            green = Math.floor(parseFloat(parts[1].slice(0, -1)) * 255 / 100);
	            blue = Math.floor(parseFloat(parts[2].slice(0, -1)) * 255 / 100);
	            alpha = parseFloat(parts[3]);
	        } else if (parts.slice(0, 3).every(integerRegEx.test.bind(integerRegEx))) {
	            red = parseInt(parts[0], 10);
	            green = parseInt(parts[1], 10);
	            blue = parseInt(parts[2], 10);
	            alpha = parseFloat(parts[3]);
	        } else {
	            return undefined;
	        }
	        if (isNaN(alpha)) {
	            alpha = 1;
	        }
	        red = Math.min(255, Math.max(0, red));
	        green = Math.min(255, Math.max(0, green));
	        blue = Math.min(255, Math.max(0, blue));
	        alpha = Math.min(1, Math.max(0, alpha));
	        if (alpha === 1) {
	            return 'rgb(' + red + ', ' + green + ', ' + blue + ')';
	        }
	        return 'rgba(' + red + ', ' + green + ', ' + blue + ', ' + alpha + ')';
	    }
	
	    if (type === exports.TYPES.COLOR) {
	        return val;
	    }
	    return undefined;
	};
	
	exports.parseAngle = function parseAngle(val) {
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    if (type !== exports.TYPES.ANGLE) {
	        return undefined;
	    }
	    var res = angleRegEx.exec(val);
	    var flt = parseFloat(res[1]);
	    if (res[2] === 'rad') {
	        flt *= 180 / Math.PI;
	    } else if (res[2] === 'grad') {
	        flt *= 360 / 400;
	    }
	
	    while (flt < 0) {
	        flt += 360;
	    }
	    while (flt > 360) {
	        flt -= 360;
	    }
	    return flt + 'deg';
	};
	
	exports.parseKeyword = function parseKeyword(val, valid_keywords) {
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    if (type !== exports.TYPES.KEYWORD) {
	        return undefined;
	    }
	    val = val.toString().toLowerCase();
	    var i;
	    for (i = 0; i < valid_keywords.length; i++) {
	        if (valid_keywords[i].toLowerCase() === val) {
	            return valid_keywords[i];
	        }
	    }
	    return undefined;
	};
	
	// utility to translate from border-width to borderWidth
	var dashedToCamelCase = function (dashed) {
	    var i;
	    var camel = '';
	    var nextCap = false;
	    for (i = 0; i < dashed.length; i++) {
	        if (dashed[i] !== '-') {
	            camel += nextCap ? dashed[i].toUpperCase() : dashed[i];
	            nextCap = false;
	        } else {
	            nextCap = true;
	        }
	    }
	    return camel;
	};
	
	var is_space = /\s/;
	var opening_deliminators = ['"', '\'', '('];
	var closing_deliminators = ['"', '\'', ')'];
	// this splits on whitespace, but keeps quoted and parened parts together
	var getParts = function (str) {
	    var deliminator_stack = [];
	    var length = str.length;
	    var i;
	    var parts = [];
	    var current_part = '';
	    var opening_index;
	    var closing_index;
	    for (i = 0; i < length; i++) {
	        opening_index = opening_deliminators.indexOf(str[i]);
	        closing_index = closing_deliminators.indexOf(str[i]);
	        if (is_space.test(str[i])) {
	            if (deliminator_stack.length === 0) {
	                parts.push(current_part);
	                current_part = '';
	            } else {
	                current_part += str[i];
	            }
	        } else {
	            if (str[i] === '\\') {
	                i++;
	                current_part += str[i];
	            } else {
	                current_part += str[i];
	                if (closing_index !== -1 && closing_index === deliminator_stack[deliminator_stack.length - 1]) {
	                    deliminator_stack.pop();
	                } else if (opening_index !== -1) {
	                    deliminator_stack.push(opening_index);
	                }
	            }
	        }
	    }
	    if (current_part !== '') {
	        parts.push(current_part);
	    }
	    return parts;
	};
	
	/*
	 * this either returns undefined meaning that it isn't valid
	 * or returns an object where the keys are dashed short
	 * hand properties and the values are the values to set
	 * on them
	 */
	exports.shorthandParser = function parse(v, shorthand_for) {
	    var type = exports.valueType(v);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return v;
	    }
	
	    if (typeof v === 'number') {
	        v = v.toString();
	    }
	
	    if (typeof v !== 'string') {
	        return undefined;
	    }
	
	    if (v.toLowerCase() === 'inherit') {
	        return {};
	    }
	    var parts = getParts(v);
	    var valid = true;
	    var obj = {};
	    parts.forEach(function (part) {
	        var part_valid = false;
	        Object.keys(shorthand_for).forEach(function (property) {
	            if (shorthand_for[property].isValid(part)) {
	                part_valid = true;
	                obj[property] = part;
	            }
	        });
	        valid = valid && part_valid;
	    });
	    if (!valid) {
	        return undefined;
	    }
	    return obj;
	};
	
	exports.shorthandSetter = function (property, shorthand_for) {
	    return function (v) {
	        var obj = exports.shorthandParser(v, shorthand_for);
	        if (obj === undefined) {
	            return;
	        }
	        Object.keys(obj).forEach(function (subprop) {
	            // in case subprop is an implicit property, this will clear
	            // *its* subpropertiesX
	            var camel = dashedToCamelCase(subprop);
	            this[camel] = obj[subprop];
	            // in case it gets translated into something else (0 -> 0px)
	            obj[subprop] = this[camel];
	            this.removeProperty(subprop);
	            this._values[subprop] = obj[subprop];
	        }, this);
	        Object.keys(shorthand_for).forEach(function (subprop) {
	            if (!obj.hasOwnProperty(subprop)) {
	                this.removeProperty(subprop);
	                delete this._values[subprop];
	            }
	        }, this);
	        this.setProperty(property, v);
	    };
	};
	
	exports.shorthandGetter = function (property, shorthand_for) {
	    return function () {
	        if (this._values[property] !== undefined) {
	            return this.getPropertyValue(property);
	        }
	        return Object.keys(shorthand_for).map(function (subprop) {
	            return this.getPropertyValue(subprop);
	        }, this).filter(function (value) {
	            return value !== '';
	        }).join(' ');
	    };
	};
	
	// isValid(){1,4} | inherit
	// if one, it applies to all
	// if two, the first applies to the top and bottom, and the second to left and right
	// if three, the first applies to the top, the second to left and right, the third bottom
	// if four, top, right, bottom, left
	exports.implicitSetter = function (property_before, property_after, isValid, parser) {
	    property_after = property_after || '';
	    if (property_after !== '') {
	        property_after = '-' + property_after;
	    }
	
	    return function (v) {
	        if (typeof v === 'number') {
	            v = v.toString();
	        }
	        if (typeof v !== 'string') {
	            return undefined;
	        }
	        if (v.toLowerCase() === 'inherit') {
	            return this.setProperty(property_before + property_after, v);
	        }
	        var parts = getParts(v);
	        if (parts.length < 1 || parts.length > 4) {
	            return undefined;
	        }
	
	        if (!parts.every(isValid)) {
	            return undefined;
	        }
	
	        this.setProperty(property_before + property_after, parser(v));
	
	        this.removeProperty(property_before + '-top' + property_after);
	        this.removeProperty(property_before + '-right' + property_after);
	        this.removeProperty(property_before + '-bottom' + property_after);
	        this.removeProperty(property_before + '-left' + property_after);
	        switch (parts.length) {
	        case 1:
	            this._values[property_before + '-top' + property_after] = parser(parts[0]);
	            this._values[property_before + '-right' + property_after] = parser(parts[0]);
	            this._values[property_before + '-bottom' + property_after] = parser(parts[0]);
	            this._values[property_before + '-left' + property_after] = parser(parts[0]);
	            return v;
	        case 2:
	            this._values[property_before + '-top' + property_after] = parser(parts[0]);
	            this._values[property_before + '-right' + property_after] = parser(parts[1]);
	            this._values[property_before + '-bottom' + property_after] = parser(parts[0]);
	            this._values[property_before + '-left' + property_after] = parser(parts[1]);
	            return v;
	        case 3:
	            this._values[property_before + '-top' + property_after] = parser(parts[0]);
	            this._values[property_before + '-right' + property_after] = parser(parts[1]);
	            this._values[property_before + '-bottom' + property_after] = parser(parts[2]);
	            this._values[property_before + '-left' + property_after] = parser(parts[1]);
	            return v;
	        case 4:
	            this._values[property_before + '-top' + property_after] = parser(parts[0]);
	            this._values[property_before + '-right' + property_after] = parser(parts[1]);
	            this._values[property_before + '-bottom' + property_after] = parser(parts[2]);
	            this._values[property_before + '-left' + property_after] = parser(parts[3]);
	            return v;
	        }
	    };
	};
	
	var camel_to_dashed = /[A-Z]/g;
	/*jslint regexp: true*/
	var first_segment = /^\([^\-]\)-/;
	/*jslint regexp: false*/
	var vendor_prefixes = ['o', 'moz', 'ms', 'webkit'];
	exports.camelToDashed = function (camel_case) {
	    var match;
	    var dashed = camel_case.replace(camel_to_dashed, '-$&').toLowerCase();
	    match = dashed.match(first_segment);
	    if (match && vendor_prefixes.indexOf(match[1]) !== -1) {
	        dashed = '-' + dashed;
	    }
	    return dashed;
	};


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./CSSStyleDeclaration": 93,
		"./CSSStyleDeclaration.js": 93,
		"./css3-properties/borderImage": 165,
		"./css3-properties/borderImage.js": 165,
		"./css3-properties/borderImageOutset": 166,
		"./css3-properties/borderImageOutset.js": 166,
		"./css3-properties/borderImageRepeat": 167,
		"./css3-properties/borderImageRepeat.js": 167,
		"./css3-properties/borderImageSlice": 168,
		"./css3-properties/borderImageSlice.js": 168,
		"./css3-properties/borderImageSource": 169,
		"./css3-properties/borderImageSource.js": 169,
		"./css3-properties/borderImageWidth": 170,
		"./css3-properties/borderImageWidth.js": 170,
		"./parsers": 124,
		"./parsers.js": 124,
		"./properties/alignmentBaseline": 171,
		"./properties/alignmentBaseline.js": 171,
		"./properties/azimuth": 172,
		"./properties/azimuth.js": 172,
		"./properties/background": 173,
		"./properties/background.js": 173,
		"./properties/backgroundAttachment": 174,
		"./properties/backgroundAttachment.js": 174,
		"./properties/backgroundClip": 175,
		"./properties/backgroundClip.js": 175,
		"./properties/backgroundColor": 176,
		"./properties/backgroundColor.js": 176,
		"./properties/backgroundImage": 177,
		"./properties/backgroundImage.js": 177,
		"./properties/backgroundOrigin": 178,
		"./properties/backgroundOrigin.js": 178,
		"./properties/backgroundPosition": 179,
		"./properties/backgroundPosition.js": 179,
		"./properties/backgroundPositionX": 180,
		"./properties/backgroundPositionX.js": 180,
		"./properties/backgroundPositionY": 181,
		"./properties/backgroundPositionY.js": 181,
		"./properties/backgroundRepeat": 182,
		"./properties/backgroundRepeat.js": 182,
		"./properties/backgroundRepeatX": 183,
		"./properties/backgroundRepeatX.js": 183,
		"./properties/backgroundRepeatY": 184,
		"./properties/backgroundRepeatY.js": 184,
		"./properties/backgroundSize": 185,
		"./properties/backgroundSize.js": 185,
		"./properties/baselineShift": 186,
		"./properties/baselineShift.js": 186,
		"./properties/border": 187,
		"./properties/border.js": 187,
		"./properties/borderBottom": 188,
		"./properties/borderBottom.js": 188,
		"./properties/borderBottomColor": 189,
		"./properties/borderBottomColor.js": 189,
		"./properties/borderBottomLeftRadius": 190,
		"./properties/borderBottomLeftRadius.js": 190,
		"./properties/borderBottomRightRadius": 191,
		"./properties/borderBottomRightRadius.js": 191,
		"./properties/borderBottomStyle": 192,
		"./properties/borderBottomStyle.js": 192,
		"./properties/borderBottomWidth": 193,
		"./properties/borderBottomWidth.js": 193,
		"./properties/borderCollapse": 194,
		"./properties/borderCollapse.js": 194,
		"./properties/borderColor": 195,
		"./properties/borderColor.js": 195,
		"./properties/borderImage": 196,
		"./properties/borderImage.js": 196,
		"./properties/borderImageOutset": 197,
		"./properties/borderImageOutset.js": 197,
		"./properties/borderImageRepeat": 198,
		"./properties/borderImageRepeat.js": 198,
		"./properties/borderImageSlice": 199,
		"./properties/borderImageSlice.js": 199,
		"./properties/borderImageSource": 200,
		"./properties/borderImageSource.js": 200,
		"./properties/borderImageWidth": 201,
		"./properties/borderImageWidth.js": 201,
		"./properties/borderLeft": 202,
		"./properties/borderLeft.js": 202,
		"./properties/borderLeftColor": 203,
		"./properties/borderLeftColor.js": 203,
		"./properties/borderLeftStyle": 204,
		"./properties/borderLeftStyle.js": 204,
		"./properties/borderLeftWidth": 205,
		"./properties/borderLeftWidth.js": 205,
		"./properties/borderRadius": 206,
		"./properties/borderRadius.js": 206,
		"./properties/borderRight": 207,
		"./properties/borderRight.js": 207,
		"./properties/borderRightColor": 208,
		"./properties/borderRightColor.js": 208,
		"./properties/borderRightStyle": 209,
		"./properties/borderRightStyle.js": 209,
		"./properties/borderRightWidth": 210,
		"./properties/borderRightWidth.js": 210,
		"./properties/borderSpacing": 211,
		"./properties/borderSpacing.js": 211,
		"./properties/borderStyle": 212,
		"./properties/borderStyle.js": 212,
		"./properties/borderTop": 213,
		"./properties/borderTop.js": 213,
		"./properties/borderTopColor": 214,
		"./properties/borderTopColor.js": 214,
		"./properties/borderTopLeftRadius": 215,
		"./properties/borderTopLeftRadius.js": 215,
		"./properties/borderTopRightRadius": 216,
		"./properties/borderTopRightRadius.js": 216,
		"./properties/borderTopStyle": 217,
		"./properties/borderTopStyle.js": 217,
		"./properties/borderTopWidth": 218,
		"./properties/borderTopWidth.js": 218,
		"./properties/borderWidth": 219,
		"./properties/borderWidth.js": 219,
		"./properties/bottom": 220,
		"./properties/bottom.js": 220,
		"./properties/boxShadow": 221,
		"./properties/boxShadow.js": 221,
		"./properties/boxSizing": 222,
		"./properties/boxSizing.js": 222,
		"./properties/captionSide": 223,
		"./properties/captionSide.js": 223,
		"./properties/clear": 224,
		"./properties/clear.js": 224,
		"./properties/clip": 225,
		"./properties/clip.js": 225,
		"./properties/color": 226,
		"./properties/color.js": 226,
		"./properties/colorInterpolation": 227,
		"./properties/colorInterpolation.js": 227,
		"./properties/colorInterpolationFilters": 228,
		"./properties/colorInterpolationFilters.js": 228,
		"./properties/colorProfile": 229,
		"./properties/colorProfile.js": 229,
		"./properties/colorRendering": 230,
		"./properties/colorRendering.js": 230,
		"./properties/content": 231,
		"./properties/content.js": 231,
		"./properties/counterIncrement": 232,
		"./properties/counterIncrement.js": 232,
		"./properties/counterReset": 233,
		"./properties/counterReset.js": 233,
		"./properties/cssFloat": 234,
		"./properties/cssFloat.js": 234,
		"./properties/cue": 235,
		"./properties/cue.js": 235,
		"./properties/cueAfter": 236,
		"./properties/cueAfter.js": 236,
		"./properties/cueBefore": 237,
		"./properties/cueBefore.js": 237,
		"./properties/cursor": 238,
		"./properties/cursor.js": 238,
		"./properties/direction": 239,
		"./properties/direction.js": 239,
		"./properties/display": 240,
		"./properties/display.js": 240,
		"./properties/dominantBaseline": 241,
		"./properties/dominantBaseline.js": 241,
		"./properties/elevation": 242,
		"./properties/elevation.js": 242,
		"./properties/emptyCells": 243,
		"./properties/emptyCells.js": 243,
		"./properties/enableBackground": 244,
		"./properties/enableBackground.js": 244,
		"./properties/fill": 245,
		"./properties/fill.js": 245,
		"./properties/fillOpacity": 246,
		"./properties/fillOpacity.js": 246,
		"./properties/fillRule": 247,
		"./properties/fillRule.js": 247,
		"./properties/filter": 248,
		"./properties/filter.js": 248,
		"./properties/floodColor": 249,
		"./properties/floodColor.js": 249,
		"./properties/floodOpacity": 250,
		"./properties/floodOpacity.js": 250,
		"./properties/font": 251,
		"./properties/font.js": 251,
		"./properties/fontFamily": 252,
		"./properties/fontFamily.js": 252,
		"./properties/fontSize": 253,
		"./properties/fontSize.js": 253,
		"./properties/fontSizeAdjust": 254,
		"./properties/fontSizeAdjust.js": 254,
		"./properties/fontStretch": 255,
		"./properties/fontStretch.js": 255,
		"./properties/fontStyle": 256,
		"./properties/fontStyle.js": 256,
		"./properties/fontVariant": 257,
		"./properties/fontVariant.js": 257,
		"./properties/fontWeight": 258,
		"./properties/fontWeight.js": 258,
		"./properties/glyphOrientationHorizontal": 259,
		"./properties/glyphOrientationHorizontal.js": 259,
		"./properties/glyphOrientationVertical": 260,
		"./properties/glyphOrientationVertical.js": 260,
		"./properties/height": 261,
		"./properties/height.js": 261,
		"./properties/imageRendering": 262,
		"./properties/imageRendering.js": 262,
		"./properties/kerning": 263,
		"./properties/kerning.js": 263,
		"./properties/left": 264,
		"./properties/left.js": 264,
		"./properties/letterSpacing": 265,
		"./properties/letterSpacing.js": 265,
		"./properties/lightingColor": 266,
		"./properties/lightingColor.js": 266,
		"./properties/lineHeight": 267,
		"./properties/lineHeight.js": 267,
		"./properties/listStyle": 268,
		"./properties/listStyle.js": 268,
		"./properties/listStyleImage": 269,
		"./properties/listStyleImage.js": 269,
		"./properties/listStylePosition": 270,
		"./properties/listStylePosition.js": 270,
		"./properties/listStyleType": 271,
		"./properties/listStyleType.js": 271,
		"./properties/margin": 272,
		"./properties/margin.js": 272,
		"./properties/marginBottom": 273,
		"./properties/marginBottom.js": 273,
		"./properties/marginLeft": 274,
		"./properties/marginLeft.js": 274,
		"./properties/marginRight": 275,
		"./properties/marginRight.js": 275,
		"./properties/marginTop": 276,
		"./properties/marginTop.js": 276,
		"./properties/marker": 277,
		"./properties/marker.js": 277,
		"./properties/markerEnd": 278,
		"./properties/markerEnd.js": 278,
		"./properties/markerMid": 279,
		"./properties/markerMid.js": 279,
		"./properties/markerOffset": 280,
		"./properties/markerOffset.js": 280,
		"./properties/markerStart": 281,
		"./properties/markerStart.js": 281,
		"./properties/marks": 282,
		"./properties/marks.js": 282,
		"./properties/mask": 283,
		"./properties/mask.js": 283,
		"./properties/maxHeight": 284,
		"./properties/maxHeight.js": 284,
		"./properties/maxWidth": 285,
		"./properties/maxWidth.js": 285,
		"./properties/minHeight": 286,
		"./properties/minHeight.js": 286,
		"./properties/minWidth": 287,
		"./properties/minWidth.js": 287,
		"./properties/opacity": 288,
		"./properties/opacity.js": 288,
		"./properties/orphans": 289,
		"./properties/orphans.js": 289,
		"./properties/outline": 290,
		"./properties/outline.js": 290,
		"./properties/outlineColor": 291,
		"./properties/outlineColor.js": 291,
		"./properties/outlineOffset": 292,
		"./properties/outlineOffset.js": 292,
		"./properties/outlineStyle": 293,
		"./properties/outlineStyle.js": 293,
		"./properties/outlineWidth": 294,
		"./properties/outlineWidth.js": 294,
		"./properties/overflow": 295,
		"./properties/overflow.js": 295,
		"./properties/overflowX": 296,
		"./properties/overflowX.js": 296,
		"./properties/overflowY": 297,
		"./properties/overflowY.js": 297,
		"./properties/padding": 298,
		"./properties/padding.js": 298,
		"./properties/paddingBottom": 299,
		"./properties/paddingBottom.js": 299,
		"./properties/paddingLeft": 300,
		"./properties/paddingLeft.js": 300,
		"./properties/paddingRight": 301,
		"./properties/paddingRight.js": 301,
		"./properties/paddingTop": 302,
		"./properties/paddingTop.js": 302,
		"./properties/page": 303,
		"./properties/page.js": 303,
		"./properties/pageBreakAfter": 304,
		"./properties/pageBreakAfter.js": 304,
		"./properties/pageBreakBefore": 305,
		"./properties/pageBreakBefore.js": 305,
		"./properties/pageBreakInside": 306,
		"./properties/pageBreakInside.js": 306,
		"./properties/pause": 307,
		"./properties/pause.js": 307,
		"./properties/pauseAfter": 308,
		"./properties/pauseAfter.js": 308,
		"./properties/pauseBefore": 309,
		"./properties/pauseBefore.js": 309,
		"./properties/pitch": 310,
		"./properties/pitch.js": 310,
		"./properties/pitchRange": 311,
		"./properties/pitchRange.js": 311,
		"./properties/playDuring": 312,
		"./properties/playDuring.js": 312,
		"./properties/pointerEvents": 313,
		"./properties/pointerEvents.js": 313,
		"./properties/position": 314,
		"./properties/position.js": 314,
		"./properties/quotes": 315,
		"./properties/quotes.js": 315,
		"./properties/resize": 316,
		"./properties/resize.js": 316,
		"./properties/richness": 317,
		"./properties/richness.js": 317,
		"./properties/right": 318,
		"./properties/right.js": 318,
		"./properties/shapeRendering": 319,
		"./properties/shapeRendering.js": 319,
		"./properties/size": 320,
		"./properties/size.js": 320,
		"./properties/speak": 321,
		"./properties/speak.js": 321,
		"./properties/speakHeader": 322,
		"./properties/speakHeader.js": 322,
		"./properties/speakNumeral": 323,
		"./properties/speakNumeral.js": 323,
		"./properties/speakPunctuation": 324,
		"./properties/speakPunctuation.js": 324,
		"./properties/speechRate": 325,
		"./properties/speechRate.js": 325,
		"./properties/src": 326,
		"./properties/src.js": 326,
		"./properties/stopColor": 327,
		"./properties/stopColor.js": 327,
		"./properties/stopOpacity": 328,
		"./properties/stopOpacity.js": 328,
		"./properties/stress": 329,
		"./properties/stress.js": 329,
		"./properties/stroke": 330,
		"./properties/stroke.js": 330,
		"./properties/strokeDasharray": 331,
		"./properties/strokeDasharray.js": 331,
		"./properties/strokeDashoffset": 332,
		"./properties/strokeDashoffset.js": 332,
		"./properties/strokeLinecap": 333,
		"./properties/strokeLinecap.js": 333,
		"./properties/strokeLinejoin": 334,
		"./properties/strokeLinejoin.js": 334,
		"./properties/strokeMiterlimit": 335,
		"./properties/strokeMiterlimit.js": 335,
		"./properties/strokeOpacity": 336,
		"./properties/strokeOpacity.js": 336,
		"./properties/strokeWidth": 337,
		"./properties/strokeWidth.js": 337,
		"./properties/tableLayout": 338,
		"./properties/tableLayout.js": 338,
		"./properties/textAlign": 339,
		"./properties/textAlign.js": 339,
		"./properties/textAnchor": 340,
		"./properties/textAnchor.js": 340,
		"./properties/textDecoration": 341,
		"./properties/textDecoration.js": 341,
		"./properties/textIndent": 342,
		"./properties/textIndent.js": 342,
		"./properties/textLineThrough": 343,
		"./properties/textLineThrough.js": 343,
		"./properties/textLineThroughColor": 344,
		"./properties/textLineThroughColor.js": 344,
		"./properties/textLineThroughMode": 345,
		"./properties/textLineThroughMode.js": 345,
		"./properties/textLineThroughStyle": 346,
		"./properties/textLineThroughStyle.js": 346,
		"./properties/textLineThroughWidth": 347,
		"./properties/textLineThroughWidth.js": 347,
		"./properties/textOverflow": 348,
		"./properties/textOverflow.js": 348,
		"./properties/textOverline": 349,
		"./properties/textOverline.js": 349,
		"./properties/textOverlineColor": 350,
		"./properties/textOverlineColor.js": 350,
		"./properties/textOverlineMode": 351,
		"./properties/textOverlineMode.js": 351,
		"./properties/textOverlineStyle": 352,
		"./properties/textOverlineStyle.js": 352,
		"./properties/textOverlineWidth": 353,
		"./properties/textOverlineWidth.js": 353,
		"./properties/textRendering": 354,
		"./properties/textRendering.js": 354,
		"./properties/textShadow": 355,
		"./properties/textShadow.js": 355,
		"./properties/textTransform": 356,
		"./properties/textTransform.js": 356,
		"./properties/textUnderline": 357,
		"./properties/textUnderline.js": 357,
		"./properties/textUnderlineColor": 358,
		"./properties/textUnderlineColor.js": 358,
		"./properties/textUnderlineMode": 359,
		"./properties/textUnderlineMode.js": 359,
		"./properties/textUnderlineStyle": 360,
		"./properties/textUnderlineStyle.js": 360,
		"./properties/textUnderlineWidth": 361,
		"./properties/textUnderlineWidth.js": 361,
		"./properties/top": 362,
		"./properties/top.js": 362,
		"./properties/unicodeBidi": 363,
		"./properties/unicodeBidi.js": 363,
		"./properties/unicodeRange": 364,
		"./properties/unicodeRange.js": 364,
		"./properties/vectorEffect": 365,
		"./properties/vectorEffect.js": 365,
		"./properties/verticalAlign": 366,
		"./properties/verticalAlign.js": 366,
		"./properties/visibility": 367,
		"./properties/visibility.js": 367,
		"./properties/voiceFamily": 368,
		"./properties/voiceFamily.js": 368,
		"./properties/volume": 369,
		"./properties/volume.js": 369,
		"./properties/webkitAnimation": 370,
		"./properties/webkitAnimation.js": 370,
		"./properties/webkitAnimationDelay": 371,
		"./properties/webkitAnimationDelay.js": 371,
		"./properties/webkitAnimationDirection": 372,
		"./properties/webkitAnimationDirection.js": 372,
		"./properties/webkitAnimationDuration": 373,
		"./properties/webkitAnimationDuration.js": 373,
		"./properties/webkitAnimationFillMode": 374,
		"./properties/webkitAnimationFillMode.js": 374,
		"./properties/webkitAnimationIterationCount": 375,
		"./properties/webkitAnimationIterationCount.js": 375,
		"./properties/webkitAnimationName": 376,
		"./properties/webkitAnimationName.js": 376,
		"./properties/webkitAnimationPlayState": 377,
		"./properties/webkitAnimationPlayState.js": 377,
		"./properties/webkitAnimationTimingFunction": 378,
		"./properties/webkitAnimationTimingFunction.js": 378,
		"./properties/webkitAppearance": 379,
		"./properties/webkitAppearance.js": 379,
		"./properties/webkitAspectRatio": 380,
		"./properties/webkitAspectRatio.js": 380,
		"./properties/webkitBackfaceVisibility": 381,
		"./properties/webkitBackfaceVisibility.js": 381,
		"./properties/webkitBackgroundClip": 382,
		"./properties/webkitBackgroundClip.js": 382,
		"./properties/webkitBackgroundComposite": 383,
		"./properties/webkitBackgroundComposite.js": 383,
		"./properties/webkitBackgroundOrigin": 384,
		"./properties/webkitBackgroundOrigin.js": 384,
		"./properties/webkitBackgroundSize": 385,
		"./properties/webkitBackgroundSize.js": 385,
		"./properties/webkitBorderAfter": 386,
		"./properties/webkitBorderAfter.js": 386,
		"./properties/webkitBorderAfterColor": 387,
		"./properties/webkitBorderAfterColor.js": 387,
		"./properties/webkitBorderAfterStyle": 388,
		"./properties/webkitBorderAfterStyle.js": 388,
		"./properties/webkitBorderAfterWidth": 389,
		"./properties/webkitBorderAfterWidth.js": 389,
		"./properties/webkitBorderBefore": 390,
		"./properties/webkitBorderBefore.js": 390,
		"./properties/webkitBorderBeforeColor": 391,
		"./properties/webkitBorderBeforeColor.js": 391,
		"./properties/webkitBorderBeforeStyle": 392,
		"./properties/webkitBorderBeforeStyle.js": 392,
		"./properties/webkitBorderBeforeWidth": 393,
		"./properties/webkitBorderBeforeWidth.js": 393,
		"./properties/webkitBorderEnd": 394,
		"./properties/webkitBorderEnd.js": 394,
		"./properties/webkitBorderEndColor": 395,
		"./properties/webkitBorderEndColor.js": 395,
		"./properties/webkitBorderEndStyle": 396,
		"./properties/webkitBorderEndStyle.js": 396,
		"./properties/webkitBorderEndWidth": 397,
		"./properties/webkitBorderEndWidth.js": 397,
		"./properties/webkitBorderFit": 398,
		"./properties/webkitBorderFit.js": 398,
		"./properties/webkitBorderHorizontalSpacing": 399,
		"./properties/webkitBorderHorizontalSpacing.js": 399,
		"./properties/webkitBorderImage": 400,
		"./properties/webkitBorderImage.js": 400,
		"./properties/webkitBorderRadius": 401,
		"./properties/webkitBorderRadius.js": 401,
		"./properties/webkitBorderStart": 402,
		"./properties/webkitBorderStart.js": 402,
		"./properties/webkitBorderStartColor": 403,
		"./properties/webkitBorderStartColor.js": 403,
		"./properties/webkitBorderStartStyle": 404,
		"./properties/webkitBorderStartStyle.js": 404,
		"./properties/webkitBorderStartWidth": 405,
		"./properties/webkitBorderStartWidth.js": 405,
		"./properties/webkitBorderVerticalSpacing": 406,
		"./properties/webkitBorderVerticalSpacing.js": 406,
		"./properties/webkitBoxAlign": 407,
		"./properties/webkitBoxAlign.js": 407,
		"./properties/webkitBoxDirection": 408,
		"./properties/webkitBoxDirection.js": 408,
		"./properties/webkitBoxFlex": 409,
		"./properties/webkitBoxFlex.js": 409,
		"./properties/webkitBoxFlexGroup": 410,
		"./properties/webkitBoxFlexGroup.js": 410,
		"./properties/webkitBoxLines": 411,
		"./properties/webkitBoxLines.js": 411,
		"./properties/webkitBoxOrdinalGroup": 412,
		"./properties/webkitBoxOrdinalGroup.js": 412,
		"./properties/webkitBoxOrient": 413,
		"./properties/webkitBoxOrient.js": 413,
		"./properties/webkitBoxPack": 414,
		"./properties/webkitBoxPack.js": 414,
		"./properties/webkitBoxReflect": 415,
		"./properties/webkitBoxReflect.js": 415,
		"./properties/webkitBoxShadow": 416,
		"./properties/webkitBoxShadow.js": 416,
		"./properties/webkitColorCorrection": 417,
		"./properties/webkitColorCorrection.js": 417,
		"./properties/webkitColumnAxis": 418,
		"./properties/webkitColumnAxis.js": 418,
		"./properties/webkitColumnBreakAfter": 419,
		"./properties/webkitColumnBreakAfter.js": 419,
		"./properties/webkitColumnBreakBefore": 420,
		"./properties/webkitColumnBreakBefore.js": 420,
		"./properties/webkitColumnBreakInside": 421,
		"./properties/webkitColumnBreakInside.js": 421,
		"./properties/webkitColumnCount": 422,
		"./properties/webkitColumnCount.js": 422,
		"./properties/webkitColumnGap": 423,
		"./properties/webkitColumnGap.js": 423,
		"./properties/webkitColumnRule": 424,
		"./properties/webkitColumnRule.js": 424,
		"./properties/webkitColumnRuleColor": 425,
		"./properties/webkitColumnRuleColor.js": 425,
		"./properties/webkitColumnRuleStyle": 426,
		"./properties/webkitColumnRuleStyle.js": 426,
		"./properties/webkitColumnRuleWidth": 427,
		"./properties/webkitColumnRuleWidth.js": 427,
		"./properties/webkitColumnSpan": 428,
		"./properties/webkitColumnSpan.js": 428,
		"./properties/webkitColumnWidth": 429,
		"./properties/webkitColumnWidth.js": 429,
		"./properties/webkitColumns": 430,
		"./properties/webkitColumns.js": 430,
		"./properties/webkitFilter": 431,
		"./properties/webkitFilter.js": 431,
		"./properties/webkitFlexAlign": 432,
		"./properties/webkitFlexAlign.js": 432,
		"./properties/webkitFlexDirection": 433,
		"./properties/webkitFlexDirection.js": 433,
		"./properties/webkitFlexFlow": 434,
		"./properties/webkitFlexFlow.js": 434,
		"./properties/webkitFlexItemAlign": 435,
		"./properties/webkitFlexItemAlign.js": 435,
		"./properties/webkitFlexLinePack": 436,
		"./properties/webkitFlexLinePack.js": 436,
		"./properties/webkitFlexOrder": 437,
		"./properties/webkitFlexOrder.js": 437,
		"./properties/webkitFlexPack": 438,
		"./properties/webkitFlexPack.js": 438,
		"./properties/webkitFlexWrap": 439,
		"./properties/webkitFlexWrap.js": 439,
		"./properties/webkitFlowFrom": 440,
		"./properties/webkitFlowFrom.js": 440,
		"./properties/webkitFlowInto": 441,
		"./properties/webkitFlowInto.js": 441,
		"./properties/webkitFontFeatureSettings": 442,
		"./properties/webkitFontFeatureSettings.js": 442,
		"./properties/webkitFontKerning": 443,
		"./properties/webkitFontKerning.js": 443,
		"./properties/webkitFontSizeDelta": 444,
		"./properties/webkitFontSizeDelta.js": 444,
		"./properties/webkitFontSmoothing": 445,
		"./properties/webkitFontSmoothing.js": 445,
		"./properties/webkitFontVariantLigatures": 446,
		"./properties/webkitFontVariantLigatures.js": 446,
		"./properties/webkitHighlight": 447,
		"./properties/webkitHighlight.js": 447,
		"./properties/webkitHyphenateCharacter": 448,
		"./properties/webkitHyphenateCharacter.js": 448,
		"./properties/webkitHyphenateLimitAfter": 449,
		"./properties/webkitHyphenateLimitAfter.js": 449,
		"./properties/webkitHyphenateLimitBefore": 450,
		"./properties/webkitHyphenateLimitBefore.js": 450,
		"./properties/webkitHyphenateLimitLines": 451,
		"./properties/webkitHyphenateLimitLines.js": 451,
		"./properties/webkitHyphens": 452,
		"./properties/webkitHyphens.js": 452,
		"./properties/webkitLineAlign": 453,
		"./properties/webkitLineAlign.js": 453,
		"./properties/webkitLineBoxContain": 454,
		"./properties/webkitLineBoxContain.js": 454,
		"./properties/webkitLineBreak": 455,
		"./properties/webkitLineBreak.js": 455,
		"./properties/webkitLineClamp": 456,
		"./properties/webkitLineClamp.js": 456,
		"./properties/webkitLineGrid": 457,
		"./properties/webkitLineGrid.js": 457,
		"./properties/webkitLineSnap": 458,
		"./properties/webkitLineSnap.js": 458,
		"./properties/webkitLocale": 459,
		"./properties/webkitLocale.js": 459,
		"./properties/webkitLogicalHeight": 460,
		"./properties/webkitLogicalHeight.js": 460,
		"./properties/webkitLogicalWidth": 461,
		"./properties/webkitLogicalWidth.js": 461,
		"./properties/webkitMarginAfter": 462,
		"./properties/webkitMarginAfter.js": 462,
		"./properties/webkitMarginAfterCollapse": 463,
		"./properties/webkitMarginAfterCollapse.js": 463,
		"./properties/webkitMarginBefore": 464,
		"./properties/webkitMarginBefore.js": 464,
		"./properties/webkitMarginBeforeCollapse": 465,
		"./properties/webkitMarginBeforeCollapse.js": 465,
		"./properties/webkitMarginBottomCollapse": 466,
		"./properties/webkitMarginBottomCollapse.js": 466,
		"./properties/webkitMarginCollapse": 467,
		"./properties/webkitMarginCollapse.js": 467,
		"./properties/webkitMarginEnd": 468,
		"./properties/webkitMarginEnd.js": 468,
		"./properties/webkitMarginStart": 469,
		"./properties/webkitMarginStart.js": 469,
		"./properties/webkitMarginTopCollapse": 470,
		"./properties/webkitMarginTopCollapse.js": 470,
		"./properties/webkitMarquee": 471,
		"./properties/webkitMarquee.js": 471,
		"./properties/webkitMarqueeDirection": 472,
		"./properties/webkitMarqueeDirection.js": 472,
		"./properties/webkitMarqueeIncrement": 473,
		"./properties/webkitMarqueeIncrement.js": 473,
		"./properties/webkitMarqueeRepetition": 474,
		"./properties/webkitMarqueeRepetition.js": 474,
		"./properties/webkitMarqueeSpeed": 475,
		"./properties/webkitMarqueeSpeed.js": 475,
		"./properties/webkitMarqueeStyle": 476,
		"./properties/webkitMarqueeStyle.js": 476,
		"./properties/webkitMask": 477,
		"./properties/webkitMask.js": 477,
		"./properties/webkitMaskAttachment": 478,
		"./properties/webkitMaskAttachment.js": 478,
		"./properties/webkitMaskBoxImage": 479,
		"./properties/webkitMaskBoxImage.js": 479,
		"./properties/webkitMaskBoxImageOutset": 480,
		"./properties/webkitMaskBoxImageOutset.js": 480,
		"./properties/webkitMaskBoxImageRepeat": 481,
		"./properties/webkitMaskBoxImageRepeat.js": 481,
		"./properties/webkitMaskBoxImageSlice": 482,
		"./properties/webkitMaskBoxImageSlice.js": 482,
		"./properties/webkitMaskBoxImageSource": 483,
		"./properties/webkitMaskBoxImageSource.js": 483,
		"./properties/webkitMaskBoxImageWidth": 484,
		"./properties/webkitMaskBoxImageWidth.js": 484,
		"./properties/webkitMaskClip": 485,
		"./properties/webkitMaskClip.js": 485,
		"./properties/webkitMaskComposite": 486,
		"./properties/webkitMaskComposite.js": 486,
		"./properties/webkitMaskImage": 487,
		"./properties/webkitMaskImage.js": 487,
		"./properties/webkitMaskOrigin": 488,
		"./properties/webkitMaskOrigin.js": 488,
		"./properties/webkitMaskPosition": 489,
		"./properties/webkitMaskPosition.js": 489,
		"./properties/webkitMaskPositionX": 490,
		"./properties/webkitMaskPositionX.js": 490,
		"./properties/webkitMaskPositionY": 491,
		"./properties/webkitMaskPositionY.js": 491,
		"./properties/webkitMaskRepeat": 492,
		"./properties/webkitMaskRepeat.js": 492,
		"./properties/webkitMaskRepeatX": 493,
		"./properties/webkitMaskRepeatX.js": 493,
		"./properties/webkitMaskRepeatY": 494,
		"./properties/webkitMaskRepeatY.js": 494,
		"./properties/webkitMaskSize": 495,
		"./properties/webkitMaskSize.js": 495,
		"./properties/webkitMatchNearestMailBlockquoteColor": 496,
		"./properties/webkitMatchNearestMailBlockquoteColor.js": 496,
		"./properties/webkitMaxLogicalHeight": 497,
		"./properties/webkitMaxLogicalHeight.js": 497,
		"./properties/webkitMaxLogicalWidth": 498,
		"./properties/webkitMaxLogicalWidth.js": 498,
		"./properties/webkitMinLogicalHeight": 499,
		"./properties/webkitMinLogicalHeight.js": 499,
		"./properties/webkitMinLogicalWidth": 500,
		"./properties/webkitMinLogicalWidth.js": 500,
		"./properties/webkitNbspMode": 501,
		"./properties/webkitNbspMode.js": 501,
		"./properties/webkitOverflowScrolling": 502,
		"./properties/webkitOverflowScrolling.js": 502,
		"./properties/webkitPaddingAfter": 503,
		"./properties/webkitPaddingAfter.js": 503,
		"./properties/webkitPaddingBefore": 504,
		"./properties/webkitPaddingBefore.js": 504,
		"./properties/webkitPaddingEnd": 505,
		"./properties/webkitPaddingEnd.js": 505,
		"./properties/webkitPaddingStart": 506,
		"./properties/webkitPaddingStart.js": 506,
		"./properties/webkitPerspective": 507,
		"./properties/webkitPerspective.js": 507,
		"./properties/webkitPerspectiveOrigin": 508,
		"./properties/webkitPerspectiveOrigin.js": 508,
		"./properties/webkitPerspectiveOriginX": 509,
		"./properties/webkitPerspectiveOriginX.js": 509,
		"./properties/webkitPerspectiveOriginY": 510,
		"./properties/webkitPerspectiveOriginY.js": 510,
		"./properties/webkitPrintColorAdjust": 511,
		"./properties/webkitPrintColorAdjust.js": 511,
		"./properties/webkitRegionBreakAfter": 512,
		"./properties/webkitRegionBreakAfter.js": 512,
		"./properties/webkitRegionBreakBefore": 513,
		"./properties/webkitRegionBreakBefore.js": 513,
		"./properties/webkitRegionBreakInside": 514,
		"./properties/webkitRegionBreakInside.js": 514,
		"./properties/webkitRegionOverflow": 515,
		"./properties/webkitRegionOverflow.js": 515,
		"./properties/webkitRtlOrdering": 516,
		"./properties/webkitRtlOrdering.js": 516,
		"./properties/webkitSvgShadow": 517,
		"./properties/webkitSvgShadow.js": 517,
		"./properties/webkitTapHighlightColor": 518,
		"./properties/webkitTapHighlightColor.js": 518,
		"./properties/webkitTextCombine": 519,
		"./properties/webkitTextCombine.js": 519,
		"./properties/webkitTextDecorationsInEffect": 520,
		"./properties/webkitTextDecorationsInEffect.js": 520,
		"./properties/webkitTextEmphasis": 521,
		"./properties/webkitTextEmphasis.js": 521,
		"./properties/webkitTextEmphasisColor": 522,
		"./properties/webkitTextEmphasisColor.js": 522,
		"./properties/webkitTextEmphasisPosition": 523,
		"./properties/webkitTextEmphasisPosition.js": 523,
		"./properties/webkitTextEmphasisStyle": 524,
		"./properties/webkitTextEmphasisStyle.js": 524,
		"./properties/webkitTextFillColor": 525,
		"./properties/webkitTextFillColor.js": 525,
		"./properties/webkitTextOrientation": 526,
		"./properties/webkitTextOrientation.js": 526,
		"./properties/webkitTextSecurity": 527,
		"./properties/webkitTextSecurity.js": 527,
		"./properties/webkitTextSizeAdjust": 528,
		"./properties/webkitTextSizeAdjust.js": 528,
		"./properties/webkitTextStroke": 529,
		"./properties/webkitTextStroke.js": 529,
		"./properties/webkitTextStrokeColor": 530,
		"./properties/webkitTextStrokeColor.js": 530,
		"./properties/webkitTextStrokeWidth": 531,
		"./properties/webkitTextStrokeWidth.js": 531,
		"./properties/webkitTransform": 532,
		"./properties/webkitTransform.js": 532,
		"./properties/webkitTransformOrigin": 533,
		"./properties/webkitTransformOrigin.js": 533,
		"./properties/webkitTransformOriginX": 534,
		"./properties/webkitTransformOriginX.js": 534,
		"./properties/webkitTransformOriginY": 535,
		"./properties/webkitTransformOriginY.js": 535,
		"./properties/webkitTransformOriginZ": 536,
		"./properties/webkitTransformOriginZ.js": 536,
		"./properties/webkitTransformStyle": 537,
		"./properties/webkitTransformStyle.js": 537,
		"./properties/webkitTransition": 538,
		"./properties/webkitTransition.js": 538,
		"./properties/webkitTransitionDelay": 539,
		"./properties/webkitTransitionDelay.js": 539,
		"./properties/webkitTransitionDuration": 540,
		"./properties/webkitTransitionDuration.js": 540,
		"./properties/webkitTransitionProperty": 541,
		"./properties/webkitTransitionProperty.js": 541,
		"./properties/webkitTransitionTimingFunction": 542,
		"./properties/webkitTransitionTimingFunction.js": 542,
		"./properties/webkitUserDrag": 543,
		"./properties/webkitUserDrag.js": 543,
		"./properties/webkitUserModify": 544,
		"./properties/webkitUserModify.js": 544,
		"./properties/webkitUserSelect": 545,
		"./properties/webkitUserSelect.js": 545,
		"./properties/webkitWrap": 546,
		"./properties/webkitWrap.js": 546,
		"./properties/webkitWrapFlow": 547,
		"./properties/webkitWrapFlow.js": 547,
		"./properties/webkitWrapMargin": 548,
		"./properties/webkitWrapMargin.js": 548,
		"./properties/webkitWrapPadding": 549,
		"./properties/webkitWrapPadding.js": 549,
		"./properties/webkitWrapShapeInside": 550,
		"./properties/webkitWrapShapeInside.js": 550,
		"./properties/webkitWrapShapeOutside": 551,
		"./properties/webkitWrapShapeOutside.js": 551,
		"./properties/webkitWrapThrough": 552,
		"./properties/webkitWrapThrough.js": 552,
		"./properties/webkitWritingMode": 553,
		"./properties/webkitWritingMode.js": 553,
		"./properties/whiteSpace": 554,
		"./properties/whiteSpace.js": 554,
		"./properties/widows": 555,
		"./properties/widows.js": 555,
		"./properties/width": 556,
		"./properties/width.js": 556,
		"./properties/wordBreak": 557,
		"./properties/wordBreak.js": 557,
		"./properties/wordSpacing": 558,
		"./properties/wordSpacing.js": 558,
		"./properties/wordWrap": 559,
		"./properties/wordWrap.js": 559,
		"./properties/writingMode": 560,
		"./properties/writingMode.js": 560,
		"./properties/zIndex": 561,
		"./properties/zIndex.js": 561,
		"./properties/zoom": 562,
		"./properties/zoom.js": 562
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	var Stream = __webpack_require__(145);
	var util = __webpack_require__(102);
	
	var Response = module.exports = function (res) {
	    this.offset = 0;
	    this.readable = true;
	};
	
	util.inherits(Response, Stream);
	
	var capable = {
	    streaming : true,
	    status2 : true
	};
	
	function parseHeaders (res) {
	    var lines = res.getAllResponseHeaders().split(/\r?\n/);
	    var headers = {};
	    for (var i = 0; i < lines.length; i++) {
	        var line = lines[i];
	        if (line === '') continue;
	        
	        var m = line.match(/^([^:]+):\s*(.*)/);
	        if (m) {
	            var key = m[1].toLowerCase(), value = m[2];
	            
	            if (headers[key] !== undefined) {
	            
	                if (isArray(headers[key])) {
	                    headers[key].push(value);
	                }
	                else {
	                    headers[key] = [ headers[key], value ];
	                }
	            }
	            else {
	                headers[key] = value;
	            }
	        }
	        else {
	            headers[line] = true;
	        }
	    }
	    return headers;
	}
	
	Response.prototype.getResponse = function (xhr) {
	    var respType = String(xhr.responseType).toLowerCase();
	    if (respType === 'blob') return xhr.responseBlob || xhr.response;
	    if (respType === 'arraybuffer') return xhr.response;
	    return xhr.responseText;
	}
	
	Response.prototype.getHeader = function (key) {
	    return this.headers[key.toLowerCase()];
	};
	
	Response.prototype.handle = function (res) {
	    if (res.readyState === 2 && capable.status2) {
	        try {
	            this.statusCode = res.status;
	            this.headers = parseHeaders(res);
	        }
	        catch (err) {
	            capable.status2 = false;
	        }
	        
	        if (capable.status2) {
	            this.emit('ready');
	        }
	    }
	    else if (capable.streaming && res.readyState === 3) {
	        try {
	            if (!this.statusCode) {
	                this.statusCode = res.status;
	                this.headers = parseHeaders(res);
	                this.emit('ready');
	            }
	        }
	        catch (err) {}
	        
	        try {
	            this._emitData(res);
	        }
	        catch (err) {
	            capable.streaming = false;
	        }
	    }
	    else if (res.readyState === 4) {
	        if (!this.statusCode) {
	            this.statusCode = res.status;
	            this.emit('ready');
	        }
	        this._emitData(res);
	        
	        if (res.error) {
	            this.emit('error', this.getResponse(res));
	        }
	        else this.emit('end');
	        
	        this.emit('close');
	    }
	};
	
	Response.prototype._emitData = function (res) {
	    var respBody = this.getResponse(res);
	    if (respBody.toString().match(/ArrayBuffer/)) {
	        this.emit('data', new Uint8Array(respBody, this.offset));
	        this.offset = respBody.byteLength;
	        return;
	    }
	    if (respBody.length > this.offset) {
	        this.emit('data', respBody.slice(this.offset));
	        this.offset = respBody.length;
	    }
	};
	
	var isArray = Array.isArray || function (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	
	;(function (exports) {
		'use strict';
	
	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array
	
		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
	
		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS)
				return 62 // '+'
			if (code === SLASH)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}
	
		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr
	
			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}
	
			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0
	
			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)
	
			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length
	
			var L = 0
	
			function push (v) {
				arr[L++] = v
			}
	
			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}
	
			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}
	
			return arr
		}
	
		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length
	
			function encode (num) {
				return lookup.charAt(num)
			}
	
			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}
	
			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}
	
			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}
	
			return output
		}
	
		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};
	
	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }
	
	  var regexp = /\+/g;
	  qs = qs.split(sep);
	
	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }
	
	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }
	
	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;
	
	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }
	
	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);
	
	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }
	
	  return obj;
	};
	
	var isArray = Array.isArray || function (xs) {
	  return Object.prototype.toString.call(xs) === '[object Array]';
	};


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;
	
	    case 'boolean':
	      return v ? 'true' : 'false';
	
	    case 'number':
	      return isFinite(v) ? v : '';
	
	    default:
	      return '';
	  }
	};
	
	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }
	
	  if (typeof obj === 'object') {
	    return map(objectKeys(obj), function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (isArray(obj[k])) {
	        return map(obj[k], function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);
	
	  }
	
	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};
	
	var isArray = Array.isArray || function (xs) {
	  return Object.prototype.toString.call(xs) === '[object Array]';
	};
	
	function map (xs, f) {
	  if (xs.map) return xs.map(f);
	  var res = [];
	  for (var i = 0; i < xs.length; i++) {
	    res.push(f(xs[i], i));
	  }
	  return res;
	}
	
	var objectKeys = Object.keys || function (obj) {
	  var res = [];
	  for (var key in obj) {
	    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
	  }
	  return res;
	};


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/*********************************************************************
	 * These are commonly used parsers for CSS Values they take a string *
	 * to parse and return a string after it's been converted, if needed *
	 ********************************************************************/
	'use strict';
	
	exports.TYPES = {
	    INTEGER: 1,
	    NUMBER: 2,
	    LENGTH: 3,
	    PERCENT: 4,
	    URL: 5,
	    COLOR: 6,
	    STRING: 7,
	    ANGLE: 8,
	    KEYWORD: 9,
	    NULL_OR_EMPTY_STR: 10
	};
	
	/*jslint regexp: true*/
	// rough regular expressions
	var integerRegEx = /^[\-+]?[0-9]+$/;
	var numberRegEx = /^[\-+]?[0-9]*\.[0-9]+$/;
	var lengthRegEx = /^(0|[\-+]?[0-9]?\.?[0-9]+(in|cm|em|mm|pt|pc|px))$/;
	var percentRegEx = /^[\-+]?[0-9]?\.?[0-9]+%$/;
	var urlRegEx = /^url\(\s*([^\)]*)\s*\)$/;
	var stringRegEx = /^("[^"]*"|'[^']*')$/;
	var colorRegEx1 = /^#[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]([0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])?$/;
	var colorRegEx2 = /^rgb\(([^\)]*)\)$/;
	var colorRegEx3 = /^rgba\(([^\)]*)\)$/;
	var angleRegEx = /^([\-+]?[0-9]?\.?[0-9]+)(deg|grad|rad)$/;
	/*jslint regexp: false*/
	
	// This will return one of the above types based on the passed in string
	exports.valueType = function valueType(val) {
	    if (val === '' || val === null) {
	        return exports.TYPES.NULL_OR_EMPTY_STR;
	    }
	    if (typeof val === 'number') {
	        val = val.toString();
	    }
	
	    if (typeof val !== 'string') {
	        return undefined;
	    }
	
	    if (integerRegEx.test(val)) {
	        return exports.TYPES.INTEGER;
	    }
	    if (numberRegEx.test(val)) {
	        return exports.TYPES.NUMBER;
	    }
	    if (lengthRegEx.test(val)) {
	        return exports.TYPES.LENGTH;
	    }
	    if (percentRegEx.test(val)) {
	        return exports.TYPES.PERCENT;
	    }
	    if (urlRegEx.test(val)) {
	        return exports.TYPES.URL;
	    }
	    if (stringRegEx.test(val)) {
	        return exports.TYPES.STRING;
	    }
	    if (angleRegEx.test(val)) {
	        return exports.TYPES.ANGLE;
	    }
	    if (colorRegEx1.test(val)) {
	        return exports.TYPES.COLOR;
	    }
	    var res = colorRegEx2.exec(val);
	    var parts;
	    if (res !== null) {
	        parts = res[1].split(/\s*,\s*/);
	        if (parts.length !== 3) {
	            return undefined;
	        }
	        if (parts.every(percentRegEx.test.bind(percentRegEx)) || parts.every(integerRegEx.test.bind(integerRegEx))) {
	            return exports.TYPES.COLOR;
	        }
	        return undefined;
	    }
	    res = colorRegEx3.exec(val);
	    if (res !== null) {
	        parts = res[1].split(/\s*,\s*/);
	        if (parts.length !== 4) {
	            return undefined;
	        }
	        if (parts.slice(0, 3).every(percentRegEx.test.bind(percentRegEx)) || parts.every(integerRegEx.test.bind(integerRegEx))) {
	            if (numberRegEx.test(parts[3])) {
	                return exports.TYPES.COLOR;
	            }
	        }
	        return undefined;
	    }
	
	    // could still be a color, one of the standard keyword colors
	    val = val.toLowerCase();
	    switch (val) {
	    case 'maroon':
	    case 'red':
	    case 'orange':
	    case 'yellow':
	    case 'olive':
	    case 'purple':
	    case 'fuchsia':
	    case 'white':
	    case 'lime':
	    case 'green':
	    case 'navy':
	    case 'blue':
	    case 'aqua':
	    case 'teal':
	    case 'black':
	    case 'silver':
	    case 'gray':
	        // the following are deprecated in CSS3
	    case 'activeborder':
	    case 'activecaption':
	    case 'appworkspace':
	    case 'background':
	    case 'buttonface':
	    case 'buttonhighlight':
	    case 'buttonshadow':
	    case 'buttontext':
	    case 'captiontext':
	    case 'graytext':
	    case 'highlight':
	    case 'highlighttext':
	    case 'inactiveborder':
	    case 'inactivecaption':
	    case 'inactivecaptiontext':
	    case 'infobackground':
	    case 'infotext':
	    case 'menu':
	    case 'menutext':
	    case 'scrollbar':
	    case 'threeddarkshadow':
	    case 'threedface':
	    case 'threedhighlight':
	    case 'threedlightshadow':
	    case 'threedshadow':
	    case 'window':
	    case 'windowframe':
	    case 'windowtext':
	        return exports.TYPES.COLOR;
	    default:
	        return exports.TYPES.KEYWORD;
	    }
	};
	
	exports.parseInteger = function parseInteger(val) {
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    if (type !== exports.TYPES.INTEGER) {
	        return undefined;
	    }
	    return String(parseInt(val, 10));
	};
	
	exports.parseNumber = function parseNumber(val) {
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    if (type !== exports.TYPES.NUMBER) {
	        return undefined;
	    }
	    return String(parseFloat(val));
	};
	
	exports.parseLength = function parseLength(val) {
	    if (val === 0 || val === '0') {
	        return '0px';
	    }
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    if (type !== exports.TYPES.LENGTH) {
	        return undefined;
	    }
	    return val;
	};
	
	exports.parsePercent = function parsePercent(val) {
	    if (val === 0 || val === '0') {
	        return '0%';
	    }
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    if (type !== exports.TYPES.PERCENT) {
	        return undefined;
	    }
	    return val;
	};
	
	// either a length or a percent
	exports.parseMeasurement = function parseMeasurement(val) {
	    var length = exports.parseLength(val);
	    if (length !== undefined) {
	        return length;
	    }
	    return exports.parsePercent(val);
	};
	
	exports.parseUrl = function parseUrl(val) {
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    var res = urlRegEx.exec(val);
	    // does it match the regex?
	    if (!res) {
	        return undefined;
	    }
	    var str = res[1];
	    // if it starts with single or double quotes, does it end with the same?
	    if ((str[1] === '"' || str[1] === "'") && str[1] !== str[str.length - 1]) {
	        return undefined;
	    }
	    if (str[1] === '"' || str[1] === "'") {
	        str = str.substr(1, -1);
	    }
	
	    var i;
	    for (i = 0; i < str.length; i++) {
	        switch (str[i]) {
	        case '(':
	        case ')':
	        case ' ':
	        case '\t':
	        case '\n':
	        case "'":
	        case '"':
	            return undefined;
	        case '\\':
	            i++;
	            break;
	        }
	    }
	    return 'url(' + str + ')';
	};
	
	exports.parseString = function parseString(val) {
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    if (type !== exports.TYPES.STRING) {
	        return undefined;
	    }
	    var i;
	    for (i = 1; i < val.length - 1; i++) {
	        switch (val[i]) {
	        case val[0]:
	            return undefined;
	        case '\\':
	            i++;
	            while (i < val.length - 1 && /[0-9A-Fa-f]/.test(val[i])) {
	                i++;
	            }
	            break;
	        }
	    }
	    if (i >= val.length) {
	        return undefined;
	    }
	    return val;
	};
	
	exports.parseColor = function parseColor(val) {
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    var red, green, blue, alpha = 1;
	    var parts;
	    var res = colorRegEx1.exec(val);
	    // is it #aaa or #ababab
	    if (res) {
	        var hex = val.substr(1);
	        if (hex.length === 3) {
	            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
	        }
	        red = parseInt(hex.substr(0, 2), 16);
	        green = parseInt(hex.substr(2, 2), 16);
	        blue = parseInt(hex.substr(4, 2), 16);
	        return 'rgb(' + red + ', ' + green + ', ' + blue + ')';
	    }
	
	    res = colorRegEx2.exec(val);
	    if (res) {
	        parts = res[1].split(/\s*,\s*/);
	        if (parts.length !== 3) {
	            return undefined;
	        }
	        if (parts.every(percentRegEx.test.bind(percentRegEx))) {
	            red = Math.floor(parseFloat(parts[0].slice(0, -1)) * 255 / 100);
	            green = Math.floor(parseFloat(parts[1].slice(0, -1)) * 255 / 100);
	            blue = Math.floor(parseFloat(parts[2].slice(0, -1)) * 255 / 100);
	        } else if (parts.every(integerRegEx.test.bind(integerRegEx))) {
	            red = parseInt(parts[0], 10);
	            green = parseInt(parts[1], 10);
	            blue = parseInt(parts[2], 10);
	        } else {
	            return undefined;
	        }
	        red = Math.min(255, Math.max(0, red));
	        green = Math.min(255, Math.max(0, green));
	        blue = Math.min(255, Math.max(0, blue));
	        return 'rgb(' + red + ', ' + green + ', ' + blue + ')';
	    }
	
	    res = colorRegEx3.exec(val);
	    if (res) {
	        parts = res[1].split(/\s*,\s*/);
	        if (parts.length !== 4) {
	            return undefined;
	        }
	        if (parts.slice(0, 3).every(percentRegEx.test.bind(percentRegEx))) {
	            red = Math.floor(parseFloat(parts[0].slice(0, -1)) * 255 / 100);
	            green = Math.floor(parseFloat(parts[1].slice(0, -1)) * 255 / 100);
	            blue = Math.floor(parseFloat(parts[2].slice(0, -1)) * 255 / 100);
	            alpha = parseFloat(parts[3]);
	        } else if (parts.slice(0, 3).every(integerRegEx.test.bind(integerRegEx))) {
	            red = parseInt(parts[0], 10);
	            green = parseInt(parts[1], 10);
	            blue = parseInt(parts[2], 10);
	            alpha = parseFloat(parts[3]);
	        } else {
	            return undefined;
	        }
	        if (isNaN(alpha)) {
	            alpha = 1;
	        }
	        red = Math.min(255, Math.max(0, red));
	        green = Math.min(255, Math.max(0, green));
	        blue = Math.min(255, Math.max(0, blue));
	        alpha = Math.min(1, Math.max(0, alpha));
	        if (alpha === 1) {
	            return 'rgb(' + red + ', ' + green + ', ' + blue + ')';
	        }
	        return 'rgba(' + red + ', ' + green + ', ' + blue + ', ' + alpha + ')';
	    }
	
	    if (type === exports.TYPES.COLOR) {
	        return val;
	    }
	    return undefined;
	};
	
	exports.parseAngle = function parseAngle(val) {
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    if (type !== exports.TYPES.ANGLE) {
	        return undefined;
	    }
	    var res = angleRegEx.exec(val);
	    var flt = parseFloat(res[1]);
	    if (res[2] === 'rad') {
	        flt *= 180 / Math.PI;
	    } else if (res[2] === 'grad') {
	        flt *= 360 / 400;
	    }
	
	    while (flt < 0) {
	        flt += 360;
	    }
	    while (flt > 360) {
	        flt -= 360;
	    }
	    return flt + 'deg';
	};
	
	exports.parseKeyword = function parseKeyword(val, valid_keywords) {
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    if (type !== exports.TYPES.KEYWORD) {
	        return undefined;
	    }
	    val = val.toString().toLowerCase();
	    var i;
	    for (i = 0; i < valid_keywords.length; i++) {
	        if (valid_keywords[i].toLowerCase() === val) {
	            return valid_keywords[i];
	        }
	    }
	    return undefined;
	};
	
	// utility to translate from border-width to borderWidth
	var dashedToCamelCase = function (dashed) {
	    var i;
	    var camel = '';
	    var nextCap = false;
	    for (i = 0; i < dashed.length; i++) {
	        if (dashed[i] !== '-') {
	            camel += nextCap ? dashed[i].toUpperCase() : dashed[i];
	            nextCap = false;
	        } else {
	            nextCap = true;
	        }
	    }
	    return camel;
	};
	
	var is_space = /\s/;
	var opening_deliminators = ['"', '\'', '('];
	var closing_deliminators = ['"', '\'', ')'];
	// this splits on whitespace, but keeps quoted and parened parts together
	var getParts = function (str) {
	    var deliminator_stack = [];
	    var length = str.length;
	    var i;
	    var parts = [];
	    var current_part = '';
	    var opening_index;
	    var closing_index;
	    for (i = 0; i < length; i++) {
	        opening_index = opening_deliminators.indexOf(str[i]);
	        closing_index = closing_deliminators.indexOf(str[i]);
	        if (is_space.test(str[i])) {
	            if (deliminator_stack.length === 0) {
	                parts.push(current_part);
	                current_part = '';
	            } else {
	                current_part += str[i];
	            }
	        } else {
	            if (str[i] === '\\') {
	                i++;
	                current_part += str[i];
	            } else {
	                current_part += str[i];
	                if (closing_index !== -1 && closing_index === deliminator_stack[deliminator_stack.length - 1]) {
	                    deliminator_stack.pop();
	                } else if (opening_index !== -1) {
	                    deliminator_stack.push(opening_index);
	                }
	            }
	        }
	    }
	    if (current_part !== '') {
	        parts.push(current_part);
	    }
	    return parts;
	};
	
	/*
	 * this either returns undefined meaning that it isn't valid
	 * or returns an object where the keys are dashed short
	 * hand properties and the values are the values to set
	 * on them
	 */
	exports.shorthandParser = function parse(v, shorthand_for) {
	    var type = exports.valueType(v);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return v;
	    }
	
	    if (typeof v === 'number') {
	        v = v.toString();
	    }
	
	    if (typeof v !== 'string') {
	        return undefined;
	    }
	
	    if (v.toLowerCase() === 'inherit') {
	        return {};
	    }
	    var parts = getParts(v);
	    var valid = true;
	    var obj = {};
	    parts.forEach(function (part) {
	        var part_valid = false;
	        Object.keys(shorthand_for).forEach(function (property) {
	            if (shorthand_for[property].isValid(part)) {
	                part_valid = true;
	                obj[property] = part;
	            }
	        });
	        valid = valid && part_valid;
	    });
	    if (!valid) {
	        return undefined;
	    }
	    return obj;
	};
	
	exports.shorthandSetter = function (property, shorthand_for) {
	    return function (v) {
	        var obj = exports.shorthandParser(v, shorthand_for);
	        if (obj === undefined) {
	            return;
	        }
	        Object.keys(obj).forEach(function (subprop) {
	            // in case subprop is an implicit property, this will clear
	            // *its* subpropertiesX
	            var camel = dashedToCamelCase(subprop);
	            this[camel] = obj[subprop];
	            // in case it gets translated into something else (0 -> 0px)
	            obj[subprop] = this[camel];
	            this.removeProperty(subprop);
	            this._values[subprop] = obj[subprop];
	        }, this);
	        Object.keys(shorthand_for).forEach(function (subprop) {
	            if (!obj.hasOwnProperty(subprop)) {
	                this.removeProperty(subprop);
	                delete this._values[subprop];
	            }
	        }, this);
	        this.setProperty(property, v);
	    };
	};
	
	exports.shorthandGetter = function (property, shorthand_for) {
	    return function () {
	        if (this._values[property] !== undefined) {
	            return this.getPropertyValue(property);
	        }
	        return Object.keys(shorthand_for).map(function (subprop) {
	            return this.getPropertyValue(subprop);
	        }, this).filter(function (value) {
	            return value !== '';
	        }).join(' ');
	    };
	};
	
	// isValid(){1,4} | inherit
	// if one, it applies to all
	// if two, the first applies to the top and bottom, and the second to left and right
	// if three, the first applies to the top, the second to left and right, the third bottom
	// if four, top, right, bottom, left
	exports.implicitSetter = function (property_before, property_after, isValid, parser) {
	    property_after = property_after || '';
	    if (property_after !== '') {
	        property_after = '-' + property_after;
	    }
	
	    return function (v) {
	        if (typeof v === 'number') {
	            v = v.toString();
	        }
	        if (typeof v !== 'string') {
	            return undefined;
	        }
	        if (v.toLowerCase() === 'inherit') {
	            return this.setProperty(property_before + property_after, v);
	        }
	        var parts = getParts(v);
	        if (parts.length < 1 || parts.length > 4) {
	            return undefined;
	        }
	
	        if (!parts.every(isValid)) {
	            return undefined;
	        }
	
	        this.setProperty(property_before + property_after, parser(v));
	
	        this.removeProperty(property_before + '-top' + property_after);
	        this.removeProperty(property_before + '-right' + property_after);
	        this.removeProperty(property_before + '-bottom' + property_after);
	        this.removeProperty(property_before + '-left' + property_after);
	        switch (parts.length) {
	        case 1:
	            this._values[property_before + '-top' + property_after] = parser(parts[0]);
	            this._values[property_before + '-right' + property_after] = parser(parts[0]);
	            this._values[property_before + '-bottom' + property_after] = parser(parts[0]);
	            this._values[property_before + '-left' + property_after] = parser(parts[0]);
	            return v;
	        case 2:
	            this._values[property_before + '-top' + property_after] = parser(parts[0]);
	            this._values[property_before + '-right' + property_after] = parser(parts[1]);
	            this._values[property_before + '-bottom' + property_after] = parser(parts[0]);
	            this._values[property_before + '-left' + property_after] = parser(parts[1]);
	            return v;
	        case 3:
	            this._values[property_before + '-top' + property_after] = parser(parts[0]);
	            this._values[property_before + '-right' + property_after] = parser(parts[1]);
	            this._values[property_before + '-bottom' + property_after] = parser(parts[2]);
	            this._values[property_before + '-left' + property_after] = parser(parts[1]);
	            return v;
	        case 4:
	            this._values[property_before + '-top' + property_after] = parser(parts[0]);
	            this._values[property_before + '-right' + property_after] = parser(parts[1]);
	            this._values[property_before + '-bottom' + property_after] = parser(parts[2]);
	            this._values[property_before + '-left' + property_after] = parser(parts[3]);
	            return v;
	        }
	    };
	};
	
	var camel_to_dashed = /[A-Z]/g;
	/*jslint regexp: true*/
	var first_segment = /^\([^\-]\)-/;
	/*jslint regexp: false*/
	var vendor_prefixes = ['o', 'moz', 'ms', 'webkit'];
	exports.camelToDashed = function (camel_case) {
	    var match;
	    var dashed = camel_case.replace(camel_to_dashed, '-$&').toLowerCase();
	    match = dashed.match(first_segment);
	    if (match && vendor_prefixes.indexOf(match[1]) !== -1) {
	        dashed = '-' + dashed;
	    }
	    return dashed;
	};


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./CSSStyleDeclaration": 101,
		"./CSSStyleDeclaration.js": 101,
		"./css3-properties/borderImage": 564,
		"./css3-properties/borderImage.js": 564,
		"./css3-properties/borderImageOutset": 565,
		"./css3-properties/borderImageOutset.js": 565,
		"./css3-properties/borderImageRepeat": 566,
		"./css3-properties/borderImageRepeat.js": 566,
		"./css3-properties/borderImageSlice": 567,
		"./css3-properties/borderImageSlice.js": 567,
		"./css3-properties/borderImageSource": 568,
		"./css3-properties/borderImageSource.js": 568,
		"./css3-properties/borderImageWidth": 569,
		"./css3-properties/borderImageWidth.js": 569,
		"./parsers": 130,
		"./parsers.js": 130,
		"./properties/alignmentBaseline": 570,
		"./properties/alignmentBaseline.js": 570,
		"./properties/azimuth": 571,
		"./properties/azimuth.js": 571,
		"./properties/background": 572,
		"./properties/background.js": 572,
		"./properties/backgroundAttachment": 573,
		"./properties/backgroundAttachment.js": 573,
		"./properties/backgroundClip": 574,
		"./properties/backgroundClip.js": 574,
		"./properties/backgroundColor": 575,
		"./properties/backgroundColor.js": 575,
		"./properties/backgroundImage": 576,
		"./properties/backgroundImage.js": 576,
		"./properties/backgroundOrigin": 577,
		"./properties/backgroundOrigin.js": 577,
		"./properties/backgroundPosition": 578,
		"./properties/backgroundPosition.js": 578,
		"./properties/backgroundPositionX": 579,
		"./properties/backgroundPositionX.js": 579,
		"./properties/backgroundPositionY": 580,
		"./properties/backgroundPositionY.js": 580,
		"./properties/backgroundRepeat": 581,
		"./properties/backgroundRepeat.js": 581,
		"./properties/backgroundRepeatX": 582,
		"./properties/backgroundRepeatX.js": 582,
		"./properties/backgroundRepeatY": 583,
		"./properties/backgroundRepeatY.js": 583,
		"./properties/backgroundSize": 584,
		"./properties/backgroundSize.js": 584,
		"./properties/baselineShift": 585,
		"./properties/baselineShift.js": 585,
		"./properties/border": 586,
		"./properties/border.js": 586,
		"./properties/borderBottom": 587,
		"./properties/borderBottom.js": 587,
		"./properties/borderBottomColor": 588,
		"./properties/borderBottomColor.js": 588,
		"./properties/borderBottomLeftRadius": 589,
		"./properties/borderBottomLeftRadius.js": 589,
		"./properties/borderBottomRightRadius": 590,
		"./properties/borderBottomRightRadius.js": 590,
		"./properties/borderBottomStyle": 591,
		"./properties/borderBottomStyle.js": 591,
		"./properties/borderBottomWidth": 592,
		"./properties/borderBottomWidth.js": 592,
		"./properties/borderCollapse": 593,
		"./properties/borderCollapse.js": 593,
		"./properties/borderColor": 594,
		"./properties/borderColor.js": 594,
		"./properties/borderImage": 595,
		"./properties/borderImage.js": 595,
		"./properties/borderImageOutset": 596,
		"./properties/borderImageOutset.js": 596,
		"./properties/borderImageRepeat": 597,
		"./properties/borderImageRepeat.js": 597,
		"./properties/borderImageSlice": 598,
		"./properties/borderImageSlice.js": 598,
		"./properties/borderImageSource": 599,
		"./properties/borderImageSource.js": 599,
		"./properties/borderImageWidth": 600,
		"./properties/borderImageWidth.js": 600,
		"./properties/borderLeft": 601,
		"./properties/borderLeft.js": 601,
		"./properties/borderLeftColor": 602,
		"./properties/borderLeftColor.js": 602,
		"./properties/borderLeftStyle": 603,
		"./properties/borderLeftStyle.js": 603,
		"./properties/borderLeftWidth": 604,
		"./properties/borderLeftWidth.js": 604,
		"./properties/borderRadius": 605,
		"./properties/borderRadius.js": 605,
		"./properties/borderRight": 606,
		"./properties/borderRight.js": 606,
		"./properties/borderRightColor": 607,
		"./properties/borderRightColor.js": 607,
		"./properties/borderRightStyle": 608,
		"./properties/borderRightStyle.js": 608,
		"./properties/borderRightWidth": 609,
		"./properties/borderRightWidth.js": 609,
		"./properties/borderSpacing": 610,
		"./properties/borderSpacing.js": 610,
		"./properties/borderStyle": 611,
		"./properties/borderStyle.js": 611,
		"./properties/borderTop": 612,
		"./properties/borderTop.js": 612,
		"./properties/borderTopColor": 613,
		"./properties/borderTopColor.js": 613,
		"./properties/borderTopLeftRadius": 614,
		"./properties/borderTopLeftRadius.js": 614,
		"./properties/borderTopRightRadius": 615,
		"./properties/borderTopRightRadius.js": 615,
		"./properties/borderTopStyle": 616,
		"./properties/borderTopStyle.js": 616,
		"./properties/borderTopWidth": 617,
		"./properties/borderTopWidth.js": 617,
		"./properties/borderWidth": 618,
		"./properties/borderWidth.js": 618,
		"./properties/bottom": 619,
		"./properties/bottom.js": 619,
		"./properties/boxShadow": 620,
		"./properties/boxShadow.js": 620,
		"./properties/boxSizing": 621,
		"./properties/boxSizing.js": 621,
		"./properties/captionSide": 622,
		"./properties/captionSide.js": 622,
		"./properties/clear": 623,
		"./properties/clear.js": 623,
		"./properties/clip": 624,
		"./properties/clip.js": 624,
		"./properties/color": 625,
		"./properties/color.js": 625,
		"./properties/colorInterpolation": 626,
		"./properties/colorInterpolation.js": 626,
		"./properties/colorInterpolationFilters": 627,
		"./properties/colorInterpolationFilters.js": 627,
		"./properties/colorProfile": 628,
		"./properties/colorProfile.js": 628,
		"./properties/colorRendering": 629,
		"./properties/colorRendering.js": 629,
		"./properties/content": 630,
		"./properties/content.js": 630,
		"./properties/counterIncrement": 631,
		"./properties/counterIncrement.js": 631,
		"./properties/counterReset": 632,
		"./properties/counterReset.js": 632,
		"./properties/cssFloat": 633,
		"./properties/cssFloat.js": 633,
		"./properties/cue": 634,
		"./properties/cue.js": 634,
		"./properties/cueAfter": 635,
		"./properties/cueAfter.js": 635,
		"./properties/cueBefore": 636,
		"./properties/cueBefore.js": 636,
		"./properties/cursor": 637,
		"./properties/cursor.js": 637,
		"./properties/direction": 638,
		"./properties/direction.js": 638,
		"./properties/display": 639,
		"./properties/display.js": 639,
		"./properties/dominantBaseline": 640,
		"./properties/dominantBaseline.js": 640,
		"./properties/elevation": 641,
		"./properties/elevation.js": 641,
		"./properties/emptyCells": 642,
		"./properties/emptyCells.js": 642,
		"./properties/enableBackground": 643,
		"./properties/enableBackground.js": 643,
		"./properties/fill": 644,
		"./properties/fill.js": 644,
		"./properties/fillOpacity": 645,
		"./properties/fillOpacity.js": 645,
		"./properties/fillRule": 646,
		"./properties/fillRule.js": 646,
		"./properties/filter": 647,
		"./properties/filter.js": 647,
		"./properties/floodColor": 648,
		"./properties/floodColor.js": 648,
		"./properties/floodOpacity": 649,
		"./properties/floodOpacity.js": 649,
		"./properties/font": 650,
		"./properties/font.js": 650,
		"./properties/fontFamily": 651,
		"./properties/fontFamily.js": 651,
		"./properties/fontSize": 652,
		"./properties/fontSize.js": 652,
		"./properties/fontSizeAdjust": 653,
		"./properties/fontSizeAdjust.js": 653,
		"./properties/fontStretch": 654,
		"./properties/fontStretch.js": 654,
		"./properties/fontStyle": 655,
		"./properties/fontStyle.js": 655,
		"./properties/fontVariant": 656,
		"./properties/fontVariant.js": 656,
		"./properties/fontWeight": 657,
		"./properties/fontWeight.js": 657,
		"./properties/glyphOrientationHorizontal": 658,
		"./properties/glyphOrientationHorizontal.js": 658,
		"./properties/glyphOrientationVertical": 659,
		"./properties/glyphOrientationVertical.js": 659,
		"./properties/height": 660,
		"./properties/height.js": 660,
		"./properties/imageRendering": 661,
		"./properties/imageRendering.js": 661,
		"./properties/kerning": 662,
		"./properties/kerning.js": 662,
		"./properties/left": 663,
		"./properties/left.js": 663,
		"./properties/letterSpacing": 664,
		"./properties/letterSpacing.js": 664,
		"./properties/lightingColor": 665,
		"./properties/lightingColor.js": 665,
		"./properties/lineHeight": 666,
		"./properties/lineHeight.js": 666,
		"./properties/listStyle": 667,
		"./properties/listStyle.js": 667,
		"./properties/listStyleImage": 668,
		"./properties/listStyleImage.js": 668,
		"./properties/listStylePosition": 669,
		"./properties/listStylePosition.js": 669,
		"./properties/listStyleType": 670,
		"./properties/listStyleType.js": 670,
		"./properties/margin": 671,
		"./properties/margin.js": 671,
		"./properties/marginBottom": 672,
		"./properties/marginBottom.js": 672,
		"./properties/marginLeft": 673,
		"./properties/marginLeft.js": 673,
		"./properties/marginRight": 674,
		"./properties/marginRight.js": 674,
		"./properties/marginTop": 675,
		"./properties/marginTop.js": 675,
		"./properties/marker": 676,
		"./properties/marker.js": 676,
		"./properties/markerEnd": 677,
		"./properties/markerEnd.js": 677,
		"./properties/markerMid": 678,
		"./properties/markerMid.js": 678,
		"./properties/markerOffset": 679,
		"./properties/markerOffset.js": 679,
		"./properties/markerStart": 680,
		"./properties/markerStart.js": 680,
		"./properties/marks": 681,
		"./properties/marks.js": 681,
		"./properties/mask": 682,
		"./properties/mask.js": 682,
		"./properties/maxHeight": 683,
		"./properties/maxHeight.js": 683,
		"./properties/maxWidth": 684,
		"./properties/maxWidth.js": 684,
		"./properties/minHeight": 685,
		"./properties/minHeight.js": 685,
		"./properties/minWidth": 686,
		"./properties/minWidth.js": 686,
		"./properties/opacity": 687,
		"./properties/opacity.js": 687,
		"./properties/orphans": 688,
		"./properties/orphans.js": 688,
		"./properties/outline": 689,
		"./properties/outline.js": 689,
		"./properties/outlineColor": 690,
		"./properties/outlineColor.js": 690,
		"./properties/outlineOffset": 691,
		"./properties/outlineOffset.js": 691,
		"./properties/outlineStyle": 692,
		"./properties/outlineStyle.js": 692,
		"./properties/outlineWidth": 693,
		"./properties/outlineWidth.js": 693,
		"./properties/overflow": 694,
		"./properties/overflow.js": 694,
		"./properties/overflowX": 695,
		"./properties/overflowX.js": 695,
		"./properties/overflowY": 696,
		"./properties/overflowY.js": 696,
		"./properties/padding": 697,
		"./properties/padding.js": 697,
		"./properties/paddingBottom": 698,
		"./properties/paddingBottom.js": 698,
		"./properties/paddingLeft": 699,
		"./properties/paddingLeft.js": 699,
		"./properties/paddingRight": 700,
		"./properties/paddingRight.js": 700,
		"./properties/paddingTop": 701,
		"./properties/paddingTop.js": 701,
		"./properties/page": 702,
		"./properties/page.js": 702,
		"./properties/pageBreakAfter": 703,
		"./properties/pageBreakAfter.js": 703,
		"./properties/pageBreakBefore": 704,
		"./properties/pageBreakBefore.js": 704,
		"./properties/pageBreakInside": 705,
		"./properties/pageBreakInside.js": 705,
		"./properties/pause": 706,
		"./properties/pause.js": 706,
		"./properties/pauseAfter": 707,
		"./properties/pauseAfter.js": 707,
		"./properties/pauseBefore": 708,
		"./properties/pauseBefore.js": 708,
		"./properties/pitch": 709,
		"./properties/pitch.js": 709,
		"./properties/pitchRange": 710,
		"./properties/pitchRange.js": 710,
		"./properties/playDuring": 711,
		"./properties/playDuring.js": 711,
		"./properties/pointerEvents": 712,
		"./properties/pointerEvents.js": 712,
		"./properties/position": 713,
		"./properties/position.js": 713,
		"./properties/quotes": 714,
		"./properties/quotes.js": 714,
		"./properties/resize": 715,
		"./properties/resize.js": 715,
		"./properties/richness": 716,
		"./properties/richness.js": 716,
		"./properties/right": 717,
		"./properties/right.js": 717,
		"./properties/shapeRendering": 718,
		"./properties/shapeRendering.js": 718,
		"./properties/size": 719,
		"./properties/size.js": 719,
		"./properties/speak": 720,
		"./properties/speak.js": 720,
		"./properties/speakHeader": 721,
		"./properties/speakHeader.js": 721,
		"./properties/speakNumeral": 722,
		"./properties/speakNumeral.js": 722,
		"./properties/speakPunctuation": 723,
		"./properties/speakPunctuation.js": 723,
		"./properties/speechRate": 724,
		"./properties/speechRate.js": 724,
		"./properties/src": 725,
		"./properties/src.js": 725,
		"./properties/stopColor": 726,
		"./properties/stopColor.js": 726,
		"./properties/stopOpacity": 727,
		"./properties/stopOpacity.js": 727,
		"./properties/stress": 728,
		"./properties/stress.js": 728,
		"./properties/stroke": 729,
		"./properties/stroke.js": 729,
		"./properties/strokeDasharray": 730,
		"./properties/strokeDasharray.js": 730,
		"./properties/strokeDashoffset": 731,
		"./properties/strokeDashoffset.js": 731,
		"./properties/strokeLinecap": 732,
		"./properties/strokeLinecap.js": 732,
		"./properties/strokeLinejoin": 733,
		"./properties/strokeLinejoin.js": 733,
		"./properties/strokeMiterlimit": 734,
		"./properties/strokeMiterlimit.js": 734,
		"./properties/strokeOpacity": 735,
		"./properties/strokeOpacity.js": 735,
		"./properties/strokeWidth": 736,
		"./properties/strokeWidth.js": 736,
		"./properties/tableLayout": 737,
		"./properties/tableLayout.js": 737,
		"./properties/textAlign": 738,
		"./properties/textAlign.js": 738,
		"./properties/textAnchor": 739,
		"./properties/textAnchor.js": 739,
		"./properties/textDecoration": 740,
		"./properties/textDecoration.js": 740,
		"./properties/textIndent": 741,
		"./properties/textIndent.js": 741,
		"./properties/textLineThrough": 742,
		"./properties/textLineThrough.js": 742,
		"./properties/textLineThroughColor": 743,
		"./properties/textLineThroughColor.js": 743,
		"./properties/textLineThroughMode": 744,
		"./properties/textLineThroughMode.js": 744,
		"./properties/textLineThroughStyle": 745,
		"./properties/textLineThroughStyle.js": 745,
		"./properties/textLineThroughWidth": 746,
		"./properties/textLineThroughWidth.js": 746,
		"./properties/textOverflow": 747,
		"./properties/textOverflow.js": 747,
		"./properties/textOverline": 748,
		"./properties/textOverline.js": 748,
		"./properties/textOverlineColor": 749,
		"./properties/textOverlineColor.js": 749,
		"./properties/textOverlineMode": 750,
		"./properties/textOverlineMode.js": 750,
		"./properties/textOverlineStyle": 751,
		"./properties/textOverlineStyle.js": 751,
		"./properties/textOverlineWidth": 752,
		"./properties/textOverlineWidth.js": 752,
		"./properties/textRendering": 753,
		"./properties/textRendering.js": 753,
		"./properties/textShadow": 754,
		"./properties/textShadow.js": 754,
		"./properties/textTransform": 755,
		"./properties/textTransform.js": 755,
		"./properties/textUnderline": 756,
		"./properties/textUnderline.js": 756,
		"./properties/textUnderlineColor": 757,
		"./properties/textUnderlineColor.js": 757,
		"./properties/textUnderlineMode": 758,
		"./properties/textUnderlineMode.js": 758,
		"./properties/textUnderlineStyle": 759,
		"./properties/textUnderlineStyle.js": 759,
		"./properties/textUnderlineWidth": 760,
		"./properties/textUnderlineWidth.js": 760,
		"./properties/top": 761,
		"./properties/top.js": 761,
		"./properties/unicodeBidi": 762,
		"./properties/unicodeBidi.js": 762,
		"./properties/unicodeRange": 763,
		"./properties/unicodeRange.js": 763,
		"./properties/vectorEffect": 764,
		"./properties/vectorEffect.js": 764,
		"./properties/verticalAlign": 765,
		"./properties/verticalAlign.js": 765,
		"./properties/visibility": 766,
		"./properties/visibility.js": 766,
		"./properties/voiceFamily": 767,
		"./properties/voiceFamily.js": 767,
		"./properties/volume": 768,
		"./properties/volume.js": 768,
		"./properties/webkitAnimation": 769,
		"./properties/webkitAnimation.js": 769,
		"./properties/webkitAnimationDelay": 770,
		"./properties/webkitAnimationDelay.js": 770,
		"./properties/webkitAnimationDirection": 771,
		"./properties/webkitAnimationDirection.js": 771,
		"./properties/webkitAnimationDuration": 772,
		"./properties/webkitAnimationDuration.js": 772,
		"./properties/webkitAnimationFillMode": 773,
		"./properties/webkitAnimationFillMode.js": 773,
		"./properties/webkitAnimationIterationCount": 774,
		"./properties/webkitAnimationIterationCount.js": 774,
		"./properties/webkitAnimationName": 775,
		"./properties/webkitAnimationName.js": 775,
		"./properties/webkitAnimationPlayState": 776,
		"./properties/webkitAnimationPlayState.js": 776,
		"./properties/webkitAnimationTimingFunction": 777,
		"./properties/webkitAnimationTimingFunction.js": 777,
		"./properties/webkitAppearance": 778,
		"./properties/webkitAppearance.js": 778,
		"./properties/webkitAspectRatio": 779,
		"./properties/webkitAspectRatio.js": 779,
		"./properties/webkitBackfaceVisibility": 780,
		"./properties/webkitBackfaceVisibility.js": 780,
		"./properties/webkitBackgroundClip": 781,
		"./properties/webkitBackgroundClip.js": 781,
		"./properties/webkitBackgroundComposite": 782,
		"./properties/webkitBackgroundComposite.js": 782,
		"./properties/webkitBackgroundOrigin": 783,
		"./properties/webkitBackgroundOrigin.js": 783,
		"./properties/webkitBackgroundSize": 784,
		"./properties/webkitBackgroundSize.js": 784,
		"./properties/webkitBorderAfter": 785,
		"./properties/webkitBorderAfter.js": 785,
		"./properties/webkitBorderAfterColor": 786,
		"./properties/webkitBorderAfterColor.js": 786,
		"./properties/webkitBorderAfterStyle": 787,
		"./properties/webkitBorderAfterStyle.js": 787,
		"./properties/webkitBorderAfterWidth": 788,
		"./properties/webkitBorderAfterWidth.js": 788,
		"./properties/webkitBorderBefore": 789,
		"./properties/webkitBorderBefore.js": 789,
		"./properties/webkitBorderBeforeColor": 790,
		"./properties/webkitBorderBeforeColor.js": 790,
		"./properties/webkitBorderBeforeStyle": 791,
		"./properties/webkitBorderBeforeStyle.js": 791,
		"./properties/webkitBorderBeforeWidth": 792,
		"./properties/webkitBorderBeforeWidth.js": 792,
		"./properties/webkitBorderEnd": 793,
		"./properties/webkitBorderEnd.js": 793,
		"./properties/webkitBorderEndColor": 794,
		"./properties/webkitBorderEndColor.js": 794,
		"./properties/webkitBorderEndStyle": 795,
		"./properties/webkitBorderEndStyle.js": 795,
		"./properties/webkitBorderEndWidth": 796,
		"./properties/webkitBorderEndWidth.js": 796,
		"./properties/webkitBorderFit": 797,
		"./properties/webkitBorderFit.js": 797,
		"./properties/webkitBorderHorizontalSpacing": 798,
		"./properties/webkitBorderHorizontalSpacing.js": 798,
		"./properties/webkitBorderImage": 799,
		"./properties/webkitBorderImage.js": 799,
		"./properties/webkitBorderRadius": 800,
		"./properties/webkitBorderRadius.js": 800,
		"./properties/webkitBorderStart": 801,
		"./properties/webkitBorderStart.js": 801,
		"./properties/webkitBorderStartColor": 802,
		"./properties/webkitBorderStartColor.js": 802,
		"./properties/webkitBorderStartStyle": 803,
		"./properties/webkitBorderStartStyle.js": 803,
		"./properties/webkitBorderStartWidth": 804,
		"./properties/webkitBorderStartWidth.js": 804,
		"./properties/webkitBorderVerticalSpacing": 805,
		"./properties/webkitBorderVerticalSpacing.js": 805,
		"./properties/webkitBoxAlign": 806,
		"./properties/webkitBoxAlign.js": 806,
		"./properties/webkitBoxDirection": 807,
		"./properties/webkitBoxDirection.js": 807,
		"./properties/webkitBoxFlex": 808,
		"./properties/webkitBoxFlex.js": 808,
		"./properties/webkitBoxFlexGroup": 809,
		"./properties/webkitBoxFlexGroup.js": 809,
		"./properties/webkitBoxLines": 810,
		"./properties/webkitBoxLines.js": 810,
		"./properties/webkitBoxOrdinalGroup": 811,
		"./properties/webkitBoxOrdinalGroup.js": 811,
		"./properties/webkitBoxOrient": 812,
		"./properties/webkitBoxOrient.js": 812,
		"./properties/webkitBoxPack": 813,
		"./properties/webkitBoxPack.js": 813,
		"./properties/webkitBoxReflect": 814,
		"./properties/webkitBoxReflect.js": 814,
		"./properties/webkitBoxShadow": 815,
		"./properties/webkitBoxShadow.js": 815,
		"./properties/webkitColorCorrection": 816,
		"./properties/webkitColorCorrection.js": 816,
		"./properties/webkitColumnAxis": 817,
		"./properties/webkitColumnAxis.js": 817,
		"./properties/webkitColumnBreakAfter": 818,
		"./properties/webkitColumnBreakAfter.js": 818,
		"./properties/webkitColumnBreakBefore": 819,
		"./properties/webkitColumnBreakBefore.js": 819,
		"./properties/webkitColumnBreakInside": 820,
		"./properties/webkitColumnBreakInside.js": 820,
		"./properties/webkitColumnCount": 821,
		"./properties/webkitColumnCount.js": 821,
		"./properties/webkitColumnGap": 822,
		"./properties/webkitColumnGap.js": 822,
		"./properties/webkitColumnRule": 823,
		"./properties/webkitColumnRule.js": 823,
		"./properties/webkitColumnRuleColor": 824,
		"./properties/webkitColumnRuleColor.js": 824,
		"./properties/webkitColumnRuleStyle": 825,
		"./properties/webkitColumnRuleStyle.js": 825,
		"./properties/webkitColumnRuleWidth": 826,
		"./properties/webkitColumnRuleWidth.js": 826,
		"./properties/webkitColumnSpan": 827,
		"./properties/webkitColumnSpan.js": 827,
		"./properties/webkitColumnWidth": 828,
		"./properties/webkitColumnWidth.js": 828,
		"./properties/webkitColumns": 829,
		"./properties/webkitColumns.js": 829,
		"./properties/webkitFilter": 830,
		"./properties/webkitFilter.js": 830,
		"./properties/webkitFlexAlign": 831,
		"./properties/webkitFlexAlign.js": 831,
		"./properties/webkitFlexDirection": 832,
		"./properties/webkitFlexDirection.js": 832,
		"./properties/webkitFlexFlow": 833,
		"./properties/webkitFlexFlow.js": 833,
		"./properties/webkitFlexItemAlign": 834,
		"./properties/webkitFlexItemAlign.js": 834,
		"./properties/webkitFlexLinePack": 835,
		"./properties/webkitFlexLinePack.js": 835,
		"./properties/webkitFlexOrder": 836,
		"./properties/webkitFlexOrder.js": 836,
		"./properties/webkitFlexPack": 837,
		"./properties/webkitFlexPack.js": 837,
		"./properties/webkitFlexWrap": 838,
		"./properties/webkitFlexWrap.js": 838,
		"./properties/webkitFlowFrom": 839,
		"./properties/webkitFlowFrom.js": 839,
		"./properties/webkitFlowInto": 840,
		"./properties/webkitFlowInto.js": 840,
		"./properties/webkitFontFeatureSettings": 841,
		"./properties/webkitFontFeatureSettings.js": 841,
		"./properties/webkitFontKerning": 842,
		"./properties/webkitFontKerning.js": 842,
		"./properties/webkitFontSizeDelta": 843,
		"./properties/webkitFontSizeDelta.js": 843,
		"./properties/webkitFontSmoothing": 844,
		"./properties/webkitFontSmoothing.js": 844,
		"./properties/webkitFontVariantLigatures": 845,
		"./properties/webkitFontVariantLigatures.js": 845,
		"./properties/webkitHighlight": 846,
		"./properties/webkitHighlight.js": 846,
		"./properties/webkitHyphenateCharacter": 847,
		"./properties/webkitHyphenateCharacter.js": 847,
		"./properties/webkitHyphenateLimitAfter": 848,
		"./properties/webkitHyphenateLimitAfter.js": 848,
		"./properties/webkitHyphenateLimitBefore": 849,
		"./properties/webkitHyphenateLimitBefore.js": 849,
		"./properties/webkitHyphenateLimitLines": 850,
		"./properties/webkitHyphenateLimitLines.js": 850,
		"./properties/webkitHyphens": 851,
		"./properties/webkitHyphens.js": 851,
		"./properties/webkitLineAlign": 852,
		"./properties/webkitLineAlign.js": 852,
		"./properties/webkitLineBoxContain": 853,
		"./properties/webkitLineBoxContain.js": 853,
		"./properties/webkitLineBreak": 854,
		"./properties/webkitLineBreak.js": 854,
		"./properties/webkitLineClamp": 855,
		"./properties/webkitLineClamp.js": 855,
		"./properties/webkitLineGrid": 856,
		"./properties/webkitLineGrid.js": 856,
		"./properties/webkitLineSnap": 857,
		"./properties/webkitLineSnap.js": 857,
		"./properties/webkitLocale": 858,
		"./properties/webkitLocale.js": 858,
		"./properties/webkitLogicalHeight": 859,
		"./properties/webkitLogicalHeight.js": 859,
		"./properties/webkitLogicalWidth": 860,
		"./properties/webkitLogicalWidth.js": 860,
		"./properties/webkitMarginAfter": 861,
		"./properties/webkitMarginAfter.js": 861,
		"./properties/webkitMarginAfterCollapse": 862,
		"./properties/webkitMarginAfterCollapse.js": 862,
		"./properties/webkitMarginBefore": 863,
		"./properties/webkitMarginBefore.js": 863,
		"./properties/webkitMarginBeforeCollapse": 864,
		"./properties/webkitMarginBeforeCollapse.js": 864,
		"./properties/webkitMarginBottomCollapse": 865,
		"./properties/webkitMarginBottomCollapse.js": 865,
		"./properties/webkitMarginCollapse": 866,
		"./properties/webkitMarginCollapse.js": 866,
		"./properties/webkitMarginEnd": 867,
		"./properties/webkitMarginEnd.js": 867,
		"./properties/webkitMarginStart": 868,
		"./properties/webkitMarginStart.js": 868,
		"./properties/webkitMarginTopCollapse": 869,
		"./properties/webkitMarginTopCollapse.js": 869,
		"./properties/webkitMarquee": 870,
		"./properties/webkitMarquee.js": 870,
		"./properties/webkitMarqueeDirection": 871,
		"./properties/webkitMarqueeDirection.js": 871,
		"./properties/webkitMarqueeIncrement": 872,
		"./properties/webkitMarqueeIncrement.js": 872,
		"./properties/webkitMarqueeRepetition": 873,
		"./properties/webkitMarqueeRepetition.js": 873,
		"./properties/webkitMarqueeSpeed": 874,
		"./properties/webkitMarqueeSpeed.js": 874,
		"./properties/webkitMarqueeStyle": 875,
		"./properties/webkitMarqueeStyle.js": 875,
		"./properties/webkitMask": 876,
		"./properties/webkitMask.js": 876,
		"./properties/webkitMaskAttachment": 877,
		"./properties/webkitMaskAttachment.js": 877,
		"./properties/webkitMaskBoxImage": 878,
		"./properties/webkitMaskBoxImage.js": 878,
		"./properties/webkitMaskBoxImageOutset": 879,
		"./properties/webkitMaskBoxImageOutset.js": 879,
		"./properties/webkitMaskBoxImageRepeat": 880,
		"./properties/webkitMaskBoxImageRepeat.js": 880,
		"./properties/webkitMaskBoxImageSlice": 881,
		"./properties/webkitMaskBoxImageSlice.js": 881,
		"./properties/webkitMaskBoxImageSource": 882,
		"./properties/webkitMaskBoxImageSource.js": 882,
		"./properties/webkitMaskBoxImageWidth": 883,
		"./properties/webkitMaskBoxImageWidth.js": 883,
		"./properties/webkitMaskClip": 884,
		"./properties/webkitMaskClip.js": 884,
		"./properties/webkitMaskComposite": 885,
		"./properties/webkitMaskComposite.js": 885,
		"./properties/webkitMaskImage": 886,
		"./properties/webkitMaskImage.js": 886,
		"./properties/webkitMaskOrigin": 887,
		"./properties/webkitMaskOrigin.js": 887,
		"./properties/webkitMaskPosition": 888,
		"./properties/webkitMaskPosition.js": 888,
		"./properties/webkitMaskPositionX": 889,
		"./properties/webkitMaskPositionX.js": 889,
		"./properties/webkitMaskPositionY": 890,
		"./properties/webkitMaskPositionY.js": 890,
		"./properties/webkitMaskRepeat": 891,
		"./properties/webkitMaskRepeat.js": 891,
		"./properties/webkitMaskRepeatX": 892,
		"./properties/webkitMaskRepeatX.js": 892,
		"./properties/webkitMaskRepeatY": 893,
		"./properties/webkitMaskRepeatY.js": 893,
		"./properties/webkitMaskSize": 894,
		"./properties/webkitMaskSize.js": 894,
		"./properties/webkitMatchNearestMailBlockquoteColor": 895,
		"./properties/webkitMatchNearestMailBlockquoteColor.js": 895,
		"./properties/webkitMaxLogicalHeight": 896,
		"./properties/webkitMaxLogicalHeight.js": 896,
		"./properties/webkitMaxLogicalWidth": 897,
		"./properties/webkitMaxLogicalWidth.js": 897,
		"./properties/webkitMinLogicalHeight": 898,
		"./properties/webkitMinLogicalHeight.js": 898,
		"./properties/webkitMinLogicalWidth": 899,
		"./properties/webkitMinLogicalWidth.js": 899,
		"./properties/webkitNbspMode": 900,
		"./properties/webkitNbspMode.js": 900,
		"./properties/webkitOverflowScrolling": 901,
		"./properties/webkitOverflowScrolling.js": 901,
		"./properties/webkitPaddingAfter": 902,
		"./properties/webkitPaddingAfter.js": 902,
		"./properties/webkitPaddingBefore": 903,
		"./properties/webkitPaddingBefore.js": 903,
		"./properties/webkitPaddingEnd": 904,
		"./properties/webkitPaddingEnd.js": 904,
		"./properties/webkitPaddingStart": 905,
		"./properties/webkitPaddingStart.js": 905,
		"./properties/webkitPerspective": 906,
		"./properties/webkitPerspective.js": 906,
		"./properties/webkitPerspectiveOrigin": 907,
		"./properties/webkitPerspectiveOrigin.js": 907,
		"./properties/webkitPerspectiveOriginX": 908,
		"./properties/webkitPerspectiveOriginX.js": 908,
		"./properties/webkitPerspectiveOriginY": 909,
		"./properties/webkitPerspectiveOriginY.js": 909,
		"./properties/webkitPrintColorAdjust": 910,
		"./properties/webkitPrintColorAdjust.js": 910,
		"./properties/webkitRegionBreakAfter": 911,
		"./properties/webkitRegionBreakAfter.js": 911,
		"./properties/webkitRegionBreakBefore": 912,
		"./properties/webkitRegionBreakBefore.js": 912,
		"./properties/webkitRegionBreakInside": 913,
		"./properties/webkitRegionBreakInside.js": 913,
		"./properties/webkitRegionOverflow": 914,
		"./properties/webkitRegionOverflow.js": 914,
		"./properties/webkitRtlOrdering": 915,
		"./properties/webkitRtlOrdering.js": 915,
		"./properties/webkitSvgShadow": 916,
		"./properties/webkitSvgShadow.js": 916,
		"./properties/webkitTapHighlightColor": 917,
		"./properties/webkitTapHighlightColor.js": 917,
		"./properties/webkitTextCombine": 918,
		"./properties/webkitTextCombine.js": 918,
		"./properties/webkitTextDecorationsInEffect": 919,
		"./properties/webkitTextDecorationsInEffect.js": 919,
		"./properties/webkitTextEmphasis": 920,
		"./properties/webkitTextEmphasis.js": 920,
		"./properties/webkitTextEmphasisColor": 921,
		"./properties/webkitTextEmphasisColor.js": 921,
		"./properties/webkitTextEmphasisPosition": 922,
		"./properties/webkitTextEmphasisPosition.js": 922,
		"./properties/webkitTextEmphasisStyle": 923,
		"./properties/webkitTextEmphasisStyle.js": 923,
		"./properties/webkitTextFillColor": 924,
		"./properties/webkitTextFillColor.js": 924,
		"./properties/webkitTextOrientation": 925,
		"./properties/webkitTextOrientation.js": 925,
		"./properties/webkitTextSecurity": 926,
		"./properties/webkitTextSecurity.js": 926,
		"./properties/webkitTextSizeAdjust": 927,
		"./properties/webkitTextSizeAdjust.js": 927,
		"./properties/webkitTextStroke": 928,
		"./properties/webkitTextStroke.js": 928,
		"./properties/webkitTextStrokeColor": 929,
		"./properties/webkitTextStrokeColor.js": 929,
		"./properties/webkitTextStrokeWidth": 930,
		"./properties/webkitTextStrokeWidth.js": 930,
		"./properties/webkitTransform": 931,
		"./properties/webkitTransform.js": 931,
		"./properties/webkitTransformOrigin": 932,
		"./properties/webkitTransformOrigin.js": 932,
		"./properties/webkitTransformOriginX": 933,
		"./properties/webkitTransformOriginX.js": 933,
		"./properties/webkitTransformOriginY": 934,
		"./properties/webkitTransformOriginY.js": 934,
		"./properties/webkitTransformOriginZ": 935,
		"./properties/webkitTransformOriginZ.js": 935,
		"./properties/webkitTransformStyle": 936,
		"./properties/webkitTransformStyle.js": 936,
		"./properties/webkitTransition": 937,
		"./properties/webkitTransition.js": 937,
		"./properties/webkitTransitionDelay": 938,
		"./properties/webkitTransitionDelay.js": 938,
		"./properties/webkitTransitionDuration": 939,
		"./properties/webkitTransitionDuration.js": 939,
		"./properties/webkitTransitionProperty": 940,
		"./properties/webkitTransitionProperty.js": 940,
		"./properties/webkitTransitionTimingFunction": 941,
		"./properties/webkitTransitionTimingFunction.js": 941,
		"./properties/webkitUserDrag": 942,
		"./properties/webkitUserDrag.js": 942,
		"./properties/webkitUserModify": 943,
		"./properties/webkitUserModify.js": 943,
		"./properties/webkitUserSelect": 944,
		"./properties/webkitUserSelect.js": 944,
		"./properties/webkitWrap": 945,
		"./properties/webkitWrap.js": 945,
		"./properties/webkitWrapFlow": 946,
		"./properties/webkitWrapFlow.js": 946,
		"./properties/webkitWrapMargin": 947,
		"./properties/webkitWrapMargin.js": 947,
		"./properties/webkitWrapPadding": 948,
		"./properties/webkitWrapPadding.js": 948,
		"./properties/webkitWrapShapeInside": 949,
		"./properties/webkitWrapShapeInside.js": 949,
		"./properties/webkitWrapShapeOutside": 950,
		"./properties/webkitWrapShapeOutside.js": 950,
		"./properties/webkitWrapThrough": 951,
		"./properties/webkitWrapThrough.js": 951,
		"./properties/webkitWritingMode": 952,
		"./properties/webkitWritingMode.js": 952,
		"./properties/whiteSpace": 953,
		"./properties/whiteSpace.js": 953,
		"./properties/widows": 954,
		"./properties/widows.js": 954,
		"./properties/width": 955,
		"./properties/width.js": 955,
		"./properties/wordBreak": 956,
		"./properties/wordBreak.js": 956,
		"./properties/wordSpacing": 957,
		"./properties/wordSpacing.js": 957,
		"./properties/wordWrap": 958,
		"./properties/wordWrap.js": 958,
		"./properties/writingMode": 959,
		"./properties/writingMode.js": 959,
		"./properties/zIndex": 960,
		"./properties/zIndex.js": 960,
		"./properties/zoom": 961,
		"./properties/zoom.js": 961
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration
	 */
	CSSOM.CSSStyleDeclaration = function CSSStyleDeclaration(){
		this.length = 0;
		this.parentRule = null;
	
		// NON-STANDARD
		this._importants = {};
	};
	
	
	CSSOM.CSSStyleDeclaration.prototype = {
	
		constructor: CSSOM.CSSStyleDeclaration,
	
		/**
		 *
		 * @param {string} name
		 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-getPropertyValue
		 * @return {string} the value of the property if it has been explicitly set for this declaration block.
		 * Returns the empty string if the property has not been set.
		 */
		getPropertyValue: function(name) {
			return this[name] || "";
		},
	
		/**
		 *
		 * @param {string} name
		 * @param {string} value
		 * @param {string} [priority=null] "important" or null
		 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-setProperty
		 */
		setProperty: function(name, value, priority) {
			if (this[name]) {
				// Property already exist. Overwrite it.
				var index = Array.prototype.indexOf.call(this, name);
				if (index < 0) {
					this[this.length] = name;
					this.length++;
				}
			} else {
				// New property.
				this[this.length] = name;
				this.length++;
			}
			this[name] = value;
			this._importants[name] = priority;
		},
	
		/**
		 *
		 * @param {string} name
		 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-removeProperty
		 * @return {string} the value of the property if it has been explicitly set for this declaration block.
		 * Returns the empty string if the property has not been set or the property name does not correspond to a known CSS property.
		 */
		removeProperty: function(name) {
			if (!(name in this)) {
				return "";
			}
			var index = Array.prototype.indexOf.call(this, name);
			if (index < 0) {
				return "";
			}
			var prevValue = this[name];
			this[name] = "";
	
			// That's what WebKit and Opera do
			Array.prototype.splice.call(this, index, 1);
	
			// That's what Firefox does
			//this[index] = ""
	
			return prevValue;
		},
	
		getPropertyCSSValue: function() {
			//FIXME
		},
	
		/**
		 *
		 * @param {String} name
		 */
		getPropertyPriority: function(name) {
			return this._importants[name] || "";
		},
	
	
		/**
		 *   element.style.overflow = "auto"
		 *   element.style.getPropertyShorthand("overflow-x")
		 *   -> "overflow"
		 */
		getPropertyShorthand: function() {
			//FIXME
		},
	
		isPropertyImplicit: function() {
			//FIXME
		},
	
		// Doesn't work in IE < 9
		get cssText(){
			var properties = [];
			for (var i=0, length=this.length; i < length; ++i) {
				var name = this[i];
				var value = this.getPropertyValue(name);
				var priority = this.getPropertyPriority(name);
				if (priority) {
					priority = " !" + priority;
				}
				properties[i] = name + ": " + value + priority + ";";
			}
			return properties.join(" ");
		},
	
		set cssText(cssText){
			var i, name;
			for (i = this.length; i--;) {
				name = this[i];
				this[name] = "";
			}
			Array.prototype.splice.call(this, 0, this.length);
			this._importants = {};
	
			var dummyRule = CSSOM.parse('#bogus{' + cssText + '}').cssRules[0].style;
			var length = dummyRule.length;
			for (i = 0; i < length; ++i) {
				name = dummyRule[i];
				this.setProperty(dummyRule[i], dummyRule.getPropertyValue(name), dummyRule.getPropertyPriority(name));
			}
		}
	};
	
	
	//.CommonJS
	exports.CSSStyleDeclaration = CSSOM.CSSStyleDeclaration;
	CSSOM.parse = __webpack_require__(143).parse; // Cannot be included sooner due to the mutual dependency between parse.js and CSSStyleDeclaration.js
	///CommonJS


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#the-cssrule-interface
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSRule
	 */
	CSSOM.CSSRule = function CSSRule() {
		this.parentRule = null;
		this.parentStyleSheet = null;
	};
	
	CSSOM.CSSRule.STYLE_RULE = 1;
	CSSOM.CSSRule.IMPORT_RULE = 3;
	CSSOM.CSSRule.MEDIA_RULE = 4;
	CSSOM.CSSRule.FONT_FACE_RULE = 5;
	CSSOM.CSSRule.PAGE_RULE = 6;
	CSSOM.CSSRule.WEBKIT_KEYFRAMES_RULE = 8;
	CSSOM.CSSRule.WEBKIT_KEYFRAME_RULE = 9;
	
	// Obsolete in CSSOM http://dev.w3.org/csswg/cssom/
	//CSSOM.CSSRule.UNKNOWN_RULE = 0;
	//CSSOM.CSSRule.CHARSET_RULE = 2;
	
	// Never implemented
	//CSSOM.CSSRule.VARIABLES_RULE = 7;
	
	CSSOM.CSSRule.prototype = {
		constructor: CSSOM.CSSRule
		//FIXME
	};
	
	
	//.CommonJS
	exports.CSSRule = CSSOM.CSSRule;
	///CommonJS


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSStyleDeclaration: __webpack_require__(132).CSSStyleDeclaration,
		CSSRule: __webpack_require__(133).CSSRule
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#cssstylerule
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleRule
	 */
	CSSOM.CSSStyleRule = function CSSStyleRule() {
		CSSOM.CSSRule.call(this);
		this.selectorText = "";
		this.style = new CSSOM.CSSStyleDeclaration;
		this.style.parentRule = this;
	};
	
	CSSOM.CSSStyleRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSStyleRule.prototype.constructor = CSSOM.CSSStyleRule;
	CSSOM.CSSStyleRule.prototype.type = 1;
	
	CSSOM.CSSStyleRule.prototype.__defineGetter__("cssText", function() {
		var text;
		if (this.selectorText) {
			text = this.selectorText + " {" + this.style.cssText + "}";
		} else {
			text = "";
		}
		return text;
	});
	
	CSSOM.CSSStyleRule.prototype.__defineSetter__("cssText", function(cssText) {
		var rule = CSSOM.CSSStyleRule.parse(cssText);
		this.style = rule.style;
		this.selectorText = rule.selectorText;
	});
	
	
	/**
	 * NON-STANDARD
	 * lightweight version of parse.js.
	 * @param {string} ruleText
	 * @return CSSStyleRule
	 */
	CSSOM.CSSStyleRule.parse = function(ruleText) {
		var i = 0;
		var state = "selector";
		var index;
		var j = i;
		var buffer = "";
	
		var SIGNIFICANT_WHITESPACE = {
			"selector": true,
			"value": true
		};
	
		var styleRule = new CSSOM.CSSStyleRule;
		var selector, name, value, priority="";
	
		for (var character; character = ruleText.charAt(i); i++) {
	
			switch (character) {
	
			case " ":
			case "\t":
			case "\r":
			case "\n":
			case "\f":
				if (SIGNIFICANT_WHITESPACE[state]) {
					// Squash 2 or more white-spaces in the row into 1
					switch (ruleText.charAt(i - 1)) {
						case " ":
						case "\t":
						case "\r":
						case "\n":
						case "\f":
							break;
						default:
							buffer += " ";
							break;
					}
				}
				break;
	
			// String
			case '"':
				j = i + 1;
				index = ruleText.indexOf('"', j) + 1;
				if (!index) {
					throw '" is missing';
				}
				buffer += ruleText.slice(i, index);
				i = index - 1;
				break;
	
			case "'":
				j = i + 1;
				index = ruleText.indexOf("'", j) + 1;
				if (!index) {
					throw "' is missing";
				}
				buffer += ruleText.slice(i, index);
				i = index - 1;
				break;
	
			// Comment
			case "/":
				if (ruleText.charAt(i + 1) === "*") {
					i += 2;
					index = ruleText.indexOf("*/", i);
					if (index === -1) {
						throw new SyntaxError("Missing */");
					} else {
						i = index + 1;
					}
				} else {
					buffer += character;
				}
				break;
	
			case "{":
				if (state === "selector") {
					styleRule.selectorText = buffer.trim();
					buffer = "";
					state = "name";
				}
				break;
	
			case ":":
				if (state === "name") {
					name = buffer.trim();
					buffer = "";
					state = "value";
				} else {
					buffer += character;
				}
				break;
	
			case "!":
				if (state === "value" && ruleText.indexOf("!important", i) === i) {
					priority = "important";
					i += "important".length;
				} else {
					buffer += character;
				}
				break;
	
			case ";":
				if (state === "value") {
					styleRule.style.setProperty(name, buffer.trim(), priority);
					priority = "";
					buffer = "";
					state = "name";
				} else {
					buffer += character;
				}
				break;
	
			case "}":
				if (state === "value") {
					styleRule.style.setProperty(name, buffer.trim(), priority);
					priority = "";
					buffer = "";
				} else if (state === "name") {
					break;
				} else {
					buffer += character;
				}
				state = "selector";
				break;
	
			default:
				buffer += character;
				break;
	
			}
		}
	
		return styleRule;
	
	};
	
	
	//.CommonJS
	exports.CSSStyleRule = CSSOM.CSSStyleRule;
	///CommonJS


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#the-medialist-interface
	 */
	CSSOM.MediaList = function MediaList(){
		this.length = 0;
	};
	
	CSSOM.MediaList.prototype = {
	
		constructor: CSSOM.MediaList,
	
		/**
		 * @return {string}
		 */
		get mediaText() {
			return Array.prototype.join.call(this, ", ");
		},
	
		/**
		 * @param {string} value
		 */
		set mediaText(value) {
			var values = value.split(",");
			var length = this.length = values.length;
			for (var i=0; i<length; i++) {
				this[i] = values[i].trim();
			}
		},
	
		/**
		 * @param {string} medium
		 */
		appendMedium: function(medium) {
			if (Array.prototype.indexOf.call(this, medium) === -1) {
				this[this.length] = medium;
				this.length++;
			}
		},
	
		/**
		 * @param {string} medium
		 */
		deleteMedium: function(medium) {
			var index = Array.prototype.indexOf.call(this, medium);
			if (index !== -1) {
				Array.prototype.splice.call(this, index, 1);
			}
		}
	
	};
	
	
	//.CommonJS
	exports.MediaList = CSSOM.MediaList;
	///CommonJS


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSRule: __webpack_require__(133).CSSRule,
		MediaList: __webpack_require__(135).MediaList
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#cssmediarule
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSMediaRule
	 */
	CSSOM.CSSMediaRule = function CSSMediaRule() {
		CSSOM.CSSRule.call(this);
		this.media = new CSSOM.MediaList;
		this.cssRules = [];
	};
	
	CSSOM.CSSMediaRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSMediaRule.prototype.constructor = CSSOM.CSSMediaRule;
	CSSOM.CSSMediaRule.prototype.type = 4;
	//FIXME
	//CSSOM.CSSMediaRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSMediaRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;
	
	// http://opensource.apple.com/source/WebCore/WebCore-658.28/css/CSSMediaRule.cpp
	CSSOM.CSSMediaRule.prototype.__defineGetter__("cssText", function() {
		var cssTexts = [];
		for (var i=0, length=this.cssRules.length; i < length; i++) {
			cssTexts.push(this.cssRules[i].cssText);
		}
		return "@media " + this.media.mediaText + " {" + cssTexts.join("") + "}";
	});
	
	
	//.CommonJS
	exports.CSSMediaRule = CSSOM.CSSMediaRule;
	///CommonJS


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSRule: __webpack_require__(133).CSSRule,
		CSSStyleSheet: __webpack_require__(140).CSSStyleSheet,
		MediaList: __webpack_require__(135).MediaList
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#cssimportrule
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSImportRule
	 */
	CSSOM.CSSImportRule = function CSSImportRule() {
		CSSOM.CSSRule.call(this);
		this.href = "";
		this.media = new CSSOM.MediaList;
		this.styleSheet = new CSSOM.CSSStyleSheet;
	};
	
	CSSOM.CSSImportRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSImportRule.prototype.constructor = CSSOM.CSSImportRule;
	CSSOM.CSSImportRule.prototype.type = 3;
	CSSOM.CSSImportRule.prototype.__defineGetter__("cssText", function() {
		var mediaText = this.media.mediaText;
		return "@import url(" + this.href + ")" + (mediaText ? " " + mediaText : "") + ";";
	});
	
	CSSOM.CSSImportRule.prototype.__defineSetter__("cssText", function(cssText) {
		var i = 0;
	
		/**
		 * @import url(partial.css) screen, handheld;
		 *        ||               |
		 *        after-import     media
		 *         |
		 *         url
		 */
		var state = '';
	
		var buffer = '';
		var index;
		var mediaText = '';
		for (var character; character = cssText.charAt(i); i++) {
	
			switch (character) {
				case ' ':
				case '\t':
				case '\r':
				case '\n':
				case '\f':
					if (state === 'after-import') {
						state = 'url';
					} else {
						buffer += character;
					}
					break;
	
				case '@':
					if (!state && cssText.indexOf('@import', i) === i) {
						state = 'after-import';
						i += 'import'.length;
						buffer = '';
					}
					break;
	
				case 'u':
					if (state === 'url' && cssText.indexOf('url(', i) === i) {
						index = cssText.indexOf(')', i + 1);
						if (index === -1) {
							throw i + ': ")" not found';
						}
						i += 'url('.length;
						var url = cssText.slice(i, index);
						if (url[0] === url[url.length - 1]) {
							if (url[0] === '"' || url[0] === "'") {
								url = url.slice(1, -1);
							}
						}
						this.href = url;
						i = index;
						state = 'media';
					}
					break;
	
				case '"':
					if (state === 'url') {
						index = cssText.indexOf('"', i + 1);
						if (!index) {
							throw i + ": '\"' not found";
						}
						this.href = cssText.slice(i + 1, index);
						i = index;
						state = 'media';
					}
					break;
	
				case "'":
					if (state === 'url') {
						index = cssText.indexOf("'", i + 1);
						if (!index) {
							throw i + ': "\'" not found';
						}
						this.href = cssText.slice(i + 1, index);
						i = index;
						state = 'media';
					}
					break;
	
				case ';':
					if (state === 'media') {
						if (buffer) {
							this.media.mediaText = buffer.trim();
						}
					}
					break;
	
				default:
					if (state === 'media') {
						buffer += character;
					}
					break;
			}
		}
	});
	
	
	//.CommonJS
	exports.CSSImportRule = CSSOM.CSSImportRule;
	///CommonJS


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSStyleDeclaration: __webpack_require__(132).CSSStyleDeclaration,
		CSSRule: __webpack_require__(133).CSSRule
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#css-font-face-rule
	 */
	CSSOM.CSSFontFaceRule = function CSSFontFaceRule() {
		CSSOM.CSSRule.call(this);
		this.style = new CSSOM.CSSStyleDeclaration;
		this.style.parentRule = this;
	};
	
	CSSOM.CSSFontFaceRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSFontFaceRule.prototype.constructor = CSSOM.CSSFontFaceRule;
	CSSOM.CSSFontFaceRule.prototype.type = 5;
	//FIXME
	//CSSOM.CSSFontFaceRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSFontFaceRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;
	
	// http://www.opensource.apple.com/source/WebCore/WebCore-955.66.1/css/WebKitCSSFontFaceRule.cpp
	CSSOM.CSSFontFaceRule.prototype.__defineGetter__("cssText", function() {
		return "@font-face {" + this.style.cssText + "}";
	});
	
	
	//.CommonJS
	exports.CSSFontFaceRule = CSSOM.CSSFontFaceRule;
	///CommonJS


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#the-stylesheet-interface
	 */
	CSSOM.StyleSheet = function StyleSheet() {
		this.parentStyleSheet = null;
	};
	
	
	//.CommonJS
	exports.StyleSheet = CSSOM.StyleSheet;
	///CommonJS


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		StyleSheet: __webpack_require__(139).StyleSheet,
		CSSStyleRule: __webpack_require__(134).CSSStyleRule
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet
	 */
	CSSOM.CSSStyleSheet = function CSSStyleSheet() {
		CSSOM.StyleSheet.call(this);
		this.cssRules = [];
	};
	
	
	CSSOM.CSSStyleSheet.prototype = new CSSOM.StyleSheet;
	CSSOM.CSSStyleSheet.prototype.constructor = CSSOM.CSSStyleSheet;
	
	
	/**
	 * Used to insert a new rule into the style sheet. The new rule now becomes part of the cascade.
	 *
	 *   sheet = new Sheet("body {margin: 0}")
	 *   sheet.toString()
	 *   -> "body{margin:0;}"
	 *   sheet.insertRule("img {border: none}", 0)
	 *   -> 0
	 *   sheet.toString()
	 *   -> "img{border:none;}body{margin:0;}"
	 *
	 * @param {string} rule
	 * @param {number} index
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet-insertRule
	 * @return {number} The index within the style sheet's rule collection of the newly inserted rule.
	 */
	CSSOM.CSSStyleSheet.prototype.insertRule = function(rule, index) {
		if (index < 0 || index > this.cssRules.length) {
			throw new RangeError("INDEX_SIZE_ERR");
		}
		var cssRule = CSSOM.parse(rule).cssRules[0];
		this.cssRules.splice(index, 0, cssRule);
		return index;
	};
	
	
	/**
	 * Used to delete a rule from the style sheet.
	 *
	 *   sheet = new Sheet("img{border:none} body{margin:0}")
	 *   sheet.toString()
	 *   -> "img{border:none;}body{margin:0;}"
	 *   sheet.deleteRule(0)
	 *   sheet.toString()
	 *   -> "body{margin:0;}"
	 *
	 * @param {number} index within the style sheet's rule list of the rule to remove.
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet-deleteRule
	 */
	CSSOM.CSSStyleSheet.prototype.deleteRule = function(index) {
		if (index < 0 || index >= this.cssRules.length) {
			throw new RangeError("INDEX_SIZE_ERR");
		}
		this.cssRules.splice(index, 1);
	};
	
	
	/**
	 * NON-STANDARD
	 * @return {string} serialize stylesheet
	 */
	CSSOM.CSSStyleSheet.prototype.toString = function() {
		var result = "";
		var rules = this.cssRules;
		for (var i=0; i<rules.length; i++) {
			result += rules[i].cssText + "\n";
		}
		return result;
	};
	
	
	//.CommonJS
	exports.CSSStyleSheet = CSSOM.CSSStyleSheet;
	CSSOM.parse = __webpack_require__(143).parse; // Cannot be included sooner due to the mutual dependency between parse.js and CSSStyleSheet.js
	///CommonJS


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSRule: __webpack_require__(133).CSSRule
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://www.w3.org/TR/css3-animations/#DOM-CSSKeyframesRule
	 */
	CSSOM.CSSKeyframesRule = function CSSKeyframesRule() {
		CSSOM.CSSRule.call(this);
		this.name = '';
		this.cssRules = [];
	};
	
	CSSOM.CSSKeyframesRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSKeyframesRule.prototype.constructor = CSSOM.CSSKeyframesRule;
	CSSOM.CSSKeyframesRule.prototype.type = 8;
	//FIXME
	//CSSOM.CSSKeyframesRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSKeyframesRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;
	
	// http://www.opensource.apple.com/source/WebCore/WebCore-955.66.1/css/WebKitCSSKeyframesRule.cpp
	CSSOM.CSSKeyframesRule.prototype.__defineGetter__("cssText", function() {
		var cssTexts = [];
		for (var i=0, length=this.cssRules.length; i < length; i++) {
			cssTexts.push("  " + this.cssRules[i].cssText);
		}
		return "@" + (this._vendorPrefix || '') + "keyframes " + this.name + " { \n" + cssTexts.join("\n") + "\n}";
	});
	
	
	//.CommonJS
	exports.CSSKeyframesRule = CSSOM.CSSKeyframesRule;
	///CommonJS


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSRule: __webpack_require__(133).CSSRule,
		CSSStyleDeclaration: __webpack_require__(132).CSSStyleDeclaration
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://www.w3.org/TR/css3-animations/#DOM-CSSKeyframeRule
	 */
	CSSOM.CSSKeyframeRule = function CSSKeyframeRule() {
		CSSOM.CSSRule.call(this);
		this.keyText = '';
		this.style = new CSSOM.CSSStyleDeclaration;
		this.style.parentRule = this;
	};
	
	CSSOM.CSSKeyframeRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSKeyframeRule.prototype.constructor = CSSOM.CSSKeyframeRule;
	CSSOM.CSSKeyframeRule.prototype.type = 9;
	//FIXME
	//CSSOM.CSSKeyframeRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSKeyframeRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;
	
	// http://www.opensource.apple.com/source/WebCore/WebCore-955.66.1/css/WebKitCSSKeyframeRule.cpp
	CSSOM.CSSKeyframeRule.prototype.__defineGetter__("cssText", function() {
		return this.keyText + " {" + this.style.cssText + "} ";
	});
	
	
	//.CommonJS
	exports.CSSKeyframeRule = CSSOM.CSSKeyframeRule;
	///CommonJS


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @param {string} token
	 */
	CSSOM.parse = function parse(token) {
	
		var i = 0;
	
		/**
		  "before-selector" or
		  "selector" or
		  "atRule" or
		  "atBlock" or
		  "before-name" or
		  "name" or
		  "before-value" or
		  "value"
		*/
		var state = "before-selector";
	
		var index;
		var buffer = "";
	
		var SIGNIFICANT_WHITESPACE = {
			"selector": true,
			"value": true,
			"atRule": true,
			"importRule-begin": true,
			"importRule": true,
			"atBlock": true
		};
	
		var styleSheet = new CSSOM.CSSStyleSheet;
	
		// @type CSSStyleSheet|CSSMediaRule|CSSFontFaceRule|CSSKeyframesRule
		var currentScope = styleSheet;
	
		// @type CSSMediaRule|CSSKeyframesRule
		var parentRule;
	
		var selector, name, value, priority="", styleRule, mediaRule, importRule, fontFaceRule, keyframesRule, keyframeRule;
	
		var atKeyframesRegExp = /@(-(?:\w+-)+)?keyframes/g;
	
		var parseError = function(message) {
			var lines = token.substring(0, i).split('\n');
			var lineCount = lines.length;
			var charCount = lines.pop().length + 1;
			var error = new Error(message + ' (line ' + lineCount + ', char ' + charCount + ')');
			error.line = lineCount;
			error.char = charCount;
			error.styleSheet = styleSheet;
			throw error;
		};
	
		for (var character; character = token.charAt(i); i++) {
	
			switch (character) {
	
			case " ":
			case "\t":
			case "\r":
			case "\n":
			case "\f":
				if (SIGNIFICANT_WHITESPACE[state]) {
					buffer += character;
				}
				break;
	
			// String
			case '"':
				index = token.indexOf('"', i + 1) + 1;
				if (!index) {
					parseError('Unmatched "');
				}
				buffer += token.slice(i, index);
				i = index - 1;
				switch (state) {
					case 'before-value':
						state = 'value';
						break;
					case 'importRule-begin':
						state = 'importRule';
						break;
				}
				break;
	
			case "'":
				index = token.indexOf("'", i + 1) + 1;
				if (!index) {
					parseError("Unmatched '");
				}
				buffer += token.slice(i, index);
				i = index - 1;
				switch (state) {
					case 'before-value':
						state = 'value';
						break;
					case 'importRule-begin':
						state = 'importRule';
						break;
				}
				break;
	
			// Comment
			case "/":
				if (token.charAt(i + 1) === "*") {
					i += 2;
					index = token.indexOf("*/", i);
					if (index === -1) {
						parseError("Missing */");
					} else {
						i = index + 1;
					}
				} else {
					buffer += character;
				}
				if (state === "importRule-begin") {
					buffer += " ";
					state = "importRule";
				}
				break;
	
			// At-rule
			case "@":
				if (token.indexOf("@media", i) === i) {
					state = "atBlock";
					mediaRule = new CSSOM.CSSMediaRule;
					mediaRule.__starts = i;
					i += "media".length;
					buffer = "";
					break;
				} else if (token.indexOf("@import", i) === i) {
					state = "importRule-begin";
					i += "import".length;
					buffer += "@import";
					break;
				} else if (token.indexOf("@font-face", i) === i) {
					state = "fontFaceRule-begin";
					i += "font-face".length;
					fontFaceRule = new CSSOM.CSSFontFaceRule;
					fontFaceRule.__starts = i;
					buffer = "";
					break;
				} else {
					atKeyframesRegExp.lastIndex = i;
					var matchKeyframes = atKeyframesRegExp.exec(token);
					if (matchKeyframes && matchKeyframes.index === i) {
						state = "keyframesRule-begin";
						keyframesRule = new CSSOM.CSSKeyframesRule;
						keyframesRule.__starts = i;
						keyframesRule._vendorPrefix = matchKeyframes[1]; // Will come out as undefined if no prefix was found
						i += matchKeyframes[0].length - 1;
						buffer = "";
						break;
					} else if (state == "selector") {
						state = "atRule";
					}
				}
				buffer += character;
				break;
	
			case "{":
				if (state === "selector" || state === "atRule") {
					styleRule.selectorText = buffer.trim();
					styleRule.style.__starts = i;
					buffer = "";
					state = "before-name";
				} else if (state === "atBlock") {
					mediaRule.media.mediaText = buffer.trim();
					currentScope = parentRule = mediaRule;
					mediaRule.parentStyleSheet = styleSheet;
					buffer = "";
					state = "before-selector";
				} else if (state === "fontFaceRule-begin") {
					if (parentRule) {
						fontFaceRule.parentRule = parentRule;
					}
					fontFaceRule.parentStyleSheet = styleSheet;
					styleRule = fontFaceRule;
					buffer = "";
					state = "before-name";
				} else if (state === "keyframesRule-begin") {
					keyframesRule.name = buffer.trim();
					if (parentRule) {
						keyframesRule.parentRule = parentRule;
					}
					keyframesRule.parentStyleSheet = styleSheet;
					currentScope = parentRule = keyframesRule;
					buffer = "";
					state = "keyframeRule-begin";
				} else if (state === "keyframeRule-begin") {
					styleRule = new CSSOM.CSSKeyframeRule;
					styleRule.keyText = buffer.trim();
					styleRule.__starts = i;
					buffer = "";
					state = "before-name";
				}
				break;
	
			case ":":
				if (state === "name") {
					name = buffer.trim();
					buffer = "";
					state = "before-value";
				} else {
					buffer += character;
				}
				break;
	
			case '(':
				if (state === 'value') {
					index = token.indexOf(')', i + 1);
					if (index === -1) {
						parseError('Unmatched "("');
					}
					buffer += token.slice(i, index + 1);
					i = index;
				} else {
					buffer += character;
				}
				break;
	
			case "!":
				if (state === "value" && token.indexOf("!important", i) === i) {
					priority = "important";
					i += "important".length;
				} else {
					buffer += character;
				}
				break;
	
			case ";":
				switch (state) {
					case "value":
						styleRule.style.setProperty(name, buffer.trim(), priority);
						priority = "";
						buffer = "";
						state = "before-name";
						break;
					case "atRule":
						buffer = "";
						state = "before-selector";
						break;
					case "importRule":
						importRule = new CSSOM.CSSImportRule;
						importRule.parentStyleSheet = importRule.styleSheet.parentStyleSheet = styleSheet;
						importRule.cssText = buffer + character;
						styleSheet.cssRules.push(importRule);
						buffer = "";
						state = "before-selector";
						break;
					default:
						buffer += character;
						break;
				}
				break;
	
			case "}":
				switch (state) {
					case "value":
						styleRule.style.setProperty(name, buffer.trim(), priority);
						priority = "";
					case "before-name":
					case "name":
						styleRule.__ends = i + 1;
						if (parentRule) {
							styleRule.parentRule = parentRule;
						}
						styleRule.parentStyleSheet = styleSheet;
						currentScope.cssRules.push(styleRule);
						buffer = "";
						if (currentScope.constructor === CSSOM.CSSKeyframesRule) {
							state = "keyframeRule-begin";
						} else {
							state = "before-selector";
						}
						break;
					case "keyframeRule-begin":
					case "before-selector":
					case "selector":
						// End of media rule.
						if (!parentRule) {
							parseError("Unexpected }");
						}
						currentScope.__ends = i + 1;
						// Nesting rules aren't supported yet
						styleSheet.cssRules.push(currentScope);
						currentScope = styleSheet;
						parentRule = null;
						buffer = "";
						state = "before-selector";
						break;
				}
				break;
	
			default:
				switch (state) {
					case "before-selector":
						state = "selector";
						styleRule = new CSSOM.CSSStyleRule;
						styleRule.__starts = i;
						break;
					case "before-name":
						state = "name";
						break;
					case "before-value":
						state = "value";
						break;
					case "importRule-begin":
						state = "importRule";
						break;
				}
				buffer += character;
				break;
			}
		}
	
		return styleSheet;
	};
	
	
	//.CommonJS
	exports.parse = CSSOM.parse;
	// The following modules cannot be included sooner due to the mutual dependency with parse.js
	CSSOM.CSSStyleSheet = __webpack_require__(140).CSSStyleSheet;
	CSSOM.CSSStyleRule = __webpack_require__(134).CSSStyleRule;
	CSSOM.CSSImportRule = __webpack_require__(137).CSSImportRule;
	CSSOM.CSSMediaRule = __webpack_require__(136).CSSMediaRule;
	CSSOM.CSSFontFaceRule = __webpack_require__(138).CSSFontFaceRule;
	CSSOM.CSSStyleDeclaration = __webpack_require__(132).CSSStyleDeclaration;
	CSSOM.CSSKeyframeRule = __webpack_require__(142).CSSKeyframeRule;
	CSSOM.CSSKeyframesRule = __webpack_require__(141).CSSKeyframesRule;
	///CommonJS


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSStyleSheet: __webpack_require__(140).CSSStyleSheet,
		CSSStyleRule: __webpack_require__(134).CSSStyleRule,
		CSSMediaRule: __webpack_require__(136).CSSMediaRule,
		CSSStyleDeclaration: __webpack_require__(132).CSSStyleDeclaration,
		CSSKeyframeRule: __webpack_require__(142).CSSKeyframeRule,
		CSSKeyframesRule: __webpack_require__(141).CSSKeyframesRule
	};
	///CommonJS
	
	
	/**
	 * Produces a deep copy of stylesheet â the instance variables of stylesheet are copied recursively.
	 * @param {CSSStyleSheet|CSSOM.CSSStyleSheet} stylesheet
	 * @nosideeffects
	 * @return {CSSOM.CSSStyleSheet}
	 */
	CSSOM.clone = function clone(stylesheet) {
	
		var cloned = new CSSOM.CSSStyleSheet;
	
		var rules = stylesheet.cssRules;
		if (!rules) {
			return cloned;
		}
	
		var RULE_TYPES = {
			1: CSSOM.CSSStyleRule,
			4: CSSOM.CSSMediaRule,
			//3: CSSOM.CSSImportRule,
			//5: CSSOM.CSSFontFaceRule,
			//6: CSSOM.CSSPageRule,
			8: CSSOM.CSSKeyframesRule,
			9: CSSOM.CSSKeyframeRule
		};
	
		for (var i=0, rulesLength=rules.length; i < rulesLength; i++) {
			var rule = rules[i];
			var ruleClone = cloned.cssRules[i] = new RULE_TYPES[rule.type];
	
			var style = rule.style;
			if (style) {
				var styleClone = ruleClone.style = new CSSOM.CSSStyleDeclaration;
				for (var j=0, styleLength=style.length; j < styleLength; j++) {
					var name = styleClone[j] = style[j];
					styleClone[name] = style[name];
					styleClone._importants[name] = style.getPropertyPriority(name);
				}
				styleClone.length = style.length;
			}
	
			if (rule.hasOwnProperty('keyText')) {
				ruleClone.keyText = rule.keyText;
			}
	
			if (rule.hasOwnProperty('selectorText')) {
				ruleClone.selectorText = rule.selectorText;
			}
	
			if (rule.hasOwnProperty('mediaText')) {
				ruleClone.mediaText = rule.mediaText;
			}
	
			if (rule.hasOwnProperty('cssRules')) {
				ruleClone.cssRules = clone(rule).cssRules;
			}
		}
	
		return cloned;
	
	};
	
	//.CommonJS
	exports.clone = CSSOM.clone;
	///CommonJS


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	module.exports = Stream;
	
	var EE = __webpack_require__(103).EventEmitter;
	var inherits = __webpack_require__(979);
	
	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(974);
	Stream.Writable = __webpack_require__(975);
	Stream.Duplex = __webpack_require__(976);
	Stream.Transform = __webpack_require__(977);
	Stream.PassThrough = __webpack_require__(978);
	
	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;
	
	
	
	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.
	
	function Stream() {
	  EE.call(this);
	}
	
	Stream.prototype.pipe = function(dest, options) {
	  var source = this;
	
	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }
	
	  source.on('data', ondata);
	
	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }
	
	  dest.on('drain', ondrain);
	
	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }
	
	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	
	    dest.end();
	  }
	
	
	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	
	    if (typeof dest.destroy === 'function') dest.destroy();
	  }
	
	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }
	
	  source.on('error', onerror);
	  dest.on('error', onerror);
	
	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);
	
	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);
	
	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);
	
	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);
	
	    dest.removeListener('close', cleanup);
	  }
	
	  source.on('end', cleanup);
	  source.on('close', cleanup);
	
	  dest.on('close', cleanup);
	
	  dest.emit('pipe', source);
	
	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Object#toString() ref for stringify().
	 */
	
	var toString = Object.prototype.toString;
	
	/**
	 * Object#hasOwnProperty ref
	 */
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * Array#indexOf shim.
	 */
	
	var indexOf = typeof Array.prototype.indexOf === 'function'
	  ? function(arr, el) { return arr.indexOf(el); }
	  : function(arr, el) {
	      for (var i = 0; i < arr.length; i++) {
	        if (arr[i] === el) return i;
	      }
	      return -1;
	    };
	
	/**
	 * Array.isArray shim.
	 */
	
	var isArray = Array.isArray || function(arr) {
	  return toString.call(arr) == '[object Array]';
	};
	
	/**
	 * Object.keys shim.
	 */
	
	var objectKeys = Object.keys || function(obj) {
	  var ret = [];
	  for (var key in obj) {
	    if (obj.hasOwnProperty(key)) {
	      ret.push(key);
	    }
	  }
	  return ret;
	};
	
	/**
	 * Array#forEach shim.
	 */
	
	var forEach = typeof Array.prototype.forEach === 'function'
	  ? function(arr, fn) { return arr.forEach(fn); }
	  : function(arr, fn) {
	      for (var i = 0; i < arr.length; i++) fn(arr[i]);
	    };
	
	/**
	 * Array#reduce shim.
	 */
	
	var reduce = function(arr, fn, initial) {
	  if (typeof arr.reduce === 'function') return arr.reduce(fn, initial);
	  var res = initial;
	  for (var i = 0; i < arr.length; i++) res = fn(res, arr[i]);
	  return res;
	};
	
	/**
	 * Cache non-integer test regexp.
	 */
	
	var isint = /^[0-9]+$/;
	
	function promote(parent, key) {
	  if (parent[key].length == 0) return parent[key] = {}
	  var t = {};
	  for (var i in parent[key]) {
	    if (hasOwnProperty.call(parent[key], i)) {
	      t[i] = parent[key][i];
	    }
	  }
	  parent[key] = t;
	  return t;
	}
	
	function parse(parts, parent, key, val) {
	  var part = parts.shift();
	  
	  // illegal
	  if (Object.getOwnPropertyDescriptor(Object.prototype, key)) return;
	  
	  // end
	  if (!part) {
	    if (isArray(parent[key])) {
	      parent[key].push(val);
	    } else if ('object' == typeof parent[key]) {
	      parent[key] = val;
	    } else if ('undefined' == typeof parent[key]) {
	      parent[key] = val;
	    } else {
	      parent[key] = [parent[key], val];
	    }
	    // array
	  } else {
	    var obj = parent[key] = parent[key] || [];
	    if (']' == part) {
	      if (isArray(obj)) {
	        if ('' != val) obj.push(val);
	      } else if ('object' == typeof obj) {
	        obj[objectKeys(obj).length] = val;
	      } else {
	        obj = parent[key] = [parent[key], val];
	      }
	      // prop
	    } else if (~indexOf(part, ']')) {
	      part = part.substr(0, part.length - 1);
	      if (!isint.test(part) && isArray(obj)) obj = promote(parent, key);
	      parse(parts, obj, part, val);
	      // key
	    } else {
	      if (!isint.test(part) && isArray(obj)) obj = promote(parent, key);
	      parse(parts, obj, part, val);
	    }
	  }
	}
	
	/**
	 * Merge parent key/val pair.
	 */
	
	function merge(parent, key, val){
	  if (~indexOf(key, ']')) {
	    var parts = key.split('[')
	      , len = parts.length
	      , last = len - 1;
	    parse(parts, parent, 'base', val);
	    // optimize
	  } else {
	    if (!isint.test(key) && isArray(parent.base)) {
	      var t = {};
	      for (var k in parent.base) t[k] = parent.base[k];
	      parent.base = t;
	    }
	    set(parent.base, key, val);
	  }
	
	  return parent;
	}
	
	/**
	 * Compact sparse arrays.
	 */
	
	function compact(obj) {
	  if ('object' != typeof obj) return obj;
	
	  if (isArray(obj)) {
	    var ret = [];
	
	    for (var i in obj) {
	      if (hasOwnProperty.call(obj, i)) {
	        ret.push(obj[i]);
	      }
	    }
	
	    return ret;
	  }
	
	  for (var key in obj) {
	    obj[key] = compact(obj[key]);
	  }
	
	  return obj;
	}
	
	/**
	 * Parse the given obj.
	 */
	
	function parseObject(obj){
	  var ret = { base: {} };
	
	  forEach(objectKeys(obj), function(name){
	    merge(ret, name, obj[name]);
	  });
	
	  return compact(ret.base);
	}
	
	/**
	 * Parse the given str.
	 */
	
	function parseString(str){
	  var ret = reduce(String(str).split('&'), function(ret, pair){
	    var eql = indexOf(pair, '=')
	      , brace = lastBraceInKey(pair)
	      , key = pair.substr(0, brace || eql)
	      , val = pair.substr(brace || eql, pair.length)
	      , val = val.substr(indexOf(val, '=') + 1, val.length);
	
	    // ?foo
	    if ('' == key) key = pair, val = '';
	    if ('' == key) return ret;
	
	    return merge(ret, decode(key), decode(val));
	  }, { base: {} }).base;
	
	  return compact(ret);
	}
	
	/**
	 * Parse the given query `str` or `obj`, returning an object.
	 *
	 * @param {String} str | {Object} obj
	 * @return {Object}
	 * @api public
	 */
	
	exports.parse = function(str){
	  if (null == str || '' == str) return {};
	  return 'object' == typeof str
	    ? parseObject(str)
	    : parseString(str);
	};
	
	/**
	 * Turn the given `obj` into a query string
	 *
	 * @param {Object} obj
	 * @return {String}
	 * @api public
	 */
	
	var stringify = exports.stringify = function(obj, prefix) {
	  if (isArray(obj)) {
	    return stringifyArray(obj, prefix);
	  } else if ('[object Object]' == toString.call(obj)) {
	    return stringifyObject(obj, prefix);
	  } else if ('string' == typeof obj) {
	    return stringifyString(obj, prefix);
	  } else {
	    return prefix + '=' + encodeURIComponent(String(obj));
	  }
	};
	
	/**
	 * Stringify the given `str`.
	 *
	 * @param {String} str
	 * @param {String} prefix
	 * @return {String}
	 * @api private
	 */
	
	function stringifyString(str, prefix) {
	  if (!prefix) throw new TypeError('stringify expects an object');
	  return prefix + '=' + encodeURIComponent(str);
	}
	
	/**
	 * Stringify the given `arr`.
	 *
	 * @param {Array} arr
	 * @param {String} prefix
	 * @return {String}
	 * @api private
	 */
	
	function stringifyArray(arr, prefix) {
	  var ret = [];
	  if (!prefix) throw new TypeError('stringify expects an object');
	  for (var i = 0; i < arr.length; i++) {
	    ret.push(stringify(arr[i], prefix + '[' + i + ']'));
	  }
	  return ret.join('&');
	}
	
	/**
	 * Stringify the given `obj`.
	 *
	 * @param {Object} obj
	 * @param {String} prefix
	 * @return {String}
	 * @api private
	 */
	
	function stringifyObject(obj, prefix) {
	  var ret = []
	    , keys = objectKeys(obj)
	    , key;
	
	  for (var i = 0, len = keys.length; i < len; ++i) {
	    key = keys[i];
	    if ('' == key) continue;
	    if (null == obj[key]) {
	      ret.push(encodeURIComponent(key) + '=');
	    } else {
	      ret.push(stringify(obj[key], prefix
	        ? prefix + '[' + encodeURIComponent(key) + ']'
	        : encodeURIComponent(key)));
	    }
	  }
	
	  return ret.join('&');
	}
	
	/**
	 * Set `obj`'s `key` to `val` respecting
	 * the weird and wonderful syntax of a qs,
	 * where "foo=bar&foo=baz" becomes an array.
	 *
	 * @param {Object} obj
	 * @param {String} key
	 * @param {String} val
	 * @api private
	 */
	
	function set(obj, key, val) {
	  var v = obj[key];
	  if (Object.getOwnPropertyDescriptor(Object.prototype, key)) return;
	  if (undefined === v) {
	    obj[key] = val;
	  } else if (isArray(v)) {
	    v.push(val);
	  } else {
	    obj[key] = [v, val];
	  }
	}
	
	/**
	 * Locate last brace in `str` within the key.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */
	
	function lastBraceInKey(str) {
	  var len = str.length
	    , brace
	    , c;
	  for (var i = 0; i < len; ++i) {
	    c = str[i];
	    if (']' == c) brace = false;
	    if ('[' == c) brace = true;
	    if ('=' == c && !brace) return i;
	  }
	}
	
	/**
	 * Decode `str`.
	 *
	 * @param {String} str
	 * @return {String}
	 * @api private
	 */
	
	function decode(str) {
	  try {
	    return decodeURIComponent(str.replace(/\+/g, ' '));
	  } catch (err) {
	    return str;
	  }
	}


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(963)
	
	function error () {
	  var m = [].slice.call(arguments).join(' ')
	  throw new Error([
	    m,
	    'we accept pull requests',
	    'http://github.com/dominictarr/crypto-browserify'
	    ].join('\n'))
	}
	
	exports.createHash = __webpack_require__(964)
	
	exports.createHmac = __webpack_require__(965)
	
	exports.randomBytes = function(size, callback) {
	  if (callback && callback.call) {
	    try {
	      callback.call(this, undefined, new Buffer(rng(size)))
	    } catch (err) { callback(err) }
	  } else {
	    return new Buffer(rng(size))
	  }
	}
	
	function each(a, f) {
	  for(var i in a)
	    f(a[i], i)
	}
	
	exports.getHashes = function () {
	  return ['sha1', 'sha256', 'md5', 'rmd160']
	
	}
	
	var p = __webpack_require__(966)(exports.createHmac)
	exports.pbkdf2 = p.pbkdf2
	exports.pbkdf2Sync = p.pbkdf2Sync
	
	
	// the least I can do is make error messages for the rest of the node.js/crypto api.
	each(['createCredentials'
	, 'createCipher'
	, 'createCipheriv'
	, 'createDecipher'
	, 'createDecipheriv'
	, 'createSign'
	, 'createVerify'
	, 'createDiffieHellman'
	], function (name) {
	  exports[name] = function () {
	    error('sorry,', name, 'is not implemented yet')
	  }
	})
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(48).Buffer))

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = ForeverAgent
	ForeverAgent.SSL = ForeverAgentSSL
	
	var util = __webpack_require__(102)
	  , Agent = __webpack_require__(46).Agent
	  , net = __webpack_require__(22)
	  , tls = __webpack_require__(22)
	  , AgentSSL = __webpack_require__(47).Agent
	
	function ForeverAgent(options) {
	  var self = this
	  self.options = options || {}
	  self.requests = {}
	  self.sockets = {}
	  self.freeSockets = {}
	  self.maxSockets = self.options.maxSockets || Agent.defaultMaxSockets
	  self.minSockets = self.options.minSockets || ForeverAgent.defaultMinSockets
	  self.on('free', function(socket, host, port) {
	    var name = host + ':' + port
	    if (self.requests[name] && self.requests[name].length) {
	      self.requests[name].shift().onSocket(socket)
	    } else if (self.sockets[name].length < self.minSockets) {
	      if (!self.freeSockets[name]) self.freeSockets[name] = []
	      self.freeSockets[name].push(socket)
	      
	      // if an error happens while we don't use the socket anyway, meh, throw the socket away
	      var onIdleError = function() {
	        socket.destroy()
	      }
	      socket._onIdleError = onIdleError
	      socket.on('error', onIdleError)
	    } else {
	      // If there are no pending requests just destroy the
	      // socket and it will get removed from the pool. This
	      // gets us out of timeout issues and allows us to
	      // default to Connection:keep-alive.
	      socket.destroy()
	    }
	  })
	
	}
	util.inherits(ForeverAgent, Agent)
	
	ForeverAgent.defaultMinSockets = 5
	
	
	ForeverAgent.prototype.createConnection = net.createConnection
	ForeverAgent.prototype.addRequestNoreuse = Agent.prototype.addRequest
	ForeverAgent.prototype.addRequest = function(req, host, port) {
	  var name = host + ':' + port
	  if (this.freeSockets[name] && this.freeSockets[name].length > 0 && !req.useChunkedEncodingByDefault) {
	    var idleSocket = this.freeSockets[name].pop()
	    idleSocket.removeListener('error', idleSocket._onIdleError)
	    delete idleSocket._onIdleError
	    req._reusedSocket = true
	    req.onSocket(idleSocket)
	  } else {
	    this.addRequestNoreuse(req, host, port)
	  }
	}
	
	ForeverAgent.prototype.removeSocket = function(s, name, host, port) {
	  if (this.sockets[name]) {
	    var index = this.sockets[name].indexOf(s)
	    if (index !== -1) {
	      this.sockets[name].splice(index, 1)
	    }
	  } else if (this.sockets[name] && this.sockets[name].length === 0) {
	    // don't leak
	    delete this.sockets[name]
	    delete this.requests[name]
	  }
	  
	  if (this.freeSockets[name]) {
	    var index = this.freeSockets[name].indexOf(s)
	    if (index !== -1) {
	      this.freeSockets[name].splice(index, 1)
	      if (this.freeSockets[name].length === 0) {
	        delete this.freeSockets[name]
	      }
	    }
	  }
	
	  if (this.requests[name] && this.requests[name].length) {
	    // If we have pending requests and a socket gets closed a new one
	    // needs to be created to take over in the pool for the one that closed.
	    this.createSocket(name, host, port).emit('free')
	  }
	}
	
	function ForeverAgentSSL (options) {
	  ForeverAgent.call(this, options)
	}
	util.inherits(ForeverAgentSSL, ForeverAgent)
	
	ForeverAgentSSL.prototype.createConnection = createConnectionSSL
	ForeverAgentSSL.prototype.addRequestNoreuse = AgentSSL.prototype.addRequest
	
	function createConnectionSSL (port, host, options) {
	  if (typeof port === 'object') {
	    options = port;
	  } else if (typeof host === 'object') {
	    options = host;
	  } else if (typeof options === 'object') {
	    options = options;
	  } else {
	    options = {};
	  }
	
	  if (typeof port === 'number') {
	    options.port = port;
	  }
	
	  if (typeof host === 'string') {
	    options.host = host;
	  }
	
	  return tls.connect(options);
	}


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./cookies": 86,
		"./cookies.js": 86,
		"./copy": 87,
		"./copy.js": 87,
		"./debug": 105,
		"./debug.js": 105,
		"./getSafe": 106,
		"./getSafe.js": 106,
		"./optional": 104,
		"./optional.js": 104
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Buffer) {//     uuid.js
	//
	//     Copyright (c) 2010-2012 Robert Kieffer
	//     MIT License - http://opensource.org/licenses/mit-license.php
	
	(function() {
	  var _global = this;
	
	  // Unique ID creation requires a high quality random # generator.  We feature
	  // detect to determine the best RNG source, normalizing to a function that
	  // returns 128-bits of randomness, since that's what's usually required
	  var _rng;
	
	  // Node.js crypto-based RNG - http://nodejs.org/docs/v0.6.2/api/crypto.html
	  //
	  // Moderately fast, high quality
	  if (true) {
	    try {
	      var _rb = __webpack_require__(147).randomBytes;
	      _rng = _rb && function() {return _rb(16);};
	    } catch(e) {}
	  }
	
	  if (!_rng && _global.crypto && crypto.getRandomValues) {
	    // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
	    //
	    // Moderately fast, high quality
	    var _rnds8 = new Uint8Array(16);
	    _rng = function whatwgRNG() {
	      crypto.getRandomValues(_rnds8);
	      return _rnds8;
	    };
	  }
	
	  if (!_rng) {
	    // Math.random()-based (RNG)
	    //
	    // If all else fails, use Math.random().  It's fast, but is of unspecified
	    // quality.
	    var  _rnds = new Array(16);
	    _rng = function() {
	      for (var i = 0, r; i < 16; i++) {
	        if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
	        _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
	      }
	
	      return _rnds;
	    };
	  }
	
	  // Buffer class to use
	  var BufferClass = typeof(Buffer) == 'function' ? Buffer : Array;
	
	  // Maps for number <-> hex string conversion
	  var _byteToHex = [];
	  var _hexToByte = {};
	  for (var i = 0; i < 256; i++) {
	    _byteToHex[i] = (i + 0x100).toString(16).substr(1);
	    _hexToByte[_byteToHex[i]] = i;
	  }
	
	  // **`parse()` - Parse a UUID into it's component bytes**
	  function parse(s, buf, offset) {
	    var i = (buf && offset) || 0, ii = 0;
	
	    buf = buf || [];
	    s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
	      if (ii < 16) { // Don't overflow!
	        buf[i + ii++] = _hexToByte[oct];
	      }
	    });
	
	    // Zero out remaining bytes if string was short
	    while (ii < 16) {
	      buf[i + ii++] = 0;
	    }
	
	    return buf;
	  }
	
	  // **`unparse()` - Convert UUID byte array (ala parse()) into a string**
	  function unparse(buf, offset) {
	    var i = offset || 0, bth = _byteToHex;
	    return  bth[buf[i++]] + bth[buf[i++]] +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] +
	            bth[buf[i++]] + bth[buf[i++]] +
	            bth[buf[i++]] + bth[buf[i++]];
	  }
	
	  // **`v1()` - Generate time-based UUID**
	  //
	  // Inspired by https://github.com/LiosK/UUID.js
	  // and http://docs.python.org/library/uuid.html
	
	  // random #'s we need to init node and clockseq
	  var _seedBytes = _rng();
	
	  // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
	  var _nodeId = [
	    _seedBytes[0] | 0x01,
	    _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
	  ];
	
	  // Per 4.2.2, randomize (14 bit) clockseq
	  var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;
	
	  // Previous uuid creation time
	  var _lastMSecs = 0, _lastNSecs = 0;
	
	  // See https://github.com/broofa/node-uuid for API details
	  function v1(options, buf, offset) {
	    var i = buf && offset || 0;
	    var b = buf || [];
	
	    options = options || {};
	
	    var clockseq = options.clockseq != null ? options.clockseq : _clockseq;
	
	    // UUID timestamps are 100 nano-second units since the Gregorian epoch,
	    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
	    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
	    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
	    var msecs = options.msecs != null ? options.msecs : new Date().getTime();
	
	    // Per 4.2.1.2, use count of uuid's generated during the current clock
	    // cycle to simulate higher resolution clock
	    var nsecs = options.nsecs != null ? options.nsecs : _lastNSecs + 1;
	
	    // Time since last uuid creation (in msecs)
	    var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;
	
	    // Per 4.2.1.2, Bump clockseq on clock regression
	    if (dt < 0 && options.clockseq == null) {
	      clockseq = clockseq + 1 & 0x3fff;
	    }
	
	    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
	    // time interval
	    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs == null) {
	      nsecs = 0;
	    }
	
	    // Per 4.2.1.2 Throw error if too many uuids are requested
	    if (nsecs >= 10000) {
	      throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
	    }
	
	    _lastMSecs = msecs;
	    _lastNSecs = nsecs;
	    _clockseq = clockseq;
	
	    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
	    msecs += 12219292800000;
	
	    // `time_low`
	    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
	    b[i++] = tl >>> 24 & 0xff;
	    b[i++] = tl >>> 16 & 0xff;
	    b[i++] = tl >>> 8 & 0xff;
	    b[i++] = tl & 0xff;
	
	    // `time_mid`
	    var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
	    b[i++] = tmh >>> 8 & 0xff;
	    b[i++] = tmh & 0xff;
	
	    // `time_high_and_version`
	    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
	    b[i++] = tmh >>> 16 & 0xff;
	
	    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
	    b[i++] = clockseq >>> 8 | 0x80;
	
	    // `clock_seq_low`
	    b[i++] = clockseq & 0xff;
	
	    // `node`
	    var node = options.node || _nodeId;
	    for (var n = 0; n < 6; n++) {
	      b[i + n] = node[n];
	    }
	
	    return buf ? buf : unparse(b);
	  }
	
	  // **`v4()` - Generate random UUID**
	
	  // See https://github.com/broofa/node-uuid for API details
	  function v4(options, buf, offset) {
	    // Deprecated - 'format' argument, as supported in v1.2
	    var i = buf && offset || 0;
	
	    if (typeof(options) == 'string') {
	      buf = options == 'binary' ? new BufferClass(16) : null;
	      options = null;
	    }
	    options = options || {};
	
	    var rnds = options.random || (options.rng || _rng)();
	
	    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
	    rnds[6] = (rnds[6] & 0x0f) | 0x40;
	    rnds[8] = (rnds[8] & 0x3f) | 0x80;
	
	    // Copy bytes to buffer, if provided
	    if (buf) {
	      for (var ii = 0; ii < 16; ii++) {
	        buf[i + ii] = rnds[ii];
	      }
	    }
	
	    return buf || unparse(rnds);
	  }
	
	  // Export public API
	  var uuid = v4;
	  uuid.v1 = v1;
	  uuid.v4 = v4;
	  uuid.parse = parse;
	  uuid.unparse = unparse;
	  uuid.BufferClass = BufferClass;
	
	  if (true) {
	    // Publish as AMD module
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {return uuid;}.call(exports, __webpack_require__, exports, module)), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof(module) != 'undefined' && module.exports) {
	    // Publish as node.js module
	    module.exports = uuid;
	  } else {
	    // Publish as global (in browsers)
	    var _previousRoot = _global.uuid;
	
	    // **`noConflict()` - (browser only) to reset global 'uuid' var**
	    uuid.noConflict = function() {
	      _global.uuid = _previousRoot;
	      return uuid;
	    };
	
	    _global.uuid = uuid;
	  }
	}).call(this);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(48).Buffer))

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, __dirname) {var path = __webpack_require__(156);
	var fs = __webpack_require__(22);
	
	function Mime() {
	  // Map of extension -> mime type
	  this.types = Object.create(null);
	
	  // Map of mime type -> extension
	  this.extensions = Object.create(null);
	}
	
	/**
	 * Define mimetype -> extension mappings.  Each key is a mime-type that maps
	 * to an array of extensions associated with the type.  The first extension is
	 * used as the default extension for the type.
	 *
	 * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});
	 *
	 * @param map (Object) type definitions
	 */
	Mime.prototype.define = function (map) {
	  for (var type in map) {
	    var exts = map[type];
	
	    for (var i = 0; i < exts.length; i++) {
	      if (process.env.DEBUG_MIME && this.types[exts]) {
	        console.warn(this._loading.replace(/.*\//, ''), 'changes "' + exts[i] + '" extension type from ' +
	          this.types[exts] + ' to ' + type);
	      }
	
	      this.types[exts[i]] = type;
	    }
	
	    // Default extension is the first one we encounter
	    if (!this.extensions[type]) {
	      this.extensions[type] = exts[0];
	    }
	  }
	};
	
	/**
	 * Load an Apache2-style ".types" file
	 *
	 * This may be called multiple times (it's expected).  Where files declare
	 * overlapping types/extensions, the last file wins.
	 *
	 * @param file (String) path of file to load.
	 */
	Mime.prototype.load = function(file) {
	
	  this._loading = file;
	  // Read file and split into lines
	  var map = {},
	      content = fs.readFileSync(file, 'ascii'),
	      lines = content.split(/[\r\n]+/);
	
	  lines.forEach(function(line) {
	    // Clean up whitespace/comments, and split into fields
	    var fields = line.replace(/\s*#.*|^\s*|\s*$/g, '').split(/\s+/);
	    map[fields.shift()] = fields;
	  });
	
	  this.define(map);
	
	  this._loading = null;
	};
	
	/**
	 * Lookup a mime type based on extension
	 */
	Mime.prototype.lookup = function(path, fallback) {
	  var ext = path.replace(/.*[\.\/\\]/, '').toLowerCase();
	
	  return this.types[ext] || fallback || this.default_type;
	};
	
	/**
	 * Return file extension associated with a mime type
	 */
	Mime.prototype.extension = function(mimeType) {
	  var type = mimeType.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase();
	  return this.extensions[type];
	};
	
	// Default instance
	var mime = new Mime();
	
	// Load local copy of
	// http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types
	mime.load(path.join(__dirname, 'types/mime.types'));
	
	// Load additional types from node.js community
	mime.load(path.join(__dirname, 'types/node.types'));
	
	// Default type
	mime.default_type = mime.lookup('bin');
	
	//
	// Additional API specific to the default instance
	//
	
	mime.Mime = Mime;
	
	/**
	 * Lookup a charset based on mime type.
	 */
	mime.charsets = {
	  lookup: function(mimeType, fallback) {
	    // Assume text types are utf8
	    return (/^text\//).test(mimeType) ? 'UTF-8' : fallback;
	  }
	};
	
	module.exports = mime;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), "/"))

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = stringify;
	
	function getSerialize (fn, decycle) {
	  var seen = [], keys = [];
	  decycle = decycle || function(key, value) {
	    return '[Circular ' + getPath(value, seen, keys) + ']'
	  };
	  return function(key, value) {
	    var ret = value;
	    if (typeof value === 'object' && value) {
	      if (seen.indexOf(value) !== -1)
	        ret = decycle(key, value);
	      else {
	        seen.push(value);
	        keys.push(key);
	      }
	    }
	    if (fn) ret = fn(key, ret);
	    return ret;
	  }
	}
	
	function getPath (value, seen, keys) {
	  var index = seen.indexOf(value);
	  var path = [ keys[index] ];
	  for (index--; index >= 0; index--) {
	    if (seen[index][ path[0] ] === value) {
	      value = seen[index];
	      path.unshift(keys[index]);
	    }
	  }
	  return '~' + path.join('.');
	}
	
	function stringify(obj, fn, spaces, decycle) {
	  return JSON.stringify(obj, getSerialize(fn, decycle), spaces);
	}
	
	stringify.getSerialize = getSerialize;


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	
	var indexOf = [].indexOf;
	
	module.exports = function(arr, obj){
	  if (indexOf) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	};

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Object#toString() ref for stringify().
	 */
	
	var toString = Object.prototype.toString;
	
	/**
	 * Object#hasOwnProperty ref
	 */
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * Array#indexOf shim.
	 */
	
	var indexOf = typeof Array.prototype.indexOf === 'function'
	  ? function(arr, el) { return arr.indexOf(el); }
	  : function(arr, el) {
	      for (var i = 0; i < arr.length; i++) {
	        if (arr[i] === el) return i;
	      }
	      return -1;
	    };
	
	/**
	 * Array.isArray shim.
	 */
	
	var isArray = Array.isArray || function(arr) {
	  return toString.call(arr) == '[object Array]';
	};
	
	/**
	 * Object.keys shim.
	 */
	
	var objectKeys = Object.keys || function(obj) {
	  var ret = [];
	  for (var key in obj) {
	    if (obj.hasOwnProperty(key)) {
	      ret.push(key);
	    }
	  }
	  return ret;
	};
	
	/**
	 * Array#forEach shim.
	 */
	
	var forEach = typeof Array.prototype.forEach === 'function'
	  ? function(arr, fn) { return arr.forEach(fn); }
	  : function(arr, fn) {
	      for (var i = 0; i < arr.length; i++) fn(arr[i]);
	    };
	
	/**
	 * Array#reduce shim.
	 */
	
	var reduce = function(arr, fn, initial) {
	  if (typeof arr.reduce === 'function') return arr.reduce(fn, initial);
	  var res = initial;
	  for (var i = 0; i < arr.length; i++) res = fn(res, arr[i]);
	  return res;
	};
	
	/**
	 * Cache non-integer test regexp.
	 */
	
	var isint = /^[0-9]+$/;
	
	function promote(parent, key) {
	  if (parent[key].length == 0) return parent[key] = {}
	  var t = {};
	  for (var i in parent[key]) {
	    if (hasOwnProperty.call(parent[key], i)) {
	      t[i] = parent[key][i];
	    }
	  }
	  parent[key] = t;
	  return t;
	}
	
	function parse(parts, parent, key, val) {
	  var part = parts.shift();
	  
	  // illegal
	  if (Object.getOwnPropertyDescriptor(Object.prototype, key)) return;
	  
	  // end
	  if (!part) {
	    if (isArray(parent[key])) {
	      parent[key].push(val);
	    } else if ('object' == typeof parent[key]) {
	      parent[key] = val;
	    } else if ('undefined' == typeof parent[key]) {
	      parent[key] = val;
	    } else {
	      parent[key] = [parent[key], val];
	    }
	    // array
	  } else {
	    var obj = parent[key] = parent[key] || [];
	    if (']' == part) {
	      if (isArray(obj)) {
	        if ('' != val) obj.push(val);
	      } else if ('object' == typeof obj) {
	        obj[objectKeys(obj).length] = val;
	      } else {
	        obj = parent[key] = [parent[key], val];
	      }
	      // prop
	    } else if (~indexOf(part, ']')) {
	      part = part.substr(0, part.length - 1);
	      if (!isint.test(part) && isArray(obj)) obj = promote(parent, key);
	      parse(parts, obj, part, val);
	      // key
	    } else {
	      if (!isint.test(part) && isArray(obj)) obj = promote(parent, key);
	      parse(parts, obj, part, val);
	    }
	  }
	}
	
	/**
	 * Merge parent key/val pair.
	 */
	
	function merge(parent, key, val){
	  if (~indexOf(key, ']')) {
	    var parts = key.split('[')
	      , len = parts.length
	      , last = len - 1;
	    parse(parts, parent, 'base', val);
	    // optimize
	  } else {
	    if (!isint.test(key) && isArray(parent.base)) {
	      var t = {};
	      for (var k in parent.base) t[k] = parent.base[k];
	      parent.base = t;
	    }
	    set(parent.base, key, val);
	  }
	
	  return parent;
	}
	
	/**
	 * Compact sparse arrays.
	 */
	
	function compact(obj) {
	  if ('object' != typeof obj) return obj;
	
	  if (isArray(obj)) {
	    var ret = [];
	
	    for (var i in obj) {
	      if (hasOwnProperty.call(obj, i)) {
	        ret.push(obj[i]);
	      }
	    }
	
	    return ret;
	  }
	
	  for (var key in obj) {
	    obj[key] = compact(obj[key]);
	  }
	
	  return obj;
	}
	
	/**
	 * Parse the given obj.
	 */
	
	function parseObject(obj){
	  var ret = { base: {} };
	
	  forEach(objectKeys(obj), function(name){
	    merge(ret, name, obj[name]);
	  });
	
	  return compact(ret.base);
	}
	
	/**
	 * Parse the given str.
	 */
	
	function parseString(str){
	  var ret = reduce(String(str).split('&'), function(ret, pair){
	    var eql = indexOf(pair, '=')
	      , brace = lastBraceInKey(pair)
	      , key = pair.substr(0, brace || eql)
	      , val = pair.substr(brace || eql, pair.length)
	      , val = val.substr(indexOf(val, '=') + 1, val.length);
	
	    // ?foo
	    if ('' == key) key = pair, val = '';
	    if ('' == key) return ret;
	
	    return merge(ret, decode(key), decode(val));
	  }, { base: {} }).base;
	
	  return compact(ret);
	}
	
	/**
	 * Parse the given query `str` or `obj`, returning an object.
	 *
	 * @param {String} str | {Object} obj
	 * @return {Object}
	 * @api public
	 */
	
	exports.parse = function(str){
	  if (null == str || '' == str) return {};
	  return 'object' == typeof str
	    ? parseObject(str)
	    : parseString(str);
	};
	
	/**
	 * Turn the given `obj` into a query string
	 *
	 * @param {Object} obj
	 * @return {String}
	 * @api public
	 */
	
	var stringify = exports.stringify = function(obj, prefix) {
	  if (isArray(obj)) {
	    return stringifyArray(obj, prefix);
	  } else if ('[object Object]' == toString.call(obj)) {
	    return stringifyObject(obj, prefix);
	  } else if ('string' == typeof obj) {
	    return stringifyString(obj, prefix);
	  } else {
	    return prefix + '=' + encodeURIComponent(String(obj));
	  }
	};
	
	/**
	 * Stringify the given `str`.
	 *
	 * @param {String} str
	 * @param {String} prefix
	 * @return {String}
	 * @api private
	 */
	
	function stringifyString(str, prefix) {
	  if (!prefix) throw new TypeError('stringify expects an object');
	  return prefix + '=' + encodeURIComponent(str);
	}
	
	/**
	 * Stringify the given `arr`.
	 *
	 * @param {Array} arr
	 * @param {String} prefix
	 * @return {String}
	 * @api private
	 */
	
	function stringifyArray(arr, prefix) {
	  var ret = [];
	  if (!prefix) throw new TypeError('stringify expects an object');
	  for (var i = 0; i < arr.length; i++) {
	    ret.push(stringify(arr[i], prefix + '[' + i + ']'));
	  }
	  return ret.join('&');
	}
	
	/**
	 * Stringify the given `obj`.
	 *
	 * @param {Object} obj
	 * @param {String} prefix
	 * @return {String}
	 * @api private
	 */
	
	function stringifyObject(obj, prefix) {
	  var ret = []
	    , keys = objectKeys(obj)
	    , key;
	
	  for (var i = 0, len = keys.length; i < len; ++i) {
	    key = keys[i];
	    if ('' == key) continue;
	    if (null == obj[key]) {
	      ret.push(encodeURIComponent(key) + '=');
	    } else {
	      ret.push(stringify(obj[key], prefix
	        ? prefix + '[' + encodeURIComponent(key) + ']'
	        : encodeURIComponent(key)));
	    }
	  }
	
	  return ret.join('&');
	}
	
	/**
	 * Set `obj`'s `key` to `val` respecting
	 * the weird and wonderful syntax of a qs,
	 * where "foo=bar&foo=baz" becomes an array.
	 *
	 * @param {Object} obj
	 * @param {String} key
	 * @param {String} val
	 * @api private
	 */
	
	function set(obj, key, val) {
	  var v = obj[key];
	  if (Object.getOwnPropertyDescriptor(Object.prototype, key)) return;
	  if (undefined === v) {
	    obj[key] = val;
	  } else if (isArray(v)) {
	    v.push(val);
	  } else {
	    obj[key] = [v, val];
	  }
	}
	
	/**
	 * Locate last brace in `str` within the key.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */
	
	function lastBraceInKey(str) {
	  var len = str.length
	    , brace
	    , c;
	  for (var i = 0; i < len; ++i) {
	    c = str[i];
	    if (']' == c) brace = false;
	    if ('[' == c) brace = true;
	    if ('=' == c && !brace) return i;
	  }
	}
	
	/**
	 * Decode `str`.
	 *
	 * @param {String} str
	 * @return {String}
	 * @api private
	 */
	
	function decode(str) {
	  try {
	    return decodeURIComponent(str.replace(/\+/g, ' '));
	  } catch (err) {
	    return str;
	  }
	}


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = ForeverAgent
	ForeverAgent.SSL = ForeverAgentSSL
	
	var util = __webpack_require__(102)
	  , Agent = __webpack_require__(46).Agent
	  , net = __webpack_require__(22)
	  , tls = __webpack_require__(22)
	  , AgentSSL = __webpack_require__(47).Agent
	
	function ForeverAgent(options) {
	  var self = this
	  self.options = options || {}
	  self.requests = {}
	  self.sockets = {}
	  self.freeSockets = {}
	  self.maxSockets = self.options.maxSockets || Agent.defaultMaxSockets
	  self.minSockets = self.options.minSockets || ForeverAgent.defaultMinSockets
	  self.on('free', function(socket, host, port) {
	    var name = host + ':' + port
	    if (self.requests[name] && self.requests[name].length) {
	      self.requests[name].shift().onSocket(socket)
	    } else if (self.sockets[name].length < self.minSockets) {
	      if (!self.freeSockets[name]) self.freeSockets[name] = []
	      self.freeSockets[name].push(socket)
	      
	      // if an error happens while we don't use the socket anyway, meh, throw the socket away
	      var onIdleError = function() {
	        socket.destroy()
	      }
	      socket._onIdleError = onIdleError
	      socket.on('error', onIdleError)
	    } else {
	      // If there are no pending requests just destroy the
	      // socket and it will get removed from the pool. This
	      // gets us out of timeout issues and allows us to
	      // default to Connection:keep-alive.
	      socket.destroy()
	    }
	  })
	
	}
	util.inherits(ForeverAgent, Agent)
	
	ForeverAgent.defaultMinSockets = 5
	
	
	ForeverAgent.prototype.createConnection = net.createConnection
	ForeverAgent.prototype.addRequestNoreuse = Agent.prototype.addRequest
	ForeverAgent.prototype.addRequest = function(req, host, port) {
	  var name = host + ':' + port
	  if (this.freeSockets[name] && this.freeSockets[name].length > 0 && !req.useChunkedEncodingByDefault) {
	    var idleSocket = this.freeSockets[name].pop()
	    idleSocket.removeListener('error', idleSocket._onIdleError)
	    delete idleSocket._onIdleError
	    req._reusedSocket = true
	    req.onSocket(idleSocket)
	  } else {
	    this.addRequestNoreuse(req, host, port)
	  }
	}
	
	ForeverAgent.prototype.removeSocket = function(s, name, host, port) {
	  if (this.sockets[name]) {
	    var index = this.sockets[name].indexOf(s)
	    if (index !== -1) {
	      this.sockets[name].splice(index, 1)
	    }
	  } else if (this.sockets[name] && this.sockets[name].length === 0) {
	    // don't leak
	    delete this.sockets[name]
	    delete this.requests[name]
	  }
	  
	  if (this.freeSockets[name]) {
	    var index = this.freeSockets[name].indexOf(s)
	    if (index !== -1) {
	      this.freeSockets[name].splice(index, 1)
	      if (this.freeSockets[name].length === 0) {
	        delete this.freeSockets[name]
	      }
	    }
	  }
	
	  if (this.requests[name] && this.requests[name].length) {
	    // If we have pending requests and a socket gets closed a new one
	    // needs to be created to take over in the pool for the one that closed.
	    this.createSocket(name, host, port).emit('free')
	  }
	}
	
	function ForeverAgentSSL (options) {
	  ForeverAgent.call(this, options)
	}
	util.inherits(ForeverAgentSSL, ForeverAgent)
	
	ForeverAgentSSL.prototype.createConnection = createConnectionSSL
	ForeverAgentSSL.prototype.addRequestNoreuse = AgentSSL.prototype.addRequest
	
	function createConnectionSSL (port, host, options) {
	  if (typeof port === 'object') {
	    options = port;
	  } else if (typeof host === 'object') {
	    options = host;
	  } else if (typeof options === 'object') {
	    options = options;
	  } else {
	    options = {};
	  }
	
	  if (typeof port === 'number') {
	    options.port = port;
	  }
	
	  if (typeof host === 'string') {
	    options.host = host;
	  }
	
	  return tls.connect(options);
	}


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }
	
	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }
	
	  return parts;
	}
	
	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};
	
	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;
	
	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();
	
	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }
	
	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }
	
	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)
	
	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');
	
	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};
	
	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';
	
	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');
	
	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }
	
	  return (isAbsolute ? '/' : '') + path;
	};
	
	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};
	
	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};
	
	
	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);
	
	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }
	
	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }
	
	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }
	
	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));
	
	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }
	
	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }
	
	  outputParts = outputParts.concat(toParts.slice(samePartsLength));
	
	  return outputParts.join('/');
	};
	
	exports.sep = '/';
	exports.delimiter = ':';
	
	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];
	
	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }
	
	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }
	
	  return root + dir;
	};
	
	
	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};
	
	
	exports.extname = function(path) {
	  return splitPath(path)[3];
	};
	
	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}
	
	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }
	
	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};
	
	
	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }
	
	  if (process.noDeprecation === true) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	};
	
	
	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};
	
	
	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;
	
	
	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};
	
	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};
	
	
	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];
	
	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}
	
	
	function stylizeNoColor(str, styleType) {
	  return str;
	}
	
	
	function arrayToHash(array) {
	  var hash = {};
	
	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });
	
	  return hash;
	}
	
	
	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }
	
	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }
	
	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);
	
	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }
	
	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }
	
	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }
	
	  var base = '', array = false, braces = ['{', '}'];
	
	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }
	
	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }
	
	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }
	
	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }
	
	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }
	
	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }
	
	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }
	
	  ctx.seen.push(value);
	
	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }
	
	  ctx.seen.pop();
	
	  return reduceToSingleString(output, base, braces);
	}
	
	
	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}
	
	
	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}
	
	
	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}
	
	
	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }
	
	  return name + ': ' + str;
	}
	
	
	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);
	
	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }
	
	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}
	
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = __webpack_require__(971);
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	
	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}
	
	
	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];
	
	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}
	
	
	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};
	
	
	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(998);
	
	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;
	
	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};
	
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(14)))

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./cookies": 94,
		"./cookies.js": 94,
		"./copy": 95,
		"./copy.js": 95,
		"./debug": 109,
		"./debug.js": 109,
		"./getSafe": 110,
		"./getSafe.js": 110,
		"./optional": 108,
		"./optional.js": 108
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Buffer) {//     uuid.js
	//
	//     Copyright (c) 2010-2012 Robert Kieffer
	//     MIT License - http://opensource.org/licenses/mit-license.php
	
	(function() {
	  var _global = this;
	
	  // Unique ID creation requires a high quality random # generator.  We feature
	  // detect to determine the best RNG source, normalizing to a function that
	  // returns 128-bits of randomness, since that's what's usually required
	  var _rng;
	
	  // Node.js crypto-based RNG - http://nodejs.org/docs/v0.6.2/api/crypto.html
	  //
	  // Moderately fast, high quality
	  if (true) {
	    try {
	      var _rb = __webpack_require__(147).randomBytes;
	      _rng = _rb && function() {return _rb(16);};
	    } catch(e) {}
	  }
	
	  if (!_rng && _global.crypto && crypto.getRandomValues) {
	    // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
	    //
	    // Moderately fast, high quality
	    var _rnds8 = new Uint8Array(16);
	    _rng = function whatwgRNG() {
	      crypto.getRandomValues(_rnds8);
	      return _rnds8;
	    };
	  }
	
	  if (!_rng) {
	    // Math.random()-based (RNG)
	    //
	    // If all else fails, use Math.random().  It's fast, but is of unspecified
	    // quality.
	    var  _rnds = new Array(16);
	    _rng = function() {
	      for (var i = 0, r; i < 16; i++) {
	        if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
	        _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
	      }
	
	      return _rnds;
	    };
	  }
	
	  // Buffer class to use
	  var BufferClass = typeof(Buffer) == 'function' ? Buffer : Array;
	
	  // Maps for number <-> hex string conversion
	  var _byteToHex = [];
	  var _hexToByte = {};
	  for (var i = 0; i < 256; i++) {
	    _byteToHex[i] = (i + 0x100).toString(16).substr(1);
	    _hexToByte[_byteToHex[i]] = i;
	  }
	
	  // **`parse()` - Parse a UUID into it's component bytes**
	  function parse(s, buf, offset) {
	    var i = (buf && offset) || 0, ii = 0;
	
	    buf = buf || [];
	    s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
	      if (ii < 16) { // Don't overflow!
	        buf[i + ii++] = _hexToByte[oct];
	      }
	    });
	
	    // Zero out remaining bytes if string was short
	    while (ii < 16) {
	      buf[i + ii++] = 0;
	    }
	
	    return buf;
	  }
	
	  // **`unparse()` - Convert UUID byte array (ala parse()) into a string**
	  function unparse(buf, offset) {
	    var i = offset || 0, bth = _byteToHex;
	    return  bth[buf[i++]] + bth[buf[i++]] +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] +
	            bth[buf[i++]] + bth[buf[i++]] +
	            bth[buf[i++]] + bth[buf[i++]];
	  }
	
	  // **`v1()` - Generate time-based UUID**
	  //
	  // Inspired by https://github.com/LiosK/UUID.js
	  // and http://docs.python.org/library/uuid.html
	
	  // random #'s we need to init node and clockseq
	  var _seedBytes = _rng();
	
	  // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
	  var _nodeId = [
	    _seedBytes[0] | 0x01,
	    _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
	  ];
	
	  // Per 4.2.2, randomize (14 bit) clockseq
	  var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;
	
	  // Previous uuid creation time
	  var _lastMSecs = 0, _lastNSecs = 0;
	
	  // See https://github.com/broofa/node-uuid for API details
	  function v1(options, buf, offset) {
	    var i = buf && offset || 0;
	    var b = buf || [];
	
	    options = options || {};
	
	    var clockseq = options.clockseq != null ? options.clockseq : _clockseq;
	
	    // UUID timestamps are 100 nano-second units since the Gregorian epoch,
	    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
	    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
	    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
	    var msecs = options.msecs != null ? options.msecs : new Date().getTime();
	
	    // Per 4.2.1.2, use count of uuid's generated during the current clock
	    // cycle to simulate higher resolution clock
	    var nsecs = options.nsecs != null ? options.nsecs : _lastNSecs + 1;
	
	    // Time since last uuid creation (in msecs)
	    var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;
	
	    // Per 4.2.1.2, Bump clockseq on clock regression
	    if (dt < 0 && options.clockseq == null) {
	      clockseq = clockseq + 1 & 0x3fff;
	    }
	
	    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
	    // time interval
	    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs == null) {
	      nsecs = 0;
	    }
	
	    // Per 4.2.1.2 Throw error if too many uuids are requested
	    if (nsecs >= 10000) {
	      throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
	    }
	
	    _lastMSecs = msecs;
	    _lastNSecs = nsecs;
	    _clockseq = clockseq;
	
	    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
	    msecs += 12219292800000;
	
	    // `time_low`
	    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
	    b[i++] = tl >>> 24 & 0xff;
	    b[i++] = tl >>> 16 & 0xff;
	    b[i++] = tl >>> 8 & 0xff;
	    b[i++] = tl & 0xff;
	
	    // `time_mid`
	    var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
	    b[i++] = tmh >>> 8 & 0xff;
	    b[i++] = tmh & 0xff;
	
	    // `time_high_and_version`
	    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
	    b[i++] = tmh >>> 16 & 0xff;
	
	    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
	    b[i++] = clockseq >>> 8 | 0x80;
	
	    // `clock_seq_low`
	    b[i++] = clockseq & 0xff;
	
	    // `node`
	    var node = options.node || _nodeId;
	    for (var n = 0; n < 6; n++) {
	      b[i + n] = node[n];
	    }
	
	    return buf ? buf : unparse(b);
	  }
	
	  // **`v4()` - Generate random UUID**
	
	  // See https://github.com/broofa/node-uuid for API details
	  function v4(options, buf, offset) {
	    // Deprecated - 'format' argument, as supported in v1.2
	    var i = buf && offset || 0;
	
	    if (typeof(options) == 'string') {
	      buf = options == 'binary' ? new BufferClass(16) : null;
	      options = null;
	    }
	    options = options || {};
	
	    var rnds = options.random || (options.rng || _rng)();
	
	    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
	    rnds[6] = (rnds[6] & 0x0f) | 0x40;
	    rnds[8] = (rnds[8] & 0x3f) | 0x80;
	
	    // Copy bytes to buffer, if provided
	    if (buf) {
	      for (var ii = 0; ii < 16; ii++) {
	        buf[i + ii] = rnds[ii];
	      }
	    }
	
	    return buf || unparse(rnds);
	  }
	
	  // Export public API
	  var uuid = v4;
	  uuid.v1 = v1;
	  uuid.v4 = v4;
	  uuid.parse = parse;
	  uuid.unparse = unparse;
	  uuid.BufferClass = BufferClass;
	
	  if (true) {
	    // Publish as AMD module
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {return uuid;}.call(exports, __webpack_require__, exports, module)), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof(module) != 'undefined' && module.exports) {
	    // Publish as node.js module
	    module.exports = uuid;
	  } else {
	    // Publish as global (in browsers)
	    var _previousRoot = _global.uuid;
	
	    // **`noConflict()` - (browser only) to reset global 'uuid' var**
	    uuid.noConflict = function() {
	      _global.uuid = _previousRoot;
	      return uuid;
	    };
	
	    _global.uuid = uuid;
	  }
	}).call(this);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(48).Buffer))

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, __dirname) {var path = __webpack_require__(156);
	var fs = __webpack_require__(22);
	
	function Mime() {
	  // Map of extension -> mime type
	  this.types = Object.create(null);
	
	  // Map of mime type -> extension
	  this.extensions = Object.create(null);
	}
	
	/**
	 * Define mimetype -> extension mappings.  Each key is a mime-type that maps
	 * to an array of extensions associated with the type.  The first extension is
	 * used as the default extension for the type.
	 *
	 * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});
	 *
	 * @param map (Object) type definitions
	 */
	Mime.prototype.define = function (map) {
	  for (var type in map) {
	    var exts = map[type];
	
	    for (var i = 0; i < exts.length; i++) {
	      if (process.env.DEBUG_MIME && this.types[exts]) {
	        console.warn(this._loading.replace(/.*\//, ''), 'changes "' + exts[i] + '" extension type from ' +
	          this.types[exts] + ' to ' + type);
	      }
	
	      this.types[exts[i]] = type;
	    }
	
	    // Default extension is the first one we encounter
	    if (!this.extensions[type]) {
	      this.extensions[type] = exts[0];
	    }
	  }
	};
	
	/**
	 * Load an Apache2-style ".types" file
	 *
	 * This may be called multiple times (it's expected).  Where files declare
	 * overlapping types/extensions, the last file wins.
	 *
	 * @param file (String) path of file to load.
	 */
	Mime.prototype.load = function(file) {
	
	  this._loading = file;
	  // Read file and split into lines
	  var map = {},
	      content = fs.readFileSync(file, 'ascii'),
	      lines = content.split(/[\r\n]+/);
	
	  lines.forEach(function(line) {
	    // Clean up whitespace/comments, and split into fields
	    var fields = line.replace(/\s*#.*|^\s*|\s*$/g, '').split(/\s+/);
	    map[fields.shift()] = fields;
	  });
	
	  this.define(map);
	
	  this._loading = null;
	};
	
	/**
	 * Lookup a mime type based on extension
	 */
	Mime.prototype.lookup = function(path, fallback) {
	  var ext = path.replace(/.*[\.\/\\]/, '').toLowerCase();
	
	  return this.types[ext] || fallback || this.default_type;
	};
	
	/**
	 * Return file extension associated with a mime type
	 */
	Mime.prototype.extension = function(mimeType) {
	  var type = mimeType.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase();
	  return this.extensions[type];
	};
	
	// Default instance
	var mime = new Mime();
	
	// Load local copy of
	// http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types
	mime.load(path.join(__dirname, 'types/mime.types'));
	
	// Load additional types from node.js community
	mime.load(path.join(__dirname, 'types/node.types'));
	
	// Default type
	mime.default_type = mime.lookup('bin');
	
	//
	// Additional API specific to the default instance
	//
	
	mime.Mime = Mime;
	
	/**
	 * Lookup a charset based on mime type.
	 */
	mime.charsets = {
	  lookup: function(mimeType, fallback) {
	    // Assume text types are utf8
	    return (/^text\//).test(mimeType) ? 'UTF-8' : fallback;
	  }
	};
	
	module.exports = mime;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), "/"))

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = stringify;
	
	function getSerialize (fn, decycle) {
	  var seen = [], keys = [];
	  decycle = decycle || function(key, value) {
	    return '[Circular ' + getPath(value, seen, keys) + ']'
	  };
	  return function(key, value) {
	    var ret = value;
	    if (typeof value === 'object' && value) {
	      if (seen.indexOf(value) !== -1)
	        ret = decycle(key, value);
	      else {
	        seen.push(value);
	        keys.push(key);
	      }
	    }
	    if (fn) ret = fn(key, ret);
	    return ret;
	  }
	}
	
	function getPath (value, seen, keys) {
	  var index = seen.indexOf(value);
	  var path = [ keys[index] ];
	  for (index--; index >= 0; index--) {
	    if (seen[index][ path[0] ] === value) {
	      value = seen[index];
	      path.unshift(keys[index]);
	    }
	  }
	  return '~' + path.join('.');
	}
	
	function stringify(obj, fn, spaces, decycle) {
	  return JSON.stringify(obj, getSerialize(fn, decycle), spaces);
	}
	
	stringify.getSerialize = getSerialize;


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	;(function () {
	
	  var object = typeof exports != 'undefined' ? exports : this; // #8: web workers
	  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	
	  function InvalidCharacterError(message) {
	    this.message = message;
	  }
	  InvalidCharacterError.prototype = new Error;
	  InvalidCharacterError.prototype.name = 'InvalidCharacterError';
	
	  // encoder
	  // [https://gist.github.com/999166] by [https://github.com/nignag]
	  object.btoa || (
	  object.btoa = function (input) {
	    for (
	      // initialize result and counter
	      var block, charCode, idx = 0, map = chars, output = '';
	      // if the next input index does not exist:
	      //   change the mapping table to "="
	      //   check if d has no fractional digits
	      input.charAt(idx | 0) || (map = '=', idx % 1);
	      // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	      output += map.charAt(63 & block >> 8 - idx % 1 * 8)
	    ) {
	      charCode = input.charCodeAt(idx += 3/4);
	      if (charCode > 0xFF) {
	        throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
	      }
	      block = block << 8 | charCode;
	    }
	    return output;
	  });
	
	  // decoder
	  // [https://gist.github.com/1020396] by [https://github.com/atk]
	  object.atob || (
	  object.atob = function (input) {
	    input = input.replace(/=+$/, '');
	    if (input.length % 4 == 1) {
	      throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
	    }
	    for (
	      // initialize result and counters
	      var bc = 0, bs, buffer, idx = 0, output = '';
	      // get next character
	      buffer = input.charAt(idx++);
	      // character found in table? initialize bit storage and add its ascii value;
	      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
	        // and if not first of each 4 characters,
	        // convert the first 8 bits to one ascii character
	        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
	    ) {
	      // try to find character in table (0-63, not found => -1)
	      buffer = chars.indexOf(buffer);
	    }
	    return output;
	  });
	
	}());


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image-outset', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-outset');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image-repeat', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-repeat');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image-slice', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-slice');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image-source', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-source');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('alignment-baseline', v);
	    },
	    get: function () {
	        return this.getPropertyValue('alignment-baseline');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parsers = __webpack_require__(124);
	
	module.exports.definition = {
	    set: function (v) {
	        var valueType = parsers.valueType(v);
	        if (valueType === parsers.TYPES.ANGLE) {
	            return this.setProperty('azimuth', parsers.parseAngle(v));
	        }
	        if (valueType === parsers.TYPES.KEYWORD) {
	            var keywords = v.toLowerCase().trim().split(/\s+/);
	            var hasBehind = false;
	            if (keywords.length > 2) {
	                return;
	            }
	            var behindIndex = keywords.indexOf('behind');
	            hasBehind = (behindIndex !== -1);
	
	            if (keywords.length === 2) {
	                if (!hasBehind) {
	                    return;
	                }
	                keywords.splice(behindIndex, 1);
	            }
	            if (keywords[0] === 'leftwards' || keywords[0] === 'rightwards') {
	                if (hasBehind) {
	                    return;
	                }
	                return this.setProperty('azimuth', keywords[0]);
	            }
	            if (keywords[0] === 'behind') {
	                return this.setProperty('azimuth', '180deg');
	            }
	            var deg;
	            switch (keywords[0]) {
	            case 'left-side':
	                return this.setProperty('azimuth', '270deg');
	            case 'far-left':
	                return this.setProperty('azimuth', (hasBehind ? 240 : 300) + 'deg');
	            case 'left':
	                return this.setProperty('azimuth', (hasBehind ? 220 : 320) + 'deg');
	            case 'center-left':
	                return this.setProperty('azimuth', (hasBehind ? 200 : 340) + 'deg');
	            case 'center':
	                return this.setProperty('azimuth', (hasBehind ? 180 : 0) + 'deg');
	            case 'center-right':
	                return this.setProperty('azimuth', (hasBehind ? 160 : 20) + 'deg');
	            case 'right':
	                return this.setProperty('azimuth', (hasBehind ? 140 : 40) + 'deg');
	            case 'far-right':
	                return this.setProperty('azimuth', (hasBehind ? 120 : 60) + 'deg');
	            case 'right-side':
	                return this.setProperty('azimuth', '90deg');
	            default:
	                return;
	            }
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('azimuth');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var shorthandParser = __webpack_require__(124).shorthandParser;
	var shorthandSetter = __webpack_require__(124).shorthandSetter;
	var shorthandGetter = __webpack_require__(124).shorthandGetter;
	
	var shorthand_for = {
	    'background-color': __webpack_require__(176),
	    'background-image': __webpack_require__(177),
	    'background-repeat': __webpack_require__(182),
	    'background-attachment': __webpack_require__(174),
	    'background-position': __webpack_require__(179)
	};
	
	module.exports.isValid = function isValid(v) {
	    return shorthandParser(v, shorthand_for) !== undefined;
	};
	
	module.exports.definition = {
	    set: shorthandSetter('background', shorthand_for),
	    get: shorthandGetter('background', shorthand_for),
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parsers = __webpack_require__(124);
	
	var isValid = module.exports.isValid = function isValid(v) {
	    return parsers.valueType(v) === parsers.TYPES.KEYWORD &&
	        (v.toLowerCase() === 'scroll' || v.toLowerCase() === 'fixed' || v.toLowerCase() === 'inherit');
	};
	
	module.exports.definition = {
	    set: function (v) {
	        if (!isValid(v)) {
	            return;
	        }
	        this.setProperty('background-attachment', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-attachment');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('background-clip', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-clip');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parsers = __webpack_require__(124);
	
	var parse = function parse(v) {
	    var parsed = parsers.parseColor(v);
	    if (parsed !== undefined) {
	        return parsed;
	    }
	    if (parsers.valueType(v) === parsers.TYPES.KEYWORD && (v.toLowerCase() === 'transparent' || v.toLowerCase() === 'inherit')) {
	        return v;
	    }
	    return undefined;
	};
	
	module.exports.isValid = function isValid(v) {
	    return parse(v) !== undefined;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        var parsed = parse(v);
	        if (parsed === undefined) {
	            return;
	        }
	        this.setProperty('background-color', parsed);
	    },
	    get: function () {
	        return this.getPropertyValue('background-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parsers = __webpack_require__(124);
	
	var parse = function parse(v) {
	    var parsed = parsers.parseUrl(v);
	    if (parsed !== undefined) {
	        return parsed;
	    }
	    if (parsers.valueType(v) === parsers.TYPES.KEYWORD && (v.toLowerCase() === 'none' || v.toLowerCase() === 'inherit')) {
	        return v;
	    }
	    return undefined;
	};
	
	module.exports.isValid = function isValid(v) {
	    return parse(v) !== undefined;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('background-image', parse(v));
	    },
	    get: function () {
	        return this.getPropertyValue('background-image');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('background-origin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-origin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parsers = __webpack_require__(124);
	
	var valid_keywords = ['top', 'center', 'bottom', 'left', 'right'];
	
	var parse = function parse(v) {
	    var parts = v.split(/\s+/);
	    if (parts.length > 2 || parts.length < 1) {
	        return undefined;
	    }
	    var types = [];
	    parts.forEach(function (part, index) {
	        types[index] = parsers.valueType(part);
	    });
	    if (parts.length === 1) {
	        if (types[0] === parsers.TYPES.LENGTH || types[0] === parsers.TYPES.PERCENT) {
	            return v;
	        }
	        if (types[0] === parsers.TYPES.KEYWORD) {
	            if (valid_keywords.indexOf(v.toLowerCase()) !== -1 || v.toLowerCase() === 'inherit') {
	                return v;
	            }
	        }
	        return undefined;
	    }
	    if ((types[0] === parsers.TYPES.LENGTH || types[0] === parsers.TYPES.PERCENT) &&
	            (types[1] === parsers.TYPES.LENGTH || types[1] === parsers.TYPES.PERCENT)) {
	        return v;
	    }
	    if (types[0] !== parsers.TYPES.KEYWORD || types[1] !== parsers.TYPES.KEYWORD) {
	        return undefined;
	    }
	    if (valid_keywords.indexOf(parts[0]) !== -1 && valid_keywords.indexOf(parts[1]) !== -1) {
	        return v;
	    }
	    return undefined;
	};
	
	module.exports.isValid = function isValid(v) {
	    return parse(v) !== undefined;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('background-position', parse(v));
	    },
	    get: function () {
	        return this.getPropertyValue('background-position');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('background-position-x', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-position-x');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('background-position-y', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-position-y');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parsers = __webpack_require__(124);
	
	var parse = function parse(v) {
	    if (parsers.valueType(v) === parsers.TYPES.KEYWORD && (v.toLowerCase() === 'repeat' || v.toLowerCase() === 'repeat-x' || v.toLowerCase() === 'repeat-y' || v.toLowerCase() === 'no-repeat' || v.toLowerCase() === 'inherit')) {
	        return v;
	    }
	    return undefined;
	};
	
	module.exports.isValid = function isValid(v) {
	    return parse(v) !== undefined;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('background-repeat', parse(v));
	    },
	    get: function () {
	        return this.getPropertyValue('background-repeat');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('background-repeat-x', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-repeat-x');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('background-repeat-y', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-repeat-y');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('background-size', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-size');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('baseline-shift', v);
	    },
	    get: function () {
	        return this.getPropertyValue('baseline-shift');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var shorthandParser = __webpack_require__(124).shorthandParser;
	var shorthandSetter = __webpack_require__(124).shorthandSetter;
	var shorthandGetter = __webpack_require__(124).shorthandGetter;
	
	var shorthand_for = {
	    'border-width': __webpack_require__(219),
	    'border-style': __webpack_require__(212),
	    'border-color': __webpack_require__(195)
	};
	
	module.exports.isValid = function isValid(v) {
	    return shorthandParser(v, shorthand_for) !== undefined;
	};
	
	module.exports.definition = {
	    set: shorthandSetter('border', shorthand_for),
	    get: shorthandGetter('border', shorthand_for),
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var shorthandParser = __webpack_require__(124).shorthandParser;
	
	var shorthand_for = {
	    borderBottomWidth: __webpack_require__(193),
	    borderBottomStyle: __webpack_require__(192),
	    borderBottomColor: __webpack_require__(189)
	};
	
	var isValid = module.exports.isValid = function isValid(v) {
	    return shorthandParser(v, shorthand_for) !== undefined;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        var obj = shorthandParser(v, shorthand_for);
	        if (obj === undefined) {
	            return;
	        }
	        Object.keys(obj).forEach(function (property) {
	            this._values[property] = obj[property];
	        }, this);
	        this.setProperty('border-bottom', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-bottom');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(195).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-bottom-color', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-bottom-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-bottom-left-radius', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-bottom-left-radius');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-bottom-right-radius', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-bottom-right-radius');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(212).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-bottom-style', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-bottom-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(219).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-bottom-width', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-bottom-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parsers = __webpack_require__(124);
	
	var parse = function parse(v) {
	    if (parsers.valueType(v) === parsers.TYPES.KEYWORD && (v.toLowerCase() === 'collapse' || v.toLowerCase() === 'separate' || v.toLowerCase() === 'inherit')) {
	        return v;
	    }
	    return undefined;
	};
	
	module.exports.isValid = function isValid(v) {
	    return parse(v) !== undefined;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-collapse', parse(v));
	    },
	    get: function () {
	        return this.getPropertyValue('border-collapse');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parsers = __webpack_require__(124);
	var implicitSetter = __webpack_require__(124).implicitSetter;
	
	module.exports.isValid = function parse(v) {
	    if (typeof v !== 'string') {
	        return false;
	    }
	    return (v.toLowerCase() === 'transparent' || parsers.valueType(v) === parsers.TYPES.COLOR);
	};
	var isValid = module.exports.isValid;
	
	var parser = function (v) {
	    if (isValid(v)) {
	        return v.toLowerCase();
	    }
	    return undefined;
	};
	
	module.exports.definition = {
	    set: implicitSetter('border', 'color', isValid, parser),
	    get: function () {
	        return this.getPropertyValue('border-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image-outset', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-outset');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image-repeat', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-repeat');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image-slice', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-slice');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image-source', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-source');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var shorthandParser = __webpack_require__(124).shorthandParser;
	
	var shorthand_for = {
	    borderLeftWidth: __webpack_require__(205),
	    borderLeftStyle: __webpack_require__(204),
	    borderLeftColor: __webpack_require__(203)
	};
	
	var isValid = module.exports.isValid = function isValid(v) {
	    return shorthandParser(v, shorthand_for) !== undefined;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        var obj = shorthandParser(v, shorthand_for);
	        if (obj === undefined) {
	            return;
	        }
	        Object.keys(obj).forEach(function (property) {
	            this._values[property] = obj[property];
	        }, this);
	        this.setProperty('border-left', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-left');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(195).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-left-color', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-left-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(212).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-left-style', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-left-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(219).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-left-width', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-left-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-radius', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-radius');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var shorthandParser = __webpack_require__(124).shorthandParser;
	
	var shorthand_for = {
	    borderRightWidth: __webpack_require__(210),
	    borderRightStyle: __webpack_require__(209),
	    borderRightColor: __webpack_require__(208)
	};
	
	var isValid = module.exports.isValid = function isValid(v) {
	    return shorthandParser(v, shorthand_for) !== undefined;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        var obj = shorthandParser(v, shorthand_for);
	        if (obj === undefined) {
	            return;
	        }
	        Object.keys(obj).forEach(function (property) {
	            this._values[property] = obj[property];
	        }, this);
	        this.setProperty('border-right', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-right');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(195).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-right-color', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-right-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(212).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-right-style', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-right-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(219).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-right-width', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-right-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parsers = __webpack_require__(124);
	
	// <length> <length>? | inherit
	// if one, it applies to both horizontal and verical spacing
	// if two, the first applies to the horizontal and the second applies to vertical spacing
	
	var parse = function parse(v) {
	    if (v.toLowerCase() === 'inherit') {
	        return v;
	    }
	    var parts = v.split(/\s+/);
	    if (parts.length !== 1 && parts.length !== 2) {
	        return undefined;
	    }
	    parts.forEach(function (part) {
	        if (parsers.valueType(part) !== parsers.TYPES.LENGTH) {
	            return undefined;
	        }
	    });
	
	    return v;
	};
	
	module.exports.isValid = function isValid(v) {
	    return parse(v) !== undefined;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-spacing', parse(v));
	    },
	    get: function () {
	        return this.getPropertyValue('border-spacing');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var implicitSetter = __webpack_require__(124).implicitSetter;
	
	// the valid border-styles:
	var styles = ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset'];
	
	module.exports.isValid = function parse(v) {
	    return typeof v === 'string' && styles.indexOf(v) !== -1;
	};
	var isValid = module.exports.isValid;
	
	var parser = function (v) {
	    if (isValid(v)) {
	        return v.toLowerCase();
	    }
	    return undefined;
	};
	
	module.exports.definition = {
	    set: implicitSetter('border', 'style', isValid, parser),
	    get: function () {
	        return this.getPropertyValue('border-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var shorthandParser = __webpack_require__(124).shorthandParser;
	
	var shorthand_for = {
	    borderTopWidth: __webpack_require__(218),
	    borderTopStyle: __webpack_require__(217),
	    borderTopColor: __webpack_require__(214)
	};
	
	var isValid = module.exports.isValid = function isValid(v) {
	    return shorthandParser(v, shorthand_for) !== undefined;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        var obj = shorthandParser(v, shorthand_for);
	        if (obj === undefined) {
	            return;
	        }
	        Object.keys(obj).forEach(function (property) {
	            this._values[property] = obj[property];
	        }, this);
	        this.setProperty('border-top', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-top');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(195).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-top-color', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-top-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-top-left-radius', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-top-left-radius');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-top-right-radius', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-top-right-radius');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(212).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-top-style', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-top-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(219).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-top-width', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-top-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parsers = __webpack_require__(124);
	var parsers = __webpack_require__(124);
	var implicitSetter = __webpack_require__(124).implicitSetter;
	
	// the valid border-widths:
	var widths = ['thin', 'medium', 'thick'];
	
	module.exports.isValid = function parse(v) {
	    var length = parsers.parseLength(v);
	    if (length !== undefined) {
	        return true;
	    }
	    if (typeof v !== 'string') {
	        return false;
	    }
	    v = v.toLowerCase();
	    if (widths.indexOf(v) === -1) {
	        return false;
	    }
	    return true;
	};
	var isValid = module.exports.isValid;
	
	var parser = function (v) {
	    var length = parsers.parseLength(v);
	    if (length !== undefined) {
	        return length;
	    }
	    if (isValid(v)) {
	        return v.toLowerCase();
	    }
	    return undefined;
	};
	
	module.exports.definition = {
	    set: implicitSetter('border', 'width', isValid, parser),
	    get: function () {
	        return this.getPropertyValue('border-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseMeasurement = __webpack_require__(124).parseMeasurement;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('bottom', parseMeasurement(v));
	    },
	    get: function () {
	        return this.getPropertyValue('bottom');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('box-shadow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('box-shadow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('box-sizing', v);
	    },
	    get: function () {
	        return this.getPropertyValue('box-sizing');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('caption-side', v);
	    },
	    get: function () {
	        return this.getPropertyValue('caption-side');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseKeyword = __webpack_require__(124).parseKeyword;
	
	var clear_keywords = [ 'none', 'left', 'right', 'both', 'inherit' ];
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('clear', parseKeyword(v, clear_keywords));
	    },
	    get: function () {
	        return this.getPropertyValue('clear');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseMeasurement = __webpack_require__(124).parseMeasurement;
	
	/*jslint regexp: true*/
	var shape_regex = /^rect\((.*)\)$/i;
	/*jslint regexp: false*/
	
	var parse = function (val) {
	    if (val === '' || val === null) {
	        return val;
	    }
	    if (typeof val !== 'string') {
	        return undefined;
	    }
	    val = val.toLowerCase();
	    if (val === 'auto' || val === 'inherit') {
	        return val;
	    }
	    var matches = val.match(shape_regex);
	    if (!matches) {
	        return undefined;
	    }
	    var parts = matches[1].split(/\s*,\s*/);
	    if (parts.length !== 4) {
	        return undefined;
	    }
	    var valid = parts.every(function (part, index) {
	        var measurement = parseMeasurement(part);
	        parts[index] = measurement;
	        return measurement !== undefined;
	    });
	    if (!valid) {
	        return undefined;
	    }
	    parts = parts.join(', ');
	    return val.replace(matches[1], parts);
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('clip', parse(v));
	    },
	    get: function () {
	        return this.getPropertyValue('clip');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(124).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('color-interpolation', v);
	    },
	    get: function () {
	        return this.getPropertyValue('color-interpolation');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('color-interpolation-filters', v);
	    },
	    get: function () {
	        return this.getPropertyValue('color-interpolation-filters');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('color-profile', v);
	    },
	    get: function () {
	        return this.getPropertyValue('color-profile');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('color-rendering', v);
	    },
	    get: function () {
	        return this.getPropertyValue('color-rendering');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('content', v);
	    },
	    get: function () {
	        return this.getPropertyValue('content');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('counter-increment', v);
	    },
	    get: function () {
	        return this.getPropertyValue('counter-increment');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('counter-reset', v);
	    },
	    get: function () {
	        return this.getPropertyValue('counter-reset');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('float', v);
	    },
	    get: function () {
	        return this.getPropertyValue('float');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('cue', v);
	    },
	    get: function () {
	        return this.getPropertyValue('cue');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('cue-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('cue-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('cue-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('cue-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('cursor', v);
	    },
	    get: function () {
	        return this.getPropertyValue('cursor');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('direction', v);
	    },
	    get: function () {
	        return this.getPropertyValue('direction');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('display', v);
	    },
	    get: function () {
	        return this.getPropertyValue('display');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('dominant-baseline', v);
	    },
	    get: function () {
	        return this.getPropertyValue('dominant-baseline');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('elevation', v);
	    },
	    get: function () {
	        return this.getPropertyValue('elevation');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('empty-cells', v);
	    },
	    get: function () {
	        return this.getPropertyValue('empty-cells');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('enable-background', v);
	    },
	    get: function () {
	        return this.getPropertyValue('enable-background');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('fill', v);
	    },
	    get: function () {
	        return this.getPropertyValue('fill');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('fill-opacity', v);
	    },
	    get: function () {
	        return this.getPropertyValue('fill-opacity');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('fill-rule', v);
	    },
	    get: function () {
	        return this.getPropertyValue('fill-rule');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('filter', v);
	    },
	    get: function () {
	        return this.getPropertyValue('filter');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(124).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('flood-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('flood-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('flood-opacity', v);
	    },
	    get: function () {
	        return this.getPropertyValue('flood-opacity');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var TYPES = __webpack_require__(124).TYPES;
	var valueType = __webpack_require__(124).valueType;
	var shorthandParser = __webpack_require__(124).shorthandParser;
	var shorthandSetter = __webpack_require__(124).shorthandSetter;
	var shorthandGetter = __webpack_require__(124).shorthandGetter;
	
	var shorthand_for = {
	    'font-family': __webpack_require__(252),
	    'font-size': __webpack_require__(253),
	    'font-style': __webpack_require__(256),
	    'font-variant': __webpack_require__(257),
	    'font-weight': __webpack_require__(258),
	    'line-height': __webpack_require__(267)
	};
	
	var static_fonts = ['caption', 'icon', 'menu', 'message-box', 'small-caption', 'status-bar', 'inherit'];
	
	module.exports.isValid = function isValid(v) {
	    return (shorthandParser(v, shorthand_for) !== undefined) ||
	        (valueType(v) === TYPES.KEYWORD && static_fonts.indexOf(v.toLowerCase()) !== -1);
	};
	
	var setter = shorthandSetter('background', shorthand_for);
	
	module.exports.definition = {
	    set: function (v) {
	        var short = shorthandParser(v, shorthand_for);
	        if (short !== undefined) {
	            return setter.call(this, v);
	        }
	        if (valueType(v) === TYPES.KEYWORD && static_fonts.indexOf(v.toLowerCase()) !== -1) {
	            this.setProperty('font', v);
	        }
	    },
	    get: shorthandGetter('background', shorthand_for),
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var TYPES = __webpack_require__(124).TYPES;
	var valueType = __webpack_require__(124).valueType;
	
	var partsRegEx = /\s*,\s*/;
	module.exports.isValid = function isValid(v) {
	    var parts = v.split(partsRegEx);
	    var len = parts.len;
	    var i;
	    var type;
	    for (i = 0; i < len; i++) {
	        type = valueType(parts[i]);
	        if (type === TYPES.STRING || type === TYPES.KEYWORD) {
	            return true;
	        }
	    }
	    return false;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('font-family', v);
	    },
	    get: function () {
	        return this.getPropertyValue('font-family');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var TYPES = __webpack_require__(124).TYPES;
	var valueType = __webpack_require__(124).valueType;
	
	var absoluteSizes = ['xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'];
	var relativeSizes = ['larger', 'smaller'];
	
	module.exports.isValid = function (v) {
	    var type = valueType(v.toLowerCase());
	    return type === TYPES.LENGTH || type === TYPES.PERCENT ||
	        (type === TYPES.KEYWORD && absoluteSizes.indexOf(v.toLowerCase()) !== -1) ||
	        (type === TYPES.KEYWORD && relativeSizes.indexOf(v.toLowerCase()) !== -1);
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('font-size', v);
	    },
	    get: function () {
	        return this.getPropertyValue('font-size');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('font-size-adjust', v);
	    },
	    get: function () {
	        return this.getPropertyValue('font-size-adjust');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('font-stretch', v);
	    },
	    get: function () {
	        return this.getPropertyValue('font-stretch');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var valid_styles = ['normal', 'italic', 'oblique', 'inherit'];
	
	module.exports.isValid = function (v) {
	    return valid_styles.indexOf(v.toLowerCase()) !== -1;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('font-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('font-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var valid_variants = ['normal', 'small-caps', 'inherit'];
	
	module.exports.isValid = function isValid(v) {
	    return valid_variants.indexOf(v.toLowerCase()) !== -1;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('font-variant', v);
	    },
	    get: function () {
	        return this.getPropertyValue('font-variant');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var valid_weights = ['normal', 'bold', 'bolder', 'lighter', '100', '200', '300', '400', '500', '600', '700', '800', '900', 'inherit'];
	
	module.exports.isValid = function isValid(v) {
	    return valid_weights.indexOf(v.toLowerCase()) !== -1;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('font-weight', v);
	    },
	    get: function () {
	        return this.getPropertyValue('font-weight');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('glyph-orientation-horizontal', v);
	    },
	    get: function () {
	        return this.getPropertyValue('glyph-orientation-horizontal');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('glyph-orientation-vertical', v);
	    },
	    get: function () {
	        return this.getPropertyValue('glyph-orientation-vertical');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseMeasurement = __webpack_require__(124).parseMeasurement;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('height', parseMeasurement(v));
	    },
	    get: function () {
	        return this.getPropertyValue('height');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('image-rendering', v);
	    },
	    get: function () {
	        return this.getPropertyValue('image-rendering');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('kerning', v);
	    },
	    get: function () {
	        return this.getPropertyValue('kerning');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseMeasurement = __webpack_require__(124).parseMeasurement;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('left', parseMeasurement(v));
	    },
	    get: function () {
	        return this.getPropertyValue('left');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('letter-spacing', v);
	    },
	    get: function () {
	        return this.getPropertyValue('letter-spacing');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(124).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('lighting-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('lighting-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var TYPES = __webpack_require__(124).TYPES;
	var valueType = __webpack_require__(124).valueType;
	
	module.exports.isValid = function isValid(v) {
	    var type = valueType(v);
	    return (type === TYPES.KEYWORD && (v.toLowerCase() === 'normal') || (v.toLowerCase() === 'inherit')) ||
	        type === TYPES.NUMBER || type === TYPES.LENGTH || type === TYPES.PERCENT;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('line-height', v);
	    },
	    get: function () {
	        return this.getPropertyValue('line-height');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('list-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('list-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('list-style-image', v);
	    },
	    get: function () {
	        return this.getPropertyValue('list-style-image');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('list-style-position', v);
	    },
	    get: function () {
	        return this.getPropertyValue('list-style-position');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('list-style-type', v);
	    },
	    get: function () {
	        return this.getPropertyValue('list-style-type');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('margin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('margin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('margin-bottom', v);
	    },
	    get: function () {
	        return this.getPropertyValue('margin-bottom');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('margin-left', v);
	    },
	    get: function () {
	        return this.getPropertyValue('margin-left');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('margin-right', v);
	    },
	    get: function () {
	        return this.getPropertyValue('margin-right');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('margin-top', v);
	    },
	    get: function () {
	        return this.getPropertyValue('margin-top');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('marker', v);
	    },
	    get: function () {
	        return this.getPropertyValue('marker');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('marker-end', v);
	    },
	    get: function () {
	        return this.getPropertyValue('marker-end');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('marker-mid', v);
	    },
	    get: function () {
	        return this.getPropertyValue('marker-mid');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('marker-offset', v);
	    },
	    get: function () {
	        return this.getPropertyValue('marker-offset');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('marker-start', v);
	    },
	    get: function () {
	        return this.getPropertyValue('marker-start');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('marks', v);
	    },
	    get: function () {
	        return this.getPropertyValue('marks');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('mask', v);
	    },
	    get: function () {
	        return this.getPropertyValue('mask');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('max-height', v);
	    },
	    get: function () {
	        return this.getPropertyValue('max-height');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('max-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('max-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('min-height', v);
	    },
	    get: function () {
	        return this.getPropertyValue('min-height');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('min-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('min-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseNumber = __webpack_require__(124).parseNumber;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('opacity', parseNumber(v));
	    },
	    get: function () {
	        return this.getPropertyValue('opacity');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('orphans', v);
	    },
	    get: function () {
	        return this.getPropertyValue('orphans');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('outline', v);
	    },
	    get: function () {
	        return this.getPropertyValue('outline');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(124).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('outline-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('outline-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('outline-offset', v);
	    },
	    get: function () {
	        return this.getPropertyValue('outline-offset');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('outline-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('outline-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('outline-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('outline-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('overflow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('overflow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('overflow-x', v);
	    },
	    get: function () {
	        return this.getPropertyValue('overflow-x');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('overflow-y', v);
	    },
	    get: function () {
	        return this.getPropertyValue('overflow-y');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('padding', v);
	    },
	    get: function () {
	        return this.getPropertyValue('padding');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('padding-bottom', v);
	    },
	    get: function () {
	        return this.getPropertyValue('padding-bottom');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('padding-left', v);
	    },
	    get: function () {
	        return this.getPropertyValue('padding-left');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('padding-right', v);
	    },
	    get: function () {
	        return this.getPropertyValue('padding-right');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('padding-top', v);
	    },
	    get: function () {
	        return this.getPropertyValue('padding-top');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('page', v);
	    },
	    get: function () {
	        return this.getPropertyValue('page');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('page-break-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('page-break-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('page-break-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('page-break-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('page-break-inside', v);
	    },
	    get: function () {
	        return this.getPropertyValue('page-break-inside');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('pause', v);
	    },
	    get: function () {
	        return this.getPropertyValue('pause');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('pause-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('pause-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('pause-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('pause-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('pitch', v);
	    },
	    get: function () {
	        return this.getPropertyValue('pitch');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('pitch-range', v);
	    },
	    get: function () {
	        return this.getPropertyValue('pitch-range');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('play-during', v);
	    },
	    get: function () {
	        return this.getPropertyValue('play-during');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('pointer-events', v);
	    },
	    get: function () {
	        return this.getPropertyValue('pointer-events');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('position', v);
	    },
	    get: function () {
	        return this.getPropertyValue('position');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('quotes', v);
	    },
	    get: function () {
	        return this.getPropertyValue('quotes');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('resize', v);
	    },
	    get: function () {
	        return this.getPropertyValue('resize');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('richness', v);
	    },
	    get: function () {
	        return this.getPropertyValue('richness');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseMeasurement = __webpack_require__(124).parseMeasurement;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('right', parseMeasurement(v));
	    },
	    get: function () {
	        return this.getPropertyValue('right');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('shape-rendering', v);
	    },
	    get: function () {
	        return this.getPropertyValue('shape-rendering');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('size', v);
	    },
	    get: function () {
	        return this.getPropertyValue('size');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('speak', v);
	    },
	    get: function () {
	        return this.getPropertyValue('speak');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('speak-header', v);
	    },
	    get: function () {
	        return this.getPropertyValue('speak-header');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('speak-numeral', v);
	    },
	    get: function () {
	        return this.getPropertyValue('speak-numeral');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('speak-punctuation', v);
	    },
	    get: function () {
	        return this.getPropertyValue('speak-punctuation');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('speech-rate', v);
	    },
	    get: function () {
	        return this.getPropertyValue('speech-rate');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('src', v);
	    },
	    get: function () {
	        return this.getPropertyValue('src');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(124).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('stop-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('stop-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('stop-opacity', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stop-opacity');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('stress', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stress');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('stroke', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('stroke-dasharray', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke-dasharray');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('stroke-dashoffset', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke-dashoffset');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('stroke-linecap', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke-linecap');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('stroke-linejoin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke-linejoin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('stroke-miterlimit', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke-miterlimit');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('stroke-opacity', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke-opacity');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('stroke-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('table-layout', v);
	    },
	    get: function () {
	        return this.getPropertyValue('table-layout');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-align', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-align');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-anchor', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-anchor');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-decoration', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-decoration');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-indent', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-indent');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-line-through', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-line-through');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(124).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-line-through-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('text-line-through-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-line-through-mode', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-line-through-mode');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-line-through-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-line-through-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-line-through-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-line-through-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-overflow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-overflow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-overline', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-overline');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(124).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-overline-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('text-overline-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-overline-mode', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-overline-mode');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-overline-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-overline-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-overline-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-overline-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-rendering', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-rendering');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-shadow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-shadow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-transform', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-transform');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-underline', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-underline');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(124).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-underline-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('text-underline-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-underline-mode', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-underline-mode');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-underline-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-underline-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-underline-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-underline-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseMeasurement = __webpack_require__(124).parseMeasurement;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('top', parseMeasurement(v));
	    },
	    get: function () {
	        return this.getPropertyValue('top');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('unicode-bidi', v);
	    },
	    get: function () {
	        return this.getPropertyValue('unicode-bidi');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('unicode-range', v);
	    },
	    get: function () {
	        return this.getPropertyValue('unicode-range');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('vector-effect', v);
	    },
	    get: function () {
	        return this.getPropertyValue('vector-effect');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('vertical-align', v);
	    },
	    get: function () {
	        return this.getPropertyValue('vertical-align');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('visibility', v);
	    },
	    get: function () {
	        return this.getPropertyValue('visibility');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('voic-family', v);
	    },
	    get: function () {
	        return this.getPropertyValue('voice-family');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('volume', v);
	    },
	    get: function () {
	        return this.getPropertyValue('volume');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-animation', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-animation-delay', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-delay');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-animation-direction', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-direction');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-animation-duration', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-duration');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-animation-fill-mode', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-fill-mode');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-animation-iteration-count', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-iteration-count');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-animation-name', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-name');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-animation-play-state', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-play-state');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-animation-timing-function', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-timing-function');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-appearance', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-appearance');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-aspect-ratio', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-aspect-ratio');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-backface-visibility', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-backface-visibility');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-background-clip', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-background-clip');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-background-composite', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-background-composite');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-background-origin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-background-origin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-background-size', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-background-size');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(124).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-after-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-after-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-after-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-after-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-after-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-after-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(124).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-before-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-before-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-before-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-before-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-before-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-before-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-end', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-end');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(124).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-end-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-end-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-end-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-end-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-end-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-end-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-fit', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-fit');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-horizontal-spacing', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-horizontal-spacing');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-image', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-image');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-radius', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-radius');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-start', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-start');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(124).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-start-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-start-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-start-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-start-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-start-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-start-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-vertical-spacing', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-vertical-spacing');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-box-align', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-align');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-box-direction', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-direction');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-box-flex', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-flex');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-box-flex-group', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-flex-group');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-box-lines', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-lines');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-box-ordinal-group', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-ordinal-group');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-box-orient', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-orient');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-box-pack', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-pack');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-box-reflect', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-reflect');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-box-shadow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-shadow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-color-correction', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-color-correction');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 418 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-axis', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-axis');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-break-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-break-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-break-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-break-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-break-inside', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-break-inside');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-count', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-count');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-gap', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-gap');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-rule', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-rule');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(124).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-rule-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-rule-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-rule-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-rule-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-rule-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-rule-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 428 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-span', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-span');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-columns', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-columns');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-filter', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-filter');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-flex-align', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-align');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-flex-direction', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-direction');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-flex-flow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-flow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-flex-item-align', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-item-align');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 436 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-flex-line-pack', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-line-pack');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-flex-order', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-order');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 438 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-flex-pack', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-pack');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-flex-wrap', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-wrap');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 440 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-flow-from', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flow-from');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-flow-into', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flow-into');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 442 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-font-feature-settings', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-font-feature-settings');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 443 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-font-kerning', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-font-kerning');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 444 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-font-size-delta', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-font-size-delta');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 445 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-font-smoothing', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-font-smoothing');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-font-variant-ligatures', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-font-variant-ligatures');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-highlight', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-highlight');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-hyphenate-character', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-hyphenate-character');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 449 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-hyphenate-limit-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-hyphenate-limit-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 450 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-hyphenate-limit-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-hyphenate-limit-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 451 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-hyphenate-limit-lines', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-hyphenate-limit-lines');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 452 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-hyphens', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-hyphens');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 453 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-line-align', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-line-align');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-line-box-contain', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-line-box-contain');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-line-break', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-line-break');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 456 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-line-clamp', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-line-clamp');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-line-grid', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-line-grid');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 458 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-line-snap', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-line-snap');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 459 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-locale', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-locale');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 460 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-logical-height', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-logical-height');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-logical-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-logical-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 462 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-margin-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-margin-after-collapse', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-after-collapse');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 464 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-margin-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-margin-before-collapse', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-before-collapse');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 466 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-margin-bottom-collapse', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-bottom-collapse');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 467 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-margin-collapse', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-collapse');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 468 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-margin-end', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-end');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 469 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-margin-start', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-start');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 470 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-margin-top-collapse', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-top-collapse');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-marquee', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-marquee');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 472 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-marquee-direction', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-marquee-direction');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 473 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-marquee-increment', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-marquee-increment');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 474 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-marquee-repetition', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-marquee-repetition');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 475 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-marquee-speed', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-marquee-speed');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 476 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-marquee-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-marquee-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 477 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 478 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-attachment', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-attachment');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 479 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-box-image', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-box-image');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 480 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-box-image-outset', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-box-image-outset');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 481 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-box-image-repeat', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-box-image-repeat');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 482 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-box-image-slice', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-box-image-slice');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 483 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-box-image-source', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-box-image-source');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 484 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-box-image-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-box-image-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 485 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-clip', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-clip');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 486 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-composite', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-composite');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 487 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-image', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-image');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 488 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-origin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-origin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 489 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-position', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-position');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 490 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-position-x', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-position-x');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 491 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-position-y', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-position-y');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 492 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-repeat', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-repeat');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 493 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-repeat-x', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-repeat-x');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 494 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-repeat-y', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-repeat-y');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 495 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-size', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-size');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 496 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(124).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-match-nearest-mail-blockquote-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-match-nearest-mail-blockquote-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 497 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-max-logical-height', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-max-logical-height');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 498 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-max-logical-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-max-logical-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 499 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-min-logical-height', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-min-logical-height');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 500 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-min-logical-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-min-logical-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 501 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-nbsp-mode', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-nbsp-mode');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 502 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-overflow-scrolling', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-overflow-scrolling');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 503 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-padding-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-padding-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 504 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-padding-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-padding-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 505 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-padding-end', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-padding-end');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 506 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-padding-start', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-padding-start');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 507 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-perspective', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-perspective');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 508 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-perspective-origin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-perspective-origin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 509 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-perspective-origin-x', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-perspective-origin-x');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 510 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-perspective-origin-y', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-perspective-origin-y');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 511 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-print-color-adjust', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-print-color-adjust');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 512 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-region-break-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-region-break-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 513 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-region-break-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-region-break-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 514 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-region-break-inside', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-region-break-inside');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 515 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-region-overflow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-region-overflow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 516 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-rtl-ordering', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-rtl-ordering');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 517 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-svg-shadow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-svg-shadow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 518 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(124).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-tap-highlight-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-tap-highlight-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 519 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-combine', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-combine');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 520 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-decorations-in-effect', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-decorations-in-effect');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 521 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-emphasis', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-emphasis');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 522 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(124).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-emphasis-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-emphasis-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 523 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-emphasis-position', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-emphasis-position');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 524 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-emphasis-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-emphasis-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 525 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(124).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-fill-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-fill-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 526 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-orientation', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-orientation');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 527 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-security', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-security');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 528 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-size-adjust', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-size-adjust');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 529 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-stroke', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-stroke');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 530 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(124).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-stroke-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-stroke-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 531 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-stroke-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-stroke-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 532 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-transform', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transform');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 533 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-transform-origin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transform-origin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 534 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-transform-origin-x', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transform-origin-x');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 535 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-transform-origin-y', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transform-origin-y');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 536 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-transform-origin-z', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transform-origin-z');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 537 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-transform-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transform-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 538 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-transition', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transition');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 539 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-transition-delay', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transition-delay');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 540 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-transition-duration', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transition-duration');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 541 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-transition-property', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transition-property');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 542 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-transition-timing-function', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transition-timing-function');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 543 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-user-drag', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-user-drag');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 544 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-user-modify', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-user-modify');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 545 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-user-select', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-user-select');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 546 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-wrap', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-wrap');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 547 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-wrap-flow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-wrap-flow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 548 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-wrap-margin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-wrap-margin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 549 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-wrap-padding', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-wrap-padding');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 550 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-wrap-shape-inside', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-wrap-shape-inside');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 551 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-wrap-shape-outside', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-wrap-shape-outside');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 552 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-wrap-through', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-wrap-through');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 553 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-writing-mode', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-writing-mode');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 554 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('white-space', v);
	    },
	    get: function () {
	        return this.getPropertyValue('white-space');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 555 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('widows', v);
	    },
	    get: function () {
	        return this.getPropertyValue('widows');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 556 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseMeasurement = __webpack_require__(124).parseMeasurement;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('width', parseMeasurement(v));
	    },
	    get: function () {
	        return this.getPropertyValue('width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 557 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('word-break', v);
	    },
	    get: function () {
	        return this.getPropertyValue('word-break');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 558 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('word-spacing', v);
	    },
	    get: function () {
	        return this.getPropertyValue('word-spacing');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 559 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('word-wrap', v);
	    },
	    get: function () {
	        return this.getPropertyValue('word-wrap');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 560 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('writing-mode', v);
	    },
	    get: function () {
	        return this.getPropertyValue('writing-mode');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 561 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('z-index', v);
	    },
	    get: function () {
	        return this.getPropertyValue('z-index');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 562 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('zoom', v);
	    },
	    get: function () {
	        return this.getPropertyValue('zoom');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 563 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, __filename) {
	/**
	 * Module dependencies.
	 */
	
	var fs = __webpack_require__(22)
	  , path = __webpack_require__(156)
	  , join = path.join
	  , dirname = path.dirname
	  , exists = fs.existsSync || path.existsSync
	  , defaults = {
	        arrow: process.env.NODE_BINDINGS_ARROW || ' â '
	      , compiled: process.env.NODE_BINDINGS_COMPILED_DIR || 'compiled'
	      , platform: process.platform
	      , arch: process.arch
	      , version: process.versions.node
	      , bindings: 'bindings.node'
	      , try: [
	          // node-gyp's linked version in the "build" dir
	          [ 'module_root', 'build', 'bindings' ]
	          // node-waf and gyp_addon (a.k.a node-gyp)
	        , [ 'module_root', 'build', 'Debug', 'bindings' ]
	        , [ 'module_root', 'build', 'Release', 'bindings' ]
	          // Debug files, for development (legacy behavior, remove for node v0.9)
	        , [ 'module_root', 'out', 'Debug', 'bindings' ]
	        , [ 'module_root', 'Debug', 'bindings' ]
	          // Release files, but manually compiled (legacy behavior, remove for node v0.9)
	        , [ 'module_root', 'out', 'Release', 'bindings' ]
	        , [ 'module_root', 'Release', 'bindings' ]
	          // Legacy from node-waf, node <= 0.4.x
	        , [ 'module_root', 'build', 'default', 'bindings' ]
	          // Production "Release" buildtype binary (meh...)
	        , [ 'module_root', 'compiled', 'version', 'platform', 'arch', 'bindings' ]
	        ]
	    }
	
	/**
	 * The main `bindings()` function loads the compiled bindings for a given module.
	 * It uses V8's Error API to determine the parent filename that this function is
	 * being invoked from, which is then used to find the root directory.
	 */
	
	function bindings (opts) {
	
	  // Argument surgery
	  if (typeof opts == 'string') {
	    opts = { bindings: opts }
	  } else if (!opts) {
	    opts = {}
	  }
	  opts.__proto__ = defaults
	
	  // Get the module root
	  if (!opts.module_root) {
	    opts.module_root = exports.getRoot(exports.getFileName())
	  }
	
	  // Ensure the given bindings name ends with .node
	  if (path.extname(opts.bindings) != '.node') {
	    opts.bindings += '.node'
	  }
	
	  var tries = []
	    , i = 0
	    , l = opts.try.length
	    , n
	    , b
	    , err
	
	  for (; i<l; i++) {
	    n = join.apply(null, opts.try[i].map(function (p) {
	      return opts[p] || p
	    }))
	    tries.push(n)
	    try {
	      b = opts.path ? /*require.resolve*/(__webpack_require__(970).resolve(n)) : __webpack_require__(970)(n)
	      if (!opts.path) {
	        b.path = n
	      }
	      return b
	    } catch (e) {
	      if (!/not find/i.test(e.message)) {
	        throw e
	      }
	    }
	  }
	
	  err = new Error('Could not locate the bindings file. Tried:\n'
	    + tries.map(function (a) { return opts.arrow + a }).join('\n'))
	  err.tries = tries
	  throw err
	}
	module.exports = exports = bindings
	
	
	/**
	 * Gets the filename of the JavaScript file that invokes this function.
	 * Used to help find the root directory of a module.
	 * Optionally accepts an filename argument to skip when searching for the invoking filename
	 */
	
	exports.getFileName = function getFileName (calling_file) {
	  var origPST = Error.prepareStackTrace
	    , origSTL = Error.stackTraceLimit
	    , dummy = {}
	    , fileName
	
	  Error.stackTraceLimit = 10
	
	  Error.prepareStackTrace = function (e, st) {
	    for (var i=0, l=st.length; i<l; i++) {
	      fileName = st[i].getFileName()
	      if (fileName !== __filename) {
	        if (calling_file) {
	            if (fileName !== calling_file) {
	              return
	            }
	        } else {
	          return
	        }
	      }
	    }
	  }
	
	  // run the 'prepareStackTrace' function above
	  Error.captureStackTrace(dummy)
	  dummy.stack
	
	  // cleanup
	  Error.prepareStackTrace = origPST
	  Error.stackTraceLimit = origSTL
	
	  return fileName
	}
	
	/**
	 * Gets the root directory of a module, given an arbitrary filename
	 * somewhere in the module tree. The "root directory" is the directory
	 * containing the `package.json` file.
	 *
	 *   In:  /home/nate/node-native-module/lib/index.js
	 *   Out: /home/nate/node-native-module
	 */
	
	exports.getRoot = function getRoot (file) {
	  var dir = dirname(file)
	    , prev
	  while (true) {
	    if (dir === '.') {
	      // Avoids an infinite loop in rare cases, like the REPL
	      dir = process.cwd()
	    }
	    if (exists(join(dir, 'package.json')) || exists(join(dir, 'node_modules'))) {
	      // Found the 'package.json' file or 'node_modules' dir; we're done
	      return dir
	    }
	    if (prev === dir) {
	      // Got to the top
	      throw new Error('Could not find module root given file: "' + file
	                    + '". Do you have a `package.json` file? ')
	    }
	    // Try the parent dir next
	    prev = dir
	    dir = join(dir, '..')
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), "/index.js"))

/***/ },
/* 564 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 565 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image-outset', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-outset');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 566 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image-repeat', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-repeat');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 567 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image-slice', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-slice');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 568 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image-source', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-source');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 569 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 570 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('alignment-baseline', v);
	    },
	    get: function () {
	        return this.getPropertyValue('alignment-baseline');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 571 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parsers = __webpack_require__(130);
	
	module.exports.definition = {
	    set: function (v) {
	        var valueType = parsers.valueType(v);
	        if (valueType === parsers.TYPES.ANGLE) {
	            return this.setProperty('azimuth', parsers.parseAngle(v));
	        }
	        if (valueType === parsers.TYPES.KEYWORD) {
	            var keywords = v.toLowerCase().trim().split(/\s+/);
	            var hasBehind = false;
	            if (keywords.length > 2) {
	                return;
	            }
	            var behindIndex = keywords.indexOf('behind');
	            hasBehind = (behindIndex !== -1);
	
	            if (keywords.length === 2) {
	                if (!hasBehind) {
	                    return;
	                }
	                keywords.splice(behindIndex, 1);
	            }
	            if (keywords[0] === 'leftwards' || keywords[0] === 'rightwards') {
	                if (hasBehind) {
	                    return;
	                }
	                return this.setProperty('azimuth', keywords[0]);
	            }
	            if (keywords[0] === 'behind') {
	                return this.setProperty('azimuth', '180deg');
	            }
	            var deg;
	            switch (keywords[0]) {
	            case 'left-side':
	                return this.setProperty('azimuth', '270deg');
	            case 'far-left':
	                return this.setProperty('azimuth', (hasBehind ? 240 : 300) + 'deg');
	            case 'left':
	                return this.setProperty('azimuth', (hasBehind ? 220 : 320) + 'deg');
	            case 'center-left':
	                return this.setProperty('azimuth', (hasBehind ? 200 : 340) + 'deg');
	            case 'center':
	                return this.setProperty('azimuth', (hasBehind ? 180 : 0) + 'deg');
	            case 'center-right':
	                return this.setProperty('azimuth', (hasBehind ? 160 : 20) + 'deg');
	            case 'right':
	                return this.setProperty('azimuth', (hasBehind ? 140 : 40) + 'deg');
	            case 'far-right':
	                return this.setProperty('azimuth', (hasBehind ? 120 : 60) + 'deg');
	            case 'right-side':
	                return this.setProperty('azimuth', '90deg');
	            default:
	                return;
	            }
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('azimuth');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 572 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var shorthandParser = __webpack_require__(130).shorthandParser;
	var shorthandSetter = __webpack_require__(130).shorthandSetter;
	var shorthandGetter = __webpack_require__(130).shorthandGetter;
	
	var shorthand_for = {
	    'background-color': __webpack_require__(575),
	    'background-image': __webpack_require__(576),
	    'background-repeat': __webpack_require__(581),
	    'background-attachment': __webpack_require__(573),
	    'background-position': __webpack_require__(578)
	};
	
	module.exports.isValid = function isValid(v) {
	    return shorthandParser(v, shorthand_for) !== undefined;
	};
	
	module.exports.definition = {
	    set: shorthandSetter('background', shorthand_for),
	    get: shorthandGetter('background', shorthand_for),
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 573 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parsers = __webpack_require__(130);
	
	var isValid = module.exports.isValid = function isValid(v) {
	    return parsers.valueType(v) === parsers.TYPES.KEYWORD &&
	        (v.toLowerCase() === 'scroll' || v.toLowerCase() === 'fixed' || v.toLowerCase() === 'inherit');
	};
	
	module.exports.definition = {
	    set: function (v) {
	        if (!isValid(v)) {
	            return;
	        }
	        this.setProperty('background-attachment', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-attachment');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 574 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('background-clip', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-clip');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 575 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parsers = __webpack_require__(130);
	
	var parse = function parse(v) {
	    var parsed = parsers.parseColor(v);
	    if (parsed !== undefined) {
	        return parsed;
	    }
	    if (parsers.valueType(v) === parsers.TYPES.KEYWORD && (v.toLowerCase() === 'transparent' || v.toLowerCase() === 'inherit')) {
	        return v;
	    }
	    return undefined;
	};
	
	module.exports.isValid = function isValid(v) {
	    return parse(v) !== undefined;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        var parsed = parse(v);
	        if (parsed === undefined) {
	            return;
	        }
	        this.setProperty('background-color', parsed);
	    },
	    get: function () {
	        return this.getPropertyValue('background-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 576 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parsers = __webpack_require__(130);
	
	var parse = function parse(v) {
	    var parsed = parsers.parseUrl(v);
	    if (parsed !== undefined) {
	        return parsed;
	    }
	    if (parsers.valueType(v) === parsers.TYPES.KEYWORD && (v.toLowerCase() === 'none' || v.toLowerCase() === 'inherit')) {
	        return v;
	    }
	    return undefined;
	};
	
	module.exports.isValid = function isValid(v) {
	    return parse(v) !== undefined;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('background-image', parse(v));
	    },
	    get: function () {
	        return this.getPropertyValue('background-image');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 577 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('background-origin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-origin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 578 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parsers = __webpack_require__(130);
	
	var valid_keywords = ['top', 'center', 'bottom', 'left', 'right'];
	
	var parse = function parse(v) {
	    var parts = v.split(/\s+/);
	    if (parts.length > 2 || parts.length < 1) {
	        return undefined;
	    }
	    var types = [];
	    parts.forEach(function (part, index) {
	        types[index] = parsers.valueType(part);
	    });
	    if (parts.length === 1) {
	        if (types[0] === parsers.TYPES.LENGTH || types[0] === parsers.TYPES.PERCENT) {
	            return v;
	        }
	        if (types[0] === parsers.TYPES.KEYWORD) {
	            if (valid_keywords.indexOf(v.toLowerCase()) !== -1 || v.toLowerCase() === 'inherit') {
	                return v;
	            }
	        }
	        return undefined;
	    }
	    if ((types[0] === parsers.TYPES.LENGTH || types[0] === parsers.TYPES.PERCENT) &&
	            (types[1] === parsers.TYPES.LENGTH || types[1] === parsers.TYPES.PERCENT)) {
	        return v;
	    }
	    if (types[0] !== parsers.TYPES.KEYWORD || types[1] !== parsers.TYPES.KEYWORD) {
	        return undefined;
	    }
	    if (valid_keywords.indexOf(parts[0]) !== -1 && valid_keywords.indexOf(parts[1]) !== -1) {
	        return v;
	    }
	    return undefined;
	};
	
	module.exports.isValid = function isValid(v) {
	    return parse(v) !== undefined;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('background-position', parse(v));
	    },
	    get: function () {
	        return this.getPropertyValue('background-position');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 579 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('background-position-x', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-position-x');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 580 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('background-position-y', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-position-y');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 581 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parsers = __webpack_require__(130);
	
	var parse = function parse(v) {
	    if (parsers.valueType(v) === parsers.TYPES.KEYWORD && (v.toLowerCase() === 'repeat' || v.toLowerCase() === 'repeat-x' || v.toLowerCase() === 'repeat-y' || v.toLowerCase() === 'no-repeat' || v.toLowerCase() === 'inherit')) {
	        return v;
	    }
	    return undefined;
	};
	
	module.exports.isValid = function isValid(v) {
	    return parse(v) !== undefined;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('background-repeat', parse(v));
	    },
	    get: function () {
	        return this.getPropertyValue('background-repeat');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 582 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('background-repeat-x', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-repeat-x');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 583 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('background-repeat-y', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-repeat-y');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 584 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('background-size', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-size');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 585 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('baseline-shift', v);
	    },
	    get: function () {
	        return this.getPropertyValue('baseline-shift');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 586 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var shorthandParser = __webpack_require__(130).shorthandParser;
	var shorthandSetter = __webpack_require__(130).shorthandSetter;
	var shorthandGetter = __webpack_require__(130).shorthandGetter;
	
	var shorthand_for = {
	    'border-width': __webpack_require__(618),
	    'border-style': __webpack_require__(611),
	    'border-color': __webpack_require__(594)
	};
	
	module.exports.isValid = function isValid(v) {
	    return shorthandParser(v, shorthand_for) !== undefined;
	};
	
	module.exports.definition = {
	    set: shorthandSetter('border', shorthand_for),
	    get: shorthandGetter('border', shorthand_for),
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 587 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var shorthandParser = __webpack_require__(130).shorthandParser;
	
	var shorthand_for = {
	    borderBottomWidth: __webpack_require__(592),
	    borderBottomStyle: __webpack_require__(591),
	    borderBottomColor: __webpack_require__(588)
	};
	
	var isValid = module.exports.isValid = function isValid(v) {
	    return shorthandParser(v, shorthand_for) !== undefined;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        var obj = shorthandParser(v, shorthand_for);
	        if (obj === undefined) {
	            return;
	        }
	        Object.keys(obj).forEach(function (property) {
	            this._values[property] = obj[property];
	        }, this);
	        this.setProperty('border-bottom', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-bottom');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 588 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(594).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-bottom-color', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-bottom-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 589 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-bottom-left-radius', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-bottom-left-radius');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 590 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-bottom-right-radius', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-bottom-right-radius');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 591 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(611).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-bottom-style', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-bottom-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 592 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(618).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-bottom-width', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-bottom-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 593 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parsers = __webpack_require__(130);
	
	var parse = function parse(v) {
	    if (parsers.valueType(v) === parsers.TYPES.KEYWORD && (v.toLowerCase() === 'collapse' || v.toLowerCase() === 'separate' || v.toLowerCase() === 'inherit')) {
	        return v;
	    }
	    return undefined;
	};
	
	module.exports.isValid = function isValid(v) {
	    return parse(v) !== undefined;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-collapse', parse(v));
	    },
	    get: function () {
	        return this.getPropertyValue('border-collapse');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 594 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parsers = __webpack_require__(130);
	var implicitSetter = __webpack_require__(130).implicitSetter;
	
	module.exports.isValid = function parse(v) {
	    if (typeof v !== 'string') {
	        return false;
	    }
	    return (v.toLowerCase() === 'transparent' || parsers.valueType(v) === parsers.TYPES.COLOR);
	};
	var isValid = module.exports.isValid;
	
	var parser = function (v) {
	    if (isValid(v)) {
	        return v.toLowerCase();
	    }
	    return undefined;
	};
	
	module.exports.definition = {
	    set: implicitSetter('border', 'color', isValid, parser),
	    get: function () {
	        return this.getPropertyValue('border-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 595 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 596 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image-outset', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-outset');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 597 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image-repeat', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-repeat');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 598 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image-slice', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-slice');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 599 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image-source', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-source');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 600 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-image-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 601 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var shorthandParser = __webpack_require__(130).shorthandParser;
	
	var shorthand_for = {
	    borderLeftWidth: __webpack_require__(604),
	    borderLeftStyle: __webpack_require__(603),
	    borderLeftColor: __webpack_require__(602)
	};
	
	var isValid = module.exports.isValid = function isValid(v) {
	    return shorthandParser(v, shorthand_for) !== undefined;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        var obj = shorthandParser(v, shorthand_for);
	        if (obj === undefined) {
	            return;
	        }
	        Object.keys(obj).forEach(function (property) {
	            this._values[property] = obj[property];
	        }, this);
	        this.setProperty('border-left', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-left');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 602 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(594).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-left-color', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-left-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 603 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(611).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-left-style', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-left-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 604 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(618).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-left-width', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-left-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 605 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-radius', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-radius');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 606 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var shorthandParser = __webpack_require__(130).shorthandParser;
	
	var shorthand_for = {
	    borderRightWidth: __webpack_require__(609),
	    borderRightStyle: __webpack_require__(608),
	    borderRightColor: __webpack_require__(607)
	};
	
	var isValid = module.exports.isValid = function isValid(v) {
	    return shorthandParser(v, shorthand_for) !== undefined;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        var obj = shorthandParser(v, shorthand_for);
	        if (obj === undefined) {
	            return;
	        }
	        Object.keys(obj).forEach(function (property) {
	            this._values[property] = obj[property];
	        }, this);
	        this.setProperty('border-right', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-right');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 607 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(594).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-right-color', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-right-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 608 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(611).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-right-style', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-right-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 609 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(618).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-right-width', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-right-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 610 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parsers = __webpack_require__(130);
	
	// <length> <length>? | inherit
	// if one, it applies to both horizontal and verical spacing
	// if two, the first applies to the horizontal and the second applies to vertical spacing
	
	var parse = function parse(v) {
	    if (v.toLowerCase() === 'inherit') {
	        return v;
	    }
	    var parts = v.split(/\s+/);
	    if (parts.length !== 1 && parts.length !== 2) {
	        return undefined;
	    }
	    parts.forEach(function (part) {
	        if (parsers.valueType(part) !== parsers.TYPES.LENGTH) {
	            return undefined;
	        }
	    });
	
	    return v;
	};
	
	module.exports.isValid = function isValid(v) {
	    return parse(v) !== undefined;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-spacing', parse(v));
	    },
	    get: function () {
	        return this.getPropertyValue('border-spacing');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 611 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var implicitSetter = __webpack_require__(130).implicitSetter;
	
	// the valid border-styles:
	var styles = ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset'];
	
	module.exports.isValid = function parse(v) {
	    return typeof v === 'string' && styles.indexOf(v) !== -1;
	};
	var isValid = module.exports.isValid;
	
	var parser = function (v) {
	    if (isValid(v)) {
	        return v.toLowerCase();
	    }
	    return undefined;
	};
	
	module.exports.definition = {
	    set: implicitSetter('border', 'style', isValid, parser),
	    get: function () {
	        return this.getPropertyValue('border-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 612 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var shorthandParser = __webpack_require__(130).shorthandParser;
	
	var shorthand_for = {
	    borderTopWidth: __webpack_require__(617),
	    borderTopStyle: __webpack_require__(616),
	    borderTopColor: __webpack_require__(613)
	};
	
	var isValid = module.exports.isValid = function isValid(v) {
	    return shorthandParser(v, shorthand_for) !== undefined;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        var obj = shorthandParser(v, shorthand_for);
	        if (obj === undefined) {
	            return;
	        }
	        Object.keys(obj).forEach(function (property) {
	            this._values[property] = obj[property];
	        }, this);
	        this.setProperty('border-top', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-top');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 613 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(594).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-top-color', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-top-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 614 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-top-left-radius', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-top-left-radius');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 615 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('border-top-right-radius', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-top-right-radius');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 616 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(611).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-top-style', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-top-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 617 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isValid = module.exports.isValid = __webpack_require__(618).isValid;
	
	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this.setProperty('border-top-width', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-top-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 618 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parsers = __webpack_require__(130);
	var parsers = __webpack_require__(130);
	var implicitSetter = __webpack_require__(130).implicitSetter;
	
	// the valid border-widths:
	var widths = ['thin', 'medium', 'thick'];
	
	module.exports.isValid = function parse(v) {
	    var length = parsers.parseLength(v);
	    if (length !== undefined) {
	        return true;
	    }
	    if (typeof v !== 'string') {
	        return false;
	    }
	    v = v.toLowerCase();
	    if (widths.indexOf(v) === -1) {
	        return false;
	    }
	    return true;
	};
	var isValid = module.exports.isValid;
	
	var parser = function (v) {
	    var length = parsers.parseLength(v);
	    if (length !== undefined) {
	        return length;
	    }
	    if (isValid(v)) {
	        return v.toLowerCase();
	    }
	    return undefined;
	};
	
	module.exports.definition = {
	    set: implicitSetter('border', 'width', isValid, parser),
	    get: function () {
	        return this.getPropertyValue('border-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 619 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseMeasurement = __webpack_require__(130).parseMeasurement;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('bottom', parseMeasurement(v));
	    },
	    get: function () {
	        return this.getPropertyValue('bottom');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 620 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('box-shadow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('box-shadow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 621 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('box-sizing', v);
	    },
	    get: function () {
	        return this.getPropertyValue('box-sizing');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 622 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('caption-side', v);
	    },
	    get: function () {
	        return this.getPropertyValue('caption-side');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 623 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseKeyword = __webpack_require__(130).parseKeyword;
	
	var clear_keywords = [ 'none', 'left', 'right', 'both', 'inherit' ];
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('clear', parseKeyword(v, clear_keywords));
	    },
	    get: function () {
	        return this.getPropertyValue('clear');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 624 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseMeasurement = __webpack_require__(130).parseMeasurement;
	
	/*jslint regexp: true*/
	var shape_regex = /^rect\((.*)\)$/i;
	/*jslint regexp: false*/
	
	var parse = function (val) {
	    if (val === '' || val === null) {
	        return val;
	    }
	    if (typeof val !== 'string') {
	        return undefined;
	    }
	    val = val.toLowerCase();
	    if (val === 'auto' || val === 'inherit') {
	        return val;
	    }
	    var matches = val.match(shape_regex);
	    if (!matches) {
	        return undefined;
	    }
	    var parts = matches[1].split(/\s*,\s*/);
	    if (parts.length !== 4) {
	        return undefined;
	    }
	    var valid = parts.every(function (part, index) {
	        var measurement = parseMeasurement(part);
	        parts[index] = measurement;
	        return measurement !== undefined;
	    });
	    if (!valid) {
	        return undefined;
	    }
	    parts = parts.join(', ');
	    return val.replace(matches[1], parts);
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('clip', parse(v));
	    },
	    get: function () {
	        return this.getPropertyValue('clip');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 625 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(130).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 626 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('color-interpolation', v);
	    },
	    get: function () {
	        return this.getPropertyValue('color-interpolation');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 627 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('color-interpolation-filters', v);
	    },
	    get: function () {
	        return this.getPropertyValue('color-interpolation-filters');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 628 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('color-profile', v);
	    },
	    get: function () {
	        return this.getPropertyValue('color-profile');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 629 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('color-rendering', v);
	    },
	    get: function () {
	        return this.getPropertyValue('color-rendering');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 630 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('content', v);
	    },
	    get: function () {
	        return this.getPropertyValue('content');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 631 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('counter-increment', v);
	    },
	    get: function () {
	        return this.getPropertyValue('counter-increment');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 632 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('counter-reset', v);
	    },
	    get: function () {
	        return this.getPropertyValue('counter-reset');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 633 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('float', v);
	    },
	    get: function () {
	        return this.getPropertyValue('float');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 634 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('cue', v);
	    },
	    get: function () {
	        return this.getPropertyValue('cue');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 635 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('cue-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('cue-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 636 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('cue-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('cue-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 637 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('cursor', v);
	    },
	    get: function () {
	        return this.getPropertyValue('cursor');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 638 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('direction', v);
	    },
	    get: function () {
	        return this.getPropertyValue('direction');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 639 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('display', v);
	    },
	    get: function () {
	        return this.getPropertyValue('display');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 640 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('dominant-baseline', v);
	    },
	    get: function () {
	        return this.getPropertyValue('dominant-baseline');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 641 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('elevation', v);
	    },
	    get: function () {
	        return this.getPropertyValue('elevation');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 642 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('empty-cells', v);
	    },
	    get: function () {
	        return this.getPropertyValue('empty-cells');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 643 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('enable-background', v);
	    },
	    get: function () {
	        return this.getPropertyValue('enable-background');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 644 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('fill', v);
	    },
	    get: function () {
	        return this.getPropertyValue('fill');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 645 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('fill-opacity', v);
	    },
	    get: function () {
	        return this.getPropertyValue('fill-opacity');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 646 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('fill-rule', v);
	    },
	    get: function () {
	        return this.getPropertyValue('fill-rule');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 647 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('filter', v);
	    },
	    get: function () {
	        return this.getPropertyValue('filter');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 648 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(130).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('flood-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('flood-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 649 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('flood-opacity', v);
	    },
	    get: function () {
	        return this.getPropertyValue('flood-opacity');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 650 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var TYPES = __webpack_require__(130).TYPES;
	var valueType = __webpack_require__(130).valueType;
	var shorthandParser = __webpack_require__(130).shorthandParser;
	var shorthandSetter = __webpack_require__(130).shorthandSetter;
	var shorthandGetter = __webpack_require__(130).shorthandGetter;
	
	var shorthand_for = {
	    'font-family': __webpack_require__(651),
	    'font-size': __webpack_require__(652),
	    'font-style': __webpack_require__(655),
	    'font-variant': __webpack_require__(656),
	    'font-weight': __webpack_require__(657),
	    'line-height': __webpack_require__(666)
	};
	
	var static_fonts = ['caption', 'icon', 'menu', 'message-box', 'small-caption', 'status-bar', 'inherit'];
	
	module.exports.isValid = function isValid(v) {
	    return (shorthandParser(v, shorthand_for) !== undefined) ||
	        (valueType(v) === TYPES.KEYWORD && static_fonts.indexOf(v.toLowerCase()) !== -1);
	};
	
	var setter = shorthandSetter('background', shorthand_for);
	
	module.exports.definition = {
	    set: function (v) {
	        var short = shorthandParser(v, shorthand_for);
	        if (short !== undefined) {
	            return setter.call(this, v);
	        }
	        if (valueType(v) === TYPES.KEYWORD && static_fonts.indexOf(v.toLowerCase()) !== -1) {
	            this.setProperty('font', v);
	        }
	    },
	    get: shorthandGetter('background', shorthand_for),
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 651 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var TYPES = __webpack_require__(130).TYPES;
	var valueType = __webpack_require__(130).valueType;
	
	var partsRegEx = /\s*,\s*/;
	module.exports.isValid = function isValid(v) {
	    var parts = v.split(partsRegEx);
	    var len = parts.len;
	    var i;
	    var type;
	    for (i = 0; i < len; i++) {
	        type = valueType(parts[i]);
	        if (type === TYPES.STRING || type === TYPES.KEYWORD) {
	            return true;
	        }
	    }
	    return false;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('font-family', v);
	    },
	    get: function () {
	        return this.getPropertyValue('font-family');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 652 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var TYPES = __webpack_require__(130).TYPES;
	var valueType = __webpack_require__(130).valueType;
	
	var absoluteSizes = ['xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'];
	var relativeSizes = ['larger', 'smaller'];
	
	module.exports.isValid = function (v) {
	    var type = valueType(v.toLowerCase());
	    return type === TYPES.LENGTH || type === TYPES.PERCENT ||
	        (type === TYPES.KEYWORD && absoluteSizes.indexOf(v.toLowerCase()) !== -1) ||
	        (type === TYPES.KEYWORD && relativeSizes.indexOf(v.toLowerCase()) !== -1);
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('font-size', v);
	    },
	    get: function () {
	        return this.getPropertyValue('font-size');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 653 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('font-size-adjust', v);
	    },
	    get: function () {
	        return this.getPropertyValue('font-size-adjust');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 654 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('font-stretch', v);
	    },
	    get: function () {
	        return this.getPropertyValue('font-stretch');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 655 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var valid_styles = ['normal', 'italic', 'oblique', 'inherit'];
	
	module.exports.isValid = function (v) {
	    return valid_styles.indexOf(v.toLowerCase()) !== -1;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('font-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('font-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 656 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var valid_variants = ['normal', 'small-caps', 'inherit'];
	
	module.exports.isValid = function isValid(v) {
	    return valid_variants.indexOf(v.toLowerCase()) !== -1;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('font-variant', v);
	    },
	    get: function () {
	        return this.getPropertyValue('font-variant');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 657 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var valid_weights = ['normal', 'bold', 'bolder', 'lighter', '100', '200', '300', '400', '500', '600', '700', '800', '900', 'inherit'];
	
	module.exports.isValid = function isValid(v) {
	    return valid_weights.indexOf(v.toLowerCase()) !== -1;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('font-weight', v);
	    },
	    get: function () {
	        return this.getPropertyValue('font-weight');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 658 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('glyph-orientation-horizontal', v);
	    },
	    get: function () {
	        return this.getPropertyValue('glyph-orientation-horizontal');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 659 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('glyph-orientation-vertical', v);
	    },
	    get: function () {
	        return this.getPropertyValue('glyph-orientation-vertical');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 660 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseMeasurement = __webpack_require__(130).parseMeasurement;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('height', parseMeasurement(v));
	    },
	    get: function () {
	        return this.getPropertyValue('height');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 661 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('image-rendering', v);
	    },
	    get: function () {
	        return this.getPropertyValue('image-rendering');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 662 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('kerning', v);
	    },
	    get: function () {
	        return this.getPropertyValue('kerning');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 663 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseMeasurement = __webpack_require__(130).parseMeasurement;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('left', parseMeasurement(v));
	    },
	    get: function () {
	        return this.getPropertyValue('left');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 664 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('letter-spacing', v);
	    },
	    get: function () {
	        return this.getPropertyValue('letter-spacing');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 665 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(130).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('lighting-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('lighting-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 666 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var TYPES = __webpack_require__(130).TYPES;
	var valueType = __webpack_require__(130).valueType;
	
	module.exports.isValid = function isValid(v) {
	    var type = valueType(v);
	    return (type === TYPES.KEYWORD && (v.toLowerCase() === 'normal') || (v.toLowerCase() === 'inherit')) ||
	        type === TYPES.NUMBER || type === TYPES.LENGTH || type === TYPES.PERCENT;
	};
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('line-height', v);
	    },
	    get: function () {
	        return this.getPropertyValue('line-height');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 667 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('list-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('list-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 668 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('list-style-image', v);
	    },
	    get: function () {
	        return this.getPropertyValue('list-style-image');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 669 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('list-style-position', v);
	    },
	    get: function () {
	        return this.getPropertyValue('list-style-position');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 670 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('list-style-type', v);
	    },
	    get: function () {
	        return this.getPropertyValue('list-style-type');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 671 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('margin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('margin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 672 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('margin-bottom', v);
	    },
	    get: function () {
	        return this.getPropertyValue('margin-bottom');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 673 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('margin-left', v);
	    },
	    get: function () {
	        return this.getPropertyValue('margin-left');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 674 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('margin-right', v);
	    },
	    get: function () {
	        return this.getPropertyValue('margin-right');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 675 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('margin-top', v);
	    },
	    get: function () {
	        return this.getPropertyValue('margin-top');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 676 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('marker', v);
	    },
	    get: function () {
	        return this.getPropertyValue('marker');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 677 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('marker-end', v);
	    },
	    get: function () {
	        return this.getPropertyValue('marker-end');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 678 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('marker-mid', v);
	    },
	    get: function () {
	        return this.getPropertyValue('marker-mid');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 679 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('marker-offset', v);
	    },
	    get: function () {
	        return this.getPropertyValue('marker-offset');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 680 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('marker-start', v);
	    },
	    get: function () {
	        return this.getPropertyValue('marker-start');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 681 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('marks', v);
	    },
	    get: function () {
	        return this.getPropertyValue('marks');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 682 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('mask', v);
	    },
	    get: function () {
	        return this.getPropertyValue('mask');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 683 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('max-height', v);
	    },
	    get: function () {
	        return this.getPropertyValue('max-height');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 684 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('max-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('max-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 685 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('min-height', v);
	    },
	    get: function () {
	        return this.getPropertyValue('min-height');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 686 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('min-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('min-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 687 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseNumber = __webpack_require__(130).parseNumber;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('opacity', parseNumber(v));
	    },
	    get: function () {
	        return this.getPropertyValue('opacity');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 688 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('orphans', v);
	    },
	    get: function () {
	        return this.getPropertyValue('orphans');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 689 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('outline', v);
	    },
	    get: function () {
	        return this.getPropertyValue('outline');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 690 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(130).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('outline-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('outline-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 691 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('outline-offset', v);
	    },
	    get: function () {
	        return this.getPropertyValue('outline-offset');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 692 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('outline-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('outline-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 693 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('outline-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('outline-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 694 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('overflow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('overflow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 695 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('overflow-x', v);
	    },
	    get: function () {
	        return this.getPropertyValue('overflow-x');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 696 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('overflow-y', v);
	    },
	    get: function () {
	        return this.getPropertyValue('overflow-y');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 697 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('padding', v);
	    },
	    get: function () {
	        return this.getPropertyValue('padding');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 698 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('padding-bottom', v);
	    },
	    get: function () {
	        return this.getPropertyValue('padding-bottom');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 699 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('padding-left', v);
	    },
	    get: function () {
	        return this.getPropertyValue('padding-left');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 700 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('padding-right', v);
	    },
	    get: function () {
	        return this.getPropertyValue('padding-right');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 701 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('padding-top', v);
	    },
	    get: function () {
	        return this.getPropertyValue('padding-top');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 702 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('page', v);
	    },
	    get: function () {
	        return this.getPropertyValue('page');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 703 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('page-break-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('page-break-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 704 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('page-break-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('page-break-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 705 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('page-break-inside', v);
	    },
	    get: function () {
	        return this.getPropertyValue('page-break-inside');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 706 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('pause', v);
	    },
	    get: function () {
	        return this.getPropertyValue('pause');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 707 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('pause-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('pause-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 708 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('pause-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('pause-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 709 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('pitch', v);
	    },
	    get: function () {
	        return this.getPropertyValue('pitch');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 710 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('pitch-range', v);
	    },
	    get: function () {
	        return this.getPropertyValue('pitch-range');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 711 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('play-during', v);
	    },
	    get: function () {
	        return this.getPropertyValue('play-during');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 712 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('pointer-events', v);
	    },
	    get: function () {
	        return this.getPropertyValue('pointer-events');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 713 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('position', v);
	    },
	    get: function () {
	        return this.getPropertyValue('position');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 714 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('quotes', v);
	    },
	    get: function () {
	        return this.getPropertyValue('quotes');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 715 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('resize', v);
	    },
	    get: function () {
	        return this.getPropertyValue('resize');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 716 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('richness', v);
	    },
	    get: function () {
	        return this.getPropertyValue('richness');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 717 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseMeasurement = __webpack_require__(130).parseMeasurement;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('right', parseMeasurement(v));
	    },
	    get: function () {
	        return this.getPropertyValue('right');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 718 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('shape-rendering', v);
	    },
	    get: function () {
	        return this.getPropertyValue('shape-rendering');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 719 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('size', v);
	    },
	    get: function () {
	        return this.getPropertyValue('size');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 720 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('speak', v);
	    },
	    get: function () {
	        return this.getPropertyValue('speak');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 721 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('speak-header', v);
	    },
	    get: function () {
	        return this.getPropertyValue('speak-header');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 722 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('speak-numeral', v);
	    },
	    get: function () {
	        return this.getPropertyValue('speak-numeral');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 723 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('speak-punctuation', v);
	    },
	    get: function () {
	        return this.getPropertyValue('speak-punctuation');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 724 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('speech-rate', v);
	    },
	    get: function () {
	        return this.getPropertyValue('speech-rate');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 725 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('src', v);
	    },
	    get: function () {
	        return this.getPropertyValue('src');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 726 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(130).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('stop-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('stop-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 727 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('stop-opacity', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stop-opacity');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 728 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('stress', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stress');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 729 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('stroke', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 730 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('stroke-dasharray', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke-dasharray');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 731 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('stroke-dashoffset', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke-dashoffset');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 732 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('stroke-linecap', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke-linecap');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 733 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('stroke-linejoin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke-linejoin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 734 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('stroke-miterlimit', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke-miterlimit');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 735 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('stroke-opacity', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke-opacity');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 736 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('stroke-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 737 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('table-layout', v);
	    },
	    get: function () {
	        return this.getPropertyValue('table-layout');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 738 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-align', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-align');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 739 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-anchor', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-anchor');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 740 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-decoration', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-decoration');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 741 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-indent', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-indent');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 742 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-line-through', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-line-through');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 743 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(130).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-line-through-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('text-line-through-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 744 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-line-through-mode', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-line-through-mode');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 745 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-line-through-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-line-through-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 746 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-line-through-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-line-through-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 747 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-overflow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-overflow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 748 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-overline', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-overline');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 749 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(130).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-overline-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('text-overline-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 750 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-overline-mode', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-overline-mode');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 751 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-overline-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-overline-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 752 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-overline-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-overline-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 753 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-rendering', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-rendering');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 754 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-shadow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-shadow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 755 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-transform', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-transform');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 756 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-underline', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-underline');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 757 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(130).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-underline-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('text-underline-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 758 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-underline-mode', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-underline-mode');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 759 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-underline-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-underline-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 760 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('text-underline-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-underline-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 761 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseMeasurement = __webpack_require__(130).parseMeasurement;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('top', parseMeasurement(v));
	    },
	    get: function () {
	        return this.getPropertyValue('top');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 762 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('unicode-bidi', v);
	    },
	    get: function () {
	        return this.getPropertyValue('unicode-bidi');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 763 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('unicode-range', v);
	    },
	    get: function () {
	        return this.getPropertyValue('unicode-range');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 764 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('vector-effect', v);
	    },
	    get: function () {
	        return this.getPropertyValue('vector-effect');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 765 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('vertical-align', v);
	    },
	    get: function () {
	        return this.getPropertyValue('vertical-align');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 766 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('visibility', v);
	    },
	    get: function () {
	        return this.getPropertyValue('visibility');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 767 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('voic-family', v);
	    },
	    get: function () {
	        return this.getPropertyValue('voice-family');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 768 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('volume', v);
	    },
	    get: function () {
	        return this.getPropertyValue('volume');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 769 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-animation', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 770 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-animation-delay', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-delay');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 771 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-animation-direction', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-direction');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 772 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-animation-duration', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-duration');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 773 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-animation-fill-mode', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-fill-mode');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 774 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-animation-iteration-count', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-iteration-count');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 775 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-animation-name', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-name');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 776 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-animation-play-state', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-play-state');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 777 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-animation-timing-function', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-timing-function');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 778 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-appearance', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-appearance');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 779 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-aspect-ratio', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-aspect-ratio');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 780 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-backface-visibility', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-backface-visibility');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 781 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-background-clip', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-background-clip');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 782 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-background-composite', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-background-composite');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 783 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-background-origin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-background-origin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 784 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-background-size', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-background-size');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 785 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 786 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(130).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-after-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-after-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 787 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-after-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-after-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 788 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-after-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-after-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 789 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 790 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(130).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-before-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-before-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 791 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-before-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-before-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 792 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-before-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-before-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 793 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-end', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-end');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 794 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(130).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-end-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-end-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 795 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-end-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-end-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 796 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-end-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-end-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 797 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-fit', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-fit');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 798 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-horizontal-spacing', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-horizontal-spacing');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 799 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-image', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-image');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 800 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-radius', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-radius');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 801 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-start', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-start');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 802 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(130).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-start-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-start-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 803 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-start-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-start-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 804 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-start-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-start-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 805 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-border-vertical-spacing', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-vertical-spacing');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 806 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-box-align', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-align');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 807 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-box-direction', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-direction');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 808 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-box-flex', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-flex');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 809 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-box-flex-group', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-flex-group');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 810 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-box-lines', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-lines');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 811 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-box-ordinal-group', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-ordinal-group');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 812 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-box-orient', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-orient');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 813 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-box-pack', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-pack');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 814 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-box-reflect', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-reflect');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 815 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-box-shadow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-shadow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 816 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-color-correction', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-color-correction');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 817 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-axis', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-axis');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 818 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-break-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-break-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 819 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-break-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-break-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 820 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-break-inside', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-break-inside');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 821 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-count', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-count');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 822 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-gap', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-gap');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 823 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-rule', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-rule');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 824 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(130).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-rule-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-rule-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 825 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-rule-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-rule-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 826 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-rule-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-rule-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 827 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-span', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-span');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 828 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-column-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 829 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-columns', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-columns');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 830 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-filter', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-filter');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 831 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-flex-align', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-align');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 832 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-flex-direction', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-direction');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 833 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-flex-flow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-flow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 834 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-flex-item-align', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-item-align');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 835 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-flex-line-pack', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-line-pack');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 836 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-flex-order', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-order');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 837 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-flex-pack', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-pack');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 838 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-flex-wrap', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-wrap');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 839 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-flow-from', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flow-from');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 840 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-flow-into', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flow-into');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 841 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-font-feature-settings', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-font-feature-settings');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 842 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-font-kerning', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-font-kerning');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 843 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-font-size-delta', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-font-size-delta');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 844 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-font-smoothing', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-font-smoothing');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 845 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-font-variant-ligatures', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-font-variant-ligatures');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 846 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-highlight', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-highlight');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 847 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-hyphenate-character', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-hyphenate-character');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 848 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-hyphenate-limit-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-hyphenate-limit-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 849 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-hyphenate-limit-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-hyphenate-limit-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 850 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-hyphenate-limit-lines', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-hyphenate-limit-lines');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 851 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-hyphens', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-hyphens');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 852 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-line-align', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-line-align');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 853 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-line-box-contain', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-line-box-contain');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 854 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-line-break', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-line-break');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 855 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-line-clamp', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-line-clamp');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 856 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-line-grid', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-line-grid');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 857 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-line-snap', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-line-snap');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 858 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-locale', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-locale');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 859 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-logical-height', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-logical-height');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 860 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-logical-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-logical-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 861 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-margin-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 862 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-margin-after-collapse', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-after-collapse');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 863 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-margin-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 864 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-margin-before-collapse', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-before-collapse');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 865 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-margin-bottom-collapse', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-bottom-collapse');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 866 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-margin-collapse', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-collapse');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 867 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-margin-end', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-end');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 868 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-margin-start', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-start');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 869 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-margin-top-collapse', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-top-collapse');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 870 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-marquee', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-marquee');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 871 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-marquee-direction', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-marquee-direction');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 872 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-marquee-increment', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-marquee-increment');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 873 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-marquee-repetition', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-marquee-repetition');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 874 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-marquee-speed', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-marquee-speed');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 875 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-marquee-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-marquee-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 876 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 877 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-attachment', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-attachment');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 878 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-box-image', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-box-image');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 879 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-box-image-outset', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-box-image-outset');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 880 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-box-image-repeat', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-box-image-repeat');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 881 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-box-image-slice', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-box-image-slice');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 882 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-box-image-source', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-box-image-source');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 883 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-box-image-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-box-image-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 884 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-clip', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-clip');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 885 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-composite', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-composite');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 886 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-image', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-image');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 887 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-origin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-origin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 888 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-position', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-position');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 889 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-position-x', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-position-x');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 890 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-position-y', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-position-y');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 891 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-repeat', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-repeat');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 892 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-repeat-x', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-repeat-x');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 893 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-repeat-y', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-repeat-y');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 894 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-mask-size', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-size');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 895 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(130).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-match-nearest-mail-blockquote-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-match-nearest-mail-blockquote-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 896 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-max-logical-height', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-max-logical-height');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 897 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-max-logical-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-max-logical-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 898 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-min-logical-height', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-min-logical-height');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 899 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-min-logical-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-min-logical-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 900 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-nbsp-mode', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-nbsp-mode');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 901 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-overflow-scrolling', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-overflow-scrolling');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 902 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-padding-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-padding-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 903 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-padding-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-padding-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 904 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-padding-end', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-padding-end');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 905 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-padding-start', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-padding-start');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 906 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-perspective', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-perspective');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 907 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-perspective-origin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-perspective-origin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 908 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-perspective-origin-x', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-perspective-origin-x');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 909 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-perspective-origin-y', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-perspective-origin-y');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 910 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-print-color-adjust', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-print-color-adjust');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 911 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-region-break-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-region-break-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 912 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-region-break-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-region-break-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 913 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-region-break-inside', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-region-break-inside');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 914 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-region-overflow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-region-overflow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 915 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-rtl-ordering', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-rtl-ordering');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 916 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-svg-shadow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-svg-shadow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 917 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(130).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-tap-highlight-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-tap-highlight-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 918 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-combine', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-combine');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 919 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-decorations-in-effect', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-decorations-in-effect');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 920 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-emphasis', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-emphasis');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 921 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(130).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-emphasis-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-emphasis-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 922 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-emphasis-position', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-emphasis-position');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 923 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-emphasis-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-emphasis-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 924 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(130).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-fill-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-fill-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 925 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-orientation', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-orientation');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 926 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-security', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-security');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 927 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-size-adjust', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-size-adjust');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 928 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-stroke', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-stroke');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 929 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseColor = __webpack_require__(130).parseColor;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-stroke-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-stroke-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 930 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-text-stroke-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-stroke-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 931 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-transform', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transform');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 932 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-transform-origin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transform-origin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 933 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-transform-origin-x', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transform-origin-x');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 934 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-transform-origin-y', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transform-origin-y');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 935 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-transform-origin-z', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transform-origin-z');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 936 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-transform-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transform-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 937 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-transition', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transition');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 938 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-transition-delay', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transition-delay');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 939 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-transition-duration', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transition-duration');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 940 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-transition-property', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transition-property');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 941 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-transition-timing-function', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transition-timing-function');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 942 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-user-drag', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-user-drag');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 943 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-user-modify', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-user-modify');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 944 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-user-select', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-user-select');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 945 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-wrap', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-wrap');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 946 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-wrap-flow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-wrap-flow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 947 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-wrap-margin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-wrap-margin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 948 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-wrap-padding', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-wrap-padding');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 949 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-wrap-shape-inside', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-wrap-shape-inside');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 950 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-wrap-shape-outside', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-wrap-shape-outside');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 951 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-wrap-through', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-wrap-through');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 952 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('-webkit-writing-mode', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-writing-mode');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 953 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('white-space', v);
	    },
	    get: function () {
	        return this.getPropertyValue('white-space');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 954 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('widows', v);
	    },
	    get: function () {
	        return this.getPropertyValue('widows');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 955 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseMeasurement = __webpack_require__(130).parseMeasurement;
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('width', parseMeasurement(v));
	    },
	    get: function () {
	        return this.getPropertyValue('width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 956 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('word-break', v);
	    },
	    get: function () {
	        return this.getPropertyValue('word-break');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 957 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('word-spacing', v);
	    },
	    get: function () {
	        return this.getPropertyValue('word-spacing');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 958 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('word-wrap', v);
	    },
	    get: function () {
	        return this.getPropertyValue('word-wrap');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 959 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('writing-mode', v);
	    },
	    get: function () {
	        return this.getPropertyValue('writing-mode');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 960 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('z-index', v);
	    },
	    get: function () {
	        return this.getPropertyValue('z-index');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 961 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports.definition = {
	    set: function (v) {
	        this.setProperty('zoom', v);
	    },
	    get: function () {
	        return this.getPropertyValue('zoom');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 962 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.CSSStyleDeclaration = __webpack_require__(1006).CSSStyleDeclaration;
	exports.CSSRule = __webpack_require__(1007).CSSRule;
	exports.CSSStyleRule = __webpack_require__(1008).CSSStyleRule;
	exports.MediaList = __webpack_require__(1009).MediaList;
	exports.CSSMediaRule = __webpack_require__(1010).CSSMediaRule;
	exports.CSSImportRule = __webpack_require__(1011).CSSImportRule;
	exports.CSSFontFaceRule = __webpack_require__(1012).CSSFontFaceRule;
	exports.StyleSheet = __webpack_require__(1013).StyleSheet;
	exports.CSSStyleSheet = __webpack_require__(1014).CSSStyleSheet;
	exports.CSSKeyframesRule = __webpack_require__(1015).CSSKeyframesRule;
	exports.CSSKeyframeRule = __webpack_require__(1016).CSSKeyframeRule;
	exports.MatcherList = __webpack_require__(1017).MatcherList;
	exports.CSSDocumentRule = __webpack_require__(1018).CSSDocumentRule;
	exports.CSSValue = __webpack_require__(1019).CSSValue;
	exports.CSSValueExpression = __webpack_require__(1020).CSSValueExpression;
	exports.parse = __webpack_require__(1021).parse;
	exports.clone = __webpack_require__(1022).clone;


/***/ },
/* 963 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Original code adapted from Robert Kieffer.
	// details at https://github.com/broofa/node-uuid
	
	
	(function() {
	  var _global = this;
	
	  var mathRNG, whatwgRNG;
	
	  // NOTE: Math.random() does not guarantee "cryptographic quality"
	  mathRNG = function(size) {
	    var bytes = new Buffer(size);
	    var r;
	
	    for (var i = 0, r; i < size; i++) {
	      if ((i & 0x03) == 0) r = Math.random() * 0x100000000;
	      bytes[i] = r >>> ((i & 0x03) << 3) & 0xff;
	    }
	
	    return bytes;
	  }
	
	  if (_global.crypto && crypto.getRandomValues) {
	    whatwgRNG = function(size) {
	      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
	      crypto.getRandomValues(bytes);
	      return bytes;
	    }
	  }
	
	  module.exports = whatwgRNG || mathRNG;
	
	}())
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(48).Buffer))

/***/ },
/* 964 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(1024)
	
	var md5 = toConstructor(__webpack_require__(1023))
	var rmd160 = toConstructor(__webpack_require__(1028))
	
	function toConstructor (fn) {
	  return function () {
	    var buffers = []
	    var m= {
	      update: function (data, enc) {
	        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
	        buffers.push(data)
	        return this
	      },
	      digest: function (enc) {
	        var buf = Buffer.concat(buffers)
	        var r = fn(buf)
	        buffers = null
	        return enc ? r.toString(enc) : r
	      }
	    }
	    return m
	  }
	}
	
	module.exports = function (alg) {
	  if('md5' === alg) return new md5()
	  if('rmd160' === alg) return new rmd160()
	  return createHash(alg)
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(48).Buffer))

/***/ },
/* 965 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(964)
	
	var blocksize = 64
	var zeroBuffer = new Buffer(blocksize); zeroBuffer.fill(0)
	
	module.exports = Hmac
	
	function Hmac (alg, key) {
	  if(!(this instanceof Hmac)) return new Hmac(alg, key)
	  this._opad = opad
	  this._alg = alg
	
	  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key
	
	  if(key.length > blocksize) {
	    key = createHash(alg).update(key).digest()
	  } else if(key.length < blocksize) {
	    key = Buffer.concat([key, zeroBuffer], blocksize)
	  }
	
	  var ipad = this._ipad = new Buffer(blocksize)
	  var opad = this._opad = new Buffer(blocksize)
	
	  for(var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }
	
	  this._hash = createHash(alg).update(ipad)
	}
	
	Hmac.prototype.update = function (data, enc) {
	  this._hash.update(data, enc)
	  return this
	}
	
	Hmac.prototype.digest = function (enc) {
	  var h = this._hash.digest()
	  return createHash(this._alg).update(this._opad).update(h).digest(enc)
	}
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(48).Buffer))

/***/ },
/* 966 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// JavaScript PBKDF2 Implementation
	// Based on http://git.io/qsv2zw
	// Licensed under LGPL v3
	// Copyright (c) 2013 jduncanator
	
	var blocksize = 64
	var zeroBuffer = new Buffer(blocksize); zeroBuffer.fill(0)
	
	module.exports = function (createHmac, exports) {
	  exports = exports || {}
	
	  exports.pbkdf2 = function(password, salt, iterations, keylen, cb) {
	    if('function' !== typeof cb)
	      throw new Error('No callback provided to pbkdf2');
	    setTimeout(function () {
	      cb(null, exports.pbkdf2Sync(password, salt, iterations, keylen))
	    })
	  }
	
	  exports.pbkdf2Sync = function(key, salt, iterations, keylen) {
	    if('number' !== typeof iterations)
	      throw new TypeError('Iterations not a number')
	    if(iterations < 0)
	      throw new TypeError('Bad iterations')
	    if('number' !== typeof keylen)
	      throw new TypeError('Key length not a number')
	    if(keylen < 0)
	      throw new TypeError('Bad key length')
	
	    //stretch key to the correct length that hmac wants it,
	    //otherwise this will happen every time hmac is called
	    //twice per iteration.
	    var key = !Buffer.isBuffer(key) ? new Buffer(key) : key
	
	    if(key.length > blocksize) {
	      key = createHash(alg).update(key).digest()
	    } else if(key.length < blocksize) {
	      key = Buffer.concat([key, zeroBuffer], blocksize)
	    }
	
	    var HMAC;
	    var cplen, p = 0, i = 1, itmp = new Buffer(4), digtmp;
	    var out = new Buffer(keylen);
	    out.fill(0);
	    while(keylen) {
	      if(keylen > 20)
	        cplen = 20;
	      else
	        cplen = keylen;
	
	      /* We are unlikely to ever use more than 256 blocks (5120 bits!)
	         * but just in case...
	         */
	        itmp[0] = (i >> 24) & 0xff;
	        itmp[1] = (i >> 16) & 0xff;
	          itmp[2] = (i >> 8) & 0xff;
	          itmp[3] = i & 0xff;
	
	          HMAC = createHmac('sha1', key);
	          HMAC.update(salt)
	          HMAC.update(itmp);
	        digtmp = HMAC.digest();
	        digtmp.copy(out, p, 0, cplen);
	
	        for(var j = 1; j < iterations; j++) {
	          HMAC = createHmac('sha1', key);
	          HMAC.update(digtmp);
	          digtmp = HMAC.digest();
	          for(var k = 0; k < cplen; k++) {
	            out[k] ^= digtmp[k];
	          }
	        }
	      keylen -= cplen;
	      i++;
	      p += cplen;
	    }
	
	    return out;
	  }
	
	  return exports
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(48).Buffer))

/***/ },
/* 967 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, __filename) {
	/**
	 * Module dependencies.
	 */
	
	var fs = __webpack_require__(22)
	  , path = __webpack_require__(156)
	  , join = path.join
	  , dirname = path.dirname
	  , exists = fs.existsSync || path.existsSync
	  , defaults = {
	        arrow: process.env.NODE_BINDINGS_ARROW || ' â '
	      , compiled: process.env.NODE_BINDINGS_COMPILED_DIR || 'compiled'
	      , platform: process.platform
	      , arch: process.arch
	      , version: process.versions.node
	      , bindings: 'bindings.node'
	      , try: [
	          // node-gyp's linked version in the "build" dir
	          [ 'module_root', 'build', 'bindings' ]
	          // node-waf and gyp_addon (a.k.a node-gyp)
	        , [ 'module_root', 'build', 'Debug', 'bindings' ]
	        , [ 'module_root', 'build', 'Release', 'bindings' ]
	          // Debug files, for development (legacy behavior, remove for node v0.9)
	        , [ 'module_root', 'out', 'Debug', 'bindings' ]
	        , [ 'module_root', 'Debug', 'bindings' ]
	          // Release files, but manually compiled (legacy behavior, remove for node v0.9)
	        , [ 'module_root', 'out', 'Release', 'bindings' ]
	        , [ 'module_root', 'Release', 'bindings' ]
	          // Legacy from node-waf, node <= 0.4.x
	        , [ 'module_root', 'build', 'default', 'bindings' ]
	          // Production "Release" buildtype binary (meh...)
	        , [ 'module_root', 'compiled', 'version', 'platform', 'arch', 'bindings' ]
	        ]
	    }
	
	/**
	 * The main `bindings()` function loads the compiled bindings for a given module.
	 * It uses V8's Error API to determine the parent filename that this function is
	 * being invoked from, which is then used to find the root directory.
	 */
	
	function bindings (opts) {
	
	  // Argument surgery
	  if (typeof opts == 'string') {
	    opts = { bindings: opts }
	  } else if (!opts) {
	    opts = {}
	  }
	  opts.__proto__ = defaults
	
	  // Get the module root
	  if (!opts.module_root) {
	    opts.module_root = exports.getRoot(exports.getFileName())
	  }
	
	  // Ensure the given bindings name ends with .node
	  if (path.extname(opts.bindings) != '.node') {
	    opts.bindings += '.node'
	  }
	
	  var tries = []
	    , i = 0
	    , l = opts.try.length
	    , n
	    , b
	    , err
	
	  for (; i<l; i++) {
	    n = join.apply(null, opts.try[i].map(function (p) {
	      return opts[p] || p
	    }))
	    tries.push(n)
	    try {
	      b = opts.path ? /*require.resolve*/(__webpack_require__(972).resolve(n)) : __webpack_require__(972)(n)
	      if (!opts.path) {
	        b.path = n
	      }
	      return b
	    } catch (e) {
	      if (!/not find/i.test(e.message)) {
	        throw e
	      }
	    }
	  }
	
	  err = new Error('Could not locate the bindings file. Tried:\n'
	    + tries.map(function (a) { return opts.arrow + a }).join('\n'))
	  err.tries = tries
	  throw err
	}
	module.exports = exports = bindings
	
	
	/**
	 * Gets the filename of the JavaScript file that invokes this function.
	 * Used to help find the root directory of a module.
	 * Optionally accepts an filename argument to skip when searching for the invoking filename
	 */
	
	exports.getFileName = function getFileName (calling_file) {
	  var origPST = Error.prepareStackTrace
	    , origSTL = Error.stackTraceLimit
	    , dummy = {}
	    , fileName
	
	  Error.stackTraceLimit = 10
	
	  Error.prepareStackTrace = function (e, st) {
	    for (var i=0, l=st.length; i<l; i++) {
	      fileName = st[i].getFileName()
	      if (fileName !== __filename) {
	        if (calling_file) {
	            if (fileName !== calling_file) {
	              return
	            }
	        } else {
	          return
	        }
	      }
	    }
	  }
	
	  // run the 'prepareStackTrace' function above
	  Error.captureStackTrace(dummy)
	  dummy.stack
	
	  // cleanup
	  Error.prepareStackTrace = origPST
	  Error.stackTraceLimit = origSTL
	
	  return fileName
	}
	
	/**
	 * Gets the root directory of a module, given an arbitrary filename
	 * somewhere in the module tree. The "root directory" is the directory
	 * containing the `package.json` file.
	 *
	 *   In:  /home/nate/node-native-module/lib/index.js
	 *   Out: /home/nate/node-native-module
	 */
	
	exports.getRoot = function getRoot (file) {
	  var dir = dirname(file)
	    , prev
	  while (true) {
	    if (dir === '.') {
	      // Avoids an infinite loop in rare cases, like the REPL
	      dir = process.cwd()
	    }
	    if (exists(join(dir, 'package.json')) || exists(join(dir, 'node_modules'))) {
	      // Found the 'package.json' file or 'node_modules' dir; we're done
	      return dir
	    }
	    if (prev === dir) {
	      // Got to the top
	      throw new Error('Could not find module root given file: "' + file
	                    + '". Do you have a `package.json` file? ')
	    }
	    // Try the parent dir next
	    prev = dir
	    dir = join(dir, '..')
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), "/index.js"))

/***/ },
/* 968 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 969 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.CSSStyleDeclaration = __webpack_require__(981).CSSStyleDeclaration;
	exports.CSSRule = __webpack_require__(982).CSSRule;
	exports.CSSStyleRule = __webpack_require__(983).CSSStyleRule;
	exports.MediaList = __webpack_require__(984).MediaList;
	exports.CSSMediaRule = __webpack_require__(985).CSSMediaRule;
	exports.CSSImportRule = __webpack_require__(986).CSSImportRule;
	exports.CSSFontFaceRule = __webpack_require__(987).CSSFontFaceRule;
	exports.StyleSheet = __webpack_require__(988).StyleSheet;
	exports.CSSStyleSheet = __webpack_require__(989).CSSStyleSheet;
	exports.CSSKeyframesRule = __webpack_require__(990).CSSKeyframesRule;
	exports.CSSKeyframeRule = __webpack_require__(991).CSSKeyframeRule;
	exports.MatcherList = __webpack_require__(992).MatcherList;
	exports.CSSDocumentRule = __webpack_require__(993).CSSDocumentRule;
	exports.CSSValue = __webpack_require__(994).CSSValue;
	exports.CSSValueExpression = __webpack_require__(995).CSSValueExpression;
	exports.parse = __webpack_require__(996).parse;
	exports.clone = __webpack_require__(997).clone;


/***/ },
/* 970 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./bindings": 563,
		"./bindings.js": 563,
		"./package": 999,
		"./package.json": 999
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;


/***/ },
/* 971 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 972 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./bindings": 967,
		"./bindings.js": 967,
		"./package": 1000,
		"./package.json": 1000
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;


/***/ },
/* 973 */,
/* 974 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(1001);
	exports.Readable = exports;
	exports.Writable = __webpack_require__(1002);
	exports.Duplex = __webpack_require__(1003);
	exports.Transform = __webpack_require__(1004);
	exports.PassThrough = __webpack_require__(1005);


/***/ },
/* 975 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1002)


/***/ },
/* 976 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1003)


/***/ },
/* 977 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1004)


/***/ },
/* 978 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1005)


/***/ },
/* 979 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 980 */,
/* 981 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration
	 */
	CSSOM.CSSStyleDeclaration = function CSSStyleDeclaration(){
		this.length = 0;
		this.parentRule = null;
	
		// NON-STANDARD
		this._importants = {};
	};
	
	
	CSSOM.CSSStyleDeclaration.prototype = {
	
		constructor: CSSOM.CSSStyleDeclaration,
	
		/**
		 *
		 * @param {string} name
		 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-getPropertyValue
		 * @return {string} the value of the property if it has been explicitly set for this declaration block.
		 * Returns the empty string if the property has not been set.
		 */
		getPropertyValue: function(name) {
			return this[name] || "";
		},
	
		/**
		 *
		 * @param {string} name
		 * @param {string} value
		 * @param {string} [priority=null] "important" or null
		 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-setProperty
		 */
		setProperty: function(name, value, priority) {
			if (this[name]) {
				// Property already exist. Overwrite it.
				var index = Array.prototype.indexOf.call(this, name);
				if (index < 0) {
					this[this.length] = name;
					this.length++;
				}
			} else {
				// New property.
				this[this.length] = name;
				this.length++;
			}
			this[name] = value;
			this._importants[name] = priority;
		},
	
		/**
		 *
		 * @param {string} name
		 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-removeProperty
		 * @return {string} the value of the property if it has been explicitly set for this declaration block.
		 * Returns the empty string if the property has not been set or the property name does not correspond to a known CSS property.
		 */
		removeProperty: function(name) {
			if (!(name in this)) {
				return "";
			}
			var index = Array.prototype.indexOf.call(this, name);
			if (index < 0) {
				return "";
			}
			var prevValue = this[name];
			this[name] = "";
	
			// That's what WebKit and Opera do
			Array.prototype.splice.call(this, index, 1);
	
			// That's what Firefox does
			//this[index] = ""
	
			return prevValue;
		},
	
		getPropertyCSSValue: function() {
			//FIXME
		},
	
		/**
		 *
		 * @param {String} name
		 */
		getPropertyPriority: function(name) {
			return this._importants[name] || "";
		},
	
	
		/**
		 *   element.style.overflow = "auto"
		 *   element.style.getPropertyShorthand("overflow-x")
		 *   -> "overflow"
		 */
		getPropertyShorthand: function() {
			//FIXME
		},
	
		isPropertyImplicit: function() {
			//FIXME
		},
	
		// Doesn't work in IE < 9
		get cssText(){
			var properties = [];
			for (var i=0, length=this.length; i < length; ++i) {
				var name = this[i];
				var value = this.getPropertyValue(name);
				var priority = this.getPropertyPriority(name);
				if (priority) {
					priority = " !" + priority;
				}
				properties[i] = name + ": " + value + priority + ";";
			}
			return properties.join(" ");
		},
	
		set cssText(cssText){
			var i, name;
			for (i = this.length; i--;) {
				name = this[i];
				this[name] = "";
			}
			Array.prototype.splice.call(this, 0, this.length);
			this._importants = {};
	
			var dummyRule = CSSOM.parse('#bogus{' + cssText + '}').cssRules[0].style;
			var length = dummyRule.length;
			for (i = 0; i < length; ++i) {
				name = dummyRule[i];
				this.setProperty(dummyRule[i], dummyRule.getPropertyValue(name), dummyRule.getPropertyPriority(name));
			}
		}
	};
	
	
	//.CommonJS
	exports.CSSStyleDeclaration = CSSOM.CSSStyleDeclaration;
	CSSOM.parse = __webpack_require__(996).parse; // Cannot be included sooner due to the mutual dependency between parse.js and CSSStyleDeclaration.js
	///CommonJS


/***/ },
/* 982 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#the-cssrule-interface
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSRule
	 */
	CSSOM.CSSRule = function CSSRule() {
		this.parentRule = null;
		this.parentStyleSheet = null;
	};
	
	CSSOM.CSSRule.STYLE_RULE = 1;
	CSSOM.CSSRule.IMPORT_RULE = 3;
	CSSOM.CSSRule.MEDIA_RULE = 4;
	CSSOM.CSSRule.FONT_FACE_RULE = 5;
	CSSOM.CSSRule.PAGE_RULE = 6;
	CSSOM.CSSRule.WEBKIT_KEYFRAMES_RULE = 8;
	CSSOM.CSSRule.WEBKIT_KEYFRAME_RULE = 9;
	
	// Obsolete in CSSOM http://dev.w3.org/csswg/cssom/
	//CSSOM.CSSRule.UNKNOWN_RULE = 0;
	//CSSOM.CSSRule.CHARSET_RULE = 2;
	
	// Never implemented
	//CSSOM.CSSRule.VARIABLES_RULE = 7;
	
	CSSOM.CSSRule.prototype = {
		constructor: CSSOM.CSSRule
		//FIXME
	};
	
	
	//.CommonJS
	exports.CSSRule = CSSOM.CSSRule;
	///CommonJS


/***/ },
/* 983 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSStyleDeclaration: __webpack_require__(981).CSSStyleDeclaration,
		CSSRule: __webpack_require__(982).CSSRule
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#cssstylerule
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleRule
	 */
	CSSOM.CSSStyleRule = function CSSStyleRule() {
		CSSOM.CSSRule.call(this);
		this.selectorText = "";
		this.style = new CSSOM.CSSStyleDeclaration;
		this.style.parentRule = this;
	};
	
	CSSOM.CSSStyleRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSStyleRule.prototype.constructor = CSSOM.CSSStyleRule;
	CSSOM.CSSStyleRule.prototype.type = 1;
	
	Object.defineProperty(CSSOM.CSSStyleRule.prototype, "cssText", {
		get: function() {
			var text;
			if (this.selectorText) {
				text = this.selectorText + " {" + this.style.cssText + "}";
			} else {
				text = "";
			}
			return text;
		},
		set: function(cssText) {
			var rule = CSSOM.CSSStyleRule.parse(cssText);
			this.style = rule.style;
			this.selectorText = rule.selectorText;
		}
	});
	
	
	/**
	 * NON-STANDARD
	 * lightweight version of parse.js.
	 * @param {string} ruleText
	 * @return CSSStyleRule
	 */
	CSSOM.CSSStyleRule.parse = function(ruleText) {
		var i = 0;
		var state = "selector";
		var index;
		var j = i;
		var buffer = "";
	
		var SIGNIFICANT_WHITESPACE = {
			"selector": true,
			"value": true
		};
	
		var styleRule = new CSSOM.CSSStyleRule;
		var selector, name, value, priority="";
	
		for (var character; character = ruleText.charAt(i); i++) {
	
			switch (character) {
	
			case " ":
			case "\t":
			case "\r":
			case "\n":
			case "\f":
				if (SIGNIFICANT_WHITESPACE[state]) {
					// Squash 2 or more white-spaces in the row into 1
					switch (ruleText.charAt(i - 1)) {
						case " ":
						case "\t":
						case "\r":
						case "\n":
						case "\f":
							break;
						default:
							buffer += " ";
							break;
					}
				}
				break;
	
			// String
			case '"':
				j = i + 1;
				index = ruleText.indexOf('"', j) + 1;
				if (!index) {
					throw '" is missing';
				}
				buffer += ruleText.slice(i, index);
				i = index - 1;
				break;
	
			case "'":
				j = i + 1;
				index = ruleText.indexOf("'", j) + 1;
				if (!index) {
					throw "' is missing";
				}
				buffer += ruleText.slice(i, index);
				i = index - 1;
				break;
	
			// Comment
			case "/":
				if (ruleText.charAt(i + 1) === "*") {
					i += 2;
					index = ruleText.indexOf("*/", i);
					if (index === -1) {
						throw new SyntaxError("Missing */");
					} else {
						i = index + 1;
					}
				} else {
					buffer += character;
				}
				break;
	
			case "{":
				if (state === "selector") {
					styleRule.selectorText = buffer.trim();
					buffer = "";
					state = "name";
				}
				break;
	
			case ":":
				if (state === "name") {
					name = buffer.trim();
					buffer = "";
					state = "value";
				} else {
					buffer += character;
				}
				break;
	
			case "!":
				if (state === "value" && ruleText.indexOf("!important", i) === i) {
					priority = "important";
					i += "important".length;
				} else {
					buffer += character;
				}
				break;
	
			case ";":
				if (state === "value") {
					styleRule.style.setProperty(name, buffer.trim(), priority);
					priority = "";
					buffer = "";
					state = "name";
				} else {
					buffer += character;
				}
				break;
	
			case "}":
				if (state === "value") {
					styleRule.style.setProperty(name, buffer.trim(), priority);
					priority = "";
					buffer = "";
				} else if (state === "name") {
					break;
				} else {
					buffer += character;
				}
				state = "selector";
				break;
	
			default:
				buffer += character;
				break;
	
			}
		}
	
		return styleRule;
	
	};
	
	
	//.CommonJS
	exports.CSSStyleRule = CSSOM.CSSStyleRule;
	///CommonJS


/***/ },
/* 984 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#the-medialist-interface
	 */
	CSSOM.MediaList = function MediaList(){
		this.length = 0;
	};
	
	CSSOM.MediaList.prototype = {
	
		constructor: CSSOM.MediaList,
	
		/**
		 * @return {string}
		 */
		get mediaText() {
			return Array.prototype.join.call(this, ", ");
		},
	
		/**
		 * @param {string} value
		 */
		set mediaText(value) {
			var values = value.split(",");
			var length = this.length = values.length;
			for (var i=0; i<length; i++) {
				this[i] = values[i].trim();
			}
		},
	
		/**
		 * @param {string} medium
		 */
		appendMedium: function(medium) {
			if (Array.prototype.indexOf.call(this, medium) === -1) {
				this[this.length] = medium;
				this.length++;
			}
		},
	
		/**
		 * @param {string} medium
		 */
		deleteMedium: function(medium) {
			var index = Array.prototype.indexOf.call(this, medium);
			if (index !== -1) {
				Array.prototype.splice.call(this, index, 1);
			}
		}
	
	};
	
	
	//.CommonJS
	exports.MediaList = CSSOM.MediaList;
	///CommonJS


/***/ },
/* 985 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSRule: __webpack_require__(982).CSSRule,
		MediaList: __webpack_require__(984).MediaList
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#cssmediarule
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSMediaRule
	 */
	CSSOM.CSSMediaRule = function CSSMediaRule() {
		CSSOM.CSSRule.call(this);
		this.media = new CSSOM.MediaList;
		this.cssRules = [];
	};
	
	CSSOM.CSSMediaRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSMediaRule.prototype.constructor = CSSOM.CSSMediaRule;
	CSSOM.CSSMediaRule.prototype.type = 4;
	//FIXME
	//CSSOM.CSSMediaRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSMediaRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;
	
	// http://opensource.apple.com/source/WebCore/WebCore-658.28/css/CSSMediaRule.cpp
	Object.defineProperty(CSSOM.CSSMediaRule.prototype, "cssText", {
	  get: function() {
	    var cssTexts = [];
	    for (var i=0, length=this.cssRules.length; i < length; i++) {
	      cssTexts.push(this.cssRules[i].cssText);
	    }
	    return "@media " + this.media.mediaText + " {" + cssTexts.join("") + "}";
	  }
	});
	
	
	//.CommonJS
	exports.CSSMediaRule = CSSOM.CSSMediaRule;
	///CommonJS


/***/ },
/* 986 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSRule: __webpack_require__(982).CSSRule,
		CSSStyleSheet: __webpack_require__(989).CSSStyleSheet,
		MediaList: __webpack_require__(984).MediaList
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#cssimportrule
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSImportRule
	 */
	CSSOM.CSSImportRule = function CSSImportRule() {
		CSSOM.CSSRule.call(this);
		this.href = "";
		this.media = new CSSOM.MediaList;
		this.styleSheet = new CSSOM.CSSStyleSheet;
	};
	
	CSSOM.CSSImportRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSImportRule.prototype.constructor = CSSOM.CSSImportRule;
	CSSOM.CSSImportRule.prototype.type = 3;
	
	Object.defineProperty(CSSOM.CSSImportRule.prototype, "cssText", {
	  get: function() {
	    var mediaText = this.media.mediaText;
	    return "@import url(" + this.href + ")" + (mediaText ? " " + mediaText : "") + ";";
	  },
	  set: function(cssText) {
	    var i = 0;
	
	    /**
	     * @import url(partial.css) screen, handheld;
	     *        ||               |
	     *        after-import     media
	     *         |
	     *         url
	     */
	    var state = '';
	
	    var buffer = '';
	    var index;
	    var mediaText = '';
	    for (var character; character = cssText.charAt(i); i++) {
	
	      switch (character) {
	        case ' ':
	        case '\t':
	        case '\r':
	        case '\n':
	        case '\f':
	          if (state === 'after-import') {
	            state = 'url';
	          } else {
	            buffer += character;
	          }
	          break;
	
	        case '@':
	          if (!state && cssText.indexOf('@import', i) === i) {
	            state = 'after-import';
	            i += 'import'.length;
	            buffer = '';
	          }
	          break;
	
	        case 'u':
	          if (state === 'url' && cssText.indexOf('url(', i) === i) {
	            index = cssText.indexOf(')', i + 1);
	            if (index === -1) {
	              throw i + ': ")" not found';
	            }
	            i += 'url('.length;
	            var url = cssText.slice(i, index);
	            if (url[0] === url[url.length - 1]) {
	              if (url[0] === '"' || url[0] === "'") {
	                url = url.slice(1, -1);
	              }
	            }
	            this.href = url;
	            i = index;
	            state = 'media';
	          }
	          break;
	
	        case '"':
	          if (state === 'url') {
	            index = cssText.indexOf('"', i + 1);
	            if (!index) {
	              throw i + ": '\"' not found";
	            }
	            this.href = cssText.slice(i + 1, index);
	            i = index;
	            state = 'media';
	          }
	          break;
	
	        case "'":
	          if (state === 'url') {
	            index = cssText.indexOf("'", i + 1);
	            if (!index) {
	              throw i + ': "\'" not found';
	            }
	            this.href = cssText.slice(i + 1, index);
	            i = index;
	            state = 'media';
	          }
	          break;
	
	        case ';':
	          if (state === 'media') {
	            if (buffer) {
	              this.media.mediaText = buffer.trim();
	            }
	          }
	          break;
	
	        default:
	          if (state === 'media') {
	            buffer += character;
	          }
	          break;
	      }
	    }
	  }
	});
	
	
	//.CommonJS
	exports.CSSImportRule = CSSOM.CSSImportRule;
	///CommonJS


/***/ },
/* 987 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSStyleDeclaration: __webpack_require__(981).CSSStyleDeclaration,
		CSSRule: __webpack_require__(982).CSSRule
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#css-font-face-rule
	 */
	CSSOM.CSSFontFaceRule = function CSSFontFaceRule() {
		CSSOM.CSSRule.call(this);
		this.style = new CSSOM.CSSStyleDeclaration;
		this.style.parentRule = this;
	};
	
	CSSOM.CSSFontFaceRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSFontFaceRule.prototype.constructor = CSSOM.CSSFontFaceRule;
	CSSOM.CSSFontFaceRule.prototype.type = 5;
	//FIXME
	//CSSOM.CSSFontFaceRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSFontFaceRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;
	
	// http://www.opensource.apple.com/source/WebCore/WebCore-955.66.1/css/WebKitCSSFontFaceRule.cpp
	Object.defineProperty(CSSOM.CSSFontFaceRule.prototype, "cssText", {
	  get: function() {
	    return "@font-face {" + this.style.cssText + "}";
	  }
	});
	
	
	//.CommonJS
	exports.CSSFontFaceRule = CSSOM.CSSFontFaceRule;
	///CommonJS


/***/ },
/* 988 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#the-stylesheet-interface
	 */
	CSSOM.StyleSheet = function StyleSheet() {
		this.parentStyleSheet = null;
	};
	
	
	//.CommonJS
	exports.StyleSheet = CSSOM.StyleSheet;
	///CommonJS


/***/ },
/* 989 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		StyleSheet: __webpack_require__(988).StyleSheet,
		CSSStyleRule: __webpack_require__(983).CSSStyleRule
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet
	 */
	CSSOM.CSSStyleSheet = function CSSStyleSheet() {
		CSSOM.StyleSheet.call(this);
		this.cssRules = [];
	};
	
	
	CSSOM.CSSStyleSheet.prototype = new CSSOM.StyleSheet;
	CSSOM.CSSStyleSheet.prototype.constructor = CSSOM.CSSStyleSheet;
	
	
	/**
	 * Used to insert a new rule into the style sheet. The new rule now becomes part of the cascade.
	 *
	 *   sheet = new Sheet("body {margin: 0}")
	 *   sheet.toString()
	 *   -> "body{margin:0;}"
	 *   sheet.insertRule("img {border: none}", 0)
	 *   -> 0
	 *   sheet.toString()
	 *   -> "img{border:none;}body{margin:0;}"
	 *
	 * @param {string} rule
	 * @param {number} index
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet-insertRule
	 * @return {number} The index within the style sheet's rule collection of the newly inserted rule.
	 */
	CSSOM.CSSStyleSheet.prototype.insertRule = function(rule, index) {
		if (index < 0 || index > this.cssRules.length) {
			throw new RangeError("INDEX_SIZE_ERR");
		}
		var cssRule = CSSOM.parse(rule).cssRules[0];
		cssRule.parentStyleSheet = this;
		this.cssRules.splice(index, 0, cssRule);
		return index;
	};
	
	
	/**
	 * Used to delete a rule from the style sheet.
	 *
	 *   sheet = new Sheet("img{border:none} body{margin:0}")
	 *   sheet.toString()
	 *   -> "img{border:none;}body{margin:0;}"
	 *   sheet.deleteRule(0)
	 *   sheet.toString()
	 *   -> "body{margin:0;}"
	 *
	 * @param {number} index within the style sheet's rule list of the rule to remove.
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet-deleteRule
	 */
	CSSOM.CSSStyleSheet.prototype.deleteRule = function(index) {
		if (index < 0 || index >= this.cssRules.length) {
			throw new RangeError("INDEX_SIZE_ERR");
		}
		this.cssRules.splice(index, 1);
	};
	
	
	/**
	 * NON-STANDARD
	 * @return {string} serialize stylesheet
	 */
	CSSOM.CSSStyleSheet.prototype.toString = function() {
		var result = "";
		var rules = this.cssRules;
		for (var i=0; i<rules.length; i++) {
			result += rules[i].cssText + "\n";
		}
		return result;
	};
	
	
	//.CommonJS
	exports.CSSStyleSheet = CSSOM.CSSStyleSheet;
	CSSOM.parse = __webpack_require__(996).parse; // Cannot be included sooner due to the mutual dependency between parse.js and CSSStyleSheet.js
	///CommonJS


/***/ },
/* 990 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSRule: __webpack_require__(982).CSSRule
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://www.w3.org/TR/css3-animations/#DOM-CSSKeyframesRule
	 */
	CSSOM.CSSKeyframesRule = function CSSKeyframesRule() {
		CSSOM.CSSRule.call(this);
		this.name = '';
		this.cssRules = [];
	};
	
	CSSOM.CSSKeyframesRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSKeyframesRule.prototype.constructor = CSSOM.CSSKeyframesRule;
	CSSOM.CSSKeyframesRule.prototype.type = 8;
	//FIXME
	//CSSOM.CSSKeyframesRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSKeyframesRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;
	
	// http://www.opensource.apple.com/source/WebCore/WebCore-955.66.1/css/WebKitCSSKeyframesRule.cpp
	Object.defineProperty(CSSOM.CSSKeyframesRule.prototype, "cssText", {
	  get: function() {
	    var cssTexts = [];
	    for (var i=0, length=this.cssRules.length; i < length; i++) {
	      cssTexts.push("  " + this.cssRules[i].cssText);
	    }
	    return "@" + (this._vendorPrefix || '') + "keyframes " + this.name + " { \n" + cssTexts.join("\n") + "\n}";
	  }
	});
	
	
	//.CommonJS
	exports.CSSKeyframesRule = CSSOM.CSSKeyframesRule;
	///CommonJS


/***/ },
/* 991 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSRule: __webpack_require__(982).CSSRule,
		CSSStyleDeclaration: __webpack_require__(981).CSSStyleDeclaration
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://www.w3.org/TR/css3-animations/#DOM-CSSKeyframeRule
	 */
	CSSOM.CSSKeyframeRule = function CSSKeyframeRule() {
		CSSOM.CSSRule.call(this);
		this.keyText = '';
		this.style = new CSSOM.CSSStyleDeclaration;
		this.style.parentRule = this;
	};
	
	CSSOM.CSSKeyframeRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSKeyframeRule.prototype.constructor = CSSOM.CSSKeyframeRule;
	CSSOM.CSSKeyframeRule.prototype.type = 9;
	//FIXME
	//CSSOM.CSSKeyframeRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSKeyframeRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;
	
	// http://www.opensource.apple.com/source/WebCore/WebCore-955.66.1/css/WebKitCSSKeyframeRule.cpp
	Object.defineProperty(CSSOM.CSSKeyframeRule.prototype, "cssText", {
	  get: function() {
	    return this.keyText + " {" + this.style.cssText + "} ";
	  }
	});
	
	
	//.CommonJS
	exports.CSSKeyframeRule = CSSOM.CSSKeyframeRule;
	///CommonJS


/***/ },
/* 992 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see https://developer.mozilla.org/en/CSS/@-moz-document
	 */
	CSSOM.MatcherList = function MatcherList(){
	    this.length = 0;
	};
	
	CSSOM.MatcherList.prototype = {
	
	    constructor: CSSOM.MatcherList,
	
	    /**
	     * @return {string}
	     */
	    get matcherText() {
	        return Array.prototype.join.call(this, ", ");
	    },
	
	    /**
	     * @param {string} value
	     */
	    set matcherText(value) {
	        // just a temporary solution, actually it may be wrong by just split the value with ',', because a url can include ','.
	        var values = value.split(",");
	        var length = this.length = values.length;
	        for (var i=0; i<length; i++) {
	            this[i] = values[i].trim();
	        }
	    },
	
	    /**
	     * @param {string} matcher
	     */
	    appendMatcher: function(matcher) {
	        if (Array.prototype.indexOf.call(this, matcher) === -1) {
	            this[this.length] = matcher;
	            this.length++;
	        }
	    },
	
	    /**
	     * @param {string} matcher
	     */
	    deleteMatcher: function(matcher) {
	        var index = Array.prototype.indexOf.call(this, matcher);
	        if (index !== -1) {
	            Array.prototype.splice.call(this, index, 1);
	        }
	    }
	
	};
	
	
	//.CommonJS
	exports.MatcherList = CSSOM.MatcherList;
	///CommonJS


/***/ },
/* 993 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
	    CSSRule: __webpack_require__(982).CSSRule,
	    MatcherList: __webpack_require__(992).MatcherList
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see https://developer.mozilla.org/en/CSS/@-moz-document
	 */
	CSSOM.CSSDocumentRule = function CSSDocumentRule() {
	    CSSOM.CSSRule.call(this);
	    this.matcher = new CSSOM.MatcherList;
	    this.cssRules = [];
	};
	
	CSSOM.CSSDocumentRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSDocumentRule.prototype.constructor = CSSOM.CSSDocumentRule;
	CSSOM.CSSDocumentRule.prototype.type = 10;
	//FIXME
	//CSSOM.CSSDocumentRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSDocumentRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;
	
	Object.defineProperty(CSSOM.CSSDocumentRule.prototype, "cssText", {
	  get: function() {
	    var cssTexts = [];
	    for (var i=0, length=this.cssRules.length; i < length; i++) {
	        cssTexts.push(this.cssRules[i].cssText);
	    }
	    return "@-moz-document " + this.matcher.matcherText + " {" + cssTexts.join("") + "}";
	  }
	});
	
	
	//.CommonJS
	exports.CSSDocumentRule = CSSOM.CSSDocumentRule;
	///CommonJS


/***/ },
/* 994 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSValue
	 *
	 * TODO: add if needed
	 */
	CSSOM.CSSValue = function CSSValue() {
	};
	
	CSSOM.CSSValue.prototype = {
		constructor: CSSOM.CSSValue,
	
		// @see: http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSValue
		set cssText(text) {
			var name = this._getConstructorName();
	
			throw new Exception('DOMException: property "cssText" of "' + name + '" is readonly!');
		},
	
		get cssText() {
			var name = this._getConstructorName();
	
			throw new Exception('getter "cssText" of "' + name + '" is not implemented!');
		},
	
		_getConstructorName: function() {
			var s = this.constructor.toString(),
					c = s.match(/function\s([^\(]+)/),
					name = c[1];
	
			return name;
		}
	};
	
	
	//.CommonJS
	exports.CSSValue = CSSOM.CSSValue;
	///CommonJS


/***/ },
/* 995 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSValue: __webpack_require__(994).CSSValue
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://msdn.microsoft.com/en-us/library/ms537634(v=vs.85).aspx
	 *
	 */
	CSSOM.CSSValueExpression = function CSSValueExpression(token, idx) {
		this._token = token;
		this._idx = idx;
	};
	
	CSSOM.CSSValueExpression.prototype = new CSSOM.CSSValue;
	CSSOM.CSSValueExpression.prototype.constructor = CSSOM.CSSValueExpression;
	
	/**
	 * parse css expression() value
	 *
	 * @return {Object}
	 *				 - error:
	 *				 or
	 *				 - idx:
	 *				 - expression:
	 *
	 * Example:
	 *
	 * .selector {
	 *		zoom: expression(documentElement.clientWidth > 1000 ? '1000px' : 'auto');
	 * }
	 */
	CSSOM.CSSValueExpression.prototype.parse = function() {
		var token = this._token,
				idx = this._idx;
	
		var character = '',
				expression = '',
				error = '',
				info,
				paren = [];
	
	
		for (; ; ++idx) {
			character = token.charAt(idx);
	
			// end of token
			if (character == '') {
				error = 'css expression error: unfinished expression!';
				break;
			}
	
			switch(character) {
				case '(':
					paren.push(character);
					expression += character;
					break;
	
				case ')':
					paren.pop(character);
					expression += character;
					break;
	
				case '/':
					if (info = this._parseJSComment(token, idx)) { // comment?
						if (info.error) {
							error = 'css expression error: unfinished comment in expression!';
						} else {
							idx = info.idx;
							// ignore the comment
						}
					} else if (info = this._parseJSRexExp(token, idx)) { // regexp
						idx = info.idx;
						expression += info.text;
					} else { // other
						expression += character;
					}
					break;
	
				case "'":
				case '"':
					info = this._parseJSString(token, idx, character);
					if (info) { // string
						idx = info.idx;
						expression += info.text;
					} else {
						expression += character;
					}
					break;
	
				default:
					expression += character;
					break;
			}
	
			if (error) {
				break;
			}
	
			// end of expression
			if (paren.length == 0) {
				break;
			}
		}
	
		var ret;
		if (error) {
			ret = {
				error: error
			}
		} else {
			ret = {
				idx: idx,
				expression: expression
			}
		}
	
		return ret;
	};
	
	
	/**
	 *
	 * @return {Object|false}
	 *          - idx:
	 *          - text:
	 *          or
	 *          - error:
	 *          or
	 *          false
	 *
	 */
	CSSOM.CSSValueExpression.prototype._parseJSComment = function(token, idx) {
		var nextChar = token.charAt(idx + 1),
				text;
	
		if (nextChar == '/' || nextChar == '*') {
			var startIdx = idx,
					endIdx,
					commentEndChar;
	
			if (nextChar == '/') { // line comment
				commentEndChar = '\n';
			} else if (nextChar == '*') { // block comment
				commentEndChar = '*/';
			}
	
			endIdx = token.indexOf(commentEndChar, startIdx + 1 + 1);
			if (endIdx !== -1) {
				endIdx = endIdx + commentEndChar.length - 1;
				text = token.substring(idx, endIdx + 1);
				return {
					idx: endIdx,
					text: text
				}
			} else {
				error = 'css expression error: unfinished comment in expression!';
				return {
					error: error
				}
			}
		} else {
			return false;
		}
	};
	
	
	/**
	 *
	 * @return {Object|false}
	 *					- idx:
	 *					- text:
	 *					or 
	 *					false
	 *
	 */
	CSSOM.CSSValueExpression.prototype._parseJSString = function(token, idx, sep) {
		var endIdx = this._findMatchedIdx(token, idx, sep),
				text;
	
		if (endIdx === -1) {
			return false;
		} else {
			text = token.substring(idx, endIdx + sep.length);
	
			return {
				idx: endIdx,
				text: text
			}
		}
	};
	
	
	/**
	 * parse regexp in css expression
	 *
	 * @return {Object|false}
	 *				 - idx:
	 *				 - regExp:
	 *				 or 
	 *				 false
	 */
	
	/*
	
	all legal RegExp
	 
	/a/
	(/a/)
	[/a/]
	[12, /a/]
	
	!/a/
	
	+/a/
	-/a/
	* /a/
	/ /a/
	%/a/
	
	===/a/
	!==/a/
	==/a/
	!=/a/
	>/a/
	>=/a/
	</a/
	<=/a/
	
	&/a/
	|/a/
	^/a/
	~/a/
	<</a/
	>>/a/
	>>>/a/
	
	&&/a/
	||/a/
	?/a/
	=/a/
	,/a/
	
			delete /a/
					in /a/
	instanceof /a/
				 new /a/
			typeof /a/
				void /a/
	
	*/
	CSSOM.CSSValueExpression.prototype._parseJSRexExp = function(token, idx) {
		var before = token.substring(0, idx).replace(/\s+$/, ""),
				legalRegx = [
					/^$/,
					/\($/,
					/\[$/,
					/\!$/,
					/\+$/,
					/\-$/,
					/\*$/,
					/\/\s+/,
					/\%$/,
					/\=$/,
					/\>$/,
					/\<$/,
					/\&$/,
					/\|$/,
					/\^$/,
					/\~$/,
					/\?$/,
					/\,$/,
					/delete$/,
					/in$/,
					/instanceof$/,
					/new$/,
					/typeof$/,
					/void$/,
				];
	
		var isLegal = legalRegx.some(function(reg) {
			return reg.test(before);
		});
	
		if (!isLegal) {
			return false;
		} else {
			var sep = '/';
	
			// same logic as string
			return this._parseJSString(token, idx, sep);
		}
	};
	
	
	/**
	 *
	 * find next sep(same line) index in `token`
	 *
	 * @return {Number}
	 *
	 */
	CSSOM.CSSValueExpression.prototype._findMatchedIdx = function(token, idx, sep) {
		var startIdx = idx,
				endIdx;
	
		var NOT_FOUND = -1;
	
		while(true) {
			endIdx = token.indexOf(sep, startIdx + 1);
	
			if (endIdx === -1) { // not found
				endIdx = NOT_FOUND;
				break;
			} else {
				var text = token.substring(idx + 1, endIdx),
						matched = text.match(/\\+$/);
				if (!matched || matched[0] % 2 == 0) { // not escaped
					break;
				} else {
					startIdx = endIdx;
				}
			}
		}
	
		// boundary must be in the same line(js sting or regexp)
		var nextNewLineIdx = token.indexOf('\n', idx + 1);
		if (nextNewLineIdx < endIdx) {
			endIdx = NOT_FOUND;
		}
	
	
		return endIdx;
	}
	
	
	
	
	//.CommonJS
	exports.CSSValueExpression = CSSOM.CSSValueExpression;
	///CommonJS


/***/ },
/* 996 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @param {string} token
	 */
	CSSOM.parse = function parse(token) {
	
		var i = 0;
	
		/**
			"before-selector" or
			"selector" or
			"atRule" or
			"atBlock" or
			"before-name" or
			"name" or
			"before-value" or
			"value"
		*/
		var state = "before-selector";
	
		var index;
		var buffer = "";
	
		var SIGNIFICANT_WHITESPACE = {
			"selector": true,
			"value": true,
			"atRule": true,
			"importRule-begin": true,
			"importRule": true,
			"atBlock": true,
			'documentRule-begin': true
		};
	
		var styleSheet = new CSSOM.CSSStyleSheet;
	
		// @type CSSStyleSheet|CSSMediaRule|CSSFontFaceRule|CSSKeyframesRule|CSSDocumentRule
		var currentScope = styleSheet;
	
		// @type CSSMediaRule|CSSKeyframesRule|CSSDocumentRule
		var parentRule;
	
		var selector, name, value, priority="", styleRule, mediaRule, importRule, fontFaceRule, keyframesRule, keyframeRule, documentRule;
	
		var atKeyframesRegExp = /@(-(?:\w+-)+)?keyframes/g;
	
		var parseError = function(message) {
			var lines = token.substring(0, i).split('\n');
			var lineCount = lines.length;
			var charCount = lines.pop().length + 1;
			var error = new Error(message + ' (line ' + lineCount + ', char ' + charCount + ')');
			error.line = lineCount;
			error.char = charCount;
			error.styleSheet = styleSheet;
			throw error;
		};
	
		for (var character; character = token.charAt(i); i++) {
	
			switch (character) {
	
			case " ":
			case "\t":
			case "\r":
			case "\n":
			case "\f":
				if (SIGNIFICANT_WHITESPACE[state]) {
					buffer += character;
				}
				break;
	
			// String
			case '"':
				index = i + 1;
				do {
					index = token.indexOf('"', index) + 1;
					if (!index) {
						parseError('Unmatched "');
					}
				} while (token[index - 2] === '\\')
				buffer += token.slice(i, index);
				i = index - 1;
				switch (state) {
					case 'before-value':
						state = 'value';
						break;
					case 'importRule-begin':
						state = 'importRule';
						break;
				}
				break;
	
			case "'":
				index = i + 1;
				do {
					index = token.indexOf("'", index) + 1;
					if (!index) {
						parseError("Unmatched '");
					}
				} while (token[index - 2] === '\\')
				buffer += token.slice(i, index);
				i = index - 1;
				switch (state) {
					case 'before-value':
						state = 'value';
						break;
					case 'importRule-begin':
						state = 'importRule';
						break;
				}
				break;
	
			// Comment
			case "/":
				if (token.charAt(i + 1) === "*") {
					i += 2;
					index = token.indexOf("*/", i);
					if (index === -1) {
						parseError("Missing */");
					} else {
						i = index + 1;
					}
				} else {
					buffer += character;
				}
				if (state === "importRule-begin") {
					buffer += " ";
					state = "importRule";
				}
				break;
	
			// At-rule
			case "@":
				if (token.indexOf("@-moz-document", i) === i) {
					state = "documentRule-begin";
					documentRule = new CSSOM.CSSDocumentRule;
					documentRule.__starts = i;
					i += "-moz-document".length;
					buffer = "";
					break;
				} else if (token.indexOf("@media", i) === i) {
					state = "atBlock";
					mediaRule = new CSSOM.CSSMediaRule;
					mediaRule.__starts = i;
					i += "media".length;
					buffer = "";
					break;
				} else if (token.indexOf("@import", i) === i) {
					state = "importRule-begin";
					i += "import".length;
					buffer += "@import";
					break;
				} else if (token.indexOf("@font-face", i) === i) {
					state = "fontFaceRule-begin";
					i += "font-face".length;
					fontFaceRule = new CSSOM.CSSFontFaceRule;
					fontFaceRule.__starts = i;
					buffer = "";
					break;
				} else {
					atKeyframesRegExp.lastIndex = i;
					var matchKeyframes = atKeyframesRegExp.exec(token);
					if (matchKeyframes && matchKeyframes.index === i) {
						state = "keyframesRule-begin";
						keyframesRule = new CSSOM.CSSKeyframesRule;
						keyframesRule.__starts = i;
						keyframesRule._vendorPrefix = matchKeyframes[1]; // Will come out as undefined if no prefix was found
						i += matchKeyframes[0].length - 1;
						buffer = "";
						break;
					} else if (state == "selector") {
						state = "atRule";
					}
				}
				buffer += character;
				break;
	
			case "{":
				if (state === "selector" || state === "atRule") {
					styleRule.selectorText = buffer.trim();
					styleRule.style.__starts = i;
					buffer = "";
					state = "before-name";
				} else if (state === "atBlock") {
					mediaRule.media.mediaText = buffer.trim();
					currentScope = parentRule = mediaRule;
					mediaRule.parentStyleSheet = styleSheet;
					buffer = "";
					state = "before-selector";
				} else if (state === "fontFaceRule-begin") {
					if (parentRule) {
						fontFaceRule.parentRule = parentRule;
					}
					fontFaceRule.parentStyleSheet = styleSheet;
					styleRule = fontFaceRule;
					buffer = "";
					state = "before-name";
				} else if (state === "keyframesRule-begin") {
					keyframesRule.name = buffer.trim();
					if (parentRule) {
						keyframesRule.parentRule = parentRule;
					}
					keyframesRule.parentStyleSheet = styleSheet;
					currentScope = parentRule = keyframesRule;
					buffer = "";
					state = "keyframeRule-begin";
				} else if (state === "keyframeRule-begin") {
					styleRule = new CSSOM.CSSKeyframeRule;
					styleRule.keyText = buffer.trim();
					styleRule.__starts = i;
					buffer = "";
					state = "before-name";
				} else if (state === "documentRule-begin") {
					// FIXME: what if this '{' is in the url text of the match function?
					documentRule.matcher.matcherText = buffer.trim();
					if (parentRule) {
						documentRule.parentRule = parentRule;
					}
					currentScope = parentRule = documentRule;
					documentRule.parentStyleSheet = styleSheet;
					buffer = "";
					state = "before-selector";
				}
				break;
	
			case ":":
				if (state === "name") {
					name = buffer.trim();
					buffer = "";
					state = "before-value";
				} else {
					buffer += character;
				}
				break;
	
			case '(':
				if (state === 'value') {
					// ie css expression mode
					if (buffer.trim() == 'expression') {
						var info = (new CSSOM.CSSValueExpression(token, i)).parse();
	
						if (info.error) {
							parseError(info.error);
						} else {
							buffer += info.expression;
							i = info.idx;
						}
					} else {
						index = token.indexOf(')', i + 1);
						if (index === -1) {
							parseError('Unmatched "("');
						}
						buffer += token.slice(i, index + 1);
						i = index;
					}
				} else {
					buffer += character;
				}
	
				break;
	
			case "!":
				if (state === "value" && token.indexOf("!important", i) === i) {
					priority = "important";
					i += "important".length;
				} else {
					buffer += character;
				}
				break;
	
			case ";":
				switch (state) {
					case "value":
						styleRule.style.setProperty(name, buffer.trim(), priority);
						priority = "";
						buffer = "";
						state = "before-name";
						break;
					case "atRule":
						buffer = "";
						state = "before-selector";
						break;
					case "importRule":
						importRule = new CSSOM.CSSImportRule;
						importRule.parentStyleSheet = importRule.styleSheet.parentStyleSheet = styleSheet;
						importRule.cssText = buffer + character;
						styleSheet.cssRules.push(importRule);
						buffer = "";
						state = "before-selector";
						break;
					default:
						buffer += character;
						break;
				}
				break;
	
			case "}":
				switch (state) {
					case "value":
						styleRule.style.setProperty(name, buffer.trim(), priority);
						priority = "";
					case "before-name":
					case "name":
						styleRule.__ends = i + 1;
						if (parentRule) {
							styleRule.parentRule = parentRule;
						}
						styleRule.parentStyleSheet = styleSheet;
						currentScope.cssRules.push(styleRule);
						buffer = "";
						if (currentScope.constructor === CSSOM.CSSKeyframesRule) {
							state = "keyframeRule-begin";
						} else {
							state = "before-selector";
						}
						break;
					case "keyframeRule-begin":
					case "before-selector":
					case "selector":
						// End of media/document rule.
						if (!parentRule) {
							parseError("Unexpected }");
						}
						currentScope.__ends = i + 1;
						// Nesting rules aren't supported yet
						styleSheet.cssRules.push(currentScope);
						currentScope = styleSheet;
						parentRule = null;
						buffer = "";
						state = "before-selector";
						break;
				}
				break;
	
			default:
				switch (state) {
					case "before-selector":
						state = "selector";
						styleRule = new CSSOM.CSSStyleRule;
						styleRule.__starts = i;
						break;
					case "before-name":
						state = "name";
						break;
					case "before-value":
						state = "value";
						break;
					case "importRule-begin":
						state = "importRule";
						break;
				}
				buffer += character;
				break;
			}
		}
	
		return styleSheet;
	};
	
	
	//.CommonJS
	exports.parse = CSSOM.parse;
	// The following modules cannot be included sooner due to the mutual dependency with parse.js
	CSSOM.CSSStyleSheet = __webpack_require__(989).CSSStyleSheet;
	CSSOM.CSSStyleRule = __webpack_require__(983).CSSStyleRule;
	CSSOM.CSSImportRule = __webpack_require__(986).CSSImportRule;
	CSSOM.CSSMediaRule = __webpack_require__(985).CSSMediaRule;
	CSSOM.CSSFontFaceRule = __webpack_require__(987).CSSFontFaceRule;
	CSSOM.CSSStyleDeclaration = __webpack_require__(981).CSSStyleDeclaration;
	CSSOM.CSSKeyframeRule = __webpack_require__(991).CSSKeyframeRule;
	CSSOM.CSSKeyframesRule = __webpack_require__(990).CSSKeyframesRule;
	CSSOM.CSSValueExpression = __webpack_require__(995).CSSValueExpression;
	CSSOM.CSSDocumentRule = __webpack_require__(993).CSSDocumentRule;
	///CommonJS


/***/ },
/* 997 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSStyleSheet: __webpack_require__(989).CSSStyleSheet,
		CSSStyleRule: __webpack_require__(983).CSSStyleRule,
		CSSMediaRule: __webpack_require__(985).CSSMediaRule,
		CSSStyleDeclaration: __webpack_require__(981).CSSStyleDeclaration,
		CSSKeyframeRule: __webpack_require__(991).CSSKeyframeRule,
		CSSKeyframesRule: __webpack_require__(990).CSSKeyframesRule
	};
	///CommonJS
	
	
	/**
	 * Produces a deep copy of stylesheet â the instance variables of stylesheet are copied recursively.
	 * @param {CSSStyleSheet|CSSOM.CSSStyleSheet} stylesheet
	 * @nosideeffects
	 * @return {CSSOM.CSSStyleSheet}
	 */
	CSSOM.clone = function clone(stylesheet) {
	
		var cloned = new CSSOM.CSSStyleSheet;
	
		var rules = stylesheet.cssRules;
		if (!rules) {
			return cloned;
		}
	
		var RULE_TYPES = {
			1: CSSOM.CSSStyleRule,
			4: CSSOM.CSSMediaRule,
			//3: CSSOM.CSSImportRule,
			//5: CSSOM.CSSFontFaceRule,
			//6: CSSOM.CSSPageRule,
			8: CSSOM.CSSKeyframesRule,
			9: CSSOM.CSSKeyframeRule
		};
	
		for (var i=0, rulesLength=rules.length; i < rulesLength; i++) {
			var rule = rules[i];
			var ruleClone = cloned.cssRules[i] = new RULE_TYPES[rule.type];
	
			var style = rule.style;
			if (style) {
				var styleClone = ruleClone.style = new CSSOM.CSSStyleDeclaration;
				for (var j=0, styleLength=style.length; j < styleLength; j++) {
					var name = styleClone[j] = style[j];
					styleClone[name] = style[name];
					styleClone._importants[name] = style.getPropertyPriority(name);
				}
				styleClone.length = style.length;
			}
	
			if (rule.hasOwnProperty('keyText')) {
				ruleClone.keyText = rule.keyText;
			}
	
			if (rule.hasOwnProperty('selectorText')) {
				ruleClone.selectorText = rule.selectorText;
			}
	
			if (rule.hasOwnProperty('mediaText')) {
				ruleClone.mediaText = rule.mediaText;
			}
	
			if (rule.hasOwnProperty('cssRules')) {
				ruleClone.cssRules = clone(rule).cssRules;
			}
		}
	
		return cloned;
	
	};
	
	//.CommonJS
	exports.clone = CSSOM.clone;
	///CommonJS


/***/ },
/* 998 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 999 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
		"name": "bindings",
		"description": "Helper module for loading your native module's .node file",
		"keywords": [
			"native",
			"addon",
			"bindings",
			"gyp",
			"waf",
			"c",
			"c++"
		],
		"version": "1.2.0",
		"author": {
			"name": "Nathan Rajlich",
			"email": "nathan@tootallnate.net",
			"url": "http://tootallnate.net"
		},
		"repository": {
			"type": "git",
			"url": "git://github.com/TooTallNate/node-bindings.git"
		},
		"main": "./bindings.js",
		"readme": "node-bindings\n=============\n### Helper module for loading your native module's .node file\n\nThis is a helper module for authors of Node.js native addon modules.\nIt is basically the \"swiss army knife\" of `require()`ing your native module's\n`.node` file.\n\nThroughout the course of Node's native addon history, addons have ended up being\ncompiled in a variety of different places, depending on which build tool and which\nversion of node was used. To make matters worse, now the _gyp_ build tool can\nproduce either a _Release_ or _Debug_ build, each being built into different\nlocations.\n\nThis module checks _all_ the possible locations that a native addon would be built\nat, and returns the first one that loads successfully.\n\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install bindings\n```\n\nOr add it to the `\"dependencies\"` section of your _package.json_ file.\n\n\nExample\n-------\n\n`require()`ing the proper bindings file for the current node version, platform\nand architecture is as simple as:\n\n``` js\nvar bindings = require('bindings')('binding.node')\n\n// Use your bindings defined in your C files\nbindings.your_c_function()\n```\n\n\nNice Error Output\n-----------------\n\nWhen the `.node` file could not be loaded, `node-bindings` throws an Error with\na nice error message telling you exactly what was tried. You can also check the\n`err.tries` Array property.\n\n```\nError: Could not load the bindings file. Tried:\n â /Users/nrajlich/ref/build/binding.node\n â /Users/nrajlich/ref/build/Debug/binding.node\n â /Users/nrajlich/ref/build/Release/binding.node\n â /Users/nrajlich/ref/out/Debug/binding.node\n â /Users/nrajlich/ref/Debug/binding.node\n â /Users/nrajlich/ref/out/Release/binding.node\n â /Users/nrajlich/ref/Release/binding.node\n â /Users/nrajlich/ref/build/default/binding.node\n â /Users/nrajlich/ref/compiled/0.8.2/darwin/x64/binding.node\n    at bindings (/Users/nrajlich/ref/node_modules/bindings/bindings.js:84:13)\n    at Object.<anonymous> (/Users/nrajlich/ref/lib/ref.js:5:47)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    ...\n```\n\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2012 Nathan Rajlich &lt;nathan@tootallnate.net&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
		"readmeFilename": "README.md",
		"bugs": {
			"url": "https://github.com/TooTallNate/node-bindings/issues"
		},
		"homepage": "https://github.com/TooTallNate/node-bindings",
		"_id": "bindings@1.2.0",
		"_shasum": "c224fc5b349a84043779f97a6271d9d70da7636f",
		"_from": "bindings@*",
		"_resolved": "https://registry.npmjs.org/bindings/-/bindings-1.2.0.tgz"
	}

/***/ },
/* 1000 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
		"name": "bindings",
		"description": "Helper module for loading your native module's .node file",
		"keywords": [
			"native",
			"addon",
			"bindings",
			"gyp",
			"waf",
			"c",
			"c++"
		],
		"version": "1.2.0",
		"author": {
			"name": "Nathan Rajlich",
			"email": "nathan@tootallnate.net",
			"url": "http://tootallnate.net"
		},
		"repository": {
			"type": "git",
			"url": "git://github.com/TooTallNate/node-bindings.git"
		},
		"main": "./bindings.js",
		"readme": "node-bindings\n=============\n### Helper module for loading your native module's .node file\n\nThis is a helper module for authors of Node.js native addon modules.\nIt is basically the \"swiss army knife\" of `require()`ing your native module's\n`.node` file.\n\nThroughout the course of Node's native addon history, addons have ended up being\ncompiled in a variety of different places, depending on which build tool and which\nversion of node was used. To make matters worse, now the _gyp_ build tool can\nproduce either a _Release_ or _Debug_ build, each being built into different\nlocations.\n\nThis module checks _all_ the possible locations that a native addon would be built\nat, and returns the first one that loads successfully.\n\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install bindings\n```\n\nOr add it to the `\"dependencies\"` section of your _package.json_ file.\n\n\nExample\n-------\n\n`require()`ing the proper bindings file for the current node version, platform\nand architecture is as simple as:\n\n``` js\nvar bindings = require('bindings')('binding.node')\n\n// Use your bindings defined in your C files\nbindings.your_c_function()\n```\n\n\nNice Error Output\n-----------------\n\nWhen the `.node` file could not be loaded, `node-bindings` throws an Error with\na nice error message telling you exactly what was tried. You can also check the\n`err.tries` Array property.\n\n```\nError: Could not load the bindings file. Tried:\n â /Users/nrajlich/ref/build/binding.node\n â /Users/nrajlich/ref/build/Debug/binding.node\n â /Users/nrajlich/ref/build/Release/binding.node\n â /Users/nrajlich/ref/out/Debug/binding.node\n â /Users/nrajlich/ref/Debug/binding.node\n â /Users/nrajlich/ref/out/Release/binding.node\n â /Users/nrajlich/ref/Release/binding.node\n â /Users/nrajlich/ref/build/default/binding.node\n â /Users/nrajlich/ref/compiled/0.8.2/darwin/x64/binding.node\n    at bindings (/Users/nrajlich/ref/node_modules/bindings/bindings.js:84:13)\n    at Object.<anonymous> (/Users/nrajlich/ref/lib/ref.js:5:47)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    ...\n```\n\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2012 Nathan Rajlich &lt;nathan@tootallnate.net&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
		"readmeFilename": "README.md",
		"bugs": {
			"url": "https://github.com/TooTallNate/node-bindings/issues"
		},
		"homepage": "https://github.com/TooTallNate/node-bindings",
		"_id": "bindings@1.2.0",
		"_shasum": "c224fc5b349a84043779f97a6271d9d70da7636f",
		"_from": "bindings@*",
		"_resolved": "https://registry.npmjs.org/bindings/-/bindings-1.2.0.tgz"
	}

/***/ },
/* 1001 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	module.exports = Readable;
	
	/*<replacement>*/
	var isArray = __webpack_require__(1026);
	/*</replacement>*/
	
	
	/*<replacement>*/
	var Buffer = __webpack_require__(48).Buffer;
	/*</replacement>*/
	
	Readable.ReadableState = ReadableState;
	
	var EE = __webpack_require__(103).EventEmitter;
	
	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/
	
	var Stream = __webpack_require__(145);
	
	/*<replacement>*/
	var util = __webpack_require__(1030);
	util.inherits = __webpack_require__(1029);
	/*</replacement>*/
	
	var StringDecoder;
	
	util.inherits(Readable, Stream);
	
	function ReadableState(options, stream) {
	  options = options || {};
	
	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;
	
	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;
	
	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = false;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;
	
	  // In streams that never have any data, and do push(null) right away,
	  // the consumer can miss the 'end' event if they do some I/O before
	  // consuming the stream.  So, we don't emit('end') until some reading
	  // happens.
	  this.calledRead = false;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, becuase any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	
	
	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;
	
	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;
	
	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;
	
	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = __webpack_require__(1025).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	
	function Readable(options) {
	  if (!(this instanceof Readable))
	    return new Readable(options);
	
	  this._readableState = new ReadableState(options, this);
	
	  // legacy
	  this.readable = true;
	
	  Stream.call(this);
	}
	
	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;
	
	  if (typeof chunk === 'string' && !state.objectMode) {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }
	
	  return readableAddChunk(this, state, chunk, encoding, false);
	};
	
	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};
	
	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null || chunk === undefined) {
	    state.reading = false;
	    if (!state.ended)
	      onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);
	
	      // update the buffer info.
	      state.length += state.objectMode ? 1 : chunk.length;
	      if (addToFront) {
	        state.buffer.unshift(chunk);
	      } else {
	        state.reading = false;
	        state.buffer.push(chunk);
	      }
	
	      if (state.needReadable)
	        emitReadable(stream);
	
	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }
	
	  return needMoreData(state);
	}
	
	
	
	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}
	
	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = __webpack_require__(1025).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	};
	
	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}
	
	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;
	
	  if (state.objectMode)
	    return n === 0 ? 0 : 1;
	
	  if (isNaN(n) || n === null) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }
	
	  if (n <= 0)
	    return 0;
	
	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);
	
	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else
	      return state.length;
	  }
	
	  return n;
	}
	
	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  var state = this._readableState;
	  state.calledRead = true;
	  var nOrig = n;
	
	  if (typeof n !== 'number' || n > 0)
	    state.emittedReadable = false;
	
	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    emitReadable(this);
	    return null;
	  }
	
	  n = howMuchToRead(n, state);
	
	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0)
	      endReadable(this);
	    return null;
	  }
	
	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.
	
	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	
	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length - n <= state.highWaterMark)
	    doRead = true;
	
	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading)
	    doRead = false;
	
	  if (doRead) {
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }
	
	  // If _read called its callback synchronously, then `reading`
	  // will be false, and we need to re-evaluate how much data we
	  // can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);
	
	  var ret;
	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;
	
	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  }
	
	  state.length -= n;
	
	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;
	
	  // If we happened to read() exactly the remaining amount in the
	  // buffer, and the EOF has been seen at this point, then make sure
	  // that we emit 'end' on the very next tick.
	  if (state.ended && !state.endEmitted && state.length === 0)
	    endReadable(this);
	
	  return ret;
	};
	
	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer.isBuffer(chunk) &&
	      'string' !== typeof chunk &&
	      chunk !== null &&
	      chunk !== undefined &&
	      !state.objectMode &&
	      !er) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}
	
	
	function onEofChunk(stream, state) {
	  if (state.decoder && !state.ended) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;
	
	  // if we've ended and we have some data left, then emit
	  // 'readable' now to make sure it gets picked up.
	  if (state.length > 0)
	    emitReadable(stream);
	  else
	    endReadable(stream);
	}
	
	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (state.emittedReadable)
	    return;
	
	  state.emittedReadable = true;
	  if (state.sync)
	    process.nextTick(function() {
	      emitReadable_(stream);
	    });
	  else
	    emitReadable_(stream);
	}
	
	function emitReadable_(stream) {
	  stream.emit('readable');
	}
	
	
	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(function() {
	      maybeReadMore_(stream, state);
	    });
	  }
	}
	
	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}
	
	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};
	
	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;
	
	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	
	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;
	
	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    process.nextTick(endFn);
	  else
	    src.once('end', endFn);
	
	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    if (readable !== src) return;
	    cleanup();
	  }
	
	  function onend() {
	    dest.end();
	  }
	
	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);
	
	  function cleanup() {
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	
	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (!dest._writableState || dest._writableState.needDrain)
	      ondrain();
	  }
	
	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];
	
	
	
	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);
	
	  function unpipe() {
	    src.unpipe(dest);
	  }
	
	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);
	
	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    // the handler that waits for readable events after all
	    // the data gets sucked out in flow.
	    // This would be easier to follow with a .once() handler
	    // in flow(), but that is too slow.
	    this.on('readable', pipeOnReadable);
	
	    state.flowing = true;
	    process.nextTick(function() {
	      flow(src);
	    });
	  }
	
	  return dest;
	};
	
	function pipeOnDrain(src) {
	  return function() {
	    var dest = this;
	    var state = src._readableState;
	    state.awaitDrain--;
	    if (state.awaitDrain === 0)
	      flow(src);
	  };
	}
	
	function flow(src) {
	  var state = src._readableState;
	  var chunk;
	  state.awaitDrain = 0;
	
	  function write(dest, i, list) {
	    var written = dest.write(chunk);
	    if (false === written) {
	      state.awaitDrain++;
	    }
	  }
	
	  while (state.pipesCount && null !== (chunk = src.read())) {
	
	    if (state.pipesCount === 1)
	      write(state.pipes, 0, null);
	    else
	      forEach(state.pipes, write);
	
	    src.emit('data', chunk);
	
	    // if anyone needs a drain, then we have to wait for that.
	    if (state.awaitDrain > 0)
	      return;
	  }
	
	  // if every destination was unpiped, either before entering this
	  // function, or in the while loop, then stop flowing.
	  //
	  // NB: This is a pretty rare edge case.
	  if (state.pipesCount === 0) {
	    state.flowing = false;
	
	    // if there were data event listeners added, then switch to old mode.
	    if (EE.listenerCount(src, 'data') > 0)
	      emitDataEvents(src);
	    return;
	  }
	
	  // at this point, no one needed a drain, so we just ran out of data
	  // on the next readable event, start it over again.
	  state.ranOut = true;
	}
	
	function pipeOnReadable() {
	  if (this._readableState.ranOut) {
	    this._readableState.ranOut = false;
	    flow(this);
	  }
	}
	
	
	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;
	
	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;
	
	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;
	
	    if (!dest)
	      dest = state.pipes;
	
	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    this.removeListener('readable', pipeOnReadable);
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }
	
	  // slow case. multiple pipe destinations.
	
	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    this.removeListener('readable', pipeOnReadable);
	    state.flowing = false;
	
	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }
	
	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;
	
	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];
	
	  dest.emit('unpipe', this);
	
	  return this;
	};
	
	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);
	
	  if (ev === 'data' && !this._readableState.flowing)
	    emitDataEvents(this);
	
	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        this.read(0);
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }
	
	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;
	
	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  emitDataEvents(this);
	  this.read(0);
	  this.emit('resume');
	};
	
	Readable.prototype.pause = function() {
	  emitDataEvents(this, true);
	  this.emit('pause');
	};
	
	function emitDataEvents(stream, startPaused) {
	  var state = stream._readableState;
	
	  if (state.flowing) {
	    // https://github.com/isaacs/readable-stream/issues/16
	    throw new Error('Cannot switch to old mode now.');
	  }
	
	  var paused = startPaused || false;
	  var readable = false;
	
	  // convert to an old-style stream.
	  stream.readable = true;
	  stream.pipe = Stream.prototype.pipe;
	  stream.on = stream.addListener = Stream.prototype.on;
	
	  stream.on('readable', function() {
	    readable = true;
	
	    var c;
	    while (!paused && (null !== (c = stream.read())))
	      stream.emit('data', c);
	
	    if (c === null) {
	      readable = false;
	      stream._readableState.needReadable = true;
	    }
	  });
	
	  stream.pause = function() {
	    paused = true;
	    this.emit('pause');
	  };
	
	  stream.resume = function() {
	    paused = false;
	    if (readable)
	      process.nextTick(function() {
	        stream.emit('readable');
	      });
	    else
	      this.read(0);
	    this.emit('resume');
	  };
	
	  // now make it start, just in case it hadn't already.
	  stream.emit('readable');
	}
	
	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;
	
	  var self = this;
	  stream.on('end', function() {
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }
	
	    self.push(null);
	  });
	
	  stream.on('data', function(chunk) {
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);
	    if (!chunk || !state.objectMode && !chunk.length)
	      return;
	
	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });
	
	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (typeof stream[i] === 'function' &&
	        typeof this[i] === 'undefined') {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }}(i);
	    }
	  }
	
	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });
	
	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };
	
	  return self;
	};
	
	
	
	// exposed for testing purposes only.
	Readable._fromList = fromList;
	
	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;
	
	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;
	
	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);
	
	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);
	
	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);
	
	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();
	
	        c += cpy;
	      }
	    }
	  }
	
	  return ret;
	}
	
	function endReadable(stream) {
	  var state = stream._readableState;
	
	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');
	
	  if (!state.endEmitted && state.calledRead) {
	    state.ended = true;
	    process.nextTick(function() {
	      // Check that we didn't get one last unshift.
	      if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	      }
	    });
	  }
	}
	
	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}
	
	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 1002 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.
	
	module.exports = Writable;
	
	/*<replacement>*/
	var Buffer = __webpack_require__(48).Buffer;
	/*</replacement>*/
	
	Writable.WritableState = WritableState;
	
	
	/*<replacement>*/
	var util = __webpack_require__(1030);
	util.inherits = __webpack_require__(1029);
	/*</replacement>*/
	
	
	var Stream = __webpack_require__(145);
	
	util.inherits(Writable, Stream);
	
	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	}
	
	function WritableState(options, stream) {
	  options = options || {};
	
	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;
	
	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;
	
	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;
	
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;
	
	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;
	
	  // a flag to see when we're in the middle of a write.
	  this.writing = false;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, becuase any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;
	
	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };
	
	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;
	
	  // the amount that is being written when _write is called.
	  this.writelen = 0;
	
	  this.buffer = [];
	
	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}
	
	function Writable(options) {
	  var Duplex = __webpack_require__(1003);
	
	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);
	
	  this._writableState = new WritableState(options, this);
	
	  // legacy.
	  this.writable = true;
	
	  Stream.call(this);
	}
	
	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};
	
	
	function writeAfterEnd(stream, state, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  process.nextTick(function() {
	    cb(er);
	  });
	}
	
	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  if (!Buffer.isBuffer(chunk) &&
	      'string' !== typeof chunk &&
	      chunk !== null &&
	      chunk !== undefined &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    process.nextTick(function() {
	      cb(er);
	    });
	    valid = false;
	  }
	  return valid;
	}
	
	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	
	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (Buffer.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;
	
	  if (typeof cb !== 'function')
	    cb = function() {};
	
	  if (state.ended)
	    writeAfterEnd(this, state, cb);
	  else if (validChunk(this, state, chunk, cb))
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	
	  return ret;
	};
	
	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      typeof chunk === 'string') {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}
	
	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	  if (Buffer.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;
	
	  state.length += len;
	
	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;
	
	  if (state.writing)
	    state.buffer.push(new WriteReq(chunk, encoding, cb));
	  else
	    doWrite(stream, state, len, chunk, encoding, cb);
	
	  return ret;
	}
	
	function doWrite(stream, state, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}
	
	function onwriteError(stream, state, sync, er, cb) {
	  if (sync)
	    process.nextTick(function() {
	      cb(er);
	    });
	  else
	    cb(er);
	
	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}
	
	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}
	
	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;
	
	  onwriteStateUpdate(state);
	
	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(stream, state);
	
	    if (!finished && !state.bufferProcessing && state.buffer.length)
	      clearBuffer(stream, state);
	
	    if (sync) {
	      process.nextTick(function() {
	        afterWrite(stream, state, finished, cb);
	      });
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}
	
	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  cb();
	  if (finished)
	    finishMaybe(stream, state);
	}
	
	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}
	
	
	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	
	  for (var c = 0; c < state.buffer.length; c++) {
	    var entry = state.buffer[c];
	    var chunk = entry.chunk;
	    var encoding = entry.encoding;
	    var cb = entry.callback;
	    var len = state.objectMode ? 1 : chunk.length;
	
	    doWrite(stream, state, len, chunk, encoding, cb);
	
	    // if we didn't call the onwrite immediately, then
	    // it means that we need to wait until it does.
	    // also, that means that the chunk and cb are currently
	    // being processed, so move the buffer counter past them.
	    if (state.writing) {
	      c++;
	      break;
	    }
	  }
	
	  state.bufferProcessing = false;
	  if (c < state.buffer.length)
	    state.buffer = state.buffer.slice(c);
	  else
	    state.buffer.length = 0;
	}
	
	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));
	};
	
	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;
	
	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (typeof chunk !== 'undefined' && chunk !== null)
	    this.write(chunk, encoding);
	
	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};
	
	
	function needFinish(stream, state) {
	  return (state.ending &&
	          state.length === 0 &&
	          !state.finished &&
	          !state.writing);
	}
	
	function finishMaybe(stream, state) {
	  var need = needFinish(stream, state);
	  if (need) {
	    state.finished = true;
	    stream.emit('finish');
	  }
	  return need;
	}
	
	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      process.nextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 1003 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.
	
	module.exports = Duplex;
	
	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/
	
	
	/*<replacement>*/
	var util = __webpack_require__(1030);
	util.inherits = __webpack_require__(1029);
	/*</replacement>*/
	
	var Readable = __webpack_require__(1001);
	var Writable = __webpack_require__(1002);
	
	util.inherits(Duplex, Readable);
	
	forEach(objectKeys(Writable.prototype), function(method) {
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	});
	
	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);
	
	  Readable.call(this, options);
	  Writable.call(this, options);
	
	  if (options && options.readable === false)
	    this.readable = false;
	
	  if (options && options.writable === false)
	    this.writable = false;
	
	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;
	
	  this.once('end', onend);
	}
	
	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;
	
	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(this.end.bind(this));
	}
	
	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 1004 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	
	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.
	
	module.exports = Transform;
	
	var Duplex = __webpack_require__(1003);
	
	/*<replacement>*/
	var util = __webpack_require__(1030);
	util.inherits = __webpack_require__(1029);
	/*</replacement>*/
	
	util.inherits(Transform, Duplex);
	
	
	function TransformState(options, stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };
	
	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}
	
	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;
	
	  var cb = ts.writecb;
	
	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));
	
	  ts.writechunk = null;
	  ts.writecb = null;
	
	  if (data !== null && data !== undefined)
	    stream.push(data);
	
	  if (cb)
	    cb(er);
	
	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}
	
	
	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);
	
	  Duplex.call(this, options);
	
	  var ts = this._transformState = new TransformState(options, this);
	
	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;
	
	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;
	
	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;
	
	  this.once('finish', function() {
	    if ('function' === typeof this._flush)
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}
	
	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};
	
	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};
	
	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};
	
	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;
	
	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};
	
	
	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);
	
	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var rs = stream._readableState;
	  var ts = stream._transformState;
	
	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');
	
	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');
	
	  return stream.push(null);
	}


/***/ },
/* 1005 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.
	
	module.exports = PassThrough;
	
	var Transform = __webpack_require__(1004);
	
	/*<replacement>*/
	var util = __webpack_require__(1030);
	util.inherits = __webpack_require__(1029);
	/*</replacement>*/
	
	util.inherits(PassThrough, Transform);
	
	function PassThrough(options) {
	  if (!(this instanceof PassThrough))
	    return new PassThrough(options);
	
	  Transform.call(this, options);
	}
	
	PassThrough.prototype._transform = function(chunk, encoding, cb) {
	  cb(null, chunk);
	};


/***/ },
/* 1006 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration
	 */
	CSSOM.CSSStyleDeclaration = function CSSStyleDeclaration(){
		this.length = 0;
		this.parentRule = null;
	
		// NON-STANDARD
		this._importants = {};
	};
	
	
	CSSOM.CSSStyleDeclaration.prototype = {
	
		constructor: CSSOM.CSSStyleDeclaration,
	
		/**
		 *
		 * @param {string} name
		 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-getPropertyValue
		 * @return {string} the value of the property if it has been explicitly set for this declaration block.
		 * Returns the empty string if the property has not been set.
		 */
		getPropertyValue: function(name) {
			return this[name] || "";
		},
	
		/**
		 *
		 * @param {string} name
		 * @param {string} value
		 * @param {string} [priority=null] "important" or null
		 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-setProperty
		 */
		setProperty: function(name, value, priority) {
			if (this[name]) {
				// Property already exist. Overwrite it.
				var index = Array.prototype.indexOf.call(this, name);
				if (index < 0) {
					this[this.length] = name;
					this.length++;
				}
			} else {
				// New property.
				this[this.length] = name;
				this.length++;
			}
			this[name] = value;
			this._importants[name] = priority;
		},
	
		/**
		 *
		 * @param {string} name
		 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-removeProperty
		 * @return {string} the value of the property if it has been explicitly set for this declaration block.
		 * Returns the empty string if the property has not been set or the property name does not correspond to a known CSS property.
		 */
		removeProperty: function(name) {
			if (!(name in this)) {
				return "";
			}
			var index = Array.prototype.indexOf.call(this, name);
			if (index < 0) {
				return "";
			}
			var prevValue = this[name];
			this[name] = "";
	
			// That's what WebKit and Opera do
			Array.prototype.splice.call(this, index, 1);
	
			// That's what Firefox does
			//this[index] = ""
	
			return prevValue;
		},
	
		getPropertyCSSValue: function() {
			//FIXME
		},
	
		/**
		 *
		 * @param {String} name
		 */
		getPropertyPriority: function(name) {
			return this._importants[name] || "";
		},
	
	
		/**
		 *   element.style.overflow = "auto"
		 *   element.style.getPropertyShorthand("overflow-x")
		 *   -> "overflow"
		 */
		getPropertyShorthand: function() {
			//FIXME
		},
	
		isPropertyImplicit: function() {
			//FIXME
		},
	
		// Doesn't work in IE < 9
		get cssText(){
			var properties = [];
			for (var i=0, length=this.length; i < length; ++i) {
				var name = this[i];
				var value = this.getPropertyValue(name);
				var priority = this.getPropertyPriority(name);
				if (priority) {
					priority = " !" + priority;
				}
				properties[i] = name + ": " + value + priority + ";";
			}
			return properties.join(" ");
		},
	
		set cssText(cssText){
			var i, name;
			for (i = this.length; i--;) {
				name = this[i];
				this[name] = "";
			}
			Array.prototype.splice.call(this, 0, this.length);
			this._importants = {};
	
			var dummyRule = CSSOM.parse('#bogus{' + cssText + '}').cssRules[0].style;
			var length = dummyRule.length;
			for (i = 0; i < length; ++i) {
				name = dummyRule[i];
				this.setProperty(dummyRule[i], dummyRule.getPropertyValue(name), dummyRule.getPropertyPriority(name));
			}
		}
	};
	
	
	//.CommonJS
	exports.CSSStyleDeclaration = CSSOM.CSSStyleDeclaration;
	CSSOM.parse = __webpack_require__(1021).parse; // Cannot be included sooner due to the mutual dependency between parse.js and CSSStyleDeclaration.js
	///CommonJS


/***/ },
/* 1007 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#the-cssrule-interface
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSRule
	 */
	CSSOM.CSSRule = function CSSRule() {
		this.parentRule = null;
		this.parentStyleSheet = null;
	};
	
	CSSOM.CSSRule.STYLE_RULE = 1;
	CSSOM.CSSRule.IMPORT_RULE = 3;
	CSSOM.CSSRule.MEDIA_RULE = 4;
	CSSOM.CSSRule.FONT_FACE_RULE = 5;
	CSSOM.CSSRule.PAGE_RULE = 6;
	CSSOM.CSSRule.WEBKIT_KEYFRAMES_RULE = 8;
	CSSOM.CSSRule.WEBKIT_KEYFRAME_RULE = 9;
	
	// Obsolete in CSSOM http://dev.w3.org/csswg/cssom/
	//CSSOM.CSSRule.UNKNOWN_RULE = 0;
	//CSSOM.CSSRule.CHARSET_RULE = 2;
	
	// Never implemented
	//CSSOM.CSSRule.VARIABLES_RULE = 7;
	
	CSSOM.CSSRule.prototype = {
		constructor: CSSOM.CSSRule
		//FIXME
	};
	
	
	//.CommonJS
	exports.CSSRule = CSSOM.CSSRule;
	///CommonJS


/***/ },
/* 1008 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSStyleDeclaration: __webpack_require__(1006).CSSStyleDeclaration,
		CSSRule: __webpack_require__(1007).CSSRule
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#cssstylerule
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleRule
	 */
	CSSOM.CSSStyleRule = function CSSStyleRule() {
		CSSOM.CSSRule.call(this);
		this.selectorText = "";
		this.style = new CSSOM.CSSStyleDeclaration;
		this.style.parentRule = this;
	};
	
	CSSOM.CSSStyleRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSStyleRule.prototype.constructor = CSSOM.CSSStyleRule;
	CSSOM.CSSStyleRule.prototype.type = 1;
	
	Object.defineProperty(CSSOM.CSSStyleRule.prototype, "cssText", {
		get: function() {
			var text;
			if (this.selectorText) {
				text = this.selectorText + " {" + this.style.cssText + "}";
			} else {
				text = "";
			}
			return text;
		},
		set: function(cssText) {
			var rule = CSSOM.CSSStyleRule.parse(cssText);
			this.style = rule.style;
			this.selectorText = rule.selectorText;
		}
	});
	
	
	/**
	 * NON-STANDARD
	 * lightweight version of parse.js.
	 * @param {string} ruleText
	 * @return CSSStyleRule
	 */
	CSSOM.CSSStyleRule.parse = function(ruleText) {
		var i = 0;
		var state = "selector";
		var index;
		var j = i;
		var buffer = "";
	
		var SIGNIFICANT_WHITESPACE = {
			"selector": true,
			"value": true
		};
	
		var styleRule = new CSSOM.CSSStyleRule;
		var selector, name, value, priority="";
	
		for (var character; character = ruleText.charAt(i); i++) {
	
			switch (character) {
	
			case " ":
			case "\t":
			case "\r":
			case "\n":
			case "\f":
				if (SIGNIFICANT_WHITESPACE[state]) {
					// Squash 2 or more white-spaces in the row into 1
					switch (ruleText.charAt(i - 1)) {
						case " ":
						case "\t":
						case "\r":
						case "\n":
						case "\f":
							break;
						default:
							buffer += " ";
							break;
					}
				}
				break;
	
			// String
			case '"':
				j = i + 1;
				index = ruleText.indexOf('"', j) + 1;
				if (!index) {
					throw '" is missing';
				}
				buffer += ruleText.slice(i, index);
				i = index - 1;
				break;
	
			case "'":
				j = i + 1;
				index = ruleText.indexOf("'", j) + 1;
				if (!index) {
					throw "' is missing";
				}
				buffer += ruleText.slice(i, index);
				i = index - 1;
				break;
	
			// Comment
			case "/":
				if (ruleText.charAt(i + 1) === "*") {
					i += 2;
					index = ruleText.indexOf("*/", i);
					if (index === -1) {
						throw new SyntaxError("Missing */");
					} else {
						i = index + 1;
					}
				} else {
					buffer += character;
				}
				break;
	
			case "{":
				if (state === "selector") {
					styleRule.selectorText = buffer.trim();
					buffer = "";
					state = "name";
				}
				break;
	
			case ":":
				if (state === "name") {
					name = buffer.trim();
					buffer = "";
					state = "value";
				} else {
					buffer += character;
				}
				break;
	
			case "!":
				if (state === "value" && ruleText.indexOf("!important", i) === i) {
					priority = "important";
					i += "important".length;
				} else {
					buffer += character;
				}
				break;
	
			case ";":
				if (state === "value") {
					styleRule.style.setProperty(name, buffer.trim(), priority);
					priority = "";
					buffer = "";
					state = "name";
				} else {
					buffer += character;
				}
				break;
	
			case "}":
				if (state === "value") {
					styleRule.style.setProperty(name, buffer.trim(), priority);
					priority = "";
					buffer = "";
				} else if (state === "name") {
					break;
				} else {
					buffer += character;
				}
				state = "selector";
				break;
	
			default:
				buffer += character;
				break;
	
			}
		}
	
		return styleRule;
	
	};
	
	
	//.CommonJS
	exports.CSSStyleRule = CSSOM.CSSStyleRule;
	///CommonJS


/***/ },
/* 1009 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#the-medialist-interface
	 */
	CSSOM.MediaList = function MediaList(){
		this.length = 0;
	};
	
	CSSOM.MediaList.prototype = {
	
		constructor: CSSOM.MediaList,
	
		/**
		 * @return {string}
		 */
		get mediaText() {
			return Array.prototype.join.call(this, ", ");
		},
	
		/**
		 * @param {string} value
		 */
		set mediaText(value) {
			var values = value.split(",");
			var length = this.length = values.length;
			for (var i=0; i<length; i++) {
				this[i] = values[i].trim();
			}
		},
	
		/**
		 * @param {string} medium
		 */
		appendMedium: function(medium) {
			if (Array.prototype.indexOf.call(this, medium) === -1) {
				this[this.length] = medium;
				this.length++;
			}
		},
	
		/**
		 * @param {string} medium
		 */
		deleteMedium: function(medium) {
			var index = Array.prototype.indexOf.call(this, medium);
			if (index !== -1) {
				Array.prototype.splice.call(this, index, 1);
			}
		}
	
	};
	
	
	//.CommonJS
	exports.MediaList = CSSOM.MediaList;
	///CommonJS


/***/ },
/* 1010 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSRule: __webpack_require__(1007).CSSRule,
		MediaList: __webpack_require__(1009).MediaList
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#cssmediarule
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSMediaRule
	 */
	CSSOM.CSSMediaRule = function CSSMediaRule() {
		CSSOM.CSSRule.call(this);
		this.media = new CSSOM.MediaList;
		this.cssRules = [];
	};
	
	CSSOM.CSSMediaRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSMediaRule.prototype.constructor = CSSOM.CSSMediaRule;
	CSSOM.CSSMediaRule.prototype.type = 4;
	//FIXME
	//CSSOM.CSSMediaRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSMediaRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;
	
	// http://opensource.apple.com/source/WebCore/WebCore-658.28/css/CSSMediaRule.cpp
	Object.defineProperty(CSSOM.CSSMediaRule.prototype, "cssText", {
	  get: function() {
	    var cssTexts = [];
	    for (var i=0, length=this.cssRules.length; i < length; i++) {
	      cssTexts.push(this.cssRules[i].cssText);
	    }
	    return "@media " + this.media.mediaText + " {" + cssTexts.join("") + "}";
	  }
	});
	
	
	//.CommonJS
	exports.CSSMediaRule = CSSOM.CSSMediaRule;
	///CommonJS


/***/ },
/* 1011 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSRule: __webpack_require__(1007).CSSRule,
		CSSStyleSheet: __webpack_require__(1014).CSSStyleSheet,
		MediaList: __webpack_require__(1009).MediaList
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#cssimportrule
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSImportRule
	 */
	CSSOM.CSSImportRule = function CSSImportRule() {
		CSSOM.CSSRule.call(this);
		this.href = "";
		this.media = new CSSOM.MediaList;
		this.styleSheet = new CSSOM.CSSStyleSheet;
	};
	
	CSSOM.CSSImportRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSImportRule.prototype.constructor = CSSOM.CSSImportRule;
	CSSOM.CSSImportRule.prototype.type = 3;
	
	Object.defineProperty(CSSOM.CSSImportRule.prototype, "cssText", {
	  get: function() {
	    var mediaText = this.media.mediaText;
	    return "@import url(" + this.href + ")" + (mediaText ? " " + mediaText : "") + ";";
	  },
	  set: function(cssText) {
	    var i = 0;
	
	    /**
	     * @import url(partial.css) screen, handheld;
	     *        ||               |
	     *        after-import     media
	     *         |
	     *         url
	     */
	    var state = '';
	
	    var buffer = '';
	    var index;
	    var mediaText = '';
	    for (var character; character = cssText.charAt(i); i++) {
	
	      switch (character) {
	        case ' ':
	        case '\t':
	        case '\r':
	        case '\n':
	        case '\f':
	          if (state === 'after-import') {
	            state = 'url';
	          } else {
	            buffer += character;
	          }
	          break;
	
	        case '@':
	          if (!state && cssText.indexOf('@import', i) === i) {
	            state = 'after-import';
	            i += 'import'.length;
	            buffer = '';
	          }
	          break;
	
	        case 'u':
	          if (state === 'url' && cssText.indexOf('url(', i) === i) {
	            index = cssText.indexOf(')', i + 1);
	            if (index === -1) {
	              throw i + ': ")" not found';
	            }
	            i += 'url('.length;
	            var url = cssText.slice(i, index);
	            if (url[0] === url[url.length - 1]) {
	              if (url[0] === '"' || url[0] === "'") {
	                url = url.slice(1, -1);
	              }
	            }
	            this.href = url;
	            i = index;
	            state = 'media';
	          }
	          break;
	
	        case '"':
	          if (state === 'url') {
	            index = cssText.indexOf('"', i + 1);
	            if (!index) {
	              throw i + ": '\"' not found";
	            }
	            this.href = cssText.slice(i + 1, index);
	            i = index;
	            state = 'media';
	          }
	          break;
	
	        case "'":
	          if (state === 'url') {
	            index = cssText.indexOf("'", i + 1);
	            if (!index) {
	              throw i + ': "\'" not found';
	            }
	            this.href = cssText.slice(i + 1, index);
	            i = index;
	            state = 'media';
	          }
	          break;
	
	        case ';':
	          if (state === 'media') {
	            if (buffer) {
	              this.media.mediaText = buffer.trim();
	            }
	          }
	          break;
	
	        default:
	          if (state === 'media') {
	            buffer += character;
	          }
	          break;
	      }
	    }
	  }
	});
	
	
	//.CommonJS
	exports.CSSImportRule = CSSOM.CSSImportRule;
	///CommonJS


/***/ },
/* 1012 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSStyleDeclaration: __webpack_require__(1006).CSSStyleDeclaration,
		CSSRule: __webpack_require__(1007).CSSRule
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#css-font-face-rule
	 */
	CSSOM.CSSFontFaceRule = function CSSFontFaceRule() {
		CSSOM.CSSRule.call(this);
		this.style = new CSSOM.CSSStyleDeclaration;
		this.style.parentRule = this;
	};
	
	CSSOM.CSSFontFaceRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSFontFaceRule.prototype.constructor = CSSOM.CSSFontFaceRule;
	CSSOM.CSSFontFaceRule.prototype.type = 5;
	//FIXME
	//CSSOM.CSSFontFaceRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSFontFaceRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;
	
	// http://www.opensource.apple.com/source/WebCore/WebCore-955.66.1/css/WebKitCSSFontFaceRule.cpp
	Object.defineProperty(CSSOM.CSSFontFaceRule.prototype, "cssText", {
	  get: function() {
	    return "@font-face {" + this.style.cssText + "}";
	  }
	});
	
	
	//.CommonJS
	exports.CSSFontFaceRule = CSSOM.CSSFontFaceRule;
	///CommonJS


/***/ },
/* 1013 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#the-stylesheet-interface
	 */
	CSSOM.StyleSheet = function StyleSheet() {
		this.parentStyleSheet = null;
	};
	
	
	//.CommonJS
	exports.StyleSheet = CSSOM.StyleSheet;
	///CommonJS


/***/ },
/* 1014 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		StyleSheet: __webpack_require__(1013).StyleSheet,
		CSSStyleRule: __webpack_require__(1008).CSSStyleRule
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet
	 */
	CSSOM.CSSStyleSheet = function CSSStyleSheet() {
		CSSOM.StyleSheet.call(this);
		this.cssRules = [];
	};
	
	
	CSSOM.CSSStyleSheet.prototype = new CSSOM.StyleSheet;
	CSSOM.CSSStyleSheet.prototype.constructor = CSSOM.CSSStyleSheet;
	
	
	/**
	 * Used to insert a new rule into the style sheet. The new rule now becomes part of the cascade.
	 *
	 *   sheet = new Sheet("body {margin: 0}")
	 *   sheet.toString()
	 *   -> "body{margin:0;}"
	 *   sheet.insertRule("img {border: none}", 0)
	 *   -> 0
	 *   sheet.toString()
	 *   -> "img{border:none;}body{margin:0;}"
	 *
	 * @param {string} rule
	 * @param {number} index
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet-insertRule
	 * @return {number} The index within the style sheet's rule collection of the newly inserted rule.
	 */
	CSSOM.CSSStyleSheet.prototype.insertRule = function(rule, index) {
		if (index < 0 || index > this.cssRules.length) {
			throw new RangeError("INDEX_SIZE_ERR");
		}
		var cssRule = CSSOM.parse(rule).cssRules[0];
		cssRule.parentStyleSheet = this;
		this.cssRules.splice(index, 0, cssRule);
		return index;
	};
	
	
	/**
	 * Used to delete a rule from the style sheet.
	 *
	 *   sheet = new Sheet("img{border:none} body{margin:0}")
	 *   sheet.toString()
	 *   -> "img{border:none;}body{margin:0;}"
	 *   sheet.deleteRule(0)
	 *   sheet.toString()
	 *   -> "body{margin:0;}"
	 *
	 * @param {number} index within the style sheet's rule list of the rule to remove.
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet-deleteRule
	 */
	CSSOM.CSSStyleSheet.prototype.deleteRule = function(index) {
		if (index < 0 || index >= this.cssRules.length) {
			throw new RangeError("INDEX_SIZE_ERR");
		}
		this.cssRules.splice(index, 1);
	};
	
	
	/**
	 * NON-STANDARD
	 * @return {string} serialize stylesheet
	 */
	CSSOM.CSSStyleSheet.prototype.toString = function() {
		var result = "";
		var rules = this.cssRules;
		for (var i=0; i<rules.length; i++) {
			result += rules[i].cssText + "\n";
		}
		return result;
	};
	
	
	//.CommonJS
	exports.CSSStyleSheet = CSSOM.CSSStyleSheet;
	CSSOM.parse = __webpack_require__(1021).parse; // Cannot be included sooner due to the mutual dependency between parse.js and CSSStyleSheet.js
	///CommonJS


/***/ },
/* 1015 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSRule: __webpack_require__(1007).CSSRule
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://www.w3.org/TR/css3-animations/#DOM-CSSKeyframesRule
	 */
	CSSOM.CSSKeyframesRule = function CSSKeyframesRule() {
		CSSOM.CSSRule.call(this);
		this.name = '';
		this.cssRules = [];
	};
	
	CSSOM.CSSKeyframesRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSKeyframesRule.prototype.constructor = CSSOM.CSSKeyframesRule;
	CSSOM.CSSKeyframesRule.prototype.type = 8;
	//FIXME
	//CSSOM.CSSKeyframesRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSKeyframesRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;
	
	// http://www.opensource.apple.com/source/WebCore/WebCore-955.66.1/css/WebKitCSSKeyframesRule.cpp
	Object.defineProperty(CSSOM.CSSKeyframesRule.prototype, "cssText", {
	  get: function() {
	    var cssTexts = [];
	    for (var i=0, length=this.cssRules.length; i < length; i++) {
	      cssTexts.push("  " + this.cssRules[i].cssText);
	    }
	    return "@" + (this._vendorPrefix || '') + "keyframes " + this.name + " { \n" + cssTexts.join("\n") + "\n}";
	  }
	});
	
	
	//.CommonJS
	exports.CSSKeyframesRule = CSSOM.CSSKeyframesRule;
	///CommonJS


/***/ },
/* 1016 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSRule: __webpack_require__(1007).CSSRule,
		CSSStyleDeclaration: __webpack_require__(1006).CSSStyleDeclaration
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://www.w3.org/TR/css3-animations/#DOM-CSSKeyframeRule
	 */
	CSSOM.CSSKeyframeRule = function CSSKeyframeRule() {
		CSSOM.CSSRule.call(this);
		this.keyText = '';
		this.style = new CSSOM.CSSStyleDeclaration;
		this.style.parentRule = this;
	};
	
	CSSOM.CSSKeyframeRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSKeyframeRule.prototype.constructor = CSSOM.CSSKeyframeRule;
	CSSOM.CSSKeyframeRule.prototype.type = 9;
	//FIXME
	//CSSOM.CSSKeyframeRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSKeyframeRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;
	
	// http://www.opensource.apple.com/source/WebCore/WebCore-955.66.1/css/WebKitCSSKeyframeRule.cpp
	Object.defineProperty(CSSOM.CSSKeyframeRule.prototype, "cssText", {
	  get: function() {
	    return this.keyText + " {" + this.style.cssText + "} ";
	  }
	});
	
	
	//.CommonJS
	exports.CSSKeyframeRule = CSSOM.CSSKeyframeRule;
	///CommonJS


/***/ },
/* 1017 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see https://developer.mozilla.org/en/CSS/@-moz-document
	 */
	CSSOM.MatcherList = function MatcherList(){
	    this.length = 0;
	};
	
	CSSOM.MatcherList.prototype = {
	
	    constructor: CSSOM.MatcherList,
	
	    /**
	     * @return {string}
	     */
	    get matcherText() {
	        return Array.prototype.join.call(this, ", ");
	    },
	
	    /**
	     * @param {string} value
	     */
	    set matcherText(value) {
	        // just a temporary solution, actually it may be wrong by just split the value with ',', because a url can include ','.
	        var values = value.split(",");
	        var length = this.length = values.length;
	        for (var i=0; i<length; i++) {
	            this[i] = values[i].trim();
	        }
	    },
	
	    /**
	     * @param {string} matcher
	     */
	    appendMatcher: function(matcher) {
	        if (Array.prototype.indexOf.call(this, matcher) === -1) {
	            this[this.length] = matcher;
	            this.length++;
	        }
	    },
	
	    /**
	     * @param {string} matcher
	     */
	    deleteMatcher: function(matcher) {
	        var index = Array.prototype.indexOf.call(this, matcher);
	        if (index !== -1) {
	            Array.prototype.splice.call(this, index, 1);
	        }
	    }
	
	};
	
	
	//.CommonJS
	exports.MatcherList = CSSOM.MatcherList;
	///CommonJS


/***/ },
/* 1018 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
	    CSSRule: __webpack_require__(1007).CSSRule,
	    MatcherList: __webpack_require__(1017).MatcherList
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see https://developer.mozilla.org/en/CSS/@-moz-document
	 */
	CSSOM.CSSDocumentRule = function CSSDocumentRule() {
	    CSSOM.CSSRule.call(this);
	    this.matcher = new CSSOM.MatcherList;
	    this.cssRules = [];
	};
	
	CSSOM.CSSDocumentRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSDocumentRule.prototype.constructor = CSSOM.CSSDocumentRule;
	CSSOM.CSSDocumentRule.prototype.type = 10;
	//FIXME
	//CSSOM.CSSDocumentRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSDocumentRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;
	
	Object.defineProperty(CSSOM.CSSDocumentRule.prototype, "cssText", {
	  get: function() {
	    var cssTexts = [];
	    for (var i=0, length=this.cssRules.length; i < length; i++) {
	        cssTexts.push(this.cssRules[i].cssText);
	    }
	    return "@-moz-document " + this.matcher.matcherText + " {" + cssTexts.join("") + "}";
	  }
	});
	
	
	//.CommonJS
	exports.CSSDocumentRule = CSSOM.CSSDocumentRule;
	///CommonJS


/***/ },
/* 1019 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSValue
	 *
	 * TODO: add if needed
	 */
	CSSOM.CSSValue = function CSSValue() {
	};
	
	CSSOM.CSSValue.prototype = {
		constructor: CSSOM.CSSValue,
	
		// @see: http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSValue
		set cssText(text) {
			var name = this._getConstructorName();
	
			throw new Exception('DOMException: property "cssText" of "' + name + '" is readonly!');
		},
	
		get cssText() {
			var name = this._getConstructorName();
	
			throw new Exception('getter "cssText" of "' + name + '" is not implemented!');
		},
	
		_getConstructorName: function() {
			var s = this.constructor.toString(),
					c = s.match(/function\s([^\(]+)/),
					name = c[1];
	
			return name;
		}
	};
	
	
	//.CommonJS
	exports.CSSValue = CSSOM.CSSValue;
	///CommonJS


/***/ },
/* 1020 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSValue: __webpack_require__(1019).CSSValue
	};
	///CommonJS
	
	
	/**
	 * @constructor
	 * @see http://msdn.microsoft.com/en-us/library/ms537634(v=vs.85).aspx
	 *
	 */
	CSSOM.CSSValueExpression = function CSSValueExpression(token, idx) {
		this._token = token;
		this._idx = idx;
	};
	
	CSSOM.CSSValueExpression.prototype = new CSSOM.CSSValue;
	CSSOM.CSSValueExpression.prototype.constructor = CSSOM.CSSValueExpression;
	
	/**
	 * parse css expression() value
	 *
	 * @return {Object}
	 *				 - error:
	 *				 or
	 *				 - idx:
	 *				 - expression:
	 *
	 * Example:
	 *
	 * .selector {
	 *		zoom: expression(documentElement.clientWidth > 1000 ? '1000px' : 'auto');
	 * }
	 */
	CSSOM.CSSValueExpression.prototype.parse = function() {
		var token = this._token,
				idx = this._idx;
	
		var character = '',
				expression = '',
				error = '',
				info,
				paren = [];
	
	
		for (; ; ++idx) {
			character = token.charAt(idx);
	
			// end of token
			if (character == '') {
				error = 'css expression error: unfinished expression!';
				break;
			}
	
			switch(character) {
				case '(':
					paren.push(character);
					expression += character;
					break;
	
				case ')':
					paren.pop(character);
					expression += character;
					break;
	
				case '/':
					if (info = this._parseJSComment(token, idx)) { // comment?
						if (info.error) {
							error = 'css expression error: unfinished comment in expression!';
						} else {
							idx = info.idx;
							// ignore the comment
						}
					} else if (info = this._parseJSRexExp(token, idx)) { // regexp
						idx = info.idx;
						expression += info.text;
					} else { // other
						expression += character;
					}
					break;
	
				case "'":
				case '"':
					info = this._parseJSString(token, idx, character);
					if (info) { // string
						idx = info.idx;
						expression += info.text;
					} else {
						expression += character;
					}
					break;
	
				default:
					expression += character;
					break;
			}
	
			if (error) {
				break;
			}
	
			// end of expression
			if (paren.length == 0) {
				break;
			}
		}
	
		var ret;
		if (error) {
			ret = {
				error: error
			}
		} else {
			ret = {
				idx: idx,
				expression: expression
			}
		}
	
		return ret;
	};
	
	
	/**
	 *
	 * @return {Object|false}
	 *          - idx:
	 *          - text:
	 *          or
	 *          - error:
	 *          or
	 *          false
	 *
	 */
	CSSOM.CSSValueExpression.prototype._parseJSComment = function(token, idx) {
		var nextChar = token.charAt(idx + 1),
				text;
	
		if (nextChar == '/' || nextChar == '*') {
			var startIdx = idx,
					endIdx,
					commentEndChar;
	
			if (nextChar == '/') { // line comment
				commentEndChar = '\n';
			} else if (nextChar == '*') { // block comment
				commentEndChar = '*/';
			}
	
			endIdx = token.indexOf(commentEndChar, startIdx + 1 + 1);
			if (endIdx !== -1) {
				endIdx = endIdx + commentEndChar.length - 1;
				text = token.substring(idx, endIdx + 1);
				return {
					idx: endIdx,
					text: text
				}
			} else {
				error = 'css expression error: unfinished comment in expression!';
				return {
					error: error
				}
			}
		} else {
			return false;
		}
	};
	
	
	/**
	 *
	 * @return {Object|false}
	 *					- idx:
	 *					- text:
	 *					or 
	 *					false
	 *
	 */
	CSSOM.CSSValueExpression.prototype._parseJSString = function(token, idx, sep) {
		var endIdx = this._findMatchedIdx(token, idx, sep),
				text;
	
		if (endIdx === -1) {
			return false;
		} else {
			text = token.substring(idx, endIdx + sep.length);
	
			return {
				idx: endIdx,
				text: text
			}
		}
	};
	
	
	/**
	 * parse regexp in css expression
	 *
	 * @return {Object|false}
	 *				 - idx:
	 *				 - regExp:
	 *				 or 
	 *				 false
	 */
	
	/*
	
	all legal RegExp
	 
	/a/
	(/a/)
	[/a/]
	[12, /a/]
	
	!/a/
	
	+/a/
	-/a/
	* /a/
	/ /a/
	%/a/
	
	===/a/
	!==/a/
	==/a/
	!=/a/
	>/a/
	>=/a/
	</a/
	<=/a/
	
	&/a/
	|/a/
	^/a/
	~/a/
	<</a/
	>>/a/
	>>>/a/
	
	&&/a/
	||/a/
	?/a/
	=/a/
	,/a/
	
			delete /a/
					in /a/
	instanceof /a/
				 new /a/
			typeof /a/
				void /a/
	
	*/
	CSSOM.CSSValueExpression.prototype._parseJSRexExp = function(token, idx) {
		var before = token.substring(0, idx).replace(/\s+$/, ""),
				legalRegx = [
					/^$/,
					/\($/,
					/\[$/,
					/\!$/,
					/\+$/,
					/\-$/,
					/\*$/,
					/\/\s+/,
					/\%$/,
					/\=$/,
					/\>$/,
					/\<$/,
					/\&$/,
					/\|$/,
					/\^$/,
					/\~$/,
					/\?$/,
					/\,$/,
					/delete$/,
					/in$/,
					/instanceof$/,
					/new$/,
					/typeof$/,
					/void$/,
				];
	
		var isLegal = legalRegx.some(function(reg) {
			return reg.test(before);
		});
	
		if (!isLegal) {
			return false;
		} else {
			var sep = '/';
	
			// same logic as string
			return this._parseJSString(token, idx, sep);
		}
	};
	
	
	/**
	 *
	 * find next sep(same line) index in `token`
	 *
	 * @return {Number}
	 *
	 */
	CSSOM.CSSValueExpression.prototype._findMatchedIdx = function(token, idx, sep) {
		var startIdx = idx,
				endIdx;
	
		var NOT_FOUND = -1;
	
		while(true) {
			endIdx = token.indexOf(sep, startIdx + 1);
	
			if (endIdx === -1) { // not found
				endIdx = NOT_FOUND;
				break;
			} else {
				var text = token.substring(idx + 1, endIdx),
						matched = text.match(/\\+$/);
				if (!matched || matched[0] % 2 == 0) { // not escaped
					break;
				} else {
					startIdx = endIdx;
				}
			}
		}
	
		// boundary must be in the same line(js sting or regexp)
		var nextNewLineIdx = token.indexOf('\n', idx + 1);
		if (nextNewLineIdx < endIdx) {
			endIdx = NOT_FOUND;
		}
	
	
		return endIdx;
	}
	
	
	
	
	//.CommonJS
	exports.CSSValueExpression = CSSOM.CSSValueExpression;
	///CommonJS


/***/ },
/* 1021 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS
	
	
	/**
	 * @param {string} token
	 */
	CSSOM.parse = function parse(token) {
	
		var i = 0;
	
		/**
			"before-selector" or
			"selector" or
			"atRule" or
			"atBlock" or
			"before-name" or
			"name" or
			"before-value" or
			"value"
		*/
		var state = "before-selector";
	
		var index;
		var buffer = "";
	
		var SIGNIFICANT_WHITESPACE = {
			"selector": true,
			"value": true,
			"atRule": true,
			"importRule-begin": true,
			"importRule": true,
			"atBlock": true,
			'documentRule-begin': true
		};
	
		var styleSheet = new CSSOM.CSSStyleSheet;
	
		// @type CSSStyleSheet|CSSMediaRule|CSSFontFaceRule|CSSKeyframesRule|CSSDocumentRule
		var currentScope = styleSheet;
	
		// @type CSSMediaRule|CSSKeyframesRule|CSSDocumentRule
		var parentRule;
	
		var selector, name, value, priority="", styleRule, mediaRule, importRule, fontFaceRule, keyframesRule, keyframeRule, documentRule;
	
		var atKeyframesRegExp = /@(-(?:\w+-)+)?keyframes/g;
	
		var parseError = function(message) {
			var lines = token.substring(0, i).split('\n');
			var lineCount = lines.length;
			var charCount = lines.pop().length + 1;
			var error = new Error(message + ' (line ' + lineCount + ', char ' + charCount + ')');
			error.line = lineCount;
			error.char = charCount;
			error.styleSheet = styleSheet;
			throw error;
		};
	
		for (var character; character = token.charAt(i); i++) {
	
			switch (character) {
	
			case " ":
			case "\t":
			case "\r":
			case "\n":
			case "\f":
				if (SIGNIFICANT_WHITESPACE[state]) {
					buffer += character;
				}
				break;
	
			// String
			case '"':
				index = i + 1;
				do {
					index = token.indexOf('"', index) + 1;
					if (!index) {
						parseError('Unmatched "');
					}
				} while (token[index - 2] === '\\')
				buffer += token.slice(i, index);
				i = index - 1;
				switch (state) {
					case 'before-value':
						state = 'value';
						break;
					case 'importRule-begin':
						state = 'importRule';
						break;
				}
				break;
	
			case "'":
				index = i + 1;
				do {
					index = token.indexOf("'", index) + 1;
					if (!index) {
						parseError("Unmatched '");
					}
				} while (token[index - 2] === '\\')
				buffer += token.slice(i, index);
				i = index - 1;
				switch (state) {
					case 'before-value':
						state = 'value';
						break;
					case 'importRule-begin':
						state = 'importRule';
						break;
				}
				break;
	
			// Comment
			case "/":
				if (token.charAt(i + 1) === "*") {
					i += 2;
					index = token.indexOf("*/", i);
					if (index === -1) {
						parseError("Missing */");
					} else {
						i = index + 1;
					}
				} else {
					buffer += character;
				}
				if (state === "importRule-begin") {
					buffer += " ";
					state = "importRule";
				}
				break;
	
			// At-rule
			case "@":
				if (token.indexOf("@-moz-document", i) === i) {
					state = "documentRule-begin";
					documentRule = new CSSOM.CSSDocumentRule;
					documentRule.__starts = i;
					i += "-moz-document".length;
					buffer = "";
					break;
				} else if (token.indexOf("@media", i) === i) {
					state = "atBlock";
					mediaRule = new CSSOM.CSSMediaRule;
					mediaRule.__starts = i;
					i += "media".length;
					buffer = "";
					break;
				} else if (token.indexOf("@import", i) === i) {
					state = "importRule-begin";
					i += "import".length;
					buffer += "@import";
					break;
				} else if (token.indexOf("@font-face", i) === i) {
					state = "fontFaceRule-begin";
					i += "font-face".length;
					fontFaceRule = new CSSOM.CSSFontFaceRule;
					fontFaceRule.__starts = i;
					buffer = "";
					break;
				} else {
					atKeyframesRegExp.lastIndex = i;
					var matchKeyframes = atKeyframesRegExp.exec(token);
					if (matchKeyframes && matchKeyframes.index === i) {
						state = "keyframesRule-begin";
						keyframesRule = new CSSOM.CSSKeyframesRule;
						keyframesRule.__starts = i;
						keyframesRule._vendorPrefix = matchKeyframes[1]; // Will come out as undefined if no prefix was found
						i += matchKeyframes[0].length - 1;
						buffer = "";
						break;
					} else if (state == "selector") {
						state = "atRule";
					}
				}
				buffer += character;
				break;
	
			case "{":
				if (state === "selector" || state === "atRule") {
					styleRule.selectorText = buffer.trim();
					styleRule.style.__starts = i;
					buffer = "";
					state = "before-name";
				} else if (state === "atBlock") {
					mediaRule.media.mediaText = buffer.trim();
					currentScope = parentRule = mediaRule;
					mediaRule.parentStyleSheet = styleSheet;
					buffer = "";
					state = "before-selector";
				} else if (state === "fontFaceRule-begin") {
					if (parentRule) {
						fontFaceRule.parentRule = parentRule;
					}
					fontFaceRule.parentStyleSheet = styleSheet;
					styleRule = fontFaceRule;
					buffer = "";
					state = "before-name";
				} else if (state === "keyframesRule-begin") {
					keyframesRule.name = buffer.trim();
					if (parentRule) {
						keyframesRule.parentRule = parentRule;
					}
					keyframesRule.parentStyleSheet = styleSheet;
					currentScope = parentRule = keyframesRule;
					buffer = "";
					state = "keyframeRule-begin";
				} else if (state === "keyframeRule-begin") {
					styleRule = new CSSOM.CSSKeyframeRule;
					styleRule.keyText = buffer.trim();
					styleRule.__starts = i;
					buffer = "";
					state = "before-name";
				} else if (state === "documentRule-begin") {
					// FIXME: what if this '{' is in the url text of the match function?
					documentRule.matcher.matcherText = buffer.trim();
					if (parentRule) {
						documentRule.parentRule = parentRule;
					}
					currentScope = parentRule = documentRule;
					documentRule.parentStyleSheet = styleSheet;
					buffer = "";
					state = "before-selector";
				}
				break;
	
			case ":":
				if (state === "name") {
					name = buffer.trim();
					buffer = "";
					state = "before-value";
				} else {
					buffer += character;
				}
				break;
	
			case '(':
				if (state === 'value') {
					// ie css expression mode
					if (buffer.trim() == 'expression') {
						var info = (new CSSOM.CSSValueExpression(token, i)).parse();
	
						if (info.error) {
							parseError(info.error);
						} else {
							buffer += info.expression;
							i = info.idx;
						}
					} else {
						index = token.indexOf(')', i + 1);
						if (index === -1) {
							parseError('Unmatched "("');
						}
						buffer += token.slice(i, index + 1);
						i = index;
					}
				} else {
					buffer += character;
				}
	
				break;
	
			case "!":
				if (state === "value" && token.indexOf("!important", i) === i) {
					priority = "important";
					i += "important".length;
				} else {
					buffer += character;
				}
				break;
	
			case ";":
				switch (state) {
					case "value":
						styleRule.style.setProperty(name, buffer.trim(), priority);
						priority = "";
						buffer = "";
						state = "before-name";
						break;
					case "atRule":
						buffer = "";
						state = "before-selector";
						break;
					case "importRule":
						importRule = new CSSOM.CSSImportRule;
						importRule.parentStyleSheet = importRule.styleSheet.parentStyleSheet = styleSheet;
						importRule.cssText = buffer + character;
						styleSheet.cssRules.push(importRule);
						buffer = "";
						state = "before-selector";
						break;
					default:
						buffer += character;
						break;
				}
				break;
	
			case "}":
				switch (state) {
					case "value":
						styleRule.style.setProperty(name, buffer.trim(), priority);
						priority = "";
					case "before-name":
					case "name":
						styleRule.__ends = i + 1;
						if (parentRule) {
							styleRule.parentRule = parentRule;
						}
						styleRule.parentStyleSheet = styleSheet;
						currentScope.cssRules.push(styleRule);
						buffer = "";
						if (currentScope.constructor === CSSOM.CSSKeyframesRule) {
							state = "keyframeRule-begin";
						} else {
							state = "before-selector";
						}
						break;
					case "keyframeRule-begin":
					case "before-selector":
					case "selector":
						// End of media/document rule.
						if (!parentRule) {
							parseError("Unexpected }");
						}
						currentScope.__ends = i + 1;
						// Nesting rules aren't supported yet
						styleSheet.cssRules.push(currentScope);
						currentScope = styleSheet;
						parentRule = null;
						buffer = "";
						state = "before-selector";
						break;
				}
				break;
	
			default:
				switch (state) {
					case "before-selector":
						state = "selector";
						styleRule = new CSSOM.CSSStyleRule;
						styleRule.__starts = i;
						break;
					case "before-name":
						state = "name";
						break;
					case "before-value":
						state = "value";
						break;
					case "importRule-begin":
						state = "importRule";
						break;
				}
				buffer += character;
				break;
			}
		}
	
		return styleSheet;
	};
	
	
	//.CommonJS
	exports.parse = CSSOM.parse;
	// The following modules cannot be included sooner due to the mutual dependency with parse.js
	CSSOM.CSSStyleSheet = __webpack_require__(1014).CSSStyleSheet;
	CSSOM.CSSStyleRule = __webpack_require__(1008).CSSStyleRule;
	CSSOM.CSSImportRule = __webpack_require__(1011).CSSImportRule;
	CSSOM.CSSMediaRule = __webpack_require__(1010).CSSMediaRule;
	CSSOM.CSSFontFaceRule = __webpack_require__(1012).CSSFontFaceRule;
	CSSOM.CSSStyleDeclaration = __webpack_require__(1006).CSSStyleDeclaration;
	CSSOM.CSSKeyframeRule = __webpack_require__(1016).CSSKeyframeRule;
	CSSOM.CSSKeyframesRule = __webpack_require__(1015).CSSKeyframesRule;
	CSSOM.CSSValueExpression = __webpack_require__(1020).CSSValueExpression;
	CSSOM.CSSDocumentRule = __webpack_require__(1018).CSSDocumentRule;
	///CommonJS


/***/ },
/* 1022 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSStyleSheet: __webpack_require__(1014).CSSStyleSheet,
		CSSStyleRule: __webpack_require__(1008).CSSStyleRule,
		CSSMediaRule: __webpack_require__(1010).CSSMediaRule,
		CSSStyleDeclaration: __webpack_require__(1006).CSSStyleDeclaration,
		CSSKeyframeRule: __webpack_require__(1016).CSSKeyframeRule,
		CSSKeyframesRule: __webpack_require__(1015).CSSKeyframesRule
	};
	///CommonJS
	
	
	/**
	 * Produces a deep copy of stylesheet â the instance variables of stylesheet are copied recursively.
	 * @param {CSSStyleSheet|CSSOM.CSSStyleSheet} stylesheet
	 * @nosideeffects
	 * @return {CSSOM.CSSStyleSheet}
	 */
	CSSOM.clone = function clone(stylesheet) {
	
		var cloned = new CSSOM.CSSStyleSheet;
	
		var rules = stylesheet.cssRules;
		if (!rules) {
			return cloned;
		}
	
		var RULE_TYPES = {
			1: CSSOM.CSSStyleRule,
			4: CSSOM.CSSMediaRule,
			//3: CSSOM.CSSImportRule,
			//5: CSSOM.CSSFontFaceRule,
			//6: CSSOM.CSSPageRule,
			8: CSSOM.CSSKeyframesRule,
			9: CSSOM.CSSKeyframeRule
		};
	
		for (var i=0, rulesLength=rules.length; i < rulesLength; i++) {
			var rule = rules[i];
			var ruleClone = cloned.cssRules[i] = new RULE_TYPES[rule.type];
	
			var style = rule.style;
			if (style) {
				var styleClone = ruleClone.style = new CSSOM.CSSStyleDeclaration;
				for (var j=0, styleLength=style.length; j < styleLength; j++) {
					var name = styleClone[j] = style[j];
					styleClone[name] = style[name];
					styleClone._importants[name] = style.getPropertyPriority(name);
				}
				styleClone.length = style.length;
			}
	
			if (rule.hasOwnProperty('keyText')) {
				ruleClone.keyText = rule.keyText;
			}
	
			if (rule.hasOwnProperty('selectorText')) {
				ruleClone.selectorText = rule.selectorText;
			}
	
			if (rule.hasOwnProperty('mediaText')) {
				ruleClone.mediaText = rule.mediaText;
			}
	
			if (rule.hasOwnProperty('cssRules')) {
				ruleClone.cssRules = clone(rule).cssRules;
			}
		}
	
		return cloned;
	
	};
	
	//.CommonJS
	exports.clone = CSSOM.clone;
	///CommonJS


/***/ },
/* 1023 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */
	
	var helpers = __webpack_require__(1027);
	
	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */
	function core_md5(x, len)
	{
	  /* append padding */
	  x[len >> 5] |= 0x80 << ((len) % 32);
	  x[(((len + 64) >>> 9) << 4) + 14] = len;
	
	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;
	
	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;
	
	    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
	    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
	    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
	    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
	    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
	    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
	    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);
	
	    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
	    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
	    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
	    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
	    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
	    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
	    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
	    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
	    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
	    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
	    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
	    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);
	
	    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
	    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
	    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
	    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
	    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
	    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
	    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
	    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
	    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);
	
	    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
	    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
	    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
	    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
	    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
	    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
	    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
	    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);
	
	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);
	
	}
	
	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5_cmn(q, a, b, x, s, t)
	{
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t)
	{
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t)
	{
	  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}
	
	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}
	
	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}
	
	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};


/***/ },
/* 1024 */
/***/ function(module, exports, __webpack_require__) {

	var exports = module.exports = function (alg) {
	  var Alg = exports[alg]
	  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
	  return new Alg()
	}
	
	var Buffer = __webpack_require__(48).Buffer
	var Hash   = __webpack_require__(1031)(Buffer)
	
	exports.sha =
	exports.sha1 = __webpack_require__(1032)(Buffer, Hash)
	exports.sha256 = __webpack_require__(1033)(Buffer, Hash)


/***/ },
/* 1025 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var Buffer = __webpack_require__(48).Buffer;
	
	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }
	
	
	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}
	
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }
	
	  this.charBuffer = new Buffer(6);
	  this.charReceived = 0;
	  this.charLength = 0;
	};
	
	
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  var offset = 0;
	
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var i = (buffer.length >= this.charLength - this.charReceived) ?
	                this.charLength - this.charReceived :
	                buffer.length;
	
	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, offset, i);
	    this.charReceived += (i - offset);
	    offset = i;
	
	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }
	
	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
	
	    // lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;
	
	    // if there are no more bytes in this buffer, just emit our char
	    if (i == buffer.length) return charStr;
	
	    // otherwise cut off the characters end from the beginning of this buffer
	    buffer = buffer.slice(i, buffer.length);
	    break;
	  }
	
	  var lenIncomplete = this.detectIncompleteChar(buffer);
	
	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - lenIncomplete, end);
	    this.charReceived = lenIncomplete;
	    end -= lenIncomplete;
	  }
	
	  charStr += buffer.toString(this.encoding, 0, end);
	
	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    this.charBuffer.write(charStr.charAt(charStr.length - 1), this.encoding);
	    return charStr.substring(0, end);
	  }
	
	  // or just emit the charStr
	  return charStr;
	};
	
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;
	
	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];
	
	    // See http://en.wikipedia.org/wiki/UTF-8#Description
	
	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }
	
	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }
	
	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	
	  return i;
	};
	
	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);
	
	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }
	
	  return res;
	};
	
	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}
	
	function utf16DetectIncompleteChar(buffer) {
	  var incomplete = this.charReceived = buffer.length % 2;
	  this.charLength = incomplete ? 2 : 0;
	  return incomplete;
	}
	
	function base64DetectIncompleteChar(buffer) {
	  var incomplete = this.charReceived = buffer.length % 3;
	  this.charLength = incomplete ? 3 : 0;
	  return incomplete;
	}


/***/ },
/* 1026 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 1027 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;
	var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
	var chrsz = 8;
	
	function toArray(buf, bigEndian) {
	  if ((buf.length % intSize) !== 0) {
	    var len = buf.length + (intSize - (buf.length % intSize));
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }
	
	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}
	
	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}
	
	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}
	
	module.exports = { hash: hash };
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(48).Buffer))

/***/ },
/* 1028 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = ripemd160
	
	
	
	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/** @preserve
	(c) 2012 by CÃ©dric Mesnil. All rights reserved.
	
	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
	
	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
	
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	
	// Constants table
	var zl = [
	    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
	var zr = [
	    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
	var sl = [
	     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
	var sr = [
	    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];
	
	var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
	var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];
	
	var bytesToWords = function (bytes) {
	  var words = [];
	  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
	    words[b >>> 5] |= bytes[i] << (24 - b % 32);
	  }
	  return words;
	};
	
	var wordsToBytes = function (words) {
	  var bytes = [];
	  for (var b = 0; b < words.length * 32; b += 8) {
	    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
	  }
	  return bytes;
	};
	
	var processBlock = function (H, M, offset) {
	
	  // Swap endian
	  for (var i = 0; i < 16; i++) {
	    var offset_i = offset + i;
	    var M_offset_i = M[offset_i];
	
	    // Swap
	    M[offset_i] = (
	        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	    );
	  }
	
	  // Working variables
	  var al, bl, cl, dl, el;
	  var ar, br, cr, dr, er;
	
	  ar = al = H[0];
	  br = bl = H[1];
	  cr = cl = H[2];
	  dr = dl = H[3];
	  er = el = H[4];
	  // Computation
	  var t;
	  for (var i = 0; i < 80; i += 1) {
	    t = (al +  M[offset+zl[i]])|0;
	    if (i<16){
	        t +=  f1(bl,cl,dl) + hl[0];
	    } else if (i<32) {
	        t +=  f2(bl,cl,dl) + hl[1];
	    } else if (i<48) {
	        t +=  f3(bl,cl,dl) + hl[2];
	    } else if (i<64) {
	        t +=  f4(bl,cl,dl) + hl[3];
	    } else {// if (i<80) {
	        t +=  f5(bl,cl,dl) + hl[4];
	    }
	    t = t|0;
	    t =  rotl(t,sl[i]);
	    t = (t+el)|0;
	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = t;
	
	    t = (ar + M[offset+zr[i]])|0;
	    if (i<16){
	        t +=  f5(br,cr,dr) + hr[0];
	    } else if (i<32) {
	        t +=  f4(br,cr,dr) + hr[1];
	    } else if (i<48) {
	        t +=  f3(br,cr,dr) + hr[2];
	    } else if (i<64) {
	        t +=  f2(br,cr,dr) + hr[3];
	    } else {// if (i<80) {
	        t +=  f1(br,cr,dr) + hr[4];
	    }
	    t = t|0;
	    t =  rotl(t,sr[i]) ;
	    t = (t+er)|0;
	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = t;
	  }
	  // Intermediate hash value
	  t    = (H[1] + cl + dr)|0;
	  H[1] = (H[2] + dl + er)|0;
	  H[2] = (H[3] + el + ar)|0;
	  H[3] = (H[4] + al + br)|0;
	  H[4] = (H[0] + bl + cr)|0;
	  H[0] =  t;
	};
	
	function f1(x, y, z) {
	  return ((x) ^ (y) ^ (z));
	}
	
	function f2(x, y, z) {
	  return (((x)&(y)) | ((~x)&(z)));
	}
	
	function f3(x, y, z) {
	  return (((x) | (~(y))) ^ (z));
	}
	
	function f4(x, y, z) {
	  return (((x) & (z)) | ((y)&(~(z))));
	}
	
	function f5(x, y, z) {
	  return ((x) ^ ((y) |(~(z))));
	}
	
	function rotl(x,n) {
	  return (x<<n) | (x>>>(32-n));
	}
	
	function ripemd160(message) {
	  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];
	
	  if (typeof message == 'string')
	    message = new Buffer(message, 'utf8');
	
	  var m = bytesToWords(message);
	
	  var nBitsLeft = message.length * 8;
	  var nBitsTotal = message.length * 8;
	
	  // Add padding
	  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	  );
	
	  for (var i=0 ; i<m.length; i += 16) {
	    processBlock(H, m, i);
	  }
	
	  // Swap endian
	  for (var i = 0; i < 5; i++) {
	      // Shortcut
	    var H_i = H[i];
	
	    // Swap
	    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	  }
	
	  var digestbytes = wordsToBytes(H);
	  return new Buffer(digestbytes);
	}
	
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(48).Buffer))

/***/ },
/* 1029 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 1030 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	function isBuffer(arg) {
	  return Buffer.isBuffer(arg);
	}
	exports.isBuffer = isBuffer;
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(48).Buffer))

/***/ },
/* 1031 */
/***/ function(module, exports, __webpack_require__) {

	var u = __webpack_require__(1034)
	var write = u.write
	var fill = u.zeroFill
	
	module.exports = function (Buffer) {
	
	  //prototype class for hash functions
	  function Hash (blockSize, finalSize) {
	    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
	    this._finalSize = finalSize
	    this._blockSize = blockSize
	    this._len = 0
	    this._s = 0
	  }
	
	  Hash.prototype.init = function () {
	    this._s = 0
	    this._len = 0
	  }
	
	  function lengthOf(data, enc) {
	    if(enc == null)     return data.byteLength || data.length
	    if(enc == 'ascii' || enc == 'binary')  return data.length
	    if(enc == 'hex')    return data.length/2
	    if(enc == 'base64') return data.length/3
	  }
	
	  Hash.prototype.update = function (data, enc) {
	    var bl = this._blockSize
	
	    //I'd rather do this with a streaming encoder, like the opposite of
	    //http://nodejs.org/api/string_decoder.html
	    var length
	      if(!enc && 'string' === typeof data)
	        enc = 'utf8'
	
	    if(enc) {
	      if(enc === 'utf-8')
	        enc = 'utf8'
	
	      if(enc === 'base64' || enc === 'utf8')
	        data = new Buffer(data, enc), enc = null
	
	      length = lengthOf(data, enc)
	    } else
	      length = data.byteLength || data.length
	
	    var l = this._len += length
	    var s = this._s = (this._s || 0)
	    var f = 0
	    var buffer = this._block
	    while(s < l) {
	      var t = Math.min(length, f + bl)
	      write(buffer, data, enc, s%bl, f, t)
	      var ch = (t - f);
	      s += ch; f += ch
	
	      if(!(s%bl))
	        this._update(buffer)
	    }
	    this._s = s
	
	    return this
	
	  }
	
	  Hash.prototype.digest = function (enc) {
	    var bl = this._blockSize
	    var fl = this._finalSize
	    var len = this._len*8
	
	    var x = this._block
	
	    var bits = len % (bl*8)
	
	    //add end marker, so that appending 0's creats a different hash.
	    x[this._len % bl] = 0x80
	    fill(this._block, this._len % bl + 1)
	
	    if(bits >= fl*8) {
	      this._update(this._block)
	      u.zeroFill(this._block, 0)
	    }
	
	    //TODO: handle case where the bit length is > Math.pow(2, 29)
	    x.writeInt32BE(len, fl + 4) //big endian
	
	    var hash = this._update(this._block) || this._hash()
	    if(enc == null) return hash
	    return hash.toString(enc)
	  }
	
	  Hash.prototype._update = function () {
	    throw new Error('_update must be implemented by subclass')
	  }
	
	  return Hash
	}


/***/ },
/* 1032 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */
	module.exports = function (Buffer, Hash) {
	
	  var inherits = __webpack_require__(102).inherits
	
	  inherits(Sha1, Hash)
	
	  var A = 0|0
	  var B = 4|0
	  var C = 8|0
	  var D = 12|0
	  var E = 16|0
	
	  var BE = false
	  var LE = true
	
	  var W = new Int32Array(80)
	
	  var POOL = []
	
	  function Sha1 () {
	    if(POOL.length)
	      return POOL.pop().init()
	
	    if(!(this instanceof Sha1)) return new Sha1()
	    this._w = W
	    Hash.call(this, 16*4, 14*4)
	  
	    this._h = null
	    this.init()
	  }
	
	  Sha1.prototype.init = function () {
	    this._a = 0x67452301
	    this._b = 0xefcdab89
	    this._c = 0x98badcfe
	    this._d = 0x10325476
	    this._e = 0xc3d2e1f0
	
	    Hash.prototype.init.call(this)
	    return this
	  }
	
	  Sha1.prototype._POOL = POOL
	
	  // assume that array is a Uint32Array with length=16,
	  // and that if it is the last block, it already has the length and the 1 bit appended.
	
	
	  var isDV = new Buffer(1) instanceof DataView
	  function readInt32BE (X, i) {
	    return isDV
	      ? X.getInt32(i, false)
	      : X.readInt32BE(i)
	  }
	
	  Sha1.prototype._update = function (array) {
	
	    var X = this._block
	    var h = this._h
	    var a, b, c, d, e, _a, _b, _c, _d, _e
	
	    a = _a = this._a
	    b = _b = this._b
	    c = _c = this._c
	    d = _d = this._d
	    e = _e = this._e
	
	    var w = this._w
	
	    for(var j = 0; j < 80; j++) {
	      var W = w[j]
	        = j < 16
	        //? X.getInt32(j*4, false)
	        //? readInt32BE(X, j*4) //*/ X.readInt32BE(j*4) //*/
	        ? X.readInt32BE(j*4)
	        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)
	
	      var t =
	        add(
	          add(rol(a, 5), sha1_ft(j, b, c, d)),
	          add(add(e, W), sha1_kt(j))
	        );
	
	      e = d
	      d = c
	      c = rol(b, 30)
	      b = a
	      a = t
	    }
	
	    this._a = add(a, _a)
	    this._b = add(b, _b)
	    this._c = add(c, _c)
	    this._d = add(d, _d)
	    this._e = add(e, _e)
	  }
	
	  Sha1.prototype._hash = function () {
	    if(POOL.length < 100) POOL.push(this)
	    var H = new Buffer(20)
	    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
	    H.writeInt32BE(this._a|0, A)
	    H.writeInt32BE(this._b|0, B)
	    H.writeInt32BE(this._c|0, C)
	    H.writeInt32BE(this._d|0, D)
	    H.writeInt32BE(this._e|0, E)
	    return H
	  }
	
	  /*
	   * Perform the appropriate triplet combination function for the current
	   * iteration
	   */
	  function sha1_ft(t, b, c, d) {
	    if(t < 20) return (b & c) | ((~b) & d);
	    if(t < 40) return b ^ c ^ d;
	    if(t < 60) return (b & c) | (b & d) | (c & d);
	    return b ^ c ^ d;
	  }
	
	  /*
	   * Determine the appropriate additive constant for the current iteration
	   */
	  function sha1_kt(t) {
	    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
	           (t < 60) ? -1894007588 : -899497514;
	  }
	
	  /*
	   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	   * to work around bugs in some JS interpreters.
	   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
	   *
	   */
	  function add(x, y) {
	    return (x + y ) | 0
	  //lets see how this goes on testling.
	  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  //  return (msw << 16) | (lsw & 0xFFFF);
	  }
	
	  /*
	   * Bitwise rotate a 32-bit number to the left.
	   */
	  function rol(num, cnt) {
	    return (num << cnt) | (num >>> (32 - cnt));
	  }
	
	  return Sha1
	}


/***/ },
/* 1033 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */
	
	var inherits = __webpack_require__(102).inherits
	var BE       = false
	var LE       = true
	var u        = __webpack_require__(1034)
	
	module.exports = function (Buffer, Hash) {
	
	  var K = [
	      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	    ]
	
	  inherits(Sha256, Hash)
	  var W = new Array(64)
	  var POOL = []
	  function Sha256() {
	    if(POOL.length) {
	      //return POOL.shift().init()
	    }
	    //this._data = new Buffer(32)
	
	    this.init()
	
	    this._w = W //new Array(64)
	
	    Hash.call(this, 16*4, 14*4)
	  };
	
	  Sha256.prototype.init = function () {
	
	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0
	
	    this._len = this._s = 0
	
	    return this
	  }
	
	  var safe_add = function(x, y) {
	    var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	    return (msw << 16) | (lsw & 0xFFFF);
	  }
	
	  function S (X, n) {
	    return (X >>> n) | (X << (32 - n));
	  }
	
	  function R (X, n) {
	    return (X >>> n);
	  }
	
	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }
	
	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }
	
	  function Sigma0256 (x) {
	    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
	  }
	
	  function Sigma1256 (x) {
	    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
	  }
	
	  function Gamma0256 (x) {
	    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
	  }
	
	  function Gamma1256 (x) {
	    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
	  }
	
	  Sha256.prototype._update = function(m) {
	    var M = this._block
	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var T1, T2
	
	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0
	
	    for (var j = 0; j < 64; j++) {
	      var w = W[j] = j < 16
	        ? M.readInt32BE(j * 4)
	        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]
	
	      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w
	
	      T2 = Sigma0256(a) + Maj(a, b, c);
	      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
	    }
	
	    this._a = (a + this._a) | 0
	    this._b = (b + this._b) | 0
	    this._c = (c + this._c) | 0
	    this._d = (d + this._d) | 0
	    this._e = (e + this._e) | 0
	    this._f = (f + this._f) | 0
	    this._g = (g + this._g) | 0
	    this._h = (h + this._h) | 0
	
	  };
	
	  Sha256.prototype._hash = function () {
	    if(POOL.length < 10)
	      POOL.push(this)
	
	    var H = new Buffer(32)
	
	    H.writeInt32BE(this._a,  0)
	    H.writeInt32BE(this._b,  4)
	    H.writeInt32BE(this._c,  8)
	    H.writeInt32BE(this._d, 12)
	    H.writeInt32BE(this._e, 16)
	    H.writeInt32BE(this._f, 20)
	    H.writeInt32BE(this._g, 24)
	    H.writeInt32BE(this._h, 28)
	
	    return H
	  }
	
	  return Sha256
	
	}


/***/ },
/* 1034 */
/***/ function(module, exports, __webpack_require__) {

	exports.write = write
	exports.zeroFill = zeroFill
	
	exports.toString = toString
	
	function write (buffer, string, enc, start, from, to, LE) {
	  var l = (to - from)
	  if(enc === 'ascii' || enc === 'binary') {
	    for( var i = 0; i < l; i++) {
	      buffer[start + i] = string.charCodeAt(i + from)
	    }
	  }
	  else if(enc == null) {
	    for( var i = 0; i < l; i++) {
	      buffer[start + i] = string[i + from]
	    }
	  }
	  else if(enc === 'hex') {
	    for(var i = 0; i < l; i++) {
	      var j = from + i
	      buffer[start + i] = parseInt(string[j*2] + string[(j*2)+1], 16)
	    }
	  }
	  else if(enc === 'base64') {
	    throw new Error('base64 encoding not yet supported')
	  }
	  else
	    throw new Error(enc +' encoding not yet supported')
	}
	
	//always fill to the end!
	function zeroFill(buf, from) {
	  for(var i = from; i < buf.length; i++)
	    buf[i] = 0
	}
	


/***/ }
/******/ ])
//# sourceMappingURL=main.bundle.js.map